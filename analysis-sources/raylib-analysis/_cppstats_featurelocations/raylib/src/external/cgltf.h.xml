<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\cgltf.h">


























































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CGLTF_H_INCLUDED__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CGLTF_H_INCLUDED__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>size_t</name></type> <name>cgltf_size</name>;</typedef>
<typedef>typedef <type><name>float</name></type> <name>cgltf_float</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>cgltf_int</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>cgltf_uint</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>cgltf_bool</name>;</typedef>

<typedef>typedef <type><enum>enum <name>cgltf_file_type</name>
<block>{
<decl><name>cgltf_file_type_invalid</name></decl>,
<decl><name>cgltf_file_type_gltf</name></decl>,
<decl><name>cgltf_file_type_glb</name></decl>,
}</block></enum></type> <name>cgltf_file_type</name>;</typedef>

<typedef>typedef <type><enum>enum <name>cgltf_result</name>
<block>{
<decl><name>cgltf_result_success</name></decl>,
<decl><name>cgltf_result_data_too_short</name></decl>,
<decl><name>cgltf_result_unknown_format</name></decl>,
<decl><name>cgltf_result_invalid_json</name></decl>,
<decl><name>cgltf_result_invalid_gltf</name></decl>,
<decl><name>cgltf_result_invalid_options</name></decl>,
<decl><name>cgltf_result_file_not_found</name></decl>,
<decl><name>cgltf_result_io_error</name></decl>,
<decl><name>cgltf_result_out_of_memory</name></decl>,
<decl><name>cgltf_result_legacy_gltf</name></decl>,
}</block></enum></type> <name>cgltf_result</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_memory_options</name>
<block>{
<function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>alloc</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>user_data</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_memory_options</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_file_options</name>
<block>{
<function_decl><type><name>cgltf_result</name></type>(<modifier>*</modifier><name>read</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cgltf_memory_options</name></name><modifier>*</modifier></type> <name>memory_options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cgltf_file_options</name></name><modifier>*</modifier></type> <name>file_options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name><modifier>*</modifier></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>release</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cgltf_memory_options</name></name><modifier>*</modifier></type> <name>memory_options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cgltf_file_options</name></name><modifier>*</modifier></type> <name>file_options</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>user_data</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_file_options</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_options</name>
<block>{
<decl_stmt><decl><type><name>cgltf_file_type</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>json_token_count</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>cgltf_memory_options</name></type> <name>memory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_file_options</name></type> <name>file</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_options</name>;</typedef>

<typedef>typedef <type><enum>enum <name>cgltf_buffer_view_type</name>
<block>{
<decl><name>cgltf_buffer_view_type_invalid</name></decl>,
<decl><name>cgltf_buffer_view_type_indices</name></decl>,
<decl><name>cgltf_buffer_view_type_vertices</name></decl>,
}</block></enum></type> <name>cgltf_buffer_view_type</name>;</typedef>

<typedef>typedef <type><enum>enum <name>cgltf_attribute_type</name>
<block>{
<decl><name>cgltf_attribute_type_invalid</name></decl>,
<decl><name>cgltf_attribute_type_position</name></decl>,
<decl><name>cgltf_attribute_type_normal</name></decl>,
<decl><name>cgltf_attribute_type_tangent</name></decl>,
<decl><name>cgltf_attribute_type_texcoord</name></decl>,
<decl><name>cgltf_attribute_type_color</name></decl>,
<decl><name>cgltf_attribute_type_joints</name></decl>,
<decl><name>cgltf_attribute_type_weights</name></decl>,
}</block></enum></type> <name>cgltf_attribute_type</name>;</typedef>

<typedef>typedef <type><enum>enum <name>cgltf_component_type</name>
<block>{
<decl><name>cgltf_component_type_invalid</name></decl>,
<decl><name>cgltf_component_type_r_8</name></decl>, 
<decl><name>cgltf_component_type_r_8u</name></decl>, 
<decl><name>cgltf_component_type_r_16</name></decl>, 
<decl><name>cgltf_component_type_r_16u</name></decl>, 
<decl><name>cgltf_component_type_r_32u</name></decl>, 
<decl><name>cgltf_component_type_r_32f</name></decl>, 
}</block></enum></type> <name>cgltf_component_type</name>;</typedef>

<typedef>typedef <type><enum>enum <name>cgltf_type</name>
<block>{
<decl><name>cgltf_type_invalid</name></decl>,
<decl><name>cgltf_type_scalar</name></decl>,
<decl><name>cgltf_type_vec2</name></decl>,
<decl><name>cgltf_type_vec3</name></decl>,
<decl><name>cgltf_type_vec4</name></decl>,
<decl><name>cgltf_type_mat2</name></decl>,
<decl><name>cgltf_type_mat3</name></decl>,
<decl><name>cgltf_type_mat4</name></decl>,
}</block></enum></type> <name>cgltf_type</name>;</typedef>

<typedef>typedef <type><enum>enum <name>cgltf_primitive_type</name>
<block>{
<decl><name>cgltf_primitive_type_points</name></decl>,
<decl><name>cgltf_primitive_type_lines</name></decl>,
<decl><name>cgltf_primitive_type_line_loop</name></decl>,
<decl><name>cgltf_primitive_type_line_strip</name></decl>,
<decl><name>cgltf_primitive_type_triangles</name></decl>,
<decl><name>cgltf_primitive_type_triangle_strip</name></decl>,
<decl><name>cgltf_primitive_type_triangle_fan</name></decl>,
}</block></enum></type> <name>cgltf_primitive_type</name>;</typedef>

<typedef>typedef <type><enum>enum <name>cgltf_alpha_mode</name>
<block>{
<decl><name>cgltf_alpha_mode_opaque</name></decl>,
<decl><name>cgltf_alpha_mode_mask</name></decl>,
<decl><name>cgltf_alpha_mode_blend</name></decl>,
}</block></enum></type> <name>cgltf_alpha_mode</name>;</typedef>

<typedef>typedef <type><enum>enum <name>cgltf_animation_path_type</name> <block>{
<decl><name>cgltf_animation_path_type_invalid</name></decl>,
<decl><name>cgltf_animation_path_type_translation</name></decl>,
<decl><name>cgltf_animation_path_type_rotation</name></decl>,
<decl><name>cgltf_animation_path_type_scale</name></decl>,
<decl><name>cgltf_animation_path_type_weights</name></decl>,
}</block></enum></type> <name>cgltf_animation_path_type</name>;</typedef>

<typedef>typedef <type><enum>enum <name>cgltf_interpolation_type</name> <block>{
<decl><name>cgltf_interpolation_type_linear</name></decl>,
<decl><name>cgltf_interpolation_type_step</name></decl>,
<decl><name>cgltf_interpolation_type_cubic_spline</name></decl>,
}</block></enum></type> <name>cgltf_interpolation_type</name>;</typedef>

<typedef>typedef <type><enum>enum <name>cgltf_camera_type</name> <block>{
<decl><name>cgltf_camera_type_invalid</name></decl>,
<decl><name>cgltf_camera_type_perspective</name></decl>,
<decl><name>cgltf_camera_type_orthographic</name></decl>,
}</block></enum></type> <name>cgltf_camera_type</name>;</typedef>

<typedef>typedef <type><enum>enum <name>cgltf_light_type</name> <block>{
<decl><name>cgltf_light_type_invalid</name></decl>,
<decl><name>cgltf_light_type_directional</name></decl>,
<decl><name>cgltf_light_type_point</name></decl>,
<decl><name>cgltf_light_type_spot</name></decl>,
}</block></enum></type> <name>cgltf_light_type</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_extras</name> <block>{
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>start_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>end_offset</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_extras</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_buffer</name>
<block>{
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>extras</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_buffer</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_buffer_view</name>
<block>{
<decl_stmt><decl><type><name>cgltf_buffer</name><modifier>*</modifier></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>stride</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>cgltf_buffer_view_type</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>extras</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_buffer_view</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_accessor_sparse</name>
<block>{
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_buffer_view</name><modifier>*</modifier></type> <name>indices_buffer_view</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>indices_byte_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_component_type</name></type> <name>indices_component_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_buffer_view</name><modifier>*</modifier></type> <name>values_buffer_view</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>values_byte_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>extras</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>indices_extras</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>values_extras</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_accessor_sparse</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_accessor</name>
<block>{
<decl_stmt><decl><type><name>cgltf_component_type</name></type> <name>component_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_bool</name></type> <name>normalized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_type</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>stride</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_buffer_view</name><modifier>*</modifier></type> <name>buffer_view</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_bool</name></type> <name>has_min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name><name>min</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_bool</name></type> <name>has_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name><name>max</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_bool</name></type> <name>is_sparse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_accessor_sparse</name></type> <name>sparse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>extras</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_accessor</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_attribute</name>
<block>{
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_attribute_type</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_accessor</name><modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_attribute</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_image</name>
<block>{
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_buffer_view</name><modifier>*</modifier></type> <name>buffer_view</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>mime_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>extras</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_image</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_sampler</name>
<block>{
<decl_stmt><decl><type><name>cgltf_int</name></type> <name>mag_filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_int</name></type> <name>min_filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_int</name></type> <name>wrap_s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_int</name></type> <name>wrap_t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>extras</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_sampler</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_texture</name>
<block>{
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_image</name><modifier>*</modifier></type> <name>image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_sampler</name><modifier>*</modifier></type> <name>sampler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>extras</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_texture</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_texture_transform</name>
<block>{
<decl_stmt><decl><type><name>cgltf_float</name></type> <name><name>offset</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name>rotation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name><name>scale</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_int</name></type> <name>texcoord</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_texture_transform</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_texture_view</name>
<block>{
<decl_stmt><decl><type><name>cgltf_texture</name><modifier>*</modifier></type> <name>texture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_int</name></type> <name>texcoord</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name>scale</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>cgltf_bool</name></type> <name>has_transform</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_texture_transform</name></type> <name>transform</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>extras</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_texture_view</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_pbr_metallic_roughness</name>
<block>{
<decl_stmt><decl><type><name>cgltf_texture_view</name></type> <name>base_color_texture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_texture_view</name></type> <name>metallic_roughness_texture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cgltf_float</name></type> <name><name>base_color_factor</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name>metallic_factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name>roughness_factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>extras</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_pbr_metallic_roughness</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_pbr_specular_glossiness</name>
<block>{
<decl_stmt><decl><type><name>cgltf_texture_view</name></type> <name>diffuse_texture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_texture_view</name></type> <name>specular_glossiness_texture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cgltf_float</name></type> <name><name>diffuse_factor</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name><name>specular_factor</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name>glossiness_factor</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_pbr_specular_glossiness</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_material</name>
<block>{
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_bool</name></type> <name>has_pbr_metallic_roughness</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_bool</name></type> <name>has_pbr_specular_glossiness</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_pbr_metallic_roughness</name></type> <name>pbr_metallic_roughness</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_pbr_specular_glossiness</name></type> <name>pbr_specular_glossiness</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_texture_view</name></type> <name>normal_texture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_texture_view</name></type> <name>occlusion_texture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_texture_view</name></type> <name>emissive_texture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name><name>emissive_factor</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_alpha_mode</name></type> <name>alpha_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name>alpha_cutoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_bool</name></type> <name>double_sided</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_bool</name></type> <name>unlit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>extras</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_material</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_morph_target</name> <block>{
<decl_stmt><decl><type><name>cgltf_attribute</name><modifier>*</modifier></type> <name>attributes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>attributes_count</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_morph_target</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_primitive</name> <block>{
<decl_stmt><decl><type><name>cgltf_primitive_type</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_accessor</name><modifier>*</modifier></type> <name>indices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_material</name><modifier>*</modifier></type> <name>material</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_attribute</name><modifier>*</modifier></type> <name>attributes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>attributes_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_morph_target</name><modifier>*</modifier></type> <name>targets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>targets_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>extras</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_primitive</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_mesh</name> <block>{
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_primitive</name><modifier>*</modifier></type> <name>primitives</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>primitives_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name><modifier>*</modifier></type> <name>weights</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>weights_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>target_names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>target_names_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>extras</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_mesh</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>cgltf_node</name></name></type> <name>cgltf_node</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_skin</name> <block>{
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_node</name><modifier>*</modifier><modifier>*</modifier></type> <name>joints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>joints_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_node</name><modifier>*</modifier></type> <name>skeleton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_accessor</name><modifier>*</modifier></type> <name>inverse_bind_matrices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>extras</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_skin</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_camera_perspective</name> <block>{
<decl_stmt><decl><type><name>cgltf_float</name></type> <name>aspect_ratio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name>yfov</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name>zfar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name>znear</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>extras</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_camera_perspective</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_camera_orthographic</name> <block>{
<decl_stmt><decl><type><name>cgltf_float</name></type> <name>xmag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name>ymag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name>zfar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name>znear</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>extras</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_camera_orthographic</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_camera</name> <block>{
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_camera_type</name></type> <name>type</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>cgltf_camera_perspective</name></type> <name>perspective</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_camera_orthographic</name></type> <name>orthographic</name></decl>;</decl_stmt>
}</block> <decl><name>data</name></decl>;</union>
<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>extras</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_camera</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_light</name> <block>{
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name><name>color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name>intensity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_light_type</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name>spot_inner_cone_angle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name>spot_outer_cone_angle</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_light</name>;</typedef>

<struct>struct <name>cgltf_node</name> <block>{
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_node</name><modifier>*</modifier></type> <name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_node</name><modifier>*</modifier><modifier>*</modifier></type> <name>children</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>children_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_skin</name><modifier>*</modifier></type> <name>skin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_mesh</name><modifier>*</modifier></type> <name>mesh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_camera</name><modifier>*</modifier></type> <name>camera</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_light</name><modifier>*</modifier></type> <name>light</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name><modifier>*</modifier></type> <name>weights</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>weights_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_bool</name></type> <name>has_translation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_bool</name></type> <name>has_rotation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_bool</name></type> <name>has_scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_bool</name></type> <name>has_matrix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name><name>translation</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name><name>rotation</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name><name>scale</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_float</name></type> <name><name>matrix</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>extras</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>cgltf_scene</name> <block>{
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_node</name><modifier>*</modifier><modifier>*</modifier></type> <name>nodes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>nodes_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>extras</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_scene</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_animation_sampler</name> <block>{
<decl_stmt><decl><type><name>cgltf_accessor</name><modifier>*</modifier></type> <name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_accessor</name><modifier>*</modifier></type> <name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_interpolation_type</name></type> <name>interpolation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>extras</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_animation_sampler</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_animation_channel</name> <block>{
<decl_stmt><decl><type><name>cgltf_animation_sampler</name><modifier>*</modifier></type> <name>sampler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_node</name><modifier>*</modifier></type> <name>target_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_animation_path_type</name></type> <name>target_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>extras</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_animation_channel</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_animation</name> <block>{
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_animation_sampler</name><modifier>*</modifier></type> <name>samplers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>samplers_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_animation_channel</name><modifier>*</modifier></type> <name>channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>channels_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>extras</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_animation</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_asset</name> <block>{
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>copyright</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>generator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>min_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>extras</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_asset</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cgltf_data</name>
<block>{
<decl_stmt><decl><type><name>cgltf_file_type</name></type> <name>file_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>file_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cgltf_asset</name></type> <name>asset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cgltf_mesh</name><modifier>*</modifier></type> <name>meshes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>meshes_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cgltf_material</name><modifier>*</modifier></type> <name>materials</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>materials_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cgltf_accessor</name><modifier>*</modifier></type> <name>accessors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>accessors_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cgltf_buffer_view</name><modifier>*</modifier></type> <name>buffer_views</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>buffer_views_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cgltf_buffer</name><modifier>*</modifier></type> <name>buffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>buffers_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cgltf_image</name><modifier>*</modifier></type> <name>images</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>images_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cgltf_texture</name><modifier>*</modifier></type> <name>textures</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>textures_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cgltf_sampler</name><modifier>*</modifier></type> <name>samplers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>samplers_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cgltf_skin</name><modifier>*</modifier></type> <name>skins</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>skins_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cgltf_camera</name><modifier>*</modifier></type> <name>cameras</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>cameras_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cgltf_light</name><modifier>*</modifier></type> <name>lights</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>lights_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cgltf_node</name><modifier>*</modifier></type> <name>nodes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>nodes_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cgltf_scene</name><modifier>*</modifier></type> <name>scenes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>scenes_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cgltf_scene</name><modifier>*</modifier></type> <name>scene</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cgltf_animation</name><modifier>*</modifier></type> <name>animations</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>animations_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cgltf_extras</name></type> <name>extras</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>extensions_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>extensions_used_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>extensions_required</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>extensions_required_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>json</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>json_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>bin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>bin_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cgltf_memory_options</name></type> <name>memory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_file_options</name></type> <name>file</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgltf_data</name>;</typedef>

<function_decl><type><name>cgltf_result</name></type> <name>cgltf_parse</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,
<parameter><decl><type><name>cgltf_size</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>cgltf_data</name><modifier>*</modifier><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>cgltf_result</name></type> <name>cgltf_parse_file</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>,
<parameter><decl><type><name>cgltf_data</name><modifier>*</modifier><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>cgltf_result</name></type> <name>cgltf_load_buffers</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>,
<parameter><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>gltf_path</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>cgltf_result</name></type> <name>cgltf_load_buffer_base64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>base64</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>cgltf_result</name></type> <name>cgltf_validate</name><parameter_list>(<parameter><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>cgltf_free</name><parameter_list>(<parameter><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>cgltf_node_transform_local</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cgltf_node</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>cgltf_float</name><modifier>*</modifier></type> <name>out_matrix</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>cgltf_node_transform_world</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cgltf_node</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>cgltf_float</name><modifier>*</modifier></type> <name>out_matrix</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>cgltf_bool</name></type> <name>cgltf_accessor_read_float</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cgltf_accessor</name><modifier>*</modifier></type> <name>accessor</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>cgltf_float</name><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>element_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>cgltf_bool</name></type> <name>cgltf_accessor_read_uint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cgltf_accessor</name><modifier>*</modifier></type> <name>accessor</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>cgltf_uint</name><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>element_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>cgltf_size</name></type> <name>cgltf_accessor_read_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cgltf_accessor</name><modifier>*</modifier></type> <name>accessor</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>cgltf_size</name></type> <name>cgltf_num_components</name><parameter_list>(<parameter><decl><type><name>cgltf_type</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>cgltf_size</name></type> <name>cgltf_accessor_unpack_floats</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cgltf_accessor</name><modifier>*</modifier></type> <name>accessor</name></decl></parameter>, <parameter><decl><type><name>cgltf_float</name><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>float_count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>cgltf_result</name></type> <name>cgltf_copy_extras_json</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cgltf_data</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cgltf_extras</name><modifier>*</modifier></type> <name>extras</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name><modifier>*</modifier></type> <name>dest_size</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTELLISENSE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CGLTF_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CGLTF_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CGLTF_MALLOC</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CGLTF_FREE</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CGLTF_ATOI</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CGLTF_ATOF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSMN_PARENT_LINKS</name></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSMN_STRICT</name></cpp:macro></cpp:define>






<typedef>typedef <type><enum>enum <block>{
<decl><name>JSMN_UNDEFINED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>JSMN_OBJECT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>JSMN_ARRAY</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>JSMN_STRING</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>JSMN_PRIMITIVE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block></enum></type> <name>jsmntype_t</name>;</typedef>
<enum>enum <name>jsmnerr</name> <block>{

<decl><name>JSMN_ERROR_NOMEM</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>JSMN_ERROR_INVAL</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,

<decl><name>JSMN_ERROR_PART</name> <init>= <expr><operator>-</operator><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>jsmntype_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JSMN_PARENT_LINKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>parent</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>jsmntok_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>toknext</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>toksuper</name></decl>;</decl_stmt> 
}</block></struct></type> <name>jsmn_parser</name>;</typedef>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jsmn_init</name><parameter_list>(<parameter><decl><type><name>jsmn_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>jsmn_parse</name><parameter_list>(<parameter><decl><type><name>jsmn_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>js</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <modifier>*</modifier></type><name>tokens</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num_tokens</name></decl></parameter>)</parameter_list>;</function_decl>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>cgltf_size</name></type> <name>GlbHeaderSize</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>cgltf_size</name></type> <name>GlbChunkHeaderSize</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name>GlbVersion</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name>GlbMagic</name> <init>= <expr><literal type="number">0x46546C67</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name>GlbMagicJsonChunk</name> <init>= <expr><literal type="number">0x4E4F534A</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name>GlbMagicBinChunk</name> <init>= <expr><literal type="number">0x004E4942</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CGLTF_MALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CGLTF_MALLOC</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>malloc(size)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CGLTF_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CGLTF_FREE</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(ptr)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CGLTF_ATOI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CGLTF_ATOI</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atoi(str)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CGLTF_ATOF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CGLTF_ATOF</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atof(str)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>cgltf_default_alloc</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user</name></expr>;</expr_stmt>
<return>return <expr><call><name>CGLTF_MALLOC</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cgltf_default_free</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>user</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_FREE</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>cgltf_calloc</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>element_size</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>SIZE_MAX</name> <operator>/</operator> <name>element_size</name> <operator>&lt;</operator> <name>count</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><call><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name>element_size</name> <operator>*</operator> <name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>element_size</name> <operator>*</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cgltf_result</name></type> <name>cgltf_default_file_read</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cgltf_memory_options</name></name><modifier>*</modifier></type> <name>memory_options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cgltf_file_options</name></name><modifier>*</modifier></type> <name>file_options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name><modifier>*</modifier></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>file_options</name></expr>;</expr_stmt>
<function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>memory_alloc</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name><name>memory_options</name><operator>-&gt;</operator><name>alloc</name></name></expr> ?</condition><then> <expr><name><name>memory_options</name><operator>-&gt;</operator><name>alloc</name></name></expr></then></ternary></expr> <operator>:</operator> <expr><operator>&amp;</operator><name>cgltf_default_alloc</name></expr></init>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>memory_free</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name><name>memory_options</name><operator>-&gt;</operator><name>free</name></name></expr> ?</condition><then> <expr><name><name>memory_options</name><operator>-&gt;</operator><name>free</name></name></expr></then></ternary></expr> <operator>:</operator> <expr><operator>&amp;</operator><name>cgltf_default_free</name></expr></init>;</function_decl>

<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>file</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_file_not_found</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>cgltf_size</name></type> <name>file_size</name> <init>= <expr><ternary><condition><expr><name>size</name></expr> ?</condition><then> <expr><operator>*</operator><name>size</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>file_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>length</name> <init>= <expr><call><name>ftell</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cgltf_result_io_error</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file_size</name> <operator>=</operator> <operator>(</operator><name>cgltf_size</name><operator>)</operator><name>length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>file_data</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>memory_alloc</name><argument_list>(<argument><expr><name><name>memory_options</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>, <argument><expr><name>file_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file_data</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cgltf_result_out_of_memory</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>cgltf_size</name></type> <name>read_size</name> <init>= <expr><call><name>fread</name><argument_list>(<argument><expr><name>file_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>file_size</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>read_size</name> <operator>!=</operator> <name>file_size</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memory_free</name><argument_list>(<argument><expr><name><name>memory_options</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>, <argument><expr><name>file_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cgltf_result_io_error</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>file_size</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name>file_data</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>cgltf_result_success</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cgltf_default_file_release</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cgltf_memory_options</name></name><modifier>*</modifier></type> <name>memory_options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cgltf_file_options</name></name><modifier>*</modifier></type> <name>file_options</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>file_options</name></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>memfree</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name><name>memory_options</name><operator>-&gt;</operator><name>free</name></name></expr> ?</condition><then> <expr><name><name>memory_options</name><operator>-&gt;</operator><name>free</name></name></expr></then></ternary></expr> <operator>:</operator> <expr><operator>&amp;</operator><name>cgltf_default_free</name></expr></init>;</function_decl>
<expr_stmt><expr><call><name>memfree</name><argument_list>(<argument><expr><name><name>memory_options</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>cgltf_result</name></type> <name>cgltf_parse_json</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>cgltf_data</name><modifier>*</modifier><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>cgltf_result</name></type> <name>cgltf_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>cgltf_data</name><modifier>*</modifier><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>GlbHeaderSize</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_data_too_short</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_invalid_options</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>cgltf_options</name></type> <name>fixed_options</name> <init>= <expr><operator>*</operator><name>options</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fixed_options</name><operator>.</operator><name>memory</name><operator>.</operator><name>alloc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fixed_options</name><operator>.</operator><name>memory</name><operator>.</operator><name>alloc</name></name> <operator>=</operator> <operator>&amp;</operator><name>cgltf_default_alloc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fixed_options</name><operator>.</operator><name>memory</name><operator>.</operator><name>free</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fixed_options</name><operator>.</operator><name>memory</name><operator>.</operator><name>free</name></name> <operator>=</operator> <operator>&amp;</operator><name>cgltf_default_free</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>GlbMagic</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fixed_options</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>cgltf_file_type_invalid</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>fixed_options</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>cgltf_file_type_gltf</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>fixed_options</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>cgltf_file_type_glb</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_unknown_format</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fixed_options</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>cgltf_file_type_gltf</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_result</name></type> <name>json_result</name> <init>= <expr><call><name>cgltf_parse_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fixed_options</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>out_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>json_result</name> <operator>!=</operator> <name>cgltf_result_success</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>json_result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>out_data</name><operator>)</operator><operator>-&gt;</operator><name>file_type</name></name> <operator>=</operator> <name>cgltf_file_type_gltf</name></expr>;</expr_stmt>

<return>return <expr><name>cgltf_result_success</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name> <init>= <expr><name>tmp</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>!=</operator> <name>GlbVersion</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>version</name> <operator>&lt;</operator> <name>GlbVersion</name></expr> ?</condition><then> <expr><name>cgltf_result_legacy_gltf</name></expr> </then><else>: <expr><name>cgltf_result_unknown_format</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&gt;</operator> <name>size</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_data_too_short</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name> <init>= <expr><name>ptr</name> <operator>+</operator> <name>GlbHeaderSize</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>GlbHeaderSize</name> <operator>+</operator> <name>GlbChunkHeaderSize</name> <operator>&gt;</operator> <name>size</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_data_too_short</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>json_length</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>json_length</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>GlbHeaderSize</name> <operator>+</operator> <name>GlbChunkHeaderSize</name> <operator>+</operator> <name>json_length</name> <operator>&gt;</operator> <name>size</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_data_too_short</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>json_chunk</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>GlbMagicJsonChunk</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_unknown_format</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>json_chunk</name> <operator>+=</operator> <name>GlbChunkHeaderSize</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>bin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>bin_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>GlbHeaderSize</name> <operator>+</operator> <name>GlbChunkHeaderSize</name> <operator>+</operator> <name>json_length</name> <operator>+</operator> <name>GlbChunkHeaderSize</name> <operator>&lt;=</operator> <name>size</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>bin_chunk</name> <init>= <expr><name>json_chunk</name> <operator>+</operator> <name>json_length</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>bin_length</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bin_length</name></expr></argument>, <argument><expr><name>bin_chunk</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>GlbHeaderSize</name> <operator>+</operator> <name>GlbChunkHeaderSize</name> <operator>+</operator> <name>json_length</name> <operator>+</operator> <name>GlbChunkHeaderSize</name> <operator>+</operator> <name>bin_length</name> <operator>&gt;</operator> <name>size</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_data_too_short</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>bin_chunk</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>GlbMagicBinChunk</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_unknown_format</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bin_chunk</name> <operator>+=</operator> <name>GlbChunkHeaderSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bin</name> <operator>=</operator> <name>bin_chunk</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bin_size</name> <operator>=</operator> <name>bin_length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>cgltf_result</name></type> <name>json_result</name> <init>= <expr><call><name>cgltf_parse_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fixed_options</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name>json_length</name></expr></argument>, <argument><expr><name>out_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>json_result</name> <operator>!=</operator> <name>cgltf_result_success</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>json_result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>out_data</name><operator>)</operator><operator>-&gt;</operator><name>file_type</name></name> <operator>=</operator> <name>cgltf_file_type_glb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>out_data</name><operator>)</operator><operator>-&gt;</operator><name>bin</name></name> <operator>=</operator> <name>bin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>out_data</name><operator>)</operator><operator>-&gt;</operator><name>bin_size</name></name> <operator>=</operator> <name>bin_size</name></expr>;</expr_stmt>

<return>return <expr><name>cgltf_result_success</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cgltf_result</name></type> <name>cgltf_parse_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>cgltf_data</name><modifier>*</modifier><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>options</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_invalid_options</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>memory_alloc</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>alloc</name></name></expr> ?</condition><then> <expr><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>alloc</name></name></expr></then></ternary></expr> <operator>:</operator> <expr><operator>&amp;</operator><name>cgltf_default_alloc</name></expr></init>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>memory_free</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name></expr> ?</condition><then> <expr><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name></expr></then></ternary></expr> <operator>:</operator> <expr><operator>&amp;</operator><name>cgltf_default_free</name></expr></init>;</function_decl>
<function_decl><type><name>cgltf_result</name></type> (<modifier>*</modifier><name>file_read</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cgltf_memory_options</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cgltf_file_options</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>cgltf_size</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name><name>options</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>read</name></name></expr> ?</condition><then> <expr><name><name>options</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>read</name></name></expr></then></ternary></expr> <operator>:</operator> <expr><operator>&amp;</operator><name>cgltf_default_file_read</name></expr></init>;</function_decl>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>file_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>file_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_result</name></type> <name>result</name> <init>= <expr><call><name>file_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>memory</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>cgltf_result_success</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>cgltf_parse</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>file_data</name></expr></argument>, <argument><expr><name>file_size</name></expr></argument>, <argument><expr><name>out_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>cgltf_result_success</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memory_free</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name>file_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>out_data</name><operator>)</operator><operator>-&gt;</operator><name>file_data</name></name> <operator>=</operator> <name>file_data</name></expr>;</expr_stmt>

<return>return <expr><name>cgltf_result_success</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cgltf_combine_paths</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>uri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s0</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s1</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>slash</name> <init>= <expr><ternary><condition><expr><name>s0</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>s1</name> <operator>&amp;&amp;</operator> <name>s1</name> <operator>&gt;</operator> <name>s0</name></expr> ?</condition><then> <expr><name>s1</name></expr> </then><else>: <expr><name>s0</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><name>s1</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>slash</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>prefix</name> <init>= <expr><name>slash</name> <operator>-</operator> <name>base</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>path</name> <operator>+</operator> <name>prefix</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cgltf_result</name></type> <name>cgltf_load_buffer_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>gltf_path</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>memory_alloc</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>alloc</name></name></expr> ?</condition><then> <expr><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>alloc</name></name></expr></then></ternary></expr> <operator>:</operator> <expr><operator>&amp;</operator><name>cgltf_default_alloc</name></expr></init>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>memory_free</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name></expr> ?</condition><then> <expr><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name></expr></then></ternary></expr> <operator>:</operator> <expr><operator>&amp;</operator><name>cgltf_default_free</name></expr></init>;</function_decl>
<function_decl><type><name>cgltf_result</name></type> (<modifier>*</modifier><name>file_read</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cgltf_memory_options</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cgltf_file_options</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>cgltf_size</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name><name>options</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>read</name></name></expr> ?</condition><then> <expr><name><name>options</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>read</name></name></expr></then></ternary></expr> <operator>:</operator> <expr><operator>&amp;</operator><name>cgltf_default_file_read</name></expr></init>;</function_decl>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>path</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>memory_alloc</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>gltf_path</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_out_of_memory</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cgltf_combine_paths</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>gltf_path</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>file_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_result</name></type> <name>result</name> <init>= <expr><call><name>file_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>memory</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>cgltf_result_success</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out_data</name> <operator>=</operator> <name>file_data</name></expr>;</expr_stmt>

<return>return <expr><name>cgltf_result_success</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cgltf_result</name></type> <name>cgltf_load_buffer_base64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>base64</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>memory_alloc</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>alloc</name></name></expr> ?</condition><then> <expr><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>alloc</name></name></expr></then></ternary></expr> <operator>:</operator> <expr><operator>&amp;</operator><name>cgltf_default_alloc</name></expr></init>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>memory_free</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name></expr> ?</condition><then> <expr><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name></expr></then></ternary></expr> <operator>:</operator> <expr><operator>&amp;</operator><name>cgltf_default_free</name></expr></init>;</function_decl>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>memory_alloc</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_out_of_memory</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buffer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buffer_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<while>while <condition>(<expr><name>buffer_bits</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><operator>*</operator><name>base64</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>=
<expr><ternary><condition><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>ch</name> <operator>-</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">26</literal></expr> ?</condition><then> <expr><operator>(</operator><name>ch</name> <operator>-</operator> <literal type="char">'A'</literal><operator>)</operator></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>ch</name> <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">26</literal></expr> ?</condition><then> <expr><operator>(</operator><name>ch</name> <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>+</operator> <literal type="number">26</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>ch</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">10</literal></expr> ?</condition><then> <expr><operator>(</operator><name>ch</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>+</operator> <literal type="number">52</literal></expr> </then><else>:
<expr><ternary><condition><expr><name>ch</name> <operator>==</operator> <literal type="char">'+'</literal></expr> ?</condition><then> <expr><literal type="number">62</literal></expr> </then><else>:
<expr><ternary><condition><expr><name>ch</name> <operator>==</operator> <literal type="char">'/'</literal></expr> ?</condition><then> <expr><literal type="number">63</literal></expr> </then><else>:
<expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memory_free</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cgltf_result_io_error</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>(</operator><name>buffer</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <name>index</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer_bits</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>buffer</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>buffer_bits</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer_bits</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>out_data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<return>return <expr><name>cgltf_result_success</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cgltf_result</name></type> <name>cgltf_load_buffers</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>gltf_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>options</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_invalid_options</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>buffers_count</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>uri</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>bin</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>bin_size</name></name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_data_too_short</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>bin</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>buffers_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr>)</condition>
<block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>uri</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>uri</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uri</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">"data:"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>comma</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>comma</name> <operator>&amp;&amp;</operator> <name>comma</name> <operator>-</operator> <name>uri</name> <operator>&gt;=</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>comma</name> <operator>-</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">";base64"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_result</name></type> <name>res</name> <init>= <expr><call><name>cgltf_load_buffer_base64</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>, <argument><expr><name>comma</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>cgltf_result_success</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<return>return <expr><name>cgltf_result_unknown_format</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>gltf_path</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_result</name></type> <name>res</name> <init>= <expr><call><name>cgltf_load_buffer_file</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>gltf_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>cgltf_result_success</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<return>return <expr><name>cgltf_result_unknown_format</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>cgltf_result_success</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>cgltf_size</name></type> <name>cgltf_calc_size</name><parameter_list>(<parameter><decl><type><name>cgltf_type</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>cgltf_component_type</name></type> <name>component_type</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>cgltf_size</name></type> <name>cgltf_calc_index_bound</name><parameter_list>(<parameter><decl><type><name>cgltf_buffer_view</name><modifier>*</modifier></type> <name>buffer_view</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>cgltf_component_type</name></type> <name>component_type</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>buffer_view</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name><name>buffer_view</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>bound</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>component_type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>cgltf_component_type_r_8u</name></expr>:</case>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>v</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>data</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bound</name> <operator>=</operator> <ternary><condition><expr><name>bound</name> <operator>&gt;</operator> <name>v</name></expr> ?</condition><then> <expr><name>bound</name></expr> </then><else>: <expr><name>v</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>

<case>case <expr><name>cgltf_component_type_r_16u</name></expr>:</case>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>v</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name><operator>*</operator><operator>)</operator><name>data</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bound</name> <operator>=</operator> <ternary><condition><expr><name>bound</name> <operator>&gt;</operator> <name>v</name></expr> ?</condition><then> <expr><name>bound</name></expr> </then><else>: <expr><name>v</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>

<case>case <expr><name>cgltf_component_type_r_32u</name></expr>:</case>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>v</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>*</operator><operator>)</operator><name>data</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bound</name> <operator>=</operator> <ternary><condition><expr><name>bound</name> <operator>&gt;</operator> <name>v</name></expr> ?</condition><then> <expr><name>bound</name></expr> </then><else>: <expr><name>v</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>

<default>default:</default>
<empty_stmt>;</empty_stmt>
</block_content>}</block></switch>

<return>return <expr><name>bound</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cgltf_result</name></type> <name>cgltf_validate</name><parameter_list>(<parameter><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>accessors_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_accessor</name><modifier>*</modifier></type> <name>accessor</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>accessors</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cgltf_size</name></type> <name>element_size</name> <init>= <expr><call><name>cgltf_calc_size</name><argument_list>(<argument><expr><name><name>accessor</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>accessor</name><operator>-&gt;</operator><name>component_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>accessor</name><operator>-&gt;</operator><name>buffer_view</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>req_size</name> <init>= <expr><name><name>accessor</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>accessor</name><operator>-&gt;</operator><name>stride</name></name> <operator>*</operator> <operator>(</operator><name><name>accessor</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>element_size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>accessor</name><operator>-&gt;</operator><name>buffer_view</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>req_size</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_data_too_short</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>accessor</name><operator>-&gt;</operator><name>is_sparse</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_accessor_sparse</name><modifier>*</modifier></type> <name>sparse</name> <init>= <expr><operator>&amp;</operator><name><name>accessor</name><operator>-&gt;</operator><name>sparse</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cgltf_size</name></type> <name>indices_component_size</name> <init>= <expr><call><name>cgltf_calc_size</name><argument_list>(<argument><expr><name>cgltf_type_scalar</name></expr></argument>, <argument><expr><name><name>sparse</name><operator>-&gt;</operator><name>indices_component_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>indices_req_size</name> <init>= <expr><name><name>sparse</name><operator>-&gt;</operator><name>indices_byte_offset</name></name> <operator>+</operator> <name>indices_component_size</name> <operator>*</operator> <name><name>sparse</name><operator>-&gt;</operator><name>count</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>values_req_size</name> <init>= <expr><name><name>sparse</name><operator>-&gt;</operator><name>values_byte_offset</name></name> <operator>+</operator> <name>element_size</name> <operator>*</operator> <name><name>sparse</name><operator>-&gt;</operator><name>count</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sparse</name><operator>-&gt;</operator><name>indices_buffer_view</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>indices_req_size</name> <operator>||</operator>
<name><name>sparse</name><operator>-&gt;</operator><name>values_buffer_view</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>values_req_size</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_data_too_short</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sparse</name><operator>-&gt;</operator><name>indices_component_type</name></name> <operator>!=</operator> <name>cgltf_component_type_r_8u</name> <operator>&amp;&amp;</operator>
<name><name>sparse</name><operator>-&gt;</operator><name>indices_component_type</name></name> <operator>!=</operator> <name>cgltf_component_type_r_16u</name> <operator>&amp;&amp;</operator>
<name><name>sparse</name><operator>-&gt;</operator><name>indices_component_type</name></name> <operator>!=</operator> <name>cgltf_component_type_r_32u</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_invalid_gltf</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sparse</name><operator>-&gt;</operator><name>indices_buffer_view</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>index_bound</name> <init>= <expr><call><name>cgltf_calc_index_bound</name><argument_list>(<argument><expr><name><name>sparse</name><operator>-&gt;</operator><name>indices_buffer_view</name></name></expr></argument>, <argument><expr><name><name>sparse</name><operator>-&gt;</operator><name>indices_byte_offset</name></name></expr></argument>, <argument><expr><name><name>sparse</name><operator>-&gt;</operator><name>indices_component_type</name></name></expr></argument>, <argument><expr><name><name>sparse</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index_bound</name> <operator>&gt;=</operator> <name><name>accessor</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_data_too_short</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>buffer_views_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>req_size</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>buffer_views</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>buffer_views</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>buffer_views</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>buffer_views</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>buffer</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>req_size</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_data_too_short</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weights</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>primitives_count</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>targets_count</name> <operator>!=</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weights_count</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_invalid_gltf</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>target_names</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>primitives_count</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>targets_count</name> <operator>!=</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>target_names_count</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_invalid_gltf</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>primitives_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>targets_count</name> <operator>!=</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>targets_count</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_invalid_gltf</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>attributes_count</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_accessor</name><modifier>*</modifier></type> <name>first</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>attributes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>attributes_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>attributes</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>-&gt;</operator><name>count</name></name> <operator>!=</operator> <name><name>first</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_invalid_gltf</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>targets_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>targets</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>attributes_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>targets</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>attributes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>data</name><operator>-&gt;</operator><name>count</name></name> <operator>!=</operator> <name><name>first</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_invalid_gltf</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<decl_stmt><decl><type><name>cgltf_accessor</name><modifier>*</modifier></type> <name>indices</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>indices</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>indices</name> <operator>&amp;&amp;</operator>
<name><name>indices</name><operator>-&gt;</operator><name>component_type</name></name> <operator>!=</operator> <name>cgltf_component_type_r_8u</name> <operator>&amp;&amp;</operator>
<name><name>indices</name><operator>-&gt;</operator><name>component_type</name></name> <operator>!=</operator> <name>cgltf_component_type_r_16u</name> <operator>&amp;&amp;</operator>
<name><name>indices</name><operator>-&gt;</operator><name>component_type</name></name> <operator>!=</operator> <name>cgltf_component_type_r_32u</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_invalid_gltf</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>indices</name> <operator>&amp;&amp;</operator> <name><name>indices</name><operator>-&gt;</operator><name>buffer_view</name></name> <operator>&amp;&amp;</operator> <name><name>indices</name><operator>-&gt;</operator><name>buffer_view</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>index_bound</name> <init>= <expr><call><name>cgltf_calc_index_bound</name><argument_list>(<argument><expr><name><name>indices</name><operator>-&gt;</operator><name>buffer_view</name></name></expr></argument>, <argument><expr><name><name>indices</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>indices</name><operator>-&gt;</operator><name>component_type</name></name></expr></argument>, <argument><expr><name><name>indices</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index_bound</name> <operator>&gt;=</operator> <name><name>first</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_data_too_short</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>nodes_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weights</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mesh</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mesh</name><operator>-&gt;</operator><name>primitives_count</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mesh</name><operator>-&gt;</operator><name>primitives</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>targets_count</name> <operator>!=</operator> <name><name>data</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weights_count</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_invalid_gltf</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>nodes_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_node</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_node</name><modifier>*</modifier></type> <name>p2</name> <init>= <expr><ternary><condition><expr><name>p1</name></expr> ?</condition><then> <expr><name><name>p1</name><operator>-&gt;</operator><name>parent</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p1</name> <operator>&amp;&amp;</operator> <name>p2</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p1</name> <operator>==</operator> <name>p2</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_invalid_gltf</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <ternary><condition><expr><name><name>p2</name><operator>-&gt;</operator><name>parent</name></name></expr> ?</condition><then> <expr><name><name>p2</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>scenes_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>scenes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nodes_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>scenes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>nodes</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>parent</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_invalid_gltf</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>animations_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>animations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>channels_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_animation_channel</name><modifier>*</modifier></type> <name>channel</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>animations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channels</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>channel</name><operator>-&gt;</operator><name>target_node</name></name></expr>)</condition>
<block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>cgltf_size</name></type> <name>components</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>target_path</name></name> <operator>==</operator> <name>cgltf_animation_path_type_weights</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>channel</name><operator>-&gt;</operator><name>target_node</name><operator>-&gt;</operator><name>mesh</name></name> <operator>||</operator> <operator>!</operator><name><name>channel</name><operator>-&gt;</operator><name>target_node</name><operator>-&gt;</operator><name>mesh</name><operator>-&gt;</operator><name>primitives_count</name></name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_invalid_gltf</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>components</name> <operator>=</operator> <name><name>channel</name><operator>-&gt;</operator><name>target_node</name><operator>-&gt;</operator><name>mesh</name><operator>-&gt;</operator><name>primitives</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>targets_count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>cgltf_size</name></type> <name>values</name> <init>= <expr><ternary><condition><expr><name><name>channel</name><operator>-&gt;</operator><name>sampler</name><operator>-&gt;</operator><name>interpolation</name></name> <operator>==</operator> <name>cgltf_interpolation_type_cubic_spline</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel</name><operator>-&gt;</operator><name>sampler</name><operator>-&gt;</operator><name>input</name><operator>-&gt;</operator><name>count</name></name> <operator>*</operator> <name>components</name> <operator>*</operator> <name>values</name> <operator>!=</operator> <name><name>channel</name><operator>-&gt;</operator><name>sampler</name><operator>-&gt;</operator><name>output</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_data_too_short</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>cgltf_result_success</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cgltf_result</name></type> <name>cgltf_copy_extras_json</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cgltf_data</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cgltf_extras</name><modifier>*</modifier></type> <name>extras</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name><modifier>*</modifier></type> <name>dest_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>json_size</name> <init>= <expr><name><name>extras</name><operator>-&gt;</operator><name>end_offset</name></name> <operator>-</operator> <name><name>extras</name><operator>-&gt;</operator><name>start_offset</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dest</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dest_size</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dest_size</name> <operator>=</operator> <name>json_size</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>cgltf_result_success</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>cgltf_result_invalid_options</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dest_size</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>json_size</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>json</name></name> <operator>+</operator> <name><name>extras</name><operator>-&gt;</operator><name>start_offset</name></name></expr></argument>, <argument><expr><operator>*</operator><name>dest_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><operator>*</operator><name>dest_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>json</name></name> <operator>+</operator> <name><name>extras</name><operator>-&gt;</operator><name>start_offset</name></name></expr></argument>, <argument><expr><name>json_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><name>json_size</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>cgltf_result_success</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cgltf_free</name><parameter_list>(<parameter><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition>
<block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>file_release</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cgltf_memory_options</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cgltf_file_options</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>release</name></name></expr> ?</condition><then> <expr><name><name>data</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>release</name></name></expr></then></ternary></expr> <operator>:</operator> <expr><name>cgltf_default_file_release</name></expr></init>;</function_decl>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>asset</name><operator>.</operator><name>copyright</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>asset</name><operator>.</operator><name>generator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>asset</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>asset</name><operator>.</operator><name>min_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>accessors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffer_views</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>buffers_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>!=</operator> <name><name>data</name><operator>-&gt;</operator><name>bin</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>file_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>memory</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>primitives_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>attributes_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>attributes</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>attributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>targets_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>targets</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>attributes_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>targets</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>attributes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>targets</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>attributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>targets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>primitives</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weights</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>target_names_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>target_names</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>target_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>materials_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>materials</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>images_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> 
<block>{<block_content>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mime_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>images</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>textures_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>textures</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>textures</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>samplers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>skins_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>skins</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>skins</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>joints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>skins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>cameras_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>cameras</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>cameras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>lights_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>lights</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>lights</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>nodes_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>children</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>weights</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>scenes_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>scenes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>scenes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>scenes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>animations_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>animations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>animations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>samplers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>animations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>animations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>extensions_used_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>extensions_used</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>extensions_used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>extensions_required_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>extensions_required</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>extensions_required</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>file_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>memory</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>file_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cgltf_node_transform_local</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cgltf_node</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>cgltf_float</name><modifier>*</modifier></type> <name>out_matrix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_float</name><modifier>*</modifier></type> <name>lm</name> <init>= <expr><name>out_matrix</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>has_matrix</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lm</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>matrix</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>tx</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>translation</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>ty</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>translation</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tz</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>translation</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>qx</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>rotation</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>qy</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>rotation</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>qz</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>rotation</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>qw</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>rotation</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sx</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sy</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>scale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sz</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>scale</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>qy</name><operator>*</operator><name>qy</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>qz</name><operator>*</operator><name>qz</name><operator>)</operator> <operator>*</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>qx</name><operator>*</operator><name>qy</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>qz</name><operator>*</operator><name>qw</name><operator>)</operator> <operator>*</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lm</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>qx</name><operator>*</operator><name>qz</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>qy</name><operator>*</operator><name>qw</name><operator>)</operator> <operator>*</operator> <name>sx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lm</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lm</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>qx</name><operator>*</operator><name>qy</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>qz</name><operator>*</operator><name>qw</name><operator>)</operator> <operator>*</operator> <name>sy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lm</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>qx</name><operator>*</operator><name>qx</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>qz</name><operator>*</operator><name>qz</name><operator>)</operator> <operator>*</operator> <name>sy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lm</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>qy</name><operator>*</operator><name>qz</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>qx</name><operator>*</operator><name>qw</name><operator>)</operator> <operator>*</operator> <name>sy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lm</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lm</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>qx</name><operator>*</operator><name>qz</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>qy</name><operator>*</operator><name>qw</name><operator>)</operator> <operator>*</operator> <name>sz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lm</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>qy</name><operator>*</operator><name>qz</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>qx</name><operator>*</operator><name>qw</name><operator>)</operator> <operator>*</operator> <name>sz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lm</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>qx</name><operator>*</operator><name>qx</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>qy</name><operator>*</operator><name>qy</name><operator>)</operator> <operator>*</operator> <name>sz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lm</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lm</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name>tx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lm</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name>ty</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lm</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name>tz</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lm</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cgltf_node_transform_world</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cgltf_node</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>cgltf_float</name><modifier>*</modifier></type> <name>out_matrix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_float</name><modifier>*</modifier></type> <name>lm</name> <init>= <expr><name>out_matrix</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cgltf_node_transform_local</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>lm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>cgltf_node</name><modifier>*</modifier></type> <name>parent</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>parent</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name><name>pm</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cgltf_node_transform_local</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>l0</name> <init>= <expr><name><name>lm</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>l1</name> <init>= <expr><name><name>lm</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>l2</name> <init>= <expr><name><name>lm</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>r0</name> <init>= <expr><name>l0</name> <operator>*</operator> <name><name>pm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>l1</name> <operator>*</operator> <name><name>pm</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>l2</name> <operator>*</operator> <name><name>pm</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>r1</name> <init>= <expr><name>l0</name> <operator>*</operator> <name><name>pm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>l1</name> <operator>*</operator> <name><name>pm</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name>l2</name> <operator>*</operator> <name><name>pm</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>r2</name> <init>= <expr><name>l0</name> <operator>*</operator> <name><name>pm</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>l1</name> <operator>*</operator> <name><name>pm</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name>l2</name> <operator>*</operator> <name><name>pm</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lm</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lm</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lm</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>lm</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>+=</operator> <name><name>pm</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lm</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>+=</operator> <name><name>pm</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lm</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>+=</operator> <name><name>pm</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cgltf_size</name></type> <name>cgltf_component_read_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>cgltf_component_type</name></type> <name>component_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>component_type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>cgltf_component_type_r_16</name></expr>:</case>
<return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>)</operator> <name>in</name><operator>)</operator></expr>;</return>
<case>case <expr><name>cgltf_component_type_r_16u</name></expr>:</case>
<return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>)</operator> <name>in</name><operator>)</operator></expr>;</return>
<case>case <expr><name>cgltf_component_type_r_32u</name></expr>:</case>
<return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name><operator>*</operator><operator>)</operator> <name>in</name><operator>)</operator></expr>;</return>
<case>case <expr><name>cgltf_component_type_r_32f</name></expr>:</case>
<return>return <expr><operator>(</operator><name>cgltf_size</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>float</name><operator>*</operator><operator>)</operator> <name>in</name><operator>)</operator></expr>;</return>
<case>case <expr><name>cgltf_component_type_r_8</name></expr>:</case>
<return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>int8_t</name><operator>*</operator><operator>)</operator> <name>in</name><operator>)</operator></expr>;</return>
<case>case <expr><name>cgltf_component_type_r_8u</name></expr>:</case>
<return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator> <name>in</name><operator>)</operator></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cgltf_float</name></type> <name>cgltf_component_read_float</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>cgltf_component_type</name></type> <name>component_type</name></decl></parameter>, <parameter><decl><type><name>cgltf_bool</name></type> <name>normalized</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>component_type</name> <operator>==</operator> <name>cgltf_component_type_r_32f</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>float</name><operator>*</operator><operator>)</operator> <name>in</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>normalized</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name>component_type</name></expr>)</condition>
<block>{<block_content>

<case>case <expr><name>cgltf_component_type_r_16</name></expr>:</case>
<return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>)</operator> <name>in</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>cgltf_float</name><operator>)</operator><literal type="number">32767</literal></expr>;</return>
<case>case <expr><name>cgltf_component_type_r_16u</name></expr>:</case>
<return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>)</operator> <name>in</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>cgltf_float</name><operator>)</operator><literal type="number">65535</literal></expr>;</return>
<case>case <expr><name>cgltf_component_type_r_8</name></expr>:</case>
<return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>int8_t</name><operator>*</operator><operator>)</operator> <name>in</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>cgltf_float</name><operator>)</operator><literal type="number">127</literal></expr>;</return>
<case>case <expr><name>cgltf_component_type_r_8u</name></expr>:</case>
<return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator> <name>in</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>cgltf_float</name><operator>)</operator><literal type="number">255</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>cgltf_float</name><operator>)</operator><call><name>cgltf_component_read_index</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>component_type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>cgltf_size</name></type> <name>cgltf_component_size</name><parameter_list>(<parameter><decl><type><name>cgltf_component_type</name></type> <name>component_type</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>cgltf_bool</name></type> <name>cgltf_element_read_float</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>element</name></decl></parameter>, <parameter><decl><type><name>cgltf_type</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>cgltf_component_type</name></type> <name>component_type</name></decl></parameter>, <parameter><decl><type><name>cgltf_bool</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><name>cgltf_float</name><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>element_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>num_components</name> <init>= <expr><call><name>cgltf_num_components</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>element_size</name> <operator>&lt;</operator> <name>num_components</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<decl_stmt><decl><type><name>cgltf_size</name></type> <name>component_size</name> <init>= <expr><call><name>cgltf_component_size</name><argument_list>(<argument><expr><name>component_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>cgltf_type_mat2</name> <operator>&amp;&amp;</operator> <name>component_size</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_float</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name>component_type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_float</name><argument_list>(<argument><expr><name>element</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>component_type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_float</name><argument_list>(<argument><expr><name>element</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>component_type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_float</name><argument_list>(<argument><expr><name>element</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>component_type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>cgltf_type_mat3</name> <operator>&amp;&amp;</operator> <name>component_size</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_float</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name>component_type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_float</name><argument_list>(<argument><expr><name>element</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>component_type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_float</name><argument_list>(<argument><expr><name>element</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>component_type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_float</name><argument_list>(<argument><expr><name>element</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>component_type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_float</name><argument_list>(<argument><expr><name>element</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>component_type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_float</name><argument_list>(<argument><expr><name>element</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>component_type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_float</name><argument_list>(<argument><expr><name>element</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>component_type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_float</name><argument_list>(<argument><expr><name>element</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><name>component_type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_float</name><argument_list>(<argument><expr><name>element</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>component_type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>cgltf_type_mat3</name> <operator>&amp;&amp;</operator> <name>component_size</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_float</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name>component_type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_float</name><argument_list>(<argument><expr><name>element</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>component_type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_float</name><argument_list>(<argument><expr><name>element</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>component_type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_float</name><argument_list>(<argument><expr><name>element</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>component_type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_float</name><argument_list>(<argument><expr><name>element</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>component_type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_float</name><argument_list>(<argument><expr><name>element</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>component_type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_float</name><argument_list>(<argument><expr><name>element</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>component_type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_float</name><argument_list>(<argument><expr><name>element</name> <operator>+</operator> <literal type="number">18</literal></expr></argument>, <argument><expr><name>component_type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_float</name><argument_list>(<argument><expr><name>element</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>component_type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_components</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_float</name><argument_list>(<argument><expr><name>element</name> <operator>+</operator> <name>component_size</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name>component_type</name></expr></argument>, <argument><expr><name>normalized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>cgltf_bool</name></type> <name>cgltf_accessor_read_float</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cgltf_accessor</name><modifier>*</modifier></type> <name>accessor</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>cgltf_float</name><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>element_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>accessor</name><operator>-&gt;</operator><name>is_sparse</name></name></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>accessor</name><operator>-&gt;</operator><name>buffer_view</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>element_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>accessor</name><operator>-&gt;</operator><name>buffer_view</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>offset</name> <init>= <expr><name><name>accessor</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>accessor</name><operator>-&gt;</operator><name>buffer_view</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>element</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator> <name><name>accessor</name><operator>-&gt;</operator><name>buffer_view</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>element</name> <operator>+=</operator> <name>offset</name> <operator>+</operator> <name><name>accessor</name><operator>-&gt;</operator><name>stride</name></name> <operator>*</operator> <name>index</name></expr>;</expr_stmt>
<return>return <expr><call><name>cgltf_element_read_float</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name><name>accessor</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>accessor</name><operator>-&gt;</operator><name>component_type</name></name></expr></argument>, <argument><expr><name><name>accessor</name><operator>-&gt;</operator><name>normalized</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>element_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>cgltf_size</name></type> <name>cgltf_accessor_unpack_floats</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cgltf_accessor</name><modifier>*</modifier></type> <name>accessor</name></decl></parameter>, <parameter><decl><type><name>cgltf_float</name><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>float_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>floats_per_element</name> <init>= <expr><call><name>cgltf_num_components</name><argument_list>(<argument><expr><name><name>accessor</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>available_floats</name> <init>= <expr><name><name>accessor</name><operator>-&gt;</operator><name>count</name></name> <operator>*</operator> <name>floats_per_element</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>available_floats</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>float_count</name> <operator>=</operator> <ternary><condition><expr><name>available_floats</name> <operator>&lt;</operator> <name>float_count</name></expr> ?</condition><then> <expr><name>available_floats</name></expr> </then><else>: <expr><name>float_count</name></expr></else></ternary></expr>;</expr_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>element_count</name> <init>= <expr><name>float_count</name> <operator>/</operator> <name>floats_per_element</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>cgltf_float</name><modifier>*</modifier></type> <name>dest</name> <init>= <expr><name>out</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_accessor</name></type> <name>dense</name> <init>= <expr><operator>*</operator><name>accessor</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dense</name><operator>.</operator><name>is_sparse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>element_count</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr><operator>,</operator> <expr><name>dest</name> <operator>+=</operator> <name>floats_per_element</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cgltf_accessor_read_float</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dense</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>floats_per_element</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>accessor</name><operator>-&gt;</operator><name>is_sparse</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>cgltf_accessor_sparse</name><modifier>*</modifier></type> <name>sparse</name> <init>= <expr><operator>&amp;</operator><name><name>dense</name><operator>.</operator><name>sparse</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sparse</name><operator>-&gt;</operator><name>indices_buffer_view</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>sparse</name><operator>-&gt;</operator><name>values_buffer_view</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>index_data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator> <name><name>sparse</name><operator>-&gt;</operator><name>indices_buffer_view</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>index_data</name> <operator>+=</operator> <name><name>sparse</name><operator>-&gt;</operator><name>indices_byte_offset</name></name> <operator>+</operator> <name><name>sparse</name><operator>-&gt;</operator><name>indices_buffer_view</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>index_stride</name> <init>= <expr><call><name>cgltf_component_size</name><argument_list>(<argument><expr><name><name>sparse</name><operator>-&gt;</operator><name>indices_component_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>reader_head</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator> <name><name>sparse</name><operator>-&gt;</operator><name>values_buffer_view</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>reader_head</name> <operator>+=</operator> <name><name>sparse</name><operator>-&gt;</operator><name>values_byte_offset</name></name> <operator>+</operator> <name><name>sparse</name><operator>-&gt;</operator><name>values_buffer_view</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>reader_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>reader_index</name> <operator>&lt;</operator> <name><name>sparse</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>reader_index</name><operator>++</operator></expr><operator>,</operator> <expr><name>index_data</name> <operator>+=</operator> <name>index_stride</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>writer_index</name> <init>= <expr><call><name>cgltf_component_read_index</name><argument_list>(<argument><expr><name>index_data</name></expr></argument>, <argument><expr><name><name>sparse</name><operator>-&gt;</operator><name>indices_component_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>writer_head</name> <init>= <expr><name>out</name> <operator>+</operator> <name>writer_index</name> <operator>*</operator> <name>floats_per_element</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cgltf_element_read_float</name><argument_list>(<argument><expr><name>reader_head</name></expr></argument>, <argument><expr><name><name>dense</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>dense</name><operator>.</operator><name>component_type</name></name></expr></argument>, <argument><expr><name><name>dense</name><operator>.</operator><name>normalized</name></name></expr></argument>, <argument><expr><name>writer_head</name></expr></argument>, <argument><expr><name>floats_per_element</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>reader_head</name> <operator>+=</operator> <name><name>dense</name><operator>.</operator><name>stride</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>element_count</name> <operator>*</operator> <name>floats_per_element</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cgltf_uint</name></type> <name>cgltf_component_read_uint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>cgltf_component_type</name></type> <name>component_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>component_type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>cgltf_component_type_r_8</name></expr>:</case>
<return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>int8_t</name><operator>*</operator><operator>)</operator> <name>in</name><operator>)</operator></expr>;</return>

<case>case <expr><name>cgltf_component_type_r_8u</name></expr>:</case>
<return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator> <name>in</name><operator>)</operator></expr>;</return>

<case>case <expr><name>cgltf_component_type_r_16</name></expr>:</case>
<return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>int16_t</name><operator>*</operator><operator>)</operator> <name>in</name><operator>)</operator></expr>;</return>

<case>case <expr><name>cgltf_component_type_r_16u</name></expr>:</case>
<return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint16_t</name><operator>*</operator><operator>)</operator> <name>in</name><operator>)</operator></expr>;</return>

<case>case <expr><name>cgltf_component_type_r_32u</name></expr>:</case>
<return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name><operator>*</operator><operator>)</operator> <name>in</name><operator>)</operator></expr>;</return>

<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cgltf_bool</name></type> <name>cgltf_element_read_uint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>element</name></decl></parameter>, <parameter><decl><type><name>cgltf_type</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>cgltf_component_type</name></type> <name>component_type</name></decl></parameter>, <parameter><decl><type><name>cgltf_uint</name><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>element_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>num_components</name> <init>= <expr><call><name>cgltf_num_components</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>element_size</name> <operator>&lt;</operator> <name>num_components</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>cgltf_type_mat2</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>cgltf_type_mat3</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>cgltf_type_mat4</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>cgltf_size</name></type> <name>component_size</name> <init>= <expr><call><name>cgltf_component_size</name><argument_list>(<argument><expr><name>component_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_components</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>cgltf_component_read_uint</name><argument_list>(<argument><expr><name>element</name> <operator>+</operator> <name>component_size</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name>component_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>cgltf_bool</name></type> <name>cgltf_accessor_read_uint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cgltf_accessor</name><modifier>*</modifier></type> <name>accessor</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>cgltf_uint</name><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>element_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>accessor</name><operator>-&gt;</operator><name>is_sparse</name></name></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>accessor</name><operator>-&gt;</operator><name>buffer_view</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>element_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>cgltf_uint</name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>accessor</name><operator>-&gt;</operator><name>buffer_view</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>offset</name> <init>= <expr><name><name>accessor</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>accessor</name><operator>-&gt;</operator><name>buffer_view</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>element</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator> <name><name>accessor</name><operator>-&gt;</operator><name>buffer_view</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>element</name> <operator>+=</operator> <name>offset</name> <operator>+</operator> <name><name>accessor</name><operator>-&gt;</operator><name>stride</name></name> <operator>*</operator> <name>index</name></expr>;</expr_stmt>
<return>return <expr><call><name>cgltf_element_read_uint</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name><name>accessor</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>accessor</name><operator>-&gt;</operator><name>component_type</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>element_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>cgltf_size</name></type> <name>cgltf_accessor_read_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cgltf_accessor</name><modifier>*</modifier></type> <name>accessor</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>accessor</name><operator>-&gt;</operator><name>is_sparse</name></name></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>accessor</name><operator>-&gt;</operator><name>buffer_view</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>accessor</name><operator>-&gt;</operator><name>buffer_view</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>cgltf_size</name></type> <name>offset</name> <init>= <expr><name><name>accessor</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>accessor</name><operator>-&gt;</operator><name>buffer_view</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>element</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator> <name><name>accessor</name><operator>-&gt;</operator><name>buffer_view</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>element</name> <operator>+=</operator> <name>offset</name> <operator>+</operator> <name><name>accessor</name><operator>-&gt;</operator><name>stride</name></name> <operator>*</operator> <name>index</name></expr>;</expr_stmt>
<return>return <expr><call><name>cgltf_component_read_index</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name><name>accessor</name><operator>-&gt;</operator><name>component_type</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CGLTF_ERROR_JSON</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CGLTF_ERROR_NOMEM</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CGLTF_ERROR_LEGACY</name></cpp:macro> <cpp:value>-3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CGLTF_CHECK_TOKTYPE</name><parameter_list>(<parameter><type><name>tok_</name></type></parameter>, <parameter><type><name>type_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((tok_).type != (type_)) { return CGLTF_ERROR_JSON; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CGLTF_CHECK_KEY</name><parameter_list>(<parameter><type><name>tok_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((tok_).type != JSMN_STRING || (tok_).size == 0) { return CGLTF_ERROR_JSON; }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CGLTF_PTRINDEX</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(type*)((cgltf_size)idx + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CGLTF_PTRFIXUP</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>data</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (var) { if ((cgltf_size)var &gt; size) { return CGLTF_ERROR_JSON; } var = &amp;data[(cgltf_size)var-1]; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CGLTF_PTRFIXUP_REQ</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>data</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (!var || (cgltf_size)var &gt; size) { return CGLTF_ERROR_JSON; } var = &amp;data[(cgltf_size)var-1];</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_json_strcmp</name><parameter_list>(<parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><operator>*</operator><name>tok</name></expr></argument>, <argument><expr><name>JSMN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>str_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>name_length</name> <init>= <expr><name><name>tok</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>tok</name><operator>-&gt;</operator><name>start</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>str_len</name> <operator>==</operator> <name>name_length</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>json_chunk</name> <operator>+</operator> <name><name>tok</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>str_len</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">128</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_json_to_int</name><parameter_list>(<parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><operator>*</operator><name>tok</name></expr></argument>, <argument><expr><name>JSMN_PRIMITIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>cgltf_size</name><operator>)</operator><operator>(</operator><name><name>tok</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>tok</name><operator>-&gt;</operator><name>start</name></name><operator>)</operator> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><name><name>tok</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>tok</name><operator>-&gt;</operator><name>start</name></name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>json_chunk</name> <operator>+</operator> <name><name>tok</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>CGLTF_ATOI</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cgltf_float</name></type> <name>cgltf_json_to_float</name><parameter_list>(<parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><operator>*</operator><name>tok</name></expr></argument>, <argument><expr><name>JSMN_PRIMITIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>cgltf_size</name><operator>)</operator><operator>(</operator><name><name>tok</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>tok</name><operator>-&gt;</operator><name>start</name></name><operator>)</operator> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><name><name>tok</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>tok</name><operator>-&gt;</operator><name>start</name></name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>json_chunk</name> <operator>+</operator> <name><name>tok</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>cgltf_float</name><operator>)</operator><call><name>CGLTF_ATOF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cgltf_bool</name></type> <name>cgltf_json_to_bool</name><parameter_list>(<parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tok</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>tok</name><operator>-&gt;</operator><name>start</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>size</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>json_chunk</name> <operator>+</operator> <name><name>tok</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_skip_json</name><parameter_list>(<parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>JSMN_OBJECT</name></expr>:</case>
<expr_stmt><expr><name>end</name> <operator>+=</operator> <name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>JSMN_ARRAY</name></expr>:</case>
<expr_stmt><expr><name>end</name> <operator>+=</operator> <name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>JSMN_PRIMITIVE</name></expr>:</case>
<case>case <expr><name>JSMN_STRING</name></expr>:</case>
<break>break;</break>

<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cgltf_fill_float_array</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>out_array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>out_array</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_float_array</name><parameter_list>(<parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>out_array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>!=</operator> <name>size</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>CGLTF_ERROR_JSON</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_PRIMITIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_array</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>cgltf_json_to_float</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_string</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>out_string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>out_string</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>CGLTF_ERROR_JSON</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>-</operator> <name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>CGLTF_ERROR_NOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>json_chunk</name> <operator>+</operator> <name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_string</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<return>return <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_array</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>element_size</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>out_array</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name><modifier>*</modifier></type> <name>out_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>json_chunk</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>JSMN_ARRAY</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>JSMN_OBJECT</name></expr> ?</condition><then> <expr><name>CGLTF_ERROR_LEGACY</name></expr> </then><else>: <expr><name>CGLTF_ERROR_JSON</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>out_array</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>CGLTF_ERROR_JSON</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><call><name>cgltf_calloc</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>element_size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>CGLTF_ERROR_NOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>out_array</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<return>return <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_string_array</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type> <name>out_array</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name><modifier>*</modifier></type> <name>out_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>out_array</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>*</operator><name>out_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_string</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>out_array</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cgltf_parse_attribute_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>cgltf_attribute_type</name><modifier>*</modifier></type> <name>out_type</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>out_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>us</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><name>us</name></expr> ?</condition><then> <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>us</name> <operator>-</operator> <name>name</name><operator>)</operator></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"POSITION"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_type</name> <operator>=</operator> <name>cgltf_attribute_type_position</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"NORMAL"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_type</name> <operator>=</operator> <name>cgltf_attribute_type_normal</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"TANGENT"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_type</name> <operator>=</operator> <name>cgltf_attribute_type_tangent</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"TEXCOORD"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_type</name> <operator>=</operator> <name>cgltf_attribute_type_texcoord</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"COLOR"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_type</name> <operator>=</operator> <name>cgltf_attribute_type_color</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"JOINTS"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_type</name> <operator>=</operator> <name>cgltf_attribute_type_joints</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"WEIGHTS"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_type</name> <operator>=</operator> <name>cgltf_attribute_type_weights</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_type</name> <operator>=</operator> <name>cgltf_attribute_type_invalid</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>us</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>out_type</name> <operator>!=</operator> <name>cgltf_attribute_type_invalid</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_index</name> <operator>=</operator> <call><name>CGLTF_ATOI</name><argument_list>(<argument><expr><name>us</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_attribute_list</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_attribute</name><modifier>*</modifier><modifier>*</modifier></type> <name>out_attributes</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name><modifier>*</modifier></type> <name>out_attributes_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>out_attributes</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>CGLTF_ERROR_JSON</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out_attributes_count</name> <operator>=</operator> <name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_attributes</name> <operator>=</operator> <operator>(</operator><name>cgltf_attribute</name><operator>*</operator><operator>)</operator><call><name>cgltf_calloc</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_attribute</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>*</operator><name>out_attributes_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>out_attributes</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>CGLTF_ERROR_NOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>*</operator><name>out_attributes_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_string</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>out_attributes</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>CGLTF_ERROR_JSON</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cgltf_parse_attribute_type</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>out_attributes</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index><operator>.</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>out_attributes</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index><operator>.</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>out_attributes</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index><operator>.</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>out_attributes</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index><operator>.</operator><name>data</name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_accessor</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_extras</name><parameter_list>(<parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_extras</name><modifier>*</modifier></type> <name>out_extras</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>json_chunk</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_extras</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>=</operator> <name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_extras</name><operator>-&gt;</operator><name>end_offset</name></name> <operator>=</operator> <name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_primitive</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_primitive</name><modifier>*</modifier></type> <name>out_prim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_prim</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cgltf_primitive_type_triangles</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_prim</name><operator>-&gt;</operator><name>type</name></name>
<operator>=</operator> <operator>(</operator><name>cgltf_primitive_type</name><operator>)</operator>
<call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"indices"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_prim</name><operator>-&gt;</operator><name>indices</name></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_accessor</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"material"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_prim</name><operator>-&gt;</operator><name>material</name></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_material</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"attributes"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_attribute_list</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_prim</name><operator>-&gt;</operator><name>attributes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_prim</name><operator>-&gt;</operator><name>attributes_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"targets"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_morph_target</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out_prim</name><operator>-&gt;</operator><name>targets</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_prim</name><operator>-&gt;</operator><name>targets_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>out_prim</name><operator>-&gt;</operator><name>targets_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_attribute_list</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_prim</name><operator>-&gt;</operator><name>targets</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>attributes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_prim</name><operator>-&gt;</operator><name>targets</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>attributes_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_prim</name><operator>-&gt;</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_mesh</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_mesh</name><modifier>*</modifier></type> <name>out_mesh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_string</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_mesh</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"primitives"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_primitive</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out_mesh</name><operator>-&gt;</operator><name>primitives</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_mesh</name><operator>-&gt;</operator><name>primitives_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>prim_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>prim_index</name> <operator>&lt;</operator> <name><name>out_mesh</name><operator>-&gt;</operator><name>primitives_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>prim_index</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_primitive</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_mesh</name><operator>-&gt;</operator><name>primitives</name><index>[<expr><name>prim_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"weights"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out_mesh</name><operator>-&gt;</operator><name>weights</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_mesh</name><operator>-&gt;</operator><name>weights_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_float_array</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name><name>out_mesh</name><operator>-&gt;</operator><name>weights</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>out_mesh</name><operator>-&gt;</operator><name>weights_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_mesh</name><operator>-&gt;</operator><name>extras</name><operator>.</operator><name>start_offset</name></name> <operator>=</operator> <name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_mesh</name><operator>-&gt;</operator><name>extras</name><operator>.</operator><name>end_offset</name></name> <operator>=</operator> <name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>JSMN_OBJECT</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>extras_size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>extras_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"targetNames"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_string_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_mesh</name><operator>-&gt;</operator><name>target_names</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_mesh</name><operator>-&gt;</operator><name>target_names_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_meshes</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_mesh</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>meshes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>meshes_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out_data</name><operator>-&gt;</operator><name>meshes_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_mesh</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cgltf_component_type</name></type> <name>cgltf_json_to_component_type</name><parameter_list>(<parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tok</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">5120</literal></expr>:</case>
<return>return <expr><name>cgltf_component_type_r_8</name></expr>;</return>
<case>case <expr><literal type="number">5121</literal></expr>:</case>
<return>return <expr><name>cgltf_component_type_r_8u</name></expr>;</return>
<case>case <expr><literal type="number">5122</literal></expr>:</case>
<return>return <expr><name>cgltf_component_type_r_16</name></expr>;</return>
<case>case <expr><literal type="number">5123</literal></expr>:</case>
<return>return <expr><name>cgltf_component_type_r_16u</name></expr>;</return>
<case>case <expr><literal type="number">5125</literal></expr>:</case>
<return>return <expr><name>cgltf_component_type_r_32u</name></expr>;</return>
<case>case <expr><literal type="number">5126</literal></expr>:</case>
<return>return <expr><name>cgltf_component_type_r_32f</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>cgltf_component_type_invalid</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_accessor_sparse</name><parameter_list>(<parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_accessor_sparse</name><modifier>*</modifier></type> <name>out_sparse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_sparse</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"indices"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>indices_size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>indices_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"bufferView"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_sparse</name><operator>-&gt;</operator><name>indices_buffer_view</name></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_buffer_view</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"byteOffset"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_sparse</name><operator>-&gt;</operator><name>indices_byte_offset</name></name> <operator>=</operator> <call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"componentType"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_sparse</name><operator>-&gt;</operator><name>indices_component_type</name></name> <operator>=</operator> <call><name>cgltf_json_to_component_type</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_sparse</name><operator>-&gt;</operator><name>indices_extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"values"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>values_size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>values_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"bufferView"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_sparse</name><operator>-&gt;</operator><name>values_buffer_view</name></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_buffer_view</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"byteOffset"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_sparse</name><operator>-&gt;</operator><name>values_byte_offset</name></name> <operator>=</operator> <call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_sparse</name><operator>-&gt;</operator><name>values_extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_sparse</name><operator>-&gt;</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_accessor</name><parameter_list>(<parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_accessor</name><modifier>*</modifier></type> <name>out_accessor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"bufferView"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_accessor</name><operator>-&gt;</operator><name>buffer_view</name></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_buffer_view</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"byteOffset"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_accessor</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator>
<call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"componentType"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_accessor</name><operator>-&gt;</operator><name>component_type</name></name> <operator>=</operator> <call><name>cgltf_json_to_component_type</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"normalized"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_accessor</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <call><name>cgltf_json_to_bool</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_accessor</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator>
<call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"SCALAR"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_accessor</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cgltf_type_scalar</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"VEC2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_accessor</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cgltf_type_vec2</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"VEC3"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_accessor</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cgltf_type_vec3</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"VEC4"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_accessor</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cgltf_type_vec4</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"MAT2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_accessor</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cgltf_type_mat2</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"MAT3"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_accessor</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cgltf_type_mat3</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"MAT4"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_accessor</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cgltf_type_mat4</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_accessor</name><operator>-&gt;</operator><name>has_min</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_size</name> <init>= <expr><ternary><condition><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&gt;</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_float_array</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name><name>out_accessor</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><name>min_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"max"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_accessor</name><operator>-&gt;</operator><name>has_max</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_size</name> <init>= <expr><ternary><condition><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&gt;</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_float_array</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name><name>out_accessor</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><name>max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"sparse"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_accessor</name><operator>-&gt;</operator><name>is_sparse</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_accessor_sparse</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_accessor</name><operator>-&gt;</operator><name>sparse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_accessor</name><operator>-&gt;</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_texture_transform</name><parameter_list>(<parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_texture_transform</name><modifier>*</modifier></type> <name>out_texture_transform</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_float_array</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name><name>out_texture_transform</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"rotation"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_texture_transform</name><operator>-&gt;</operator><name>rotation</name></name> <operator>=</operator> <call><name>cgltf_json_to_float</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"scale"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_float_array</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name><name>out_texture_transform</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"texCoord"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_texture_transform</name><operator>-&gt;</operator><name>texcoord</name></name> <operator>=</operator> <call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_texture_view</name><parameter_list>(<parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_texture_view</name><modifier>*</modifier></type> <name>out_texture_view</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_texture_view</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cgltf_fill_float_array</name><argument_list>(<argument><expr><name><name>out_texture_view</name><operator>-&gt;</operator><name>transform</name><operator>.</operator><name>scale</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"index"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_texture_view</name><operator>-&gt;</operator><name>texture</name></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_texture</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"texCoord"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_texture_view</name><operator>-&gt;</operator><name>texcoord</name></name> <operator>=</operator> <call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"scale"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_texture_view</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <call><name>cgltf_json_to_float</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"strength"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_texture_view</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <call><name>cgltf_json_to_float</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_texture_view</name><operator>-&gt;</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extensions"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extensions_size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>extensions_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"KHR_texture_transform"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_texture_view</name><operator>-&gt;</operator><name>has_transform</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_texture_transform</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_texture_view</name><operator>-&gt;</operator><name>transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_pbr_metallic_roughness</name><parameter_list>(<parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_pbr_metallic_roughness</name><modifier>*</modifier></type> <name>out_pbr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"metallicFactor"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_pbr</name><operator>-&gt;</operator><name>metallic_factor</name></name> <operator>=</operator> 
<call><name>cgltf_json_to_float</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"roughnessFactor"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_pbr</name><operator>-&gt;</operator><name>roughness_factor</name></name> <operator>=</operator>
<call><name>cgltf_json_to_float</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"baseColorFactor"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_float_array</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name><name>out_pbr</name><operator>-&gt;</operator><name>base_color_factor</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"baseColorTexture"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_texture_view</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>out_pbr</name><operator>-&gt;</operator><name>base_color_texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"metallicRoughnessTexture"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_texture_view</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>out_pbr</name><operator>-&gt;</operator><name>metallic_roughness_texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_pbr</name><operator>-&gt;</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_pbr_specular_glossiness</name><parameter_list>(<parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_pbr_specular_glossiness</name><modifier>*</modifier></type> <name>out_pbr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"diffuseFactor"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_float_array</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name><name>out_pbr</name><operator>-&gt;</operator><name>diffuse_factor</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"specularFactor"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_float_array</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name><name>out_pbr</name><operator>-&gt;</operator><name>specular_factor</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"glossinessFactor"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_pbr</name><operator>-&gt;</operator><name>glossiness_factor</name></name> <operator>=</operator> <call><name>cgltf_json_to_float</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"diffuseTexture"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_texture_view</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_pbr</name><operator>-&gt;</operator><name>diffuse_texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"specularGlossinessTexture"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_texture_view</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_pbr</name><operator>-&gt;</operator><name>specular_glossiness_texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_image</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_image</name><modifier>*</modifier></type> <name>out_image</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> 
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"uri"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_string</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_image</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"bufferView"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_image</name><operator>-&gt;</operator><name>buffer_view</name></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_buffer_view</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"mimeType"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_string</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_image</name><operator>-&gt;</operator><name>mime_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_string</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_image</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_image</name><operator>-&gt;</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_sampler</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_sampler</name><modifier>*</modifier></type> <name>out_sampler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>options</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_sampler</name><operator>-&gt;</operator><name>wrap_s</name></name> <operator>=</operator> <literal type="number">10497</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_sampler</name><operator>-&gt;</operator><name>wrap_t</name></name> <operator>=</operator> <literal type="number">10497</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"magFilter"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_sampler</name><operator>-&gt;</operator><name>mag_filter</name></name>
<operator>=</operator> <call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"minFilter"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_sampler</name><operator>-&gt;</operator><name>min_filter</name></name>
<operator>=</operator> <call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"wrapS"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_sampler</name><operator>-&gt;</operator><name>wrap_s</name></name>
<operator>=</operator> <call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"wrapT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_sampler</name><operator>-&gt;</operator><name>wrap_t</name></name>
<operator>=</operator> <call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_sampler</name><operator>-&gt;</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_texture</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_texture</name><modifier>*</modifier></type> <name>out_texture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_string</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_texture</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"sampler"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_texture</name><operator>-&gt;</operator><name>sampler</name></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_sampler</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"source"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_texture</name><operator>-&gt;</operator><name>image</name></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_image</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_texture</name><operator>-&gt;</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_material</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_material</name><modifier>*</modifier></type> <name>out_material</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cgltf_fill_float_array</name><argument_list>(<argument><expr><name><name>out_material</name><operator>-&gt;</operator><name>pbr_metallic_roughness</name><operator>.</operator><name>base_color_factor</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_material</name><operator>-&gt;</operator><name>pbr_metallic_roughness</name><operator>.</operator><name>metallic_factor</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_material</name><operator>-&gt;</operator><name>pbr_metallic_roughness</name><operator>.</operator><name>roughness_factor</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cgltf_fill_float_array</name><argument_list>(<argument><expr><name><name>out_material</name><operator>-&gt;</operator><name>pbr_specular_glossiness</name><operator>.</operator><name>diffuse_factor</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cgltf_fill_float_array</name><argument_list>(<argument><expr><name><name>out_material</name><operator>-&gt;</operator><name>pbr_specular_glossiness</name><operator>.</operator><name>specular_factor</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_material</name><operator>-&gt;</operator><name>pbr_specular_glossiness</name><operator>.</operator><name>glossiness_factor</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_material</name><operator>-&gt;</operator><name>alpha_cutoff</name></name> <operator>=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_string</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_material</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"pbrMetallicRoughness"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_material</name><operator>-&gt;</operator><name>has_pbr_metallic_roughness</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_pbr_metallic_roughness</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_material</name><operator>-&gt;</operator><name>pbr_metallic_roughness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"emissiveFactor"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_float_array</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name><name>out_material</name><operator>-&gt;</operator><name>emissive_factor</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"normalTexture"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_texture_view</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>out_material</name><operator>-&gt;</operator><name>normal_texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"occlusionTexture"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_texture_view</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>out_material</name><operator>-&gt;</operator><name>occlusion_texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"emissiveTexture"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_texture_view</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>out_material</name><operator>-&gt;</operator><name>emissive_texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"alphaMode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"OPAQUE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_material</name><operator>-&gt;</operator><name>alpha_mode</name></name> <operator>=</operator> <name>cgltf_alpha_mode_opaque</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"MASK"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_material</name><operator>-&gt;</operator><name>alpha_mode</name></name> <operator>=</operator> <name>cgltf_alpha_mode_mask</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"BLEND"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_material</name><operator>-&gt;</operator><name>alpha_mode</name></name> <operator>=</operator> <name>cgltf_alpha_mode_blend</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"alphaCutoff"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_material</name><operator>-&gt;</operator><name>alpha_cutoff</name></name> <operator>=</operator> <call><name>cgltf_json_to_float</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"doubleSided"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_material</name><operator>-&gt;</operator><name>double_sided</name></name> <operator>=</operator>
<call><name>cgltf_json_to_bool</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_material</name><operator>-&gt;</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extensions"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extensions_size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>extensions_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"KHR_materials_pbrSpecularGlossiness"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_material</name><operator>-&gt;</operator><name>has_pbr_specular_glossiness</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_pbr_specular_glossiness</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_material</name><operator>-&gt;</operator><name>pbr_specular_glossiness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"KHR_materials_unlit"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_material</name><operator>-&gt;</operator><name>unlit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_accessors</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_accessor</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>accessors</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>accessors_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out_data</name><operator>-&gt;</operator><name>accessors_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_accessor</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>accessors</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_materials</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_material</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>materials</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>materials_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out_data</name><operator>-&gt;</operator><name>materials_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_material</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_images</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_image</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>images</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>images_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out_data</name><operator>-&gt;</operator><name>images_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_image</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>images</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_textures</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_texture</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>textures</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>textures_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out_data</name><operator>-&gt;</operator><name>textures_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_texture</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>textures</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_samplers</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_sampler</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>samplers</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>samplers_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out_data</name><operator>-&gt;</operator><name>samplers_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_sampler</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>samplers</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_buffer_view</name><parameter_list>(<parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_buffer_view</name><modifier>*</modifier></type> <name>out_buffer_view</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"buffer"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_buffer_view</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_buffer</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"byteOffset"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_buffer_view</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator>
<call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"byteLength"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_buffer_view</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator>
<call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"byteStride"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_buffer_view</name><operator>-&gt;</operator><name>stride</name></name> <operator>=</operator>
<call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"target"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">34962</literal></expr>:</case>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>cgltf_buffer_view_type_vertices</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">34963</literal></expr>:</case>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>cgltf_buffer_view_type_indices</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>cgltf_buffer_view_type_invalid</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>out_buffer_view</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <operator>(</operator><name>cgltf_buffer_view_type</name><operator>)</operator><name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_buffer_view</name><operator>-&gt;</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_buffer_views</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_buffer_view</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>buffer_views</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>buffer_views_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out_data</name><operator>-&gt;</operator><name>buffer_views_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_buffer_view</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>buffer_views</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_buffer</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_buffer</name><modifier>*</modifier></type> <name>out_buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"byteLength"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_buffer</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator>
<call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"uri"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_string</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_buffer</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_buffer</name><operator>-&gt;</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_buffers</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>buffers</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>buffers_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out_data</name><operator>-&gt;</operator><name>buffers_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_buffer</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_skin</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_skin</name><modifier>*</modifier></type> <name>out_skin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_string</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_skin</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"joints"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_node</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out_skin</name><operator>-&gt;</operator><name>joints</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_skin</name><operator>-&gt;</operator><name>joints_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>out_skin</name><operator>-&gt;</operator><name>joints_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>out_skin</name><operator>-&gt;</operator><name>joints</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_node</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"skeleton"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_PRIMITIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_skin</name><operator>-&gt;</operator><name>skeleton</name></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_node</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"inverseBindMatrices"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_PRIMITIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_skin</name><operator>-&gt;</operator><name>inverse_bind_matrices</name></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_accessor</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_skin</name><operator>-&gt;</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_skins</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_skin</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>skins</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>skins_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out_data</name><operator>-&gt;</operator><name>skins_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_skin</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>skins</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_camera</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_camera</name><modifier>*</modifier></type> <name>out_camera</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_string</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_camera</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"perspective"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_camera</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cgltf_camera_type_perspective</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"orthographic"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_camera</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cgltf_camera_type_orthographic</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"perspective"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>data_size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_camera</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cgltf_camera_type_perspective</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>data_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"aspectRatio"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_camera</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>perspective</name><operator>.</operator><name>aspect_ratio</name></name> <operator>=</operator> <call><name>cgltf_json_to_float</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"yfov"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_camera</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>perspective</name><operator>.</operator><name>yfov</name></name> <operator>=</operator> <call><name>cgltf_json_to_float</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"zfar"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_camera</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>perspective</name><operator>.</operator><name>zfar</name></name> <operator>=</operator> <call><name>cgltf_json_to_float</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"znear"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_camera</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>perspective</name><operator>.</operator><name>znear</name></name> <operator>=</operator> <call><name>cgltf_json_to_float</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_camera</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>perspective</name><operator>.</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"orthographic"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>data_size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_camera</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cgltf_camera_type_orthographic</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>data_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"xmag"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_camera</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>orthographic</name><operator>.</operator><name>xmag</name></name> <operator>=</operator> <call><name>cgltf_json_to_float</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"ymag"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_camera</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>orthographic</name><operator>.</operator><name>ymag</name></name> <operator>=</operator> <call><name>cgltf_json_to_float</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"zfar"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_camera</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>orthographic</name><operator>.</operator><name>zfar</name></name> <operator>=</operator> <call><name>cgltf_json_to_float</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"znear"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_camera</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>orthographic</name><operator>.</operator><name>znear</name></name> <operator>=</operator> <call><name>cgltf_json_to_float</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_camera</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>orthographic</name><operator>.</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_camera</name><operator>-&gt;</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_cameras</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_camera</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>cameras</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>cameras_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out_data</name><operator>-&gt;</operator><name>cameras_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_camera</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>cameras</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_light</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_light</name><modifier>*</modifier></type> <name>out_light</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_string</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_light</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"color"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_float_array</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name><name>out_light</name><operator>-&gt;</operator><name>color</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"intensity"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_light</name><operator>-&gt;</operator><name>intensity</name></name> <operator>=</operator> <call><name>cgltf_json_to_float</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"directional"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_light</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cgltf_light_type_directional</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"point"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_light</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cgltf_light_type_point</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"spot"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_light</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>cgltf_light_type_spot</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"range"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_light</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <call><name>cgltf_json_to_float</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"spot"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>data_size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>data_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"innerConeAngle"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_light</name><operator>-&gt;</operator><name>spot_inner_cone_angle</name></name> <operator>=</operator> <call><name>cgltf_json_to_float</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"outerConeAngle"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_light</name><operator>-&gt;</operator><name>spot_outer_cone_angle</name></name> <operator>=</operator> <call><name>cgltf_json_to_float</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_lights</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_light</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>lights</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>lights_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out_data</name><operator>-&gt;</operator><name>lights_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_light</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>lights</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_node</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_node</name><modifier>*</modifier></type> <name>out_node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_node</name><operator>-&gt;</operator><name>rotation</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_node</name><operator>-&gt;</operator><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_node</name><operator>-&gt;</operator><name>scale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_node</name><operator>-&gt;</operator><name>scale</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_node</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_node</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_node</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_node</name><operator>-&gt;</operator><name>matrix</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_string</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"children"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_node</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out_node</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_node</name><operator>-&gt;</operator><name>children_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>out_node</name><operator>-&gt;</operator><name>children_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>out_node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_node</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"mesh"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_PRIMITIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_node</name><operator>-&gt;</operator><name>mesh</name></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_mesh</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"skin"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_PRIMITIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_node</name><operator>-&gt;</operator><name>skin</name></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_skin</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"camera"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_PRIMITIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_node</name><operator>-&gt;</operator><name>camera</name></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_camera</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"translation"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_node</name><operator>-&gt;</operator><name>has_translation</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_float_array</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name><name>out_node</name><operator>-&gt;</operator><name>translation</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"rotation"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_node</name><operator>-&gt;</operator><name>has_rotation</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_float_array</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name><name>out_node</name><operator>-&gt;</operator><name>rotation</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"scale"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_node</name><operator>-&gt;</operator><name>has_scale</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_float_array</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name><name>out_node</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"matrix"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_node</name><operator>-&gt;</operator><name>has_matrix</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_float_array</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name><name>out_node</name><operator>-&gt;</operator><name>matrix</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"weights"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out_node</name><operator>-&gt;</operator><name>weights</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_node</name><operator>-&gt;</operator><name>weights_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_float_array</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name><name>out_node</name><operator>-&gt;</operator><name>weights</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>out_node</name><operator>-&gt;</operator><name>weights_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_node</name><operator>-&gt;</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extensions"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extensions_size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>extensions_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"KHR_lights_punctual"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>data_size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>data_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"light"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_PRIMITIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_node</name><operator>-&gt;</operator><name>light</name></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_light</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_nodes</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_node</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>nodes_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out_data</name><operator>-&gt;</operator><name>nodes_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_node</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_scene</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_scene</name><modifier>*</modifier></type> <name>out_scene</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_string</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_scene</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"nodes"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_node</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out_scene</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_scene</name><operator>-&gt;</operator><name>nodes_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>out_scene</name><operator>-&gt;</operator><name>nodes_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>out_scene</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_node</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_scene</name><operator>-&gt;</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_scenes</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_scene</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>scenes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>scenes_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out_data</name><operator>-&gt;</operator><name>scenes_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_scene</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>scenes</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_animation_sampler</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_animation_sampler</name><modifier>*</modifier></type> <name>out_sampler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>options</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"input"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_sampler</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_accessor</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"output"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_sampler</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_accessor</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"interpolation"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"LINEAR"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_sampler</name><operator>-&gt;</operator><name>interpolation</name></name> <operator>=</operator> <name>cgltf_interpolation_type_linear</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"STEP"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_sampler</name><operator>-&gt;</operator><name>interpolation</name></name> <operator>=</operator> <name>cgltf_interpolation_type_step</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"CUBICSPLINE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_sampler</name><operator>-&gt;</operator><name>interpolation</name></name> <operator>=</operator> <name>cgltf_interpolation_type_cubic_spline</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_sampler</name><operator>-&gt;</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_animation_channel</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_animation_channel</name><modifier>*</modifier></type> <name>out_channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>options</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"sampler"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_channel</name><operator>-&gt;</operator><name>sampler</name></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_animation_sampler</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"target"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>target_size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>target_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"node"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_channel</name><operator>-&gt;</operator><name>target_node</name></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_node</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"translation"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_channel</name><operator>-&gt;</operator><name>target_path</name></name> <operator>=</operator> <name>cgltf_animation_path_type_translation</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"rotation"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_channel</name><operator>-&gt;</operator><name>target_path</name></name> <operator>=</operator> <name>cgltf_animation_path_type_rotation</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"scale"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_channel</name><operator>-&gt;</operator><name>target_path</name></name> <operator>=</operator> <name>cgltf_animation_path_type_scale</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"weights"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>out_channel</name><operator>-&gt;</operator><name>target_path</name></name> <operator>=</operator> <name>cgltf_animation_path_type_weights</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_channel</name><operator>-&gt;</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_animation</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_animation</name><modifier>*</modifier></type> <name>out_animation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_string</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_animation</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"samplers"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_animation_sampler</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out_animation</name><operator>-&gt;</operator><name>samplers</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_animation</name><operator>-&gt;</operator><name>samplers_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>out_animation</name><operator>-&gt;</operator><name>samplers_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_animation_sampler</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_animation</name><operator>-&gt;</operator><name>samplers</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"channels"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_animation_channel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out_animation</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_animation</name><operator>-&gt;</operator><name>channels_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>out_animation</name><operator>-&gt;</operator><name>channels_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_animation_channel</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_animation</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_animation</name><operator>-&gt;</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_animations</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_animation</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>animations</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>animations_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>out_data</name><operator>-&gt;</operator><name>animations_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_animation</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>animations</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_asset</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_asset</name><modifier>*</modifier></type> <name>out_asset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"copyright"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_string</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_asset</name><operator>-&gt;</operator><name>copyright</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"generator"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_string</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_asset</name><operator>-&gt;</operator><name>generator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_string</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_asset</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"minVersion"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_string</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_asset</name><operator>-&gt;</operator><name>min_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_asset</name><operator>-&gt;</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>out_asset</name><operator>-&gt;</operator><name>version</name></name> <operator>&amp;&amp;</operator> <call><name>CGLTF_ATOF</name><argument_list>(<argument><expr><name><name>out_asset</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>CGLTF_ERROR_LEGACY</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cgltf_size</name></type> <name>cgltf_num_components</name><parameter_list>(<parameter><decl><type><name>cgltf_type</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>cgltf_type_vec2</name></expr>:</case>
<return>return <expr><literal type="number">2</literal></expr>;</return>
<case>case <expr><name>cgltf_type_vec3</name></expr>:</case>
<return>return <expr><literal type="number">3</literal></expr>;</return>
<case>case <expr><name>cgltf_type_vec4</name></expr>:</case>
<return>return <expr><literal type="number">4</literal></expr>;</return>
<case>case <expr><name>cgltf_type_mat2</name></expr>:</case>
<return>return <expr><literal type="number">4</literal></expr>;</return>
<case>case <expr><name>cgltf_type_mat3</name></expr>:</case>
<return>return <expr><literal type="number">9</literal></expr>;</return>
<case>case <expr><name>cgltf_type_mat4</name></expr>:</case>
<return>return <expr><literal type="number">16</literal></expr>;</return>
<case>case <expr><name>cgltf_type_invalid</name></expr>:</case>
<case>case <expr><name>cgltf_type_scalar</name></expr>:</case>
<default>default:</default>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cgltf_size</name></type> <name>cgltf_component_size</name><parameter_list>(<parameter><decl><type><name>cgltf_component_type</name></type> <name>component_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>component_type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>cgltf_component_type_r_8</name></expr>:</case>
<case>case <expr><name>cgltf_component_type_r_8u</name></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>cgltf_component_type_r_16</name></expr>:</case>
<case>case <expr><name>cgltf_component_type_r_16u</name></expr>:</case>
<return>return <expr><literal type="number">2</literal></expr>;</return>
<case>case <expr><name>cgltf_component_type_r_32u</name></expr>:</case>
<case>case <expr><name>cgltf_component_type_r_32f</name></expr>:</case>
<return>return <expr><literal type="number">4</literal></expr>;</return>
<case>case <expr><name>cgltf_component_type_invalid</name></expr>:</case>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cgltf_size</name></type> <name>cgltf_calc_size</name><parameter_list>(<parameter><decl><type><name>cgltf_type</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>cgltf_component_type</name></type> <name>component_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_size</name></type> <name>component_size</name> <init>= <expr><call><name>cgltf_component_size</name><argument_list>(<argument><expr><name>component_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>cgltf_type_mat2</name> <operator>&amp;&amp;</operator> <name>component_size</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">8</literal> <operator>*</operator> <name>component_size</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>cgltf_type_mat3</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>component_size</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>component_size</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<return>return <expr><literal type="number">12</literal> <operator>*</operator> <name>component_size</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>component_size</name> <operator>*</operator> <call><name>cgltf_num_components</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_fixup_pointers</name><parameter_list>(<parameter><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_parse_json_root</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"asset"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_asset</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>asset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"meshes"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_meshes</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name>out_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"accessors"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_accessors</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name>out_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"bufferViews"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_buffer_views</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name>out_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"buffers"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_buffers</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name>out_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"materials"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_materials</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name>out_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"images"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_images</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name>out_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"textures"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_textures</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name>out_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"samplers"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_samplers</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name>out_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"skins"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_skins</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name>out_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"cameras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_cameras</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name>out_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"nodes"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_nodes</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name>out_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"scenes"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_scenes</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name>out_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"scene"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out_data</name><operator>-&gt;</operator><name>scene</name></name> <operator>=</operator> <call><name>CGLTF_PTRINDEX</name><argument_list>(<argument><expr><name>cgltf_scene</name></expr></argument>, <argument><expr><call><name>cgltf_json_to_int</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"animations"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_animations</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name>out_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extras"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_extras</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>extras</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extensions"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extensions_size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>extensions_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"KHR_lights_punctual"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CGLTF_CHECK_TOKTYPE</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>JSMN_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>data_size</name> <init>= <expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>data_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_CHECK_KEY</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"lights"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_lights</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name>out_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extensionsUsed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_string_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>extensions_used</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>extensions_used_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>cgltf_json_strcmp</name><argument_list>(<argument><expr><name>tokens</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><literal type="string">"extensionsRequired"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_parse_json_string_array</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>extensions_required</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out_data</name><operator>-&gt;</operator><name>extensions_required_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cgltf_skip_json</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>cgltf_result</name></type> <name>cgltf_parse_json</name><parameter_list>(<parameter><decl><type><name>cgltf_options</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>json_chunk</name></decl></parameter>, <parameter><decl><type><name>cgltf_size</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>cgltf_data</name><modifier>*</modifier><modifier>*</modifier></type> <name>out_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>jsmn_parser</name></type> <name>parser</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>json_token_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>token_count</name> <init>= <expr><call><name>jsmn_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>json_chunk</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>token_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_invalid_json</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>json_token_count</name></name> <operator>=</operator> <name>token_count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>jsmntok_t</name><modifier>*</modifier></type> <name>tokens</name> <init>= <expr><operator>(</operator><name>jsmntok_t</name><operator>*</operator><operator>)</operator><call><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>jsmntok_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>options</name><operator>-&gt;</operator><name>json_token_count</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tokens</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>cgltf_result_out_of_memory</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>jsmn_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>token_count</name> <init>= <expr><call><name>jsmn_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>json_chunk</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>json_token_count</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>token_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cgltf_result_invalid_json</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>tokens</name><index>[<expr><name>token_count</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>JSMN_UNDEFINED</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><operator>(</operator><name>cgltf_data</name><operator>*</operator><operator>)</operator><call><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cgltf_result_out_of_memory</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgltf_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>memory</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>memory</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>file</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>cgltf_parse_json_root</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>json_chunk</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>memory</name><operator>.</operator><name>user_data</name></name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>cgltf_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>i</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>CGLTF_ERROR_NOMEM</name></expr>:</case> <return>return <expr><name>cgltf_result_out_of_memory</name></expr>;</return>
<case>case <expr><name>CGLTF_ERROR_LEGACY</name></expr>:</case> <return>return <expr><name>cgltf_result_legacy_gltf</name></expr>;</return>
<default>default:</default> <return>return <expr><name>cgltf_result_invalid_gltf</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cgltf_fixup_pointers</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>cgltf_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cgltf_result_invalid_gltf</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>json</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>json_chunk</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>json_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<return>return <expr><name>cgltf_result_success</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cgltf_fixup_pointers</name><parameter_list>(<parameter><decl><type><name>cgltf_data</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>primitives_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>indices</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>accessors</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>accessors_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>material</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>materials</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>materials_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>attributes_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP_REQ</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>attributes</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>accessors</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>accessors_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>targets_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>targets</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>attributes_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP_REQ</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>targets</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>attributes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>accessors</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>accessors_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>accessors_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>accessors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer_view</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffer_views</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffer_views_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>accessors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>is_sparse</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP_REQ</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>accessors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>sparse</name><operator>.</operator><name>indices_buffer_view</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffer_views</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffer_views_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP_REQ</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>accessors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>sparse</name><operator>.</operator><name>values_buffer_view</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffer_views</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffer_views_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>accessors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer_view</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>accessors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stride</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>accessors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>buffer_view</name><operator>-&gt;</operator><name>stride</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>accessors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stride</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>accessors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stride</name> <operator>=</operator> <call><name>cgltf_calc_size</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>accessors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>accessors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>component_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>textures_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>textures</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>image</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>images</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>images_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>textures</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sampler</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>samplers</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>samplers_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>images_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>images</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer_view</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffer_views</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffer_views_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>materials_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>normal_texture</name><operator>.</operator><name>texture</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>textures</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>textures_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>emissive_texture</name><operator>.</operator><name>texture</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>textures</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>textures_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>occlusion_texture</name><operator>.</operator><name>texture</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>textures</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>textures_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CGLTF_PTRFIXUP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pbr_metallic_roughness</name><operator>.</operator><name>base_color_texture</name><operator>.</operator><name>texture</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>textures</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>textures_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pbr_metallic_roughness</name><operator>.</operator><name>metallic_roughness_texture</name><operator>.</operator><name>texture</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>textures</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>textures_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CGLTF_PTRFIXUP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pbr_specular_glossiness</name><operator>.</operator><name>diffuse_texture</name><operator>.</operator><name>texture</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>textures</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>textures_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pbr_specular_glossiness</name><operator>.</operator><name>specular_glossiness_texture</name><operator>.</operator><name>texture</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>textures</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>textures_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>buffer_views_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP_REQ</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffer_views</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffers</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>buffers_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>skins_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>skins</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>joints_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP_REQ</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>skins</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>joints</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>nodes_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>CGLTF_PTRFIXUP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>skins</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>skeleton</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>nodes_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>skins</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>inverse_bind_matrices</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>accessors</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>accessors_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>nodes_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>children_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP_REQ</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>children</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>nodes_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>children</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>parent</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>CGLTF_ERROR_JSON</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>children</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>parent</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>CGLTF_PTRFIXUP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mesh</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>meshes_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>skin</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>skins</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>skins_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>camera</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>cameras</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>cameras_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>light</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>lights</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>lights_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>scenes_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>scenes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nodes_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP_REQ</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>scenes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>nodes</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>nodes_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>scenes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>nodes</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>parent</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>CGLTF_ERROR_JSON</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>CGLTF_PTRFIXUP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>scene</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>scenes</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>scenes_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>animations_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>animations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>samplers_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP_REQ</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>animations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplers</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>input</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>accessors</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>accessors_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP_REQ</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>animations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>samplers</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>output</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>accessors</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>accessors_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>cgltf_size</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>animations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>channels_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP_REQ</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>animations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channels</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sampler</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>animations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>samplers</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>animations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>samplers_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CGLTF_PTRFIXUP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>animations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channels</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>target_node</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>nodes_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






























<function><type><specifier>static</specifier> <name>jsmntok_t</name> <modifier>*</modifier></type><name>jsmn_alloc_token</name><parameter_list>(<parameter><decl><type><name>jsmn_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>jsmntok_t</name> <modifier>*</modifier></type><name>tokens</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num_tokens</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>jsmntok_t</name> <modifier>*</modifier></type><name>tok</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>toknext</name></name> <operator>&gt;=</operator> <name>num_tokens</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tok</name> <operator>=</operator> <operator>&amp;</operator><name><name>tokens</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>toknext</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>tok</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JSMN_PARENT_LINKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>tok</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>jsmn_fill_token</name><parameter_list>(<parameter><decl><type><name>jsmntok_t</name> <modifier>*</modifier></type><name>token</name></decl></parameter>, <parameter><decl><type><name>jsmntype_t</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>jsmn_parse_primitive</name><parameter_list>(<parameter><decl><type><name>jsmn_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>js</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <modifier>*</modifier></type><name>tokens</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num_tokens</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>jsmntok_t</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JSMN_STRICT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><literal type="char">':'</literal></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="char">'\t'</literal></expr> :</case> <case>case <expr><literal type="char">'\r'</literal></expr> :</case> <case>case <expr><literal type="char">'\n'</literal></expr> :</case> <case>case <expr><literal type="char">' '</literal></expr> :</case>
<case>case <expr><literal type="char">','</literal></expr> :</case> <case>case <expr><literal type="char">']'</literal></expr> :</case> <case>case <expr><literal type="char">'}'</literal></expr> :</case>
<goto>goto <name>found</name>;</goto>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">32</literal> <operator>||</operator> <name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<return>return <expr><name>JSMN_ERROR_INVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JSMN_STRICT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<return>return <expr><name>JSMN_ERROR_PART</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>found</name>:</label>
<if_stmt><if>if <condition>(<expr><name>tokens</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>jsmn_alloc_token</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>num_tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<return>return <expr><name>JSMN_ERROR_NOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>jsmn_fill_token</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>JSMN_PRIMITIVE</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JSMN_PARENT_LINKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name><operator>--</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>jsmn_parse_string</name><parameter_list>(<parameter><decl><type><name>jsmn_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>js</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <modifier>*</modifier></type><name>tokens</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num_tokens</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>jsmntok_t</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt>


<for>for <control>(<init>;</init> <condition><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\"'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tokens</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>jsmn_alloc_token</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>num_tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<return>return <expr><name>JSMN_ERROR_NOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>jsmn_fill_token</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>JSMN_STRING</name></expr></argument>, <argument><expr><name>start</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JSMN_PARENT_LINKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\"'</literal></expr>:</case> <case>case <expr><literal type="char">'/'</literal></expr> :</case> <case>case <expr><literal type="char">'\\'</literal></expr> :</case> <case>case <expr><literal type="char">'b'</literal></expr> :</case>
<case>case <expr><literal type="char">'f'</literal></expr> :</case> <case>case <expr><literal type="char">'r'</literal></expr> :</case> <case>case <expr><literal type="char">'n'</literal></expr> :</case> <case>case <expr><literal type="char">'t'</literal></expr> :</case>
<break>break;</break>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">48</literal> <operator>&amp;&amp;</operator> <name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">57</literal><operator>)</operator> <operator>||</operator> 
<operator>(</operator><name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">65</literal> <operator>&amp;&amp;</operator> <name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">70</literal><operator>)</operator> <operator>||</operator> 
<operator>(</operator><name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">97</literal> <operator>&amp;&amp;</operator> <name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">102</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<return>return <expr><name>JSMN_ERROR_INVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name><operator>--</operator></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<return>return <expr><name>JSMN_ERROR_INVAL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<return>return <expr><name>JSMN_ERROR_PART</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>jsmn_parse</name><parameter_list>(<parameter><decl><type><name>jsmn_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>js</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>jsmntok_t</name> <modifier>*</modifier></type><name>tokens</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num_tokens</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jsmntok_t</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>toknext</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jsmntype_t</name></type> <name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'{'</literal></expr>:</case> <case>case <expr><literal type="char">'['</literal></expr>:</case>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tokens</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>jsmn_alloc_token</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>num_tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>JSMN_ERROR_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tokens</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name></expr>]</index></name><operator>.</operator><name>size</name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JSMN_PARENT_LINKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="char">'{'</literal></expr> ?</condition><then> <expr><name>JSMN_OBJECT</name></expr> </then><else>: <expr><name>JSMN_ARRAY</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>toknext</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'}'</literal></expr>:</case> <case>case <expr><literal type="char">']'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>tokens</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="char">'}'</literal></expr> ?</condition><then> <expr><name>JSMN_OBJECT</name></expr> </then><else>: <expr><name>JSMN_ARRAY</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JSMN_PARENT_LINKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>toknext</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>JSMN_ERROR_INVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <operator>&amp;</operator><name><name>tokens</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>toknext</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>start</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>token</name><operator>-&gt;</operator><name>end</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>type</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>JSMN_ERROR_INVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>type</name> <operator>||</operator> <name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>JSMN_ERROR_INVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <operator>&amp;</operator><name><name>tokens</name><index>[<expr><name><name>token</name><operator>-&gt;</operator><name>parent</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>toknext</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>token</name> <operator>=</operator> <operator>&amp;</operator><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>start</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>token</name><operator>-&gt;</operator><name>end</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>type</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>JSMN_ERROR_INVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>JSMN_ERROR_INVAL</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>token</name> <operator>=</operator> <operator>&amp;</operator><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>start</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>token</name><operator>-&gt;</operator><name>end</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><literal type="char">'\"'</literal></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>jsmn_parse_string</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>js</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>num_tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>tokens</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tokens</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name></expr>]</index></name><operator>.</operator><name>size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr> :</case> <case>case <expr><literal type="char">'\r'</literal></expr> :</case> <case>case <expr><literal type="char">'\n'</literal></expr> :</case> <case>case <expr><literal type="char">' '</literal></expr>:</case>
<break>break;</break>
<case>case <expr><literal type="char">':'</literal></expr>:</case>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>toknext</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">','</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>tokens</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>tokens</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>JSMN_ARRAY</name> <operator>&amp;&amp;</operator>
<name><name>tokens</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>JSMN_OBJECT</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JSMN_PARENT_LINKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>=</operator> <name><name>tokens</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name></expr>]</index></name><operator>.</operator><name>parent</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>toknext</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>JSMN_ARRAY</name> <operator>||</operator> <name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>JSMN_OBJECT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JSMN_STRICT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><literal type="char">'-'</literal></expr>:</case> <case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr> :</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr> :</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr> :</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
<case>case <expr><literal type="char">'t'</literal></expr>:</case> <case>case <expr><literal type="char">'f'</literal></expr>:</case> <case>case <expr><literal type="char">'n'</literal></expr> :</case>

<if_stmt><if>if <condition>(<expr><name>tokens</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>jsmntok_t</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>&amp;</operator><name><name>tokens</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JSMN_OBJECT</name> <operator>||</operator>
<operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JSMN_STRING</name> <operator>&amp;&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>JSMN_ERROR_INVAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<default>default:</default>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>jsmn_parse_primitive</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>js</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>num_tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>tokens</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tokens</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name></expr>]</index></name><operator>.</operator><name>size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JSMN_STRICT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<default>default:</default>
<return>return <expr><name>JSMN_ERROR_INVAL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>tokens</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>toknext</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>JSMN_ERROR_PART</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>jsmn_init</name><parameter_list>(<parameter><decl><type><name>jsmn_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>toknext</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 























</unit>
