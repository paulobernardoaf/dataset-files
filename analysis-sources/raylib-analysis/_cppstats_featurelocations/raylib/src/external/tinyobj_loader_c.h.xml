<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\tinyobj_loader_c.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TINOBJ_LOADER_C_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TINOBJ_LOADER_C_H_</name></cpp:macro></cpp:define>




<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>ambient</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>diffuse</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>specular</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>transmittance</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>emission</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>shininess</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>ior</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>dissolve</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>illum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pad0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ambient_texname</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>diffuse_texname</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>specular_texname</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>specular_highlight_texname</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bump_texname</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>displacement_texname</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>alpha_texname</name></decl>;</decl_stmt> 
}</block></struct></type> <name>tinyobj_material_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>face_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name></decl>;</decl_stmt>
}</block></struct></type> <name>tinyobj_shape_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>int</name></type> <name>v_idx</name></decl>, <name>vt_idx</name>, <name>vn_idx</name>;</decl_stmt> }</block></struct></type> <name>tinyobj_vertex_index_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_vertices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_normals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_texcoords</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_faces</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_face_num_verts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pad0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>vertices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>normals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>texcoords</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tinyobj_vertex_index_t</name> <modifier>*</modifier></type><name>faces</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>face_num_verts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>material_ids</name></decl>;</decl_stmt>
}</block></struct></type> <name>tinyobj_attrib_t</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TINYOBJ_FLAG_TRIANGULATE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TINYOBJ_INVALID_INDEX</name></cpp:macro> <cpp:value>(0x80000000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TINYOBJ_SUCCESS</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TINYOBJ_ERROR_EMPTY</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TINYOBJ_ERROR_INVALID_PARAMETER</name></cpp:macro> <cpp:value>(-2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TINYOBJ_ERROR_FILE_OPERATION</name></cpp:macro> <cpp:value>(-3)</cpp:value></cpp:define>






<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>tinyobj_parse_obj</name><parameter_list>(<parameter><decl><type><name>tinyobj_attrib_t</name> <modifier>*</modifier></type><name>attrib</name></decl></parameter>, <parameter><decl><type><name>tinyobj_shape_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>shapes</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>num_shapes</name></decl></parameter>, <parameter><decl><type><name>tinyobj_material_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>materials</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>num_materials</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>tinyobj_parse_mtl_file</name><parameter_list>(<parameter><decl><type><name>tinyobj_material_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>materials_out</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>num_materials_out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>tinyobj_attrib_init</name><parameter_list>(<parameter><decl><type><name>tinyobj_attrib_t</name> <modifier>*</modifier></type><name>attrib</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>tinyobj_attrib_free</name><parameter_list>(<parameter><decl><type><name>tinyobj_attrib_t</name> <modifier>*</modifier></type><name>attrib</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>tinyobj_shapes_free</name><parameter_list>(<parameter><decl><type><name>tinyobj_shape_t</name> <modifier>*</modifier></type><name>shapes</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>num_shapes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>tinyobj_materials_free</name><parameter_list>(<parameter><decl><type><name>tinyobj_material_t</name> <modifier>*</modifier></type><name>materials</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>num_materials</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TINYOBJ_LOADER_C_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TINYOBJ_MALLOC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>TINYOBJ_REALLOC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>TINYOBJ_CALLOC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>TINYOBJ_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TINYOBJ_MALLOC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TINYOBJ_REALLOC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TINYOBJ_CALLOC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TINYOBJ_FREE</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Must define all or none of TINYOBJ_MALLOC, TINYOBJ_REALLOC, TINYOBJ_CALLOC and TINYOBJ_FREE."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TINYOBJ_MALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TINYOBJ_MALLOC</name></cpp:macro> <cpp:value>malloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TINYOBJ_REALLOC</name></cpp:macro> <cpp:value>realloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TINYOBJ_CALLOC</name></cpp:macro> <cpp:value>calloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TINYOBJ_FREE</name></cpp:macro> <cpp:value>free</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TINYOBJ_MAX_FACES_PER_F_LINE</name></cpp:macro> <cpp:value>(16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SPACE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) == ' ') || ((x) == '\t'))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_DIGIT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned int)((x) - '0') &lt; (unsigned int)(10))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_NEW_LINE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) == '\r') || ((x) == '\n') || ((x) == '\0'))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>skip_space</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>skip_space_and_cr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>until_space</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>token</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>token</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>length_until_newline</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>token</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>token</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>len</name> <operator>&lt;</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>token</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>length_until_line_feed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>token</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>token</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>token</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>my_atoi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>(</operator><operator>*</operator><name>c</name><operator>)</operator> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>c</name><operator>)</operator> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>value</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>value</name> <operator>*</operator> <name>sign</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>fixIndex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>n</name> <operator>+</operator> <name>idx</name></expr>;</return> 
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>tinyobj_vertex_index_t</name></type> <name>parseRawTriple</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>tinyobj_vertex_index_t</name></type> <name>vi</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vi</name><operator>.</operator><name>v_idx</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">0x80000000</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vi</name><operator>.</operator><name>vn_idx</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">0x80000000</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vi</name><operator>.</operator><name>vt_idx</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">0x80000000</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vi</name><operator>.</operator><name>v_idx</name></name> <operator>=</operator> <call><name>my_atoi</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>vi</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vi</name><operator>.</operator><name>vn_idx</name></name> <operator>=</operator> <call><name>my_atoi</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>vi</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>vi</name><operator>.</operator><name>vt_idx</name></name> <operator>=</operator> <call><name>my_atoi</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>vi</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>vi</name><operator>.</operator><name>vn_idx</name></name> <operator>=</operator> <call><name>my_atoi</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>vi</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parseInt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>skip_space</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>my_atoi</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator> <operator>+=</operator> <call><name>until_space</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>





























<function><type><specifier>static</specifier> <name>int</name></type> <name>tryParseDouble</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s_end</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>mantissa</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>








<decl_stmt><decl><type><name>int</name></type> <name>exponent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>char</name></type> <name>sign</name> <init>= <expr><literal type="char">'+'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>exp_sign</name> <init>= <expr><literal type="char">'+'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>curr</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_not_reached</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;=</operator> <name>s_end</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>curr</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>*</operator><name>curr</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>*</operator><name>curr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_DIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>curr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
</block_content>}</block></if> <else>else <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>end_not_reached</name> <operator>=</operator> <operator>(</operator><name>curr</name> <operator>!=</operator> <name>s_end</name><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>end_not_reached</name> <operator>&amp;&amp;</operator> <call><name>IS_DIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>curr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mantissa</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mantissa</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>curr</name> <operator>-</operator> <literal type="number">0x30</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>curr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>read</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>end_not_reached</name> <operator>=</operator> <operator>(</operator><name>curr</name> <operator>!=</operator> <name>s_end</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>read</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>end_not_reached</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>assemble</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>curr</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>curr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>read</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>end_not_reached</name> <operator>=</operator> <operator>(</operator><name>curr</name> <operator>!=</operator> <name>s_end</name><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>end_not_reached</name> <operator>&amp;&amp;</operator> <call><name>IS_DIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>curr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>frac_value</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>f</name> <operator>&lt;</operator> <name>read</name></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>frac_value</name> <operator>*=</operator> <literal type="number">0.1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>mantissa</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>curr</name> <operator>-</operator> <literal type="number">0x30</literal><operator>)</operator> <operator>*</operator> <name>frac_value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>read</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>curr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>end_not_reached</name> <operator>=</operator> <operator>(</operator><name>curr</name> <operator>!=</operator> <name>s_end</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>curr</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <operator>*</operator><name>curr</name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition> <block>{<block_content>
</block_content>}</block></if> <else>else <block>{<block_content>
<goto>goto <name>assemble</name>;</goto>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>end_not_reached</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>assemble</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>curr</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <operator>*</operator><name>curr</name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>curr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>end_not_reached</name> <operator>=</operator> <operator>(</operator><name>curr</name> <operator>!=</operator> <name>s_end</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end_not_reached</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>curr</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>*</operator><name>curr</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>exp_sign</name> <operator>=</operator> <operator>*</operator><name>curr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_DIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>curr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
</block_content>}</block></if> <else>else <block>{<block_content>

<goto>goto <name>fail</name>;</goto>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>read</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>end_not_reached</name> <operator>=</operator> <operator>(</operator><name>curr</name> <operator>!=</operator> <name>s_end</name><operator>)</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>end_not_reached</name> <operator>&amp;&amp;</operator> <call><name>IS_DIGIT</name><argument_list>(<argument><expr><operator>*</operator><name>curr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>exponent</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exponent</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>curr</name> <operator>-</operator> <literal type="number">0x30</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>curr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>read</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>end_not_reached</name> <operator>=</operator> <operator>(</operator><name>curr</name> <operator>!=</operator> <name>s_end</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>read</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>assemble</name> :</label>

<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>a</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>double</name></type> <name>b</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>exponent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name> <operator>*</operator> <literal type="number">5.0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>exponent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name> <operator>*</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>exp_sign</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator>


<operator>(</operator><ternary><condition><expr><name>sign</name> <operator>==</operator> <literal type="char">'+'</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <operator>(</operator><name>mantissa</name> <operator>*</operator> <name>a</name> <operator>*</operator> <name>b</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><literal type="number">1</literal></expr>;</return>
<label><name>fail</name>:</label>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>parseFloat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>val</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>skip_space</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>token</name><operator>)</operator> <operator>+</operator> <call><name>until_space</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tryParseDouble</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>token</name><operator>)</operator> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parseFloat2</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>x</name><operator>)</operator> <operator>=</operator> <call><name>parseFloat</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>y</name><operator>)</operator> <operator>=</operator> <call><name>parseFloat</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parseFloat3</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>x</name><operator>)</operator> <operator>=</operator> <call><name>parseFloat</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>y</name><operator>)</operator> <operator>=</operator> <call><name>parseFloat</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>z</name><operator>)</operator> <operator>=</operator> <call><name>parseFloat</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>my_strnlen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>memchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>s</name><operator>)</operator></expr> </then><else>: <expr><name>n</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>my_strdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>max_length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>length_until_line_feed</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>max_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>TINYOBJ_MALLOC</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>len</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>d</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>my_strndup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>slen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>my_strnlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>TINYOBJ_MALLOC</name><argument_list>(<argument><expr><name>slen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>d</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>slen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>d</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>dynamic_fgets</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>old_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>fgets</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>size</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <call><name>strchr</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>old_size</name> <operator>=</operator> <operator>*</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>TINYOBJ_REALLOC</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><index>[<expr><name>old_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fgets</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>old_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>strchr</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>;</do>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>initMaterial</name><parameter_list>(<parameter><decl><type><name>tinyobj_material_t</name> <modifier>*</modifier></type><name>material</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>material</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>-&gt;</operator><name>ambient_texname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>-&gt;</operator><name>diffuse_texname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>-&gt;</operator><name>specular_texname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>-&gt;</operator><name>specular_highlight_texname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>-&gt;</operator><name>bump_texname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>-&gt;</operator><name>displacement_texname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>-&gt;</operator><name>alpha_texname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>material</name><operator>-&gt;</operator><name>ambient</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>-&gt;</operator><name>diffuse</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>-&gt;</operator><name>specular</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>-&gt;</operator><name>transmittance</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>-&gt;</operator><name>emission</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.f</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>material</name><operator>-&gt;</operator><name>illum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>-&gt;</operator><name>dissolve</name></name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>-&gt;</operator><name>shininess</name></name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>-&gt;</operator><name>ior</name></name> <operator>=</operator> <literal type="number">1.f</literal></expr>;</expr_stmt>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_TABLE_ERROR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_TABLE_SUCCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_TABLE_DEFAULT_SIZE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>hash_table_entry_t</name>
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pad0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hash_table_entry_t</name></name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>hash_table_entry_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name><modifier>*</modifier></type> <name>hashes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hash_table_entry_t</name><modifier>*</modifier></type> <name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>capacity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl>;</decl_stmt>
}</block></struct></type> <name>hash_table_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>hash_djb2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>hash</name> <init>= <expr><literal type="number">5381</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>str</name><operator>++</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>hash</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <name>hash</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><name>c</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>create_hash_table</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>start_capacity</name></decl></parameter>, <parameter><decl><type><name>hash_table_t</name><modifier>*</modifier></type> <name>hash_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>start_capacity</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>start_capacity</name> <operator>=</operator> <name>HASH_TABLE_DEFAULT_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hash_table</name><operator>-&gt;</operator><name>hashes</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>*</operator><operator>)</operator> <call><name>TINYOBJ_MALLOC</name><argument_list>(<argument><expr><name>start_capacity</name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hash_table</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <operator>(</operator><name>hash_table_entry_t</name><operator>*</operator><operator>)</operator> <call><name>TINYOBJ_CALLOC</name><argument_list>(<argument><expr><name>start_capacity</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash_table_entry_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hash_table</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>start_capacity</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hash_table</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy_hash_table</name><parameter_list>(<parameter><decl><type><name>hash_table_t</name><modifier>*</modifier></type> <name>hash_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name><name>hash_table</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name><name>hash_table</name><operator>-&gt;</operator><name>hashes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>hash_table_insert_value</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>hash_table_t</name><modifier>*</modifier></type> <name>hash_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>start_index</name> <init>= <expr><name>hash</name> <operator>%</operator> <name><name>hash_table</name><operator>-&gt;</operator><name>capacity</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name> <init>= <expr><name>start_index</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hash_table_entry_t</name><modifier>*</modifier></type> <name>start_entry</name> <init>= <expr><name><name>hash_table</name><operator>-&gt;</operator><name>entries</name></name> <operator>+</operator> <name>start_index</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hash_table_entry_t</name><modifier>*</modifier></type> <name>entry</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>hash_table</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>filled</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>hash_table</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>HASH_TABLE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><name>start_index</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <name>i</name><operator>)</operator><operator>)</operator> <operator>%</operator> <name><name>hash_table</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</expr_stmt> 
</block_content>}</block></for>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>hash_table</name><operator>-&gt;</operator><name>entries</name></name> <operator>+</operator> <name>index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>filled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <name>start_index</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>start_entry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>start_entry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>HASH_TABLE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hash_table_insert</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>hash_table_t</name><modifier>*</modifier></type> <name>hash_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>hash_table_insert_value</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>hash_table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>HASH_TABLE_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hash_table</name><operator>-&gt;</operator><name>hashes</name><index>[<expr><name><name>hash_table</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hash_table</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>hash_table_entry_t</name><modifier>*</modifier></type> <name>hash_table_find</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>hash_table_t</name><modifier>*</modifier></type> <name>hash_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hash_table_entry_t</name><modifier>*</modifier></type> <name>entry</name> <init>= <expr><name><name>hash_table</name><operator>-&gt;</operator><name>entries</name></name> <operator>+</operator> <operator>(</operator><name>hash</name> <operator>%</operator> <name><name>hash_table</name><operator>-&gt;</operator><name>capacity</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>entry</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>hash</name></name> <operator>==</operator> <name>hash</name> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>filled</name></name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hash_table_maybe_grow</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>new_n</name></decl></parameter>, <parameter><decl><type><name>hash_table_t</name><modifier>*</modifier></type> <name>hash_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>new_capacity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hash_table_t</name></type> <name>new_hash_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_n</name> <operator>&lt;=</operator> <name><name>hash_table</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>new_capacity</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>hash_table</name><operator>-&gt;</operator><name>capacity</name></name><operator>)</operator> <operator>&gt;</operator> <name>new_n</name></expr> ?</condition><then> <expr><name><name>hash_table</name><operator>-&gt;</operator><name>capacity</name></name></expr> </then><else>: <expr><name>new_n</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_hash_table</name><operator>.</operator><name>hashes</name></name> <operator>=</operator> <name><name>hash_table</name><operator>-&gt;</operator><name>hashes</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>*</operator><operator>)</operator> <call><name>TINYOBJ_REALLOC</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>hash_table</name><operator>-&gt;</operator><name>hashes</name></name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>*</operator> <name>new_capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_hash_table</name><operator>.</operator><name>entries</name></name> <operator>=</operator> <operator>(</operator><name>hash_table_entry_t</name><operator>*</operator><operator>)</operator> <call><name>TINYOBJ_CALLOC</name><argument_list>(<argument><expr><name>new_capacity</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash_table_entry_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_hash_table</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name>new_capacity</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_hash_table</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name><name>hash_table</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hash_table</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>hash_table_entry_t</name><modifier>*</modifier></type> <name>entry</name> <init>= <expr><call><name>hash_table_find</name><argument_list>(<argument><expr><name><name>hash_table</name><operator>-&gt;</operator><name>hashes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>hash_table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>hash_table_insert_value</name><argument_list>(<argument><expr><name><name>hash_table</name><operator>-&gt;</operator><name>hashes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_hash_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name><name>hash_table</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>hash_table</name><operator>)</operator> <operator>=</operator> <name>new_hash_table</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hash_table_exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>hash_table_t</name><modifier>*</modifier></type> <name>hash_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>hash_table_find</name><argument_list>(<argument><expr><call><name>hash_djb2</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hash_table</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hash_table_set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>hash_table_t</name><modifier>*</modifier></type> <name>hash_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>hash</name> <init>= <expr><call><name>hash_djb2</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hash_table_entry_t</name><modifier>*</modifier></type> <name>entry</name> <init>= <expr><call><name>hash_table_find</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hash_table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>val</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<do>do
<block>{<block_content>
<expr_stmt><expr><call><name>hash_table_maybe_grow</name><argument_list>(<argument><expr><name><name>hash_table</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>hash_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
while <condition>(<expr><call><name>hash_table_insert</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>val</name></expr></argument>, <argument><expr><name>hash_table</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HASH_TABLE_SUCCESS</name></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type> <name>hash_table_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>hash_table_t</name><modifier>*</modifier></type> <name>hash_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>hash_table_entry_t</name><modifier>*</modifier></type> <name>ret</name> <init>= <expr><call><name>hash_table_find</name><argument_list>(<argument><expr><call><name>hash_djb2</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name>name</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hash_table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>ret</name><operator>-&gt;</operator><name>value</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tinyobj_material_t</name> <modifier>*</modifier></type><name>tinyobj_material_add</name><parameter_list>(<parameter><decl><type><name>tinyobj_material_t</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>num_materials</name></decl></parameter>,
<parameter><decl><type><name>tinyobj_material_t</name> <modifier>*</modifier></type><name>new_mat</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>tinyobj_material_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>tinyobj_material_t</name> <operator>*</operator><operator>)</operator><call><name>TINYOBJ_REALLOC</name><argument_list>(
<argument><expr><name>prev</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tinyobj_material_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>num_materials</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>num_materials</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>new_mat</name><operator>)</operator></expr>;</expr_stmt> 
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tinyobj_parse_and_index_mtl_file</name><parameter_list>(<parameter><decl><type><name>tinyobj_material_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>materials_out</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>num_materials_out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><name>hash_table_t</name><modifier>*</modifier></type> <name>material_table</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>tinyobj_material_t</name></type> <name>material</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buffer_size</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>linebuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_materials</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tinyobj_material_t</name> <modifier>*</modifier></type><name>materials</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_previous_material</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line_end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>materials_out</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>TINYOBJ_ERROR_INVALID_PARAMETER</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_materials_out</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>TINYOBJ_ERROR_INVALID_PARAMETER</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>materials_out</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>num_materials_out</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>TINYOBJ_ERROR_FILE_OPERATION</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>initMaterial</name><argument_list>(<argument><expr><operator>&amp;</operator><name>material</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>linebuf</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>TINYOBJ_MALLOC</name><argument_list>(<argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <call><name>dynamic_fgets</name><argument_list>(<argument><expr><operator>&amp;</operator><name>linebuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer_size</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>token</name> <init>= <expr><name>linebuf</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>line_end</name> <operator>=</operator> <name>token</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>token</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt> 


<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"newmtl"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><operator>(</operator><name><name>token</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>namebuf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>has_previous_material</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>materials</name> <operator>=</operator> <call><name>tinyobj_material_add</name><argument_list>(<argument><expr><name>materials</name></expr></argument>, <argument><expr><name>num_materials</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>material</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num_materials</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>has_previous_material</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>initMaterial</name><argument_list>(<argument><expr><operator>&amp;</operator><name>material</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>sscanf_s</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>namebuf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>_countof</name><argument_list>(<argument><expr><name>namebuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>namebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>my_strdup</name><argument_list>(<argument><expr><name>namebuf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><name>line_end</name> <operator>-</operator> <name>token</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>material_table</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hash_table_set</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>num_materials</name></expr></argument>, <argument><expr><name>material_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'K'</literal> <operator>&amp;&amp;</operator> <name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><operator>(</operator><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parseFloat3</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>ambient</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>ambient</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>ambient</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'K'</literal> <operator>&amp;&amp;</operator> <name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><operator>(</operator><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parseFloat3</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>diffuse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>diffuse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>diffuse</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'K'</literal> <operator>&amp;&amp;</operator> <name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><operator>(</operator><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parseFloat3</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>specular</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>specular</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>specular</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'K'</literal> <operator>&amp;&amp;</operator> <name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><operator>(</operator><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parseFloat3</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>transmittance</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>transmittance</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>transmittance</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'N'</literal> <operator>&amp;&amp;</operator> <name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><operator>(</operator><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>ior</name></name> <operator>=</operator> <call><name>parseFloat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'K'</literal> <operator>&amp;&amp;</operator> <name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'e'</literal> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parseFloat3</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>emission</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>emission</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>emission</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'N'</literal> <operator>&amp;&amp;</operator> <name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>shininess</name></name> <operator>=</operator> <call><name>parseFloat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"illum"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>illum</name></name> <operator>=</operator> <call><name>parseInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>dissolve</name></name> <operator>=</operator> <call><name>parseFloat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'T'</literal> <operator>&amp;&amp;</operator> <name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'r'</literal> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>material</name><operator>.</operator><name>dissolve</name></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>-</operator> <call><name>parseFloat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"map_Ka"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>ambient_texname</name></name> <operator>=</operator> <call><name>my_strdup</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><name>line_end</name> <operator>-</operator> <name>token</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"map_Kd"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>diffuse_texname</name></name> <operator>=</operator> <call><name>my_strdup</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><name>line_end</name> <operator>-</operator> <name>token</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"map_Ks"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>specular_texname</name></name> <operator>=</operator> <call><name>my_strdup</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><name>line_end</name> <operator>-</operator> <name>token</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"map_Ns"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>specular_highlight_texname</name></name> <operator>=</operator> <call><name>my_strdup</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><name>line_end</name> <operator>-</operator> <name>token</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"map_bump"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>bump_texname</name></name> <operator>=</operator> <call><name>my_strdup</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><name>line_end</name> <operator>-</operator> <name>token</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"map_d"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>alpha_texname</name></name> <operator>=</operator> <call><name>my_strdup</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><name>line_end</name> <operator>-</operator> <name>token</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"bump"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>bump_texname</name></name> <operator>=</operator> <call><name>my_strdup</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><name>line_end</name> <operator>-</operator> <name>token</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"disp"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>displacement_texname</name></name> <operator>=</operator> <call><name>my_strdup</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><name>line_end</name> <operator>-</operator> <name>token</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>material</name><operator>.</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>materials</name> <operator>=</operator> <call><name>tinyobj_material_add</name><argument_list>(<argument><expr><name>materials</name></expr></argument>, <argument><expr><name>num_materials</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>material</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num_materials</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>num_materials_out</name><operator>)</operator> <operator>=</operator> <name>num_materials</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>materials_out</name><operator>)</operator> <operator>=</operator> <name>materials</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>linebuf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>TINYOBJ_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tinyobj_parse_mtl_file</name><parameter_list>(<parameter><decl><type><name>tinyobj_material_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>materials_out</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>num_materials_out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>tinyobj_parse_and_index_mtl_file</name><argument_list>(<argument><expr><name>materials_out</name></expr></argument>, <argument><expr><name>num_materials_out</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function> 


<typedef>typedef <type><enum>enum <block>{
<decl><name>COMMAND_EMPTY</name></decl>,
<decl><name>COMMAND_V</name></decl>,
<decl><name>COMMAND_VN</name></decl>,
<decl><name>COMMAND_VT</name></decl>,
<decl><name>COMMAND_F</name></decl>,
<decl><name>COMMAND_G</name></decl>,
<decl><name>COMMAND_O</name></decl>,
<decl><name>COMMAND_USEMTL</name></decl>,
<decl><name>COMMAND_MTLLIB</name></decl>

}</block></enum></type> <name>CommandType</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>float</name></type> <name>vx</name></decl>, <name>vy</name>, <name>vz</name>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>nx</name></decl>, <name>ny</name>, <name>nz</name>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tx</name></decl>, <name>ty</name>;</decl_stmt>


<decl_stmt><decl><type><name>tinyobj_vertex_index_t</name></type> <name><name>f</name><index>[<expr><name>TINYOBJ_MAX_FACES_PER_F_LINE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>f_num_verts</name><index>[<expr><name>TINYOBJ_MAX_FACES_PER_F_LINE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_f_num_verts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>group_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>group_name_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pad0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>object_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>object_name_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pad1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>material_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>material_name_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pad2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mtllib_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mtllib_name_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CommandType</name></type> <name>type</name></decl>;</decl_stmt>
}</block></struct></type> <name>Command</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parseLine</name><parameter_list>(<parameter><decl><type><name>Command</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>p_len</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>triangulate</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>linebuf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_len</name> <operator>&lt;</operator> <literal type="number">4095</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>linebuf</name><index>[<expr><name>p_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <name>linebuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>COMMAND_EMPTY</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>skip_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'v'</literal> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><operator>(</operator><name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parseFloat3</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>vx</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>vy</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>vz</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>COMMAND_V</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'v'</literal> <operator>&amp;&amp;</operator> <name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><operator>(</operator><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parseFloat3</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>nx</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>ny</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>nz</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>COMMAND_VN</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'v'</literal> <operator>&amp;&amp;</operator> <name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><operator>(</operator><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parseFloat2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>tx</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>ty</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>COMMAND_VT</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><operator>(</operator><name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tinyobj_vertex_index_t</name></type> <name><name>f</name><index>[<expr><name>TINYOBJ_MAX_FACES_PER_F_LINE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>IS_NEW_LINE</name><argument_list>(<argument><expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>tinyobj_vertex_index_t</name></type> <name>vi</name> <init>= <expr><call><name>parseRawTriple</name><argument_list>(<argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>skip_space_and_cr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><index>[<expr><name>num_f</name></expr>]</index></name> <operator>=</operator> <name>vi</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_f</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>COMMAND_F</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>triangulate</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tinyobj_vertex_index_t</name></type> <name>i0</name> <init>= <expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tinyobj_vertex_index_t</name></type> <name>i1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tinyobj_vertex_index_t</name></type> <name>i2</name> <init>= <expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <name>num_f</name> <operator>&lt;</operator> <name>TINYOBJ_MAX_FACES_PER_F_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>num_f</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>i1</name> <operator>=</operator> <name>i2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i2</name> <operator>=</operator> <name><name>f</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>f</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>f</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>f</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>i2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>f_num_verts</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>num_f</name></name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>num_f_num_verts</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>num_f</name> <operator>&lt;</operator> <name>TINYOBJ_MAX_FACES_PER_F_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>num_f</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>f</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>f</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>num_f</name></name> <operator>=</operator> <name>num_f</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>f_num_verts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>num_f</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>num_f_num_verts</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"usemtl"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><operator>(</operator><name><name>token</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>material_name</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <operator>(</operator><name>token</name> <operator>-</operator> <name>linebuf</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>material_name_len</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>length_until_newline</name><argument_list>(
<argument><expr><name>token</name></expr></argument>, <argument><expr><operator>(</operator><name>p_len</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>token</name> <operator>-</operator> <name>linebuf</name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>COMMAND_USEMTL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"mtllib"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><operator>(</operator><name><name>token</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>mtllib_name</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <operator>(</operator><name>token</name> <operator>-</operator> <name>linebuf</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>mtllib_name_len</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>length_until_newline</name><argument_list>(
<argument><expr><name>token</name></expr></argument>, <argument><expr><name>p_len</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>token</name> <operator>-</operator> <name>linebuf</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator>
<literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>COMMAND_MTLLIB</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'g'</literal> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><operator>(</operator><name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>group_name</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <operator>(</operator><name>token</name> <operator>-</operator> <name>linebuf</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>group_name_len</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>length_until_newline</name><argument_list>(
<argument><expr><name>token</name></expr></argument>, <argument><expr><name>p_len</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>token</name> <operator>-</operator> <name>linebuf</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator>
<literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>COMMAND_G</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'o'</literal> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><operator>(</operator><name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>token</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>object_name</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <operator>(</operator><name>token</name> <operator>-</operator> <name>linebuf</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>object_name_len</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>length_until_newline</name><argument_list>(
<argument><expr><name>token</name></expr></argument>, <argument><expr><name>p_len</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>token</name> <operator>-</operator> <name>linebuf</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator>
<literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>COMMAND_O</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl>;</decl_stmt>
}</block></struct></type> <name>LineInfo</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_line_ending</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>end_i</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>end_i</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tinyobj_parse_obj</name><parameter_list>(<parameter><decl><type><name>tinyobj_attrib_t</name> <modifier>*</modifier></type><name>attrib</name></decl></parameter>, <parameter><decl><type><name>tinyobj_shape_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>shapes</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>num_shapes</name></decl></parameter>, <parameter><decl><type><name>tinyobj_material_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>materials_out</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>num_materials_out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LineInfo</name> <modifier>*</modifier></type><name>line_infos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Command</name> <modifier>*</modifier></type><name>commands</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_lines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_vn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_vt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_faces</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mtllib_line_index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tinyobj_material_t</name> <modifier>*</modifier></type><name>materials</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_materials</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hash_table_t</name></type> <name>material_table</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TINYOBJ_ERROR_INVALID_PARAMETER</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>attrib</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TINYOBJ_ERROR_INVALID_PARAMETER</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>shapes</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TINYOBJ_ERROR_INVALID_PARAMETER</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>num_shapes</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TINYOBJ_ERROR_INVALID_PARAMETER</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TINYOBJ_ERROR_INVALID_PARAMETER</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>materials_out</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TINYOBJ_ERROR_INVALID_PARAMETER</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>num_materials_out</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TINYOBJ_ERROR_INVALID_PARAMETER</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>tinyobj_attrib_init</name><argument_list>(<argument><expr><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>end_idx</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>prev_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>line_no</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>last_line_ending</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end_idx</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_line_ending</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>end_idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_lines</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>last_line_ending</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><name>end_idx</name> <operator>-</operator> <name>last_line_ending</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_lines</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_lines</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TINYOBJ_ERROR_EMPTY</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line_infos</name> <operator>=</operator> <operator>(</operator><name>LineInfo</name> <operator>*</operator><operator>)</operator><call><name>TINYOBJ_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LineInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end_idx</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_line_ending</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>end_idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>line_infos</name><index>[<expr><name>line_no</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>prev_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line_infos</name><index>[<expr><name>line_no</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>i</name> <operator>-</operator> <name>prev_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_pos</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>line_no</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>end_idx</name> <operator>-</operator> <name>last_line_ending</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>line_infos</name><index>[<expr><name>line_no</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>=</operator> <name>prev_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line_infos</name><index>[<expr><name>line_no</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>end_idx</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>last_line_ending</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><name>commands</name> <operator>=</operator> <operator>(</operator><name>Command</name> <operator>*</operator><operator>)</operator><call><name>TINYOBJ_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Command</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>create_hash_table</name><argument_list>(<argument><expr><name>HASH_TABLE_DEFAULT_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>material_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_lines</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>parseLine</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name><name>line_infos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>line_infos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <name>TINYOBJ_FLAG_TRIANGULATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>COMMAND_V</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_v</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>COMMAND_VN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_vn</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>COMMAND_VT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_vt</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>COMMAND_F</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_f</name> <operator>+=</operator> <name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_f</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_faces</name> <operator>+=</operator> <name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_f_num_verts</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>COMMAND_MTLLIB</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mtllib_line_index</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>


<if_stmt><if>if <condition>(<expr><name>line_infos</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name>line_infos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>mtllib_line_index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>commands</name><index>[<expr><name>mtllib_line_index</name></expr>]</index></name><operator>.</operator><name>mtllib_name</name> <operator>&amp;&amp;</operator>
<name><name>commands</name><index>[<expr><name>mtllib_line_index</name></expr>]</index></name><operator>.</operator><name>mtllib_name_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><call><name>my_strndup</name><argument_list>(<argument><expr><name><name>commands</name><index>[<expr><name>mtllib_line_index</name></expr>]</index></name><operator>.</operator><name>mtllib_name</name></expr></argument>,
<argument><expr><name><name>commands</name><index>[<expr><name>mtllib_line_index</name></expr>]</index></name><operator>.</operator><name>mtllib_name_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>tinyobj_parse_and_index_mtl_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>materials</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_materials</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>material_table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TINYOBJ_SUCCESS</name></expr>)</condition> <block>{<block_content>


</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>



<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>v_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>t_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>f_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>face_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>material_id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>vertices</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>TINYOBJ_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_v</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>num_vertices</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>num_v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>normals</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>TINYOBJ_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_vn</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>num_normals</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>num_vn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>texcoords</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>TINYOBJ_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_vt</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>num_texcoords</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>num_vt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>faces</name></name> <operator>=</operator> <operator>(</operator><name>tinyobj_vertex_index_t</name> <operator>*</operator><operator>)</operator><call><name>TINYOBJ_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tinyobj_vertex_index_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>face_num_verts</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>TINYOBJ_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_faces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>num_faces</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>num_faces</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>num_face_num_verts</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>num_f</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>material_ids</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>TINYOBJ_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_faces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_lines</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>COMMAND_EMPTY</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>COMMAND_USEMTL</name></expr>)</condition> <block>{<block_content>














<if_stmt><if>if <condition>(<expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>material_name</name> <operator>&amp;&amp;</operator>
<name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>material_name_len</name> <operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> 
<block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>material_name_null_term</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>TINYOBJ_MALLOC</name><argument_list>(<argument><expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>material_name_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>material_name_null_term</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>)</operator> <name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>material_name</name></expr></argument>, <argument><expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>material_name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material_name_null_term</name><index>[<expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>material_name_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hash_table_exists</name><argument_list>(<argument><expr><name>material_name_null_term</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>material_table</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>material_id</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>hash_table_get</name><argument_list>(<argument><expr><name>material_name_null_term</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>material_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>material_id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name>material_name_null_term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>COMMAND_V</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>vertices</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>v_count</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>vertices</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>v_count</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>vertices</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>v_count</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>COMMAND_VN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>normals</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>n_count</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>normals</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>n_count</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ny</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>normals</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>n_count</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>COMMAND_VT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>texcoords</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>t_count</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>texcoords</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>t_count</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ty</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>COMMAND_F</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_f</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>tinyobj_vertex_index_t</name></type> <name>vi</name> <init>= <expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v_idx</name> <init>= <expr><call><name>fixIndex</name><argument_list>(<argument><expr><name><name>vi</name><operator>.</operator><name>v_idx</name></name></expr></argument>, <argument><expr><name>v_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vn_idx</name> <init>= <expr><call><name>fixIndex</name><argument_list>(<argument><expr><name><name>vi</name><operator>.</operator><name>vn_idx</name></name></expr></argument>, <argument><expr><name>n_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vt_idx</name> <init>= <expr><call><name>fixIndex</name><argument_list>(<argument><expr><name><name>vi</name><operator>.</operator><name>vt_idx</name></name></expr></argument>, <argument><expr><name>t_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>faces</name><index>[<expr><name>f_count</name> <operator>+</operator> <name>k</name></expr>]</index></name><operator>.</operator><name>v_idx</name> <operator>=</operator> <name>v_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>faces</name><index>[<expr><name>f_count</name> <operator>+</operator> <name>k</name></expr>]</index></name><operator>.</operator><name>vn_idx</name> <operator>=</operator> <name>vn_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>faces</name><index>[<expr><name>f_count</name> <operator>+</operator> <name>k</name></expr>]</index></name><operator>.</operator><name>vt_idx</name> <operator>=</operator> <name>vt_idx</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_f_num_verts</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>material_ids</name><index>[<expr><name>face_count</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <name>material_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>face_num_verts</name><index>[<expr><name>face_count</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f_num_verts</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>f_count</name> <operator>+=</operator> <name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_f</name></expr>;</expr_stmt>
<expr_stmt><expr><name>face_count</name> <operator>+=</operator> <name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_f_num_verts</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block>


<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>face_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>shape_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shape_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>shape_name_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prev_shape_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>prev_shape_name_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>prev_shape_face_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>prev_face_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tinyobj_shape_t</name></type> <name>prev_shape</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_lines</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>COMMAND_O</name> <operator>||</operator> <name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>COMMAND_G</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>




<expr_stmt><expr><operator>(</operator><operator>*</operator><name>shapes</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>tinyobj_shape_t</name><operator>*</operator><operator>)</operator><call><name>TINYOBJ_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tinyobj_shape_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_lines</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>COMMAND_O</name> <operator>||</operator> <name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>COMMAND_G</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>COMMAND_O</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shape_name</name> <operator>=</operator> <name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>object_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shape_name_len</name> <operator>=</operator> <name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>object_name_len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>shape_name</name> <operator>=</operator> <name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>group_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shape_name_len</name> <operator>=</operator> <name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>group_name_len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>face_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prev_shape_name</name> <operator>=</operator> <name>shape_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_shape_name_len</name> <operator>=</operator> <name>shape_name_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_shape_face_offset</name> <operator>=</operator> <name>face_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_face_offset</name> <operator>=</operator> <name>face_count</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>shape_idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>shapes</name><operator>)</operator><index>[<expr><name>shape_idx</name></expr>]</index><operator>.</operator><name>name</name> <operator>=</operator> <call><name>my_strndup</name><argument_list>(
<argument><expr><name>prev_shape_name</name></expr></argument>, <argument><expr><name>prev_shape_name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>shapes</name><operator>)</operator><index>[<expr><name>shape_idx</name></expr>]</index><operator>.</operator><name>face_offset</name> <operator>=</operator> <name><name>prev_shape</name><operator>.</operator><name>face_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>shapes</name><operator>)</operator><index>[<expr><name>shape_idx</name></expr>]</index><operator>.</operator><name>length</name> <operator>=</operator> <name>face_count</name> <operator>-</operator> <name>prev_face_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shape_idx</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_face_offset</name> <operator>=</operator> <name>face_count</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>face_count</name> <operator>-</operator> <name>prev_face_offset</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>shapes</name><operator>)</operator><index>[<expr><name>shape_idx</name></expr>]</index><operator>.</operator><name>name</name> <operator>=</operator>
<call><name>my_strndup</name><argument_list>(<argument><expr><name>prev_shape_name</name></expr></argument>, <argument><expr><name>prev_shape_name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>shapes</name><operator>)</operator><index>[<expr><name>shape_idx</name></expr>]</index><operator>.</operator><name>face_offset</name> <operator>=</operator> <name>prev_face_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>shapes</name><operator>)</operator><index>[<expr><name>shape_idx</name></expr>]</index><operator>.</operator><name>length</name> <operator>=</operator> <name>face_count</name> <operator>-</operator> <name>prev_face_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shape_idx</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_face_offset</name> <operator>=</operator> <name>face_count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>prev_shape_name</name> <operator>=</operator> <name>shape_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_shape_name_len</name> <operator>=</operator> <name>shape_name_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_shape_face_offset</name> <operator>=</operator> <name>face_count</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>COMMAND_F</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>face_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>face_count</name> <operator>-</operator> <name>prev_face_offset</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name> <init>= <expr><name>face_count</name> <operator>-</operator> <name>prev_shape_face_offset</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>shapes</name><operator>)</operator><index>[<expr><name>shape_idx</name></expr>]</index><operator>.</operator><name>name</name> <operator>=</operator>
<call><name>my_strndup</name><argument_list>(<argument><expr><name>prev_shape_name</name></expr></argument>, <argument><expr><name>prev_shape_name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>shapes</name><operator>)</operator><index>[<expr><name>shape_idx</name></expr>]</index><operator>.</operator><name>face_offset</name> <operator>=</operator> <name>prev_face_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>shapes</name><operator>)</operator><index>[<expr><name>shape_idx</name></expr>]</index><operator>.</operator><name>length</name> <operator>=</operator> <name>face_count</name> <operator>-</operator> <name>prev_face_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shape_idx</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>num_shapes</name><operator>)</operator> <operator>=</operator> <name>shape_idx</name></expr>;</expr_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>commands</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>destroy_hash_table</name><argument_list>(<argument><expr><operator>&amp;</operator><name>material_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>materials_out</name><operator>)</operator> <operator>=</operator> <name>materials</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>num_materials_out</name><operator>)</operator> <operator>=</operator> <name>num_materials</name></expr>;</expr_stmt>

<return>return <expr><name>TINYOBJ_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tinyobj_attrib_init</name><parameter_list>(<parameter><decl><type><name>tinyobj_attrib_t</name> <modifier>*</modifier></type><name>attrib</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>vertices</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>num_vertices</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>normals</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>num_normals</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>texcoords</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>num_texcoords</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>faces</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>num_faces</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>face_num_verts</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>num_face_num_verts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attrib</name><operator>-&gt;</operator><name>material_ids</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tinyobj_attrib_free</name><parameter_list>(<parameter><decl><type><name>tinyobj_attrib_t</name> <modifier>*</modifier></type><name>attrib</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>attrib</name><operator>-&gt;</operator><name>vertices</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name><name>attrib</name><operator>-&gt;</operator><name>vertices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attrib</name><operator>-&gt;</operator><name>normals</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name><name>attrib</name><operator>-&gt;</operator><name>normals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attrib</name><operator>-&gt;</operator><name>texcoords</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name><name>attrib</name><operator>-&gt;</operator><name>texcoords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attrib</name><operator>-&gt;</operator><name>faces</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name><name>attrib</name><operator>-&gt;</operator><name>faces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attrib</name><operator>-&gt;</operator><name>face_num_verts</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name><name>attrib</name><operator>-&gt;</operator><name>face_num_verts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>attrib</name><operator>-&gt;</operator><name>material_ids</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name><name>attrib</name><operator>-&gt;</operator><name>material_ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tinyobj_shapes_free</name><parameter_list>(<parameter><decl><type><name>tinyobj_shape_t</name> <modifier>*</modifier></type><name>shapes</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>num_shapes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>shapes</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_shapes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>shapes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name><name>shapes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name>shapes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tinyobj_materials_free</name><parameter_list>(<parameter><decl><type><name>tinyobj_material_t</name> <modifier>*</modifier></type><name>materials</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>num_materials</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>materials</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_materials</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ambient_texname</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ambient_texname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>diffuse_texname</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>diffuse_texname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>specular_texname</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>specular_texname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>specular_highlight_texname</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>specular_highlight_texname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bump_texname</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bump_texname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>displacement_texname</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>displacement_texname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha_texname</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha_texname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>TINYOBJ_FREE</name><argument_list>(<argument><expr><name>materials</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
