<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\stb_vorbis.h">





























































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_INCLUDE_STB_VORBIS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_VORBIS_INCLUDE_STB_VORBIS_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_CRT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_VORBIS_NO_STDIO</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBVDEF</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBVDEF</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






























<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>alloc_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alloc_buffer_length_in_bytes</name></decl>;</decl_stmt>
}</block></struct></type> <name>stb_vorbis_alloc</name>;</typedef>




<typedef>typedef <type><name><name>struct</name> <name>stb_vorbis</name></name></type> <name>stb_vorbis</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sample_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>setup_memory_required</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>setup_temp_memory_required</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>temp_memory_required</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_frame_size</name></decl>;</decl_stmt>
}</block></struct></type> <name>stb_vorbis_info</name>;</typedef>


<function_decl><type><name>STBVDEF</name> <name>stb_vorbis_info</name></type> <name>stb_vorbis_get_info</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_get_error</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>STBVDEF</name> <name>void</name></type> <name>stb_vorbis_close</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_get_sample_offset</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>STBVDEF</name> <name>unsigned</name> <name>int</name></type> <name>stb_vorbis_get_file_offset</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_PUSHDATA_API</name></expr></argument>)</argument_list></call></expr></cpp:if>








<function_decl><type><name>STBVDEF</name> <name>stb_vorbis</name> <modifier>*</modifier></type><name>stb_vorbis_open_pushdata</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>datablock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>datablock_length_in_bytes</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>datablock_memory_consumed_in_bytes</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>stb_vorbis_alloc</name> <modifier>*</modifier></type><name>alloc_buffer</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_decode_frame_pushdata</name><parameter_list>(
<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>datablock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>datablock_length_in_bytes</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels</name></decl></parameter>, 
<parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>samples</name></decl></parameter> 
)</parameter_list>;</function_decl>























<function_decl><type><name>STBVDEF</name> <name>void</name></type> <name>stb_vorbis_flush_pushdata</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>










<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_PULLDATA_API</name></expr></argument>)</argument_list></call></expr></cpp:if>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_STDIO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_INTEGER_CONVERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_decode_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_INTEGER_CONVERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_decode_memory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function_decl><type><name>STBVDEF</name> <name>stb_vorbis</name> <modifier>*</modifier></type> <name>stb_vorbis_open_memory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>stb_vorbis_alloc</name> <modifier>*</modifier></type><name>alloc_buffer</name></decl></parameter>)</parameter_list>;</function_decl>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>STBVDEF</name> <name>stb_vorbis</name> <modifier>*</modifier></type> <name>stb_vorbis_open_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>stb_vorbis_alloc</name> <modifier>*</modifier></type><name>alloc_buffer</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>STBVDEF</name> <name>stb_vorbis</name> <modifier>*</modifier></type> <name>stb_vorbis_open_file</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>close_handle_on_close</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>stb_vorbis_alloc</name> <modifier>*</modifier></type><name>alloc_buffer</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>STBVDEF</name> <name>stb_vorbis</name> <modifier>*</modifier></type> <name>stb_vorbis_open_file_section</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>close_handle_on_close</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>stb_vorbis_alloc</name> <modifier>*</modifier></type><name>alloc_buffer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_seek_frame</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>sample_number</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_seek</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>sample_number</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_seek_start</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>STBVDEF</name> <name>unsigned</name> <name>int</name></type> <name>stb_vorbis_stream_length_in_samples</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBVDEF</name> <name>float</name></type> <name>stb_vorbis_stream_length_in_seconds</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_get_frame_float</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>;</function_decl>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_INTEGER_CONVERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_get_frame_short_interleaved</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_c</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_shorts</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_get_frame_short</name> <parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_c</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_samples</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

























<function_decl><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_get_samples_float_interleaved</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_floats</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_get_samples_float</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_samples</name></decl></parameter>)</parameter_list>;</function_decl>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_INTEGER_CONVERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_get_samples_short_interleaved</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_shorts</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_get_samples_short</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_samples</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<enum>enum <name>STBVorbisError</name>
<block>{
<decl><name>VORBIS__no_error</name></decl>,

<decl><name>VORBIS_need_more_data</name><init>=<expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>VORBIS_invalid_api_mixing</name></decl>, 
<decl><name>VORBIS_outofmem</name></decl>, 
<decl><name>VORBIS_feature_not_supported</name></decl>, 
<decl><name>VORBIS_too_many_channels</name></decl>, 
<decl><name>VORBIS_file_open_failure</name></decl>, 
<decl><name>VORBIS_seek_without_length</name></decl>, 

<decl><name>VORBIS_unexpected_eof</name><init>=<expr><literal type="number">10</literal></expr></init></decl>, 
<decl><name>VORBIS_seek_invalid</name></decl>, 





<decl><name>VORBIS_invalid_setup</name><init>=<expr><literal type="number">20</literal></expr></init></decl>,
<decl><name>VORBIS_invalid_stream</name></decl>,


<decl><name>VORBIS_missing_capture_pattern</name><init>=<expr><literal type="number">30</literal></expr></init></decl>,
<decl><name>VORBIS_invalid_stream_structure_version</name></decl>,
<decl><name>VORBIS_continued_packet_flag_invalid</name></decl>,
<decl><name>VORBIS_incorrect_stream_serial_number</name></decl>,
<decl><name>VORBIS_invalid_first_page</name></decl>,
<decl><name>VORBIS_bad_packet_type</name></decl>,
<decl><name>VORBIS_cant_find_last_page</name></decl>,
<decl><name>VORBIS_seek_failed</name></decl>
}</block>;</enum>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>







































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_MAX_CHANNELS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_VORBIS_MAX_CHANNELS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_PUSHDATA_CRC_COUNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_VORBIS_PUSHDATA_CRC_COUNT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_FAST_HUFFMAN_LENGTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_VORBIS_FAST_HUFFMAN_LENGTH</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_FAST_HUFFMAN_INT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_VORBIS_FAST_HUFFMAN_SHORT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_CODEBOOK_SHORTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"STB_VORBIS_CODEBOOK_SHORTS is no longer supported as it produced incorrect results for some input formats"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_PULLDATA_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_VORBIS_NO_INTEGER_CONVERSION</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_VORBIS_NO_STDIO</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_CRT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_VORBIS_NO_STDIO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_INTEGER_CONVERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_FAST_SCALED_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_VORBIS_ENDIAN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_VORBIS_ENDIAN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_CRT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__linux</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__EMSCRIPTEN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>malloc</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>free</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void) 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>realloc</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__forceinline</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__forceinline</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__forceinline</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>alloca</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>alloca</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_alloca(s)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__GNUC__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__forceinline</name></cpp:macro> <cpp:value>inline</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__forceinline</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>STB_VORBIS_MAX_CHANNELS</name> <operator>&gt;</operator> <literal type="number">256</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Value of STB_VORBIS_MAX_CHANNELS outside of allowed range"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>STB_VORBIS_FAST_HUFFMAN_LENGTH</name> <operator>&gt;</operator> <literal type="number">24</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Value of STB_VORBIS_FAST_HUFFMAN_LENGTH outside of allowed range"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crtdbg.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_CHECK</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_CrtIsValidHeapPointer(f-&gt;channel_buffers[1])</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_CHECK</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void) 0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_MAX_BLOCKSIZE_LOG</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_MAX_BLOCKSIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; STBV_MAX_BLOCKSIZE_LOG)</cpp:value></cpp:define>


<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>stbv_uint8</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>char</name></type> <name>stbv_int8</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>stbv_uint16</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>short</name></type> <name>stbv_int16</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>stbv_uint32</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>int</name></type> <name>stbv_int32</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>float</name></type> <name>stbv_codetype</name>;</typedef>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_FAST_HUFFMAN_TABLE_SIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; STB_VORBIS_FAST_HUFFMAN_LENGTH)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_FAST_HUFFMAN_TABLE_MASK</name></cpp:macro> <cpp:value>(STBV_FAST_HUFFMAN_TABLE_SIZE - 1)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>dimensions</name></decl>, <name>entries</name>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name> <modifier>*</modifier></type><name>codeword_lengths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>minimum_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>delta_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>value_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>lookup_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>sequence_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>sparse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>lookup_values</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_codetype</name> <modifier>*</modifier></type><name>multiplicands</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint32</name> <modifier>*</modifier></type><name>codewords</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_FAST_HUFFMAN_SHORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>stbv_int16</name></type> <name><name>fast_huffman</name><index>[<expr><name>STBV_FAST_HUFFMAN_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>stbv_int32</name></type> <name><name>fast_huffman</name><index>[<expr><name>STBV_FAST_HUFFMAN_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>stbv_uint32</name> <modifier>*</modifier></type><name>sorted_codewords</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>sorted_values</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sorted_entries</name></decl>;</decl_stmt>
}</block></struct></type> <name>StbvCodebook</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint16</name></type> <name>rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint16</name></type> <name>bark_map_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>amplitude_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>amplitude_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>number_of_books</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name><name>book_list</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>StbvFloor0</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>partitions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name><name>partition_class_list</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name><name>class_dimensions</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name><name>class_subclasses</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name><name>class_masterbooks</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>stbv_int16</name></type> <name><name>subclass_books</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>stbv_uint16</name></type> <name><name>Xlist</name><index>[<expr><literal type="number">31</literal><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name><name>sorted_order</name><index>[<expr><literal type="number">31</literal><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name><name>stbv_neighbors</name><index>[<expr><literal type="number">31</literal><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>floor1_multiplier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>rangebits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>values</name></decl>;</decl_stmt>
}</block></struct></type> <name>StbvFloor1</name>;</typedef>

<typedef>typedef <type><union>union
<block>{
<decl_stmt><decl><type><name>StbvFloor0</name></type> <name>floor0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StbvFloor1</name></type> <name>floor1</name></decl>;</decl_stmt>
}</block></union></type> <name>StbvFloor</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>begin</name></decl>, <name>end</name>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>part_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>classifications</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>classbook</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name> <modifier>*</modifier><modifier>*</modifier></type><name>classdata</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbv_int16</name> <argument_list>(<argument><expr><operator>*</operator><name>residue_books</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>
}</block></struct></type> <name>StbvResidue</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>magnitude</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>angle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>mux</name></decl>;</decl_stmt>
}</block></struct></type> <name>StbvMappingChannel</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>stbv_uint16</name></type> <name>coupling_steps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StbvMappingChannel</name> <modifier>*</modifier></type><name>chan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>submaps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name><name>submap_floor</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name><name>submap_residue</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>StbvMapping</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>blockflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>mapping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint16</name></type> <name>windowtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint16</name></type> <name>transformtype</name></decl>;</decl_stmt>
}</block></struct></type> <name>StbvMode</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>goal_crc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>bytes_left</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>crc_so_far</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>bytes_done</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>sample_loc</name></decl>;</decl_stmt> 
}</block></struct></type> <name>StbvCRCscan</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>page_start</name></decl>, <name>page_end</name>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>last_decoded_sample</name></decl>;</decl_stmt>
}</block></struct></type> <name>StbvProbedPage</name>;</typedef>

<struct>struct <name>stb_vorbis</name>
<block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sample_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>setup_memory_required</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>temp_memory_required</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>setup_temp_memory_required</name></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>f_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>close_on_free</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>stbv_uint8</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name> <modifier>*</modifier></type><name>stream_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name> <modifier>*</modifier></type><name>stream_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>stream_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>push_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>first_audio_page_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>StbvProbedPage</name></type> <name>p_first</name></decl>, <decl><type ref="prev"/><name>p_last</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>stb_vorbis_alloc</name></type> <name>alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>setup_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp_offset</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>eof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>STBVorbisError</name></name></type> <name>error</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name><name>blocksize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blocksize_0</name></decl>, <decl><type ref="prev"/><name>blocksize_1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>codebook_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>codebooks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>floor_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint16</name></type> <name><name>floor_types</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>StbvFloor</name> <modifier>*</modifier></type><name>floor_config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>residue_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint16</name></type> <name><name>residue_types</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>StbvResidue</name> <modifier>*</modifier></type><name>residue_config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mapping_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StbvMapping</name> <modifier>*</modifier></type><name>mapping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StbvMode</name></type> <name><name>mode_config</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>total_samples</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>channel_buffers</name><index>[<expr><name>STB_VORBIS_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>outputs</name> <index>[<expr><name>STB_VORBIS_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>previous_window</name><index>[<expr><name>STB_VORBIS_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>previous_length</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_DEFER_FLOOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>stbv_int16</name> <modifier>*</modifier></type><name><name>finalY</name><index>[<expr><name>STB_VORBIS_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>floor_buffers</name><index>[<expr><name>STB_VORBIS_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>current_loc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>current_loc_valid</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name><name>C</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>window</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint16</name> <modifier>*</modifier></type><name><name>stbv_bit_reverse</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>serial</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>last_page</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>segment_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name><name>segments</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>page_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>bytes_in_seg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>first_decode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next_seg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_seg</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>last_seg_which</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>acc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>valid_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packet_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end_seg_with_known_loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>known_loc_for_packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>discard_samples_deferred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>samples_output</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>page_crc_tests</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_PUSHDATA_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>StbvCRCscan</name></type> <name><name>scan</name><index>[<expr><name>STB_VORBIS_PUSHDATA_CRC_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>int</name></type> <name>channel_buffer_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channel_buffer_end</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_PUSHDATA_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_IS_PUSH_MODE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FALSE</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_PULLDATA_API</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_IS_PUSH_MODE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TRUE</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_IS_PUSH_MODE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((f)-&gt;push_mode)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>stb_vorbis</name></name></type> <name>stbv_vorb</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_error</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>STBVorbisError</name></name></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <name>e</name> <operator>!=</operator> <name>VORBIS_need_more_data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>error</name></name><operator>=</operator><name>e</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbv_array_size_required</name><parameter_list>(<parameter><type><name>count</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(count*(sizeof(void *)+(size)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbv_temp_alloc</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(f-&gt;alloc.alloc_buffer ? stbv_setup_temp_malloc(f,size) : alloca(size))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbv_temp_free</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbv_temp_alloc_save</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((f)-&gt;temp_offset)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbv_temp_alloc_restore</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((f)-&gt;temp_offset = (p))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbv_temp_block_array</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>count</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stbv_make_block_array(stbv_temp_alloc(f,stbv_array_size_required(count,size)), count, size)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbv_make_block_array</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>mem</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>p</name> <operator>+</operator> <name>count</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbv_setup_malloc</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <operator>(</operator><name>sz</name><operator>+</operator><literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>setup_memory_required</name></name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>alloc</name><operator>.</operator><name>alloc_buffer</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>f</name><operator>-&gt;</operator><name>alloc</name><operator>.</operator><name>alloc_buffer</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>setup_offset</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>setup_offset</name></name> <operator>+</operator> <name>sz</name> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>temp_offset</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>setup_offset</name></name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name>sz</name></expr> ?</condition><then> <expr><call><name>malloc</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_setup_free</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>alloc</name><operator>.</operator><name>alloc_buffer</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>stbv_setup_temp_malloc</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <operator>(</operator><name>sz</name><operator>+</operator><literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>alloc</name><operator>.</operator><name>alloc_buffer</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>temp_offset</name></name> <operator>-</operator> <name>sz</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>setup_offset</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>temp_offset</name></name> <operator>-=</operator> <name>sz</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>f</name><operator>-&gt;</operator><name>alloc</name><operator>.</operator><name>alloc_buffer</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>temp_offset</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>malloc</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_setup_temp_free</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>alloc</name><operator>.</operator><name>alloc_buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>temp_offset</name></name> <operator>+=</operator> <operator>(</operator><name>sz</name><operator>+</operator><literal type="number">3</literal><operator>)</operator><operator>&amp;</operator><operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_CRC32_POLY</name></cpp:macro> <cpp:value>0x04c11db7</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <name>stbv_uint32</name></type> <name><name>stbv_crc_table</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_crc32_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>s</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>s</name><operator>=</operator><operator>(</operator><name>stbv_uint32</name><operator>)</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr><operator>,</operator> <expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>s</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><ternary><condition><expr><name>s</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1U</literal><operator>&lt;&lt;</operator><literal type="number">31</literal><operator>)</operator></expr> ?</condition><then> <expr><name>STBV_CRC32_POLY</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>stbv_crc_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__forceinline</name> <name>stbv_uint32</name></type> <name>stbv_crc32_update</name><parameter_list>(<parameter><decl><type><name>stbv_uint32</name></type> <name>crc</name></decl></parameter>, <parameter><decl><type><name>stbv_uint8</name></type> <name>byte</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>crc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>^</operator> <name><name>stbv_crc_table</name><index>[<expr><name>byte</name> <operator>^</operator> <operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>]</index></name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>stbv_bit_reverse</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xAAAAAAAA</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xCCCCCCCC</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xF0F0F0F0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x0F0F0F0F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xFF00FF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0x00FF00FF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>n</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>stbv_square</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>x</name><operator>*</operator><name>x</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_ilog</name><parameter_list>(<parameter><decl><type><name>stbv_int32</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>signed</name> <name>char</name></type> <name><name>log2_4</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 


<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal> <operator>+</operator> <name><name>log2_4</name><index>[<expr><name>n</name></expr> ]</index></name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">5</literal> <operator>+</operator> <name><name>log2_4</name><index>[<expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">10</literal> <operator>+</operator> <name><name>log2_4</name><index>[<expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>]</index></name></expr>;</return></block_content></block></else></if_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">15</literal> <operator>+</operator> <name><name>log2_4</name><index>[<expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>]</index></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">20</literal> <operator>+</operator> <name><name>log2_4</name><index>[<expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr>]</index></name></expr>;</return></block_content></block></else></if_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">25</literal> <operator>+</operator> <name><name>log2_4</name><index>[<expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">25</literal></expr>]</index></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">30</literal> <operator>+</operator> <name><name>log2_4</name><index>[<expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal></expr>]</index></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>M_PI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PI</name></cpp:macro> <cpp:value>3.14159265358979323846264f</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_CODE</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>float</name></type> <name>stbv_float32_unpack</name><parameter_list>(<parameter><decl><type><name>stbv_uint32</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>mantissa</name> <init>= <expr><name>x</name> <operator>&amp;</operator> <literal type="number">0x1fffff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>sign</name> <init>= <expr><name>x</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>exp</name> <init>= <expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x7fe00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>res</name> <init>= <expr><ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><operator>-</operator><operator>(</operator><name>double</name><operator>)</operator><name>mantissa</name></expr> </then><else>: <expr><operator>(</operator><name>double</name><operator>)</operator><name>mantissa</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name>ldexp</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>res</name></expr></argument>, <argument><expr><name>exp</name><operator>-</operator><literal type="number">788</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_add_entry</name><parameter_list>(<parameter><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>stbv_uint32</name></type> <name>huff_code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>symbol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>stbv_uint32</name> <modifier>*</modifier></type><name>values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>sparse</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>codewords</name> <index>[<expr><name>symbol</name></expr>]</index></name> <operator>=</operator> <name>huff_code</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>codewords</name> <index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <name>huff_code</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>codeword_lengths</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>values</name> <index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <name>symbol</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_compute_codewords</name><parameter_list>(<parameter><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>stbv_uint8</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>stbv_uint32</name> <modifier>*</modifier></type><name>values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>m</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name><name>available</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>available</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>available</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><name><name>len</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <name>NO_CODE</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>n</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>TRUE</name></expr>;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stbv_add_entry</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>m</name><operator>++</operator></expr></argument>, <argument><expr><name><name>len</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>len</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>available</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal><operator>-</operator><name>i</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>




<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><name><name>len</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>z</name> <operator>==</operator> <name>NO_CODE</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>






<while>while <condition>(<expr><name>z</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>available</name><index>[<expr><name>z</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>--</operator><name>z</name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>z</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <return>return <expr><name>FALSE</name></expr>;</return> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>available</name><index>[<expr><name>z</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>z</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>z</name> <operator>&lt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>available</name><index>[<expr><name>z</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_add_entry</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>stbv_bit_reverse</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name><operator>++</operator></expr></argument>, <argument><expr><name><name>len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>z</name> <operator>!=</operator> <name><name>len</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name><operator>=</operator><name><name>len</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>y</name> <operator>&gt;</operator> <name>z</name></expr>;</condition> <incr><expr><operator>--</operator><name>y</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>available</name><index>[<expr><name>y</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>available</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>res</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal><operator>-</operator><name>y</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_compute_accelerated_huffman</name><parameter_list>(<parameter><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>STBV_FAST_HUFFMAN_TABLE_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fast_huffman</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>sparse</name></name></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name></expr> </then><else>: <expr><name><name>c</name><operator>-&gt;</operator><name>entries</name></name></expr></else></ternary></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_FAST_HUFFMAN_SHORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">32767</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>codeword_lengths</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>STB_VORBIS_FAST_HUFFMAN_LENGTH</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>z</name> <init>= <expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>sparse</name></name></expr> ?</condition><then> <expr><call><name>stbv_bit_reverse</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sorted_codewords</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>c</name><operator>-&gt;</operator><name>codewords</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>z</name> <operator>&lt;</operator> <name>STBV_FAST_HUFFMAN_TABLE_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fast_huffman</name><index>[<expr><name>z</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>codeword_lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_CDECL</name></cpp:macro> <cpp:value>__cdecl</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_CDECL</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name> <name>STBV_CDECL</name></type> <name>stbv_uint32_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>x</name> <init>= <expr><operator>*</operator> <operator>(</operator><name>stbv_uint32</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>y</name> <init>= <expr><operator>*</operator> <operator>(</operator><name>stbv_uint32</name> <operator>*</operator><operator>)</operator> <name>q</name></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <name>y</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>x</name> <operator>&gt;</operator> <name>y</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_include_in_sort</name><parameter_list>(<parameter><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>stbv_uint8</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sparse</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>!=</operator> <name>NO_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>TRUE</name></expr>;</return> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>NO_CODE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>STB_VORBIS_FAST_HUFFMAN_LENGTH</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_compute_sorted_huffman</name><parameter_list>(<parameter><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>stbv_uint8</name> <modifier>*</modifier></type><name>lengths</name></decl></parameter>, <parameter><decl><type><name>stbv_uint32</name> <modifier>*</modifier></type><name>values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>sparse</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>entries</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>stbv_include_in_sort</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sorted_codewords</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>stbv_bit_reverse</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>codewords</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>k</name> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sorted_codewords</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>stbv_bit_reverse</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>codewords</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sorted_codewords</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sorted_codewords</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stbv_uint32_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sorted_codewords</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>sparse</name></name></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name></expr> </then><else>: <expr><name><name>c</name><operator>-&gt;</operator><name>entries</name></name></expr></else></ternary></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>huff_len</name> <init>= <expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>sparse</name></name></expr> ?</condition><then> <expr><name><name>lengths</name><index>[<expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr> </then><else>: <expr><name><name>lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stbv_include_in_sort</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>huff_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>code</name> <init>= <expr><call><name>stbv_bit_reverse</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>codewords</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name><init>=<expr><name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name>x</name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sorted_codewords</name><index>[<expr><name>m</name></expr>]</index></name> <operator>&lt;=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <operator>(</operator><name>n</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sorted_codewords</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sparse</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sorted_values</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>codeword_lengths</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>huff_len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sorted_values</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_vorbis_validate</name><parameter_list>(<parameter><decl><type><name>stbv_uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>stbv_uint8</name></type> <name><name>vorbis</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'v'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>vorbis</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_lookup1_values</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>entries</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>floor</name><argument_list>(<argument><expr><call><name>exp</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <call><name>log</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <name>entries</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>dim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>floor</name><argument_list>(<argument><expr><call><name>pow</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>entries</name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><operator>++</operator><name>r</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>pow</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>floor</name><argument_list>(<argument><expr><call><name>pow</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <name>r</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_compute_twiddle_factors</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>C</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n4</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>n8</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>,<decl><type ref="prev"/><name>k2</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><name>k2</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n4</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr><operator>,</operator><expr><name>k2</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>A</name><index>[<expr><name>k2</name></expr> ]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>*</operator><name>k</name><operator>*</operator><name>M_PI</name><operator>/</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>A</name><index>[<expr><name>k2</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>-</operator><call><name>sin</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>*</operator><name>k</name><operator>*</operator><name>M_PI</name><operator>/</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>B</name><index>[<expr><name>k2</name></expr> ]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name>cos</name><argument_list>(<argument><expr><operator>(</operator><name>k2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>M_PI</name><operator>/</operator><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>B</name><index>[<expr><name>k2</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name>sin</name><argument_list>(<argument><expr><operator>(</operator><name>k2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>M_PI</name><operator>/</operator><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>k</name><operator>=</operator><name>k2</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n8</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr><operator>,</operator><expr><name>k2</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>C</name><index>[<expr><name>k2</name></expr> ]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>k2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>M_PI</name><operator>/</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>C</name><index>[<expr><name>k2</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>-</operator><call><name>sin</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>k2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>M_PI</name><operator>/</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_compute_window</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n2</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n2</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>window</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name>sin</name><argument_list>(<argument><expr><literal type="number">0.5</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <call><name>stbv_square</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <call><name>sin</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">0</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>/</operator> <name>n2</name> <operator>*</operator> <literal type="number">0.5</literal> <operator>*</operator> <name>M_PI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_compute_bitreverse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>stbv_uint16</name> <modifier>*</modifier></type><name>rev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ld</name> <init>= <expr><call><name>stbv_ilog</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n8</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n8</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>rev</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>stbv_bit_reverse</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal><operator>-</operator><name>ld</name><operator>+</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_init_blocksize</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n2</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>n4</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>n8</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>A</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>B</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>C</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>A</name><index>[<expr><name>b</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>B</name><index>[<expr><name>b</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>C</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbv_compute_twiddle_factors</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>A</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>B</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>C</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbv_compute_window</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>stbv_bit_reverse</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbv_uint16</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stbv_uint16</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>stbv_bit_reverse</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbv_compute_bitreverse</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>stbv_bit_reverse</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_neighbors</name><parameter_list>(<parameter><decl><type><name>stbv_uint16</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>plow</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>phigh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>low</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>high</name> <init>= <expr><literal type="number">65536</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>low</name> <operator>&amp;&amp;</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>x</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>plow</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name>low</name> <operator>=</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>high</name> <operator>&amp;&amp;</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>x</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>phigh</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>stbv_uint16</name></type> <name>x</name></decl>,<name>id</name>;</decl_stmt>
}</block></struct></type> <name>stbv_floor_ordering</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name> <name>STBV_CDECL</name></type> <name>stbv_point_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbv_floor_ordering</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><name>stbv_floor_ordering</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_floor_ordering</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>stbv_floor_ordering</name> <operator>*</operator><operator>)</operator> <name>q</name></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>a</name><operator>-&gt;</operator><name>x</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_USE_MEMORY</name><parameter_list>(<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TRUE</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_USE_MEMORY</name><parameter_list>(<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((z)-&gt;stream)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>stbv_uint8</name></type> <name>stbv_get8</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STBV_USE_MEMORY</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>stream</name></name> <operator>&gt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>stream_end</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>
<return>return <expr><operator>*</operator><name><name>z</name><operator>-&gt;</operator><name>stream</name></name><operator>++</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>fgetc</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stbv_uint32</name></type> <name>stbv_get32</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <operator>(</operator><name>stbv_uint32</name><operator>)</operator> <call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_getn</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>stbv_uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STBV_USE_MEMORY</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>stream</name></name><operator>+</operator><name>n</name> <operator>&gt;</operator> <name><name>z</name><operator>-&gt;</operator><name>stream_end</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_skip</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STBV_USE_MEMORY</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stream</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>stream</name></name> <operator>&gt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>stream_end</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>x</name> <init>= <expr><call><name>ftell</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>x</name><operator>+</operator><name>n</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_set_file_offset</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>loc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_PUSHDATA_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>push_mode</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STBV_USE_MEMORY</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>stream_start</name></name> <operator>+</operator> <name>loc</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>stream_end</name></name> <operator>||</operator> <name><name>f</name><operator>-&gt;</operator><name>stream_start</name></name> <operator>+</operator> <name>loc</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>stream_start</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>stream_end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>stream_start</name></name> <operator>+</operator> <name>loc</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>loc</name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>f_start</name></name> <operator>&lt;</operator> <name>loc</name> <operator>||</operator> <name>loc</name> <operator>&gt;=</operator> <literal type="number">0x80000000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>loc</name> <operator>=</operator> <literal type="number">0x7fffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>loc</name> <operator>+=</operator> <name><name>f</name><operator>-&gt;</operator><name>f_start</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fseek</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>loc</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>f_start</name></name></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>stbv_uint8</name></type> <name><name>stbv_ogg_page_header</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x53</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_capture_pattern</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0x4f</literal> <operator>!=</operator> <call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0x67</literal> <operator>!=</operator> <call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0x67</literal> <operator>!=</operator> <call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0x53</literal> <operator>!=</operator> <call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_PAGEFLAG_continued_packet</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_PAGEFLAG_first_page</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_PAGEFLAG_last_page</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_start_page_no_capturepattern</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>loc0</name></decl>,<decl><type ref="prev"/><name>loc1</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_stream_structure_version</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>page_flag</name></name> <operator>=</operator> <call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>loc0</name> <operator>=</operator> <call><name>stbv_get32</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>loc1</name> <operator>=</operator> <call><name>stbv_get32</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>stbv_get32</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>stbv_get32</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>last_page</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbv_get32</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>segment_count</name></name> <operator>=</operator> <call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_getn</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>segments</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>segment_count</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_unexpected_eof</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>end_seg_with_known_loc</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>loc0</name> <operator>!=</operator> <operator>~</operator><literal type="number">0U</literal> <operator>||</operator> <name>loc1</name> <operator>!=</operator> <operator>~</operator><literal type="number">0U</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><name><name>f</name><operator>-&gt;</operator><name>segment_count</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>segments</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>end_seg_with_known_loc</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>known_loc_for_packet</name></name> <operator>=</operator> <name>loc0</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>first_decode</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StbvProbedPage</name></type> <name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>segment_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name><name>f</name><operator>-&gt;</operator><name>segments</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">27</literal> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>segment_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>page_start</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>first_audio_page_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>page_end</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>page_start</name></name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>last_decoded_sample</name></name> <operator>=</operator> <name>loc0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>next_seg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_start_page</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_capture_pattern</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_missing_capture_pattern</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>stbv_start_page_no_capturepattern</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_start_packet</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>next_seg</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_start_page</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>page_flag</name></name> <operator>&amp;</operator> <name>STBV_PAGEFLAG_continued_packet</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_continued_packet_flag_invalid</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>last_seg</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>packet_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>bytes_in_seg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_maybe_start_packet</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>next_seg</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><literal type="number">0x4f</literal> <operator>!=</operator> <name>x</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_missing_capture_pattern</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0x67</literal> <operator>!=</operator> <call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_missing_capture_pattern</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0x67</literal> <operator>!=</operator> <call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_missing_capture_pattern</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0x53</literal> <operator>!=</operator> <call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_missing_capture_pattern</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_start_page_no_capturepattern</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>page_flag</name></name> <operator>&amp;</operator> <name>STBV_PAGEFLAG_continued_packet</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>last_seg</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>bytes_in_seg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_continued_packet_flag_invalid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>stbv_start_packet</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_next_segment</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>last_seg</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>next_seg</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>last_seg_which</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>segment_count</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_start_page</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>last_seg</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>page_flag</name></name> <operator>&amp;</operator> <name>STBV_PAGEFLAG_continued_packet</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_continued_packet_flag_invalid</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>segments</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>next_seg</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>last_seg</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>last_seg_which</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>next_seg</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>next_seg</name></name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>segment_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>next_seg</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>bytes_in_seg</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>bytes_in_seg</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_EOP</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_INVALID_BITS</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_get8_packet_raw</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>bytes_in_seg</name></name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>last_seg</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>STBV_EOP</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>stbv_next_segment</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>STBV_EOP</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>bytes_in_seg</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name><name>f</name><operator>-&gt;</operator><name>bytes_in_seg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>f</name><operator>-&gt;</operator><name>packet_bytes</name></name></expr>;</expr_stmt>
<return>return <expr><call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_get8_packet</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>stbv_get8_packet_raw</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_flush_packet</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><call><name>stbv_get8_packet_raw</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STBV_EOP</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>stbv_uint32</name></type> <name>stbv_get_bits</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>z</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>+=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>n</name><operator>-</operator><literal type="number">24</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<return>return <expr><name>z</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>acc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><call><name>stbv_get8_packet_raw</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>z</name> <operator>==</operator> <name>STBV_EOP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>=</operator> <name>STBV_INVALID_BITS</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>acc</name></name> <operator>+=</operator> <name>z</name> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>acc</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>acc</name></name> <operator>&gt;&gt;=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
<return>return <expr><name>z</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>__forceinline</name> <name>void</name></type> <name>stbv_prep_huffman</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>&lt;=</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>acc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>z</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>last_seg</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>bytes_in_seg</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>stbv_get8_packet_raw</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>z</name> <operator>==</operator> <name>STBV_EOP</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>acc</name></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>z</name> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>&lt;=</operator> <literal type="number">24</literal></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<enum>enum
<block>{
<decl><name>STBV_VORBIS_packet_id</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>STBV_VORBIS_packet_comment</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>STBV_VORBIS_packet_setup</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_codebook_decode_scalar_raw</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbv_prep_huffman</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>codewords</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>sorted_codewords</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>entries</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>sorted_codewords</name></name><operator>!=</operator><name>NULL</name></expr> </then><else>: <expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>codewords</name></name></expr></else></ternary></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>code</name> <init>= <expr><call><name>stbv_bit_reverse</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>acc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name><init>=<expr><name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name></expr></init></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name>x</name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sorted_codewords</name><index>[<expr><name>m</name></expr>]</index></name> <operator>&lt;=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <operator>(</operator><name>n</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>sparse</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>sorted_values</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>codeword_lengths</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>acc</name></name> <operator>&gt;&gt;=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>sparse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>entries</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>codeword_lengths</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NO_CODE</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>codewords</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>acc</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>codeword_lengths</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>codeword_lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>acc</name></name> <operator>&gt;&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>codeword_lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>codeword_lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_INLINE_DECODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_DECODE_RAW</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>f</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (f-&gt;valid_bits &lt; STB_VORBIS_FAST_HUFFMAN_LENGTH) stbv_prep_huffman(f); var = f-&gt;acc &amp; STBV_FAST_HUFFMAN_TABLE_MASK; var = c-&gt;fast_huffman[var]; if (var &gt;= 0) { int n = c-&gt;codeword_lengths[var]; f-&gt;acc &gt;&gt;= n; f-&gt;valid_bits -= n; if (f-&gt;valid_bits &lt; 0) { f-&gt;valid_bits = 0; var = -1; } } else { var = stbv_codebook_decode_scalar_raw(f,c); }</cpp:value></cpp:define>













<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_codebook_decode_scalar</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>&lt;</operator> <name>STB_VORBIS_FAST_HUFFMAN_LENGTH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbv_prep_huffman</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>acc</name></name> <operator>&amp;</operator> <name>STBV_FAST_HUFFMAN_TABLE_MASK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>fast_huffman</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>acc</name></name> <operator>&gt;&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>codeword_lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>codeword_lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>stbv_codebook_decode_scalar_raw</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_DECODE_RAW</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var = stbv_codebook_decode_scalar(f,c);</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_DECODE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>STBV_DECODE_RAW(var,f,c) if (c-&gt;sparse) var = c-&gt;sorted_values[var];</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDES_IN_CODEBOOK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODE_VQ</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>STBV_DECODE_RAW(var,f,c)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODE_VQ</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>STBV_DECODE(var,f,c)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_CODEBOOK_ELEMENT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>off</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c-&gt;multiplicands[off])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_CODEBOOK_ELEMENT_FAST</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>off</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c-&gt;multiplicands[off])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_CODEBOOK_ELEMENT_BASE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_codebook_decode_start</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>lookup_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>DECODE_VQ</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sparse</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>z</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>bytes_in_seg</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>last_seg</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>z</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>z</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_codebook_decode</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>z</name> <init>= <expr><call><name>stbv_codebook_decode_start</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>dimensions</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dimensions</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDES_IN_CODEBOOK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>lookup_type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>last</name> <init>= <expr><call><name>STBV_CODEBOOK_ELEMENT_BASE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>div</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><operator>(</operator><name>z</name> <operator>/</operator> <name>div</name><operator>)</operator> <operator>%</operator> <name><name>c</name><operator>-&gt;</operator><name>lookup_values</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>val</name> <init>= <expr><call><name>STBV_CODEBOOK_ELEMENT_FAST</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>off</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>last</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sequence_p</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>last</name> <operator>=</operator> <name>val</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>minimum_value</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>div</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>lookup_values</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>z</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>dimensions</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sequence_p</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>last</name> <init>= <expr><call><name>STBV_CODEBOOK_ELEMENT_BASE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>val</name> <init>= <expr><call><name>STBV_CODEBOOK_ELEMENT_FAST</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>z</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>last</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>val</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>minimum_value</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>last</name> <init>= <expr><call><name>STBV_CODEBOOK_ELEMENT_BASE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <call><name>STBV_CODEBOOK_ELEMENT_FAST</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>z</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>last</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_codebook_decode_step</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>z</name> <init>= <expr><call><name>stbv_codebook_decode_start</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>last</name> <init>= <expr><call><name>STBV_CODEBOOK_ELEMENT_BASE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>dimensions</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dimensions</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDES_IN_CODEBOOK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>lookup_type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>div</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><operator>(</operator><name>z</name> <operator>/</operator> <name>div</name><operator>)</operator> <operator>%</operator> <name><name>c</name><operator>-&gt;</operator><name>lookup_values</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>val</name> <init>= <expr><call><name>STBV_CODEBOOK_ELEMENT_FAST</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>off</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>last</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name><operator>*</operator><name>step</name></expr>]</index></name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sequence_p</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>last</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>div</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>lookup_values</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>z</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>dimensions</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>val</name> <init>= <expr><call><name>STBV_CODEBOOK_ELEMENT_FAST</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>z</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>last</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name><operator>*</operator><name>step</name></expr>]</index></name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sequence_p</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>last</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_codebook_decode_deinterleave_repeat</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>outputs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>c_inter_p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_inter_p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>total_decode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c_inter</name> <init>= <expr><operator>*</operator><name>c_inter_p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p_inter</name> <init>= <expr><operator>*</operator><name>p_inter_p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>z</name></decl>, <decl><type ref="prev"/><name>effective</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dimensions</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>lookup_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_stream</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>total_decode</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>last</name> <init>= <expr><call><name>STBV_CODEBOOK_ELEMENT_BASE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECODE_VQ</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDES_IN_CODEBOOK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>sparse</name></name> <operator>||</operator> <name>z</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>bytes_in_seg</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>last_seg</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_stream</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>c_inter</name> <operator>+</operator> <name>p_inter</name><operator>*</operator><name>ch</name> <operator>+</operator> <name>effective</name> <operator>&gt;</operator> <name>len</name> <operator>*</operator> <name>ch</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>effective</name> <operator>=</operator> <name>len</name><operator>*</operator><name>ch</name> <operator>-</operator> <operator>(</operator><name>p_inter</name><operator>*</operator><name>ch</name> <operator>-</operator> <name>c_inter</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDES_IN_CODEBOOK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>lookup_type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>div</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>effective</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><operator>(</operator><name>z</name> <operator>/</operator> <name>div</name><operator>)</operator> <operator>%</operator> <name><name>c</name><operator>-&gt;</operator><name>lookup_values</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>val</name> <init>= <expr><call><name>STBV_CODEBOOK_ELEMENT_FAST</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>off</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>last</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>outputs</name><index>[<expr><name>c_inter</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>outputs</name><index>[<expr><name>c_inter</name></expr>]</index><index>[<expr><name>p_inter</name></expr>]</index></name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>c_inter</name> <operator>==</operator> <name>ch</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>c_inter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>p_inter</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sequence_p</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>last</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>div</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>lookup_values</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>z</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>dimensions</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sequence_p</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>effective</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>val</name> <init>= <expr><call><name>STBV_CODEBOOK_ELEMENT_FAST</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>z</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>last</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>outputs</name><index>[<expr><name>c_inter</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>outputs</name><index>[<expr><name>c_inter</name></expr>]</index><index>[<expr><name>p_inter</name></expr>]</index></name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>c_inter</name> <operator>==</operator> <name>ch</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>c_inter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>p_inter</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>effective</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>val</name> <init>= <expr><call><name>STBV_CODEBOOK_ELEMENT_FAST</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>z</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>last</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>outputs</name><index>[<expr><name>c_inter</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>outputs</name><index>[<expr><name>c_inter</name></expr>]</index><index>[<expr><name>p_inter</name></expr>]</index></name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>c_inter</name> <operator>==</operator> <name>ch</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>c_inter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>p_inter</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>total_decode</name> <operator>-=</operator> <name>effective</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>c_inter_p</name> <operator>=</operator> <name>c_inter</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_inter_p</name> <operator>=</operator> <name>p_inter</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_predict_point</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><name>y1</name> <operator>-</operator> <name>y0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>adx</name> <init>= <expr><name>x1</name> <operator>-</operator> <name>x0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>dy</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>x</name> <operator>-</operator> <name>x0</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name>err</name> <operator>/</operator> <name>adx</name></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>dy</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>y0</name> <operator>-</operator> <name>off</name></expr> </then><else>: <expr><name>y0</name> <operator>+</operator> <name>off</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>stbv_inverse_db_table</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="number">1.0649863e-07f</literal></expr>, <expr><literal type="number">1.1341951e-07f</literal></expr>, <expr><literal type="number">1.2079015e-07f</literal></expr>, <expr><literal type="number">1.2863978e-07f</literal></expr>, 
<expr><literal type="number">1.3699951e-07f</literal></expr>, <expr><literal type="number">1.4590251e-07f</literal></expr>, <expr><literal type="number">1.5538408e-07f</literal></expr>, <expr><literal type="number">1.6548181e-07f</literal></expr>, 
<expr><literal type="number">1.7623575e-07f</literal></expr>, <expr><literal type="number">1.8768855e-07f</literal></expr>, <expr><literal type="number">1.9988561e-07f</literal></expr>, <expr><literal type="number">2.1287530e-07f</literal></expr>, 
<expr><literal type="number">2.2670913e-07f</literal></expr>, <expr><literal type="number">2.4144197e-07f</literal></expr>, <expr><literal type="number">2.5713223e-07f</literal></expr>, <expr><literal type="number">2.7384213e-07f</literal></expr>, 
<expr><literal type="number">2.9163793e-07f</literal></expr>, <expr><literal type="number">3.1059021e-07f</literal></expr>, <expr><literal type="number">3.3077411e-07f</literal></expr>, <expr><literal type="number">3.5226968e-07f</literal></expr>, 
<expr><literal type="number">3.7516214e-07f</literal></expr>, <expr><literal type="number">3.9954229e-07f</literal></expr>, <expr><literal type="number">4.2550680e-07f</literal></expr>, <expr><literal type="number">4.5315863e-07f</literal></expr>, 
<expr><literal type="number">4.8260743e-07f</literal></expr>, <expr><literal type="number">5.1396998e-07f</literal></expr>, <expr><literal type="number">5.4737065e-07f</literal></expr>, <expr><literal type="number">5.8294187e-07f</literal></expr>, 
<expr><literal type="number">6.2082472e-07f</literal></expr>, <expr><literal type="number">6.6116941e-07f</literal></expr>, <expr><literal type="number">7.0413592e-07f</literal></expr>, <expr><literal type="number">7.4989464e-07f</literal></expr>, 
<expr><literal type="number">7.9862701e-07f</literal></expr>, <expr><literal type="number">8.5052630e-07f</literal></expr>, <expr><literal type="number">9.0579828e-07f</literal></expr>, <expr><literal type="number">9.6466216e-07f</literal></expr>, 
<expr><literal type="number">1.0273513e-06f</literal></expr>, <expr><literal type="number">1.0941144e-06f</literal></expr>, <expr><literal type="number">1.1652161e-06f</literal></expr>, <expr><literal type="number">1.2409384e-06f</literal></expr>, 
<expr><literal type="number">1.3215816e-06f</literal></expr>, <expr><literal type="number">1.4074654e-06f</literal></expr>, <expr><literal type="number">1.4989305e-06f</literal></expr>, <expr><literal type="number">1.5963394e-06f</literal></expr>, 
<expr><literal type="number">1.7000785e-06f</literal></expr>, <expr><literal type="number">1.8105592e-06f</literal></expr>, <expr><literal type="number">1.9282195e-06f</literal></expr>, <expr><literal type="number">2.0535261e-06f</literal></expr>, 
<expr><literal type="number">2.1869758e-06f</literal></expr>, <expr><literal type="number">2.3290978e-06f</literal></expr>, <expr><literal type="number">2.4804557e-06f</literal></expr>, <expr><literal type="number">2.6416497e-06f</literal></expr>, 
<expr><literal type="number">2.8133190e-06f</literal></expr>, <expr><literal type="number">2.9961443e-06f</literal></expr>, <expr><literal type="number">3.1908506e-06f</literal></expr>, <expr><literal type="number">3.3982101e-06f</literal></expr>, 
<expr><literal type="number">3.6190449e-06f</literal></expr>, <expr><literal type="number">3.8542308e-06f</literal></expr>, <expr><literal type="number">4.1047004e-06f</literal></expr>, <expr><literal type="number">4.3714470e-06f</literal></expr>, 
<expr><literal type="number">4.6555282e-06f</literal></expr>, <expr><literal type="number">4.9580707e-06f</literal></expr>, <expr><literal type="number">5.2802740e-06f</literal></expr>, <expr><literal type="number">5.6234160e-06f</literal></expr>, 
<expr><literal type="number">5.9888572e-06f</literal></expr>, <expr><literal type="number">6.3780469e-06f</literal></expr>, <expr><literal type="number">6.7925283e-06f</literal></expr>, <expr><literal type="number">7.2339451e-06f</literal></expr>, 
<expr><literal type="number">7.7040476e-06f</literal></expr>, <expr><literal type="number">8.2047000e-06f</literal></expr>, <expr><literal type="number">8.7378876e-06f</literal></expr>, <expr><literal type="number">9.3057248e-06f</literal></expr>, 
<expr><literal type="number">9.9104632e-06f</literal></expr>, <expr><literal type="number">1.0554501e-05f</literal></expr>, <expr><literal type="number">1.1240392e-05f</literal></expr>, <expr><literal type="number">1.1970856e-05f</literal></expr>, 
<expr><literal type="number">1.2748789e-05f</literal></expr>, <expr><literal type="number">1.3577278e-05f</literal></expr>, <expr><literal type="number">1.4459606e-05f</literal></expr>, <expr><literal type="number">1.5399272e-05f</literal></expr>, 
<expr><literal type="number">1.6400004e-05f</literal></expr>, <expr><literal type="number">1.7465768e-05f</literal></expr>, <expr><literal type="number">1.8600792e-05f</literal></expr>, <expr><literal type="number">1.9809576e-05f</literal></expr>, 
<expr><literal type="number">2.1096914e-05f</literal></expr>, <expr><literal type="number">2.2467911e-05f</literal></expr>, <expr><literal type="number">2.3928002e-05f</literal></expr>, <expr><literal type="number">2.5482978e-05f</literal></expr>, 
<expr><literal type="number">2.7139006e-05f</literal></expr>, <expr><literal type="number">2.8902651e-05f</literal></expr>, <expr><literal type="number">3.0780908e-05f</literal></expr>, <expr><literal type="number">3.2781225e-05f</literal></expr>, 
<expr><literal type="number">3.4911534e-05f</literal></expr>, <expr><literal type="number">3.7180282e-05f</literal></expr>, <expr><literal type="number">3.9596466e-05f</literal></expr>, <expr><literal type="number">4.2169667e-05f</literal></expr>, 
<expr><literal type="number">4.4910090e-05f</literal></expr>, <expr><literal type="number">4.7828601e-05f</literal></expr>, <expr><literal type="number">5.0936773e-05f</literal></expr>, <expr><literal type="number">5.4246931e-05f</literal></expr>, 
<expr><literal type="number">5.7772202e-05f</literal></expr>, <expr><literal type="number">6.1526565e-05f</literal></expr>, <expr><literal type="number">6.5524908e-05f</literal></expr>, <expr><literal type="number">6.9783085e-05f</literal></expr>, 
<expr><literal type="number">7.4317983e-05f</literal></expr>, <expr><literal type="number">7.9147585e-05f</literal></expr>, <expr><literal type="number">8.4291040e-05f</literal></expr>, <expr><literal type="number">8.9768747e-05f</literal></expr>, 
<expr><literal type="number">9.5602426e-05f</literal></expr>, <expr><literal type="number">0.00010181521f</literal></expr>, <expr><literal type="number">0.00010843174f</literal></expr>, <expr><literal type="number">0.00011547824f</literal></expr>, 
<expr><literal type="number">0.00012298267f</literal></expr>, <expr><literal type="number">0.00013097477f</literal></expr>, <expr><literal type="number">0.00013948625f</literal></expr>, <expr><literal type="number">0.00014855085f</literal></expr>, 
<expr><literal type="number">0.00015820453f</literal></expr>, <expr><literal type="number">0.00016848555f</literal></expr>, <expr><literal type="number">0.00017943469f</literal></expr>, <expr><literal type="number">0.00019109536f</literal></expr>, 
<expr><literal type="number">0.00020351382f</literal></expr>, <expr><literal type="number">0.00021673929f</literal></expr>, <expr><literal type="number">0.00023082423f</literal></expr>, <expr><literal type="number">0.00024582449f</literal></expr>, 
<expr><literal type="number">0.00026179955f</literal></expr>, <expr><literal type="number">0.00027881276f</literal></expr>, <expr><literal type="number">0.00029693158f</literal></expr>, <expr><literal type="number">0.00031622787f</literal></expr>, 
<expr><literal type="number">0.00033677814f</literal></expr>, <expr><literal type="number">0.00035866388f</literal></expr>, <expr><literal type="number">0.00038197188f</literal></expr>, <expr><literal type="number">0.00040679456f</literal></expr>, 
<expr><literal type="number">0.00043323036f</literal></expr>, <expr><literal type="number">0.00046138411f</literal></expr>, <expr><literal type="number">0.00049136745f</literal></expr>, <expr><literal type="number">0.00052329927f</literal></expr>, 
<expr><literal type="number">0.00055730621f</literal></expr>, <expr><literal type="number">0.00059352311f</literal></expr>, <expr><literal type="number">0.00063209358f</literal></expr>, <expr><literal type="number">0.00067317058f</literal></expr>, 
<expr><literal type="number">0.00071691700f</literal></expr>, <expr><literal type="number">0.00076350630f</literal></expr>, <expr><literal type="number">0.00081312324f</literal></expr>, <expr><literal type="number">0.00086596457f</literal></expr>, 
<expr><literal type="number">0.00092223983f</literal></expr>, <expr><literal type="number">0.00098217216f</literal></expr>, <expr><literal type="number">0.0010459992f</literal></expr>, <expr><literal type="number">0.0011139742f</literal></expr>, 
<expr><literal type="number">0.0011863665f</literal></expr>, <expr><literal type="number">0.0012634633f</literal></expr>, <expr><literal type="number">0.0013455702f</literal></expr>, <expr><literal type="number">0.0014330129f</literal></expr>, 
<expr><literal type="number">0.0015261382f</literal></expr>, <expr><literal type="number">0.0016253153f</literal></expr>, <expr><literal type="number">0.0017309374f</literal></expr>, <expr><literal type="number">0.0018434235f</literal></expr>, 
<expr><literal type="number">0.0019632195f</literal></expr>, <expr><literal type="number">0.0020908006f</literal></expr>, <expr><literal type="number">0.0022266726f</literal></expr>, <expr><literal type="number">0.0023713743f</literal></expr>, 
<expr><literal type="number">0.0025254795f</literal></expr>, <expr><literal type="number">0.0026895994f</literal></expr>, <expr><literal type="number">0.0028643847f</literal></expr>, <expr><literal type="number">0.0030505286f</literal></expr>, 
<expr><literal type="number">0.0032487691f</literal></expr>, <expr><literal type="number">0.0034598925f</literal></expr>, <expr><literal type="number">0.0036847358f</literal></expr>, <expr><literal type="number">0.0039241906f</literal></expr>, 
<expr><literal type="number">0.0041792066f</literal></expr>, <expr><literal type="number">0.0044507950f</literal></expr>, <expr><literal type="number">0.0047400328f</literal></expr>, <expr><literal type="number">0.0050480668f</literal></expr>, 
<expr><literal type="number">0.0053761186f</literal></expr>, <expr><literal type="number">0.0057254891f</literal></expr>, <expr><literal type="number">0.0060975636f</literal></expr>, <expr><literal type="number">0.0064938176f</literal></expr>, 
<expr><literal type="number">0.0069158225f</literal></expr>, <expr><literal type="number">0.0073652516f</literal></expr>, <expr><literal type="number">0.0078438871f</literal></expr>, <expr><literal type="number">0.0083536271f</literal></expr>, 
<expr><literal type="number">0.0088964928f</literal></expr>, <expr><literal type="number">0.009474637f</literal></expr>, <expr><literal type="number">0.010090352f</literal></expr>, <expr><literal type="number">0.010746080f</literal></expr>, 
<expr><literal type="number">0.011444421f</literal></expr>, <expr><literal type="number">0.012188144f</literal></expr>, <expr><literal type="number">0.012980198f</literal></expr>, <expr><literal type="number">0.013823725f</literal></expr>, 
<expr><literal type="number">0.014722068f</literal></expr>, <expr><literal type="number">0.015678791f</literal></expr>, <expr><literal type="number">0.016697687f</literal></expr>, <expr><literal type="number">0.017782797f</literal></expr>, 
<expr><literal type="number">0.018938423f</literal></expr>, <expr><literal type="number">0.020169149f</literal></expr>, <expr><literal type="number">0.021479854f</literal></expr>, <expr><literal type="number">0.022875735f</literal></expr>, 
<expr><literal type="number">0.024362330f</literal></expr>, <expr><literal type="number">0.025945531f</literal></expr>, <expr><literal type="number">0.027631618f</literal></expr>, <expr><literal type="number">0.029427276f</literal></expr>, 
<expr><literal type="number">0.031339626f</literal></expr>, <expr><literal type="number">0.033376252f</literal></expr>, <expr><literal type="number">0.035545228f</literal></expr>, <expr><literal type="number">0.037855157f</literal></expr>, 
<expr><literal type="number">0.040315199f</literal></expr>, <expr><literal type="number">0.042935108f</literal></expr>, <expr><literal type="number">0.045725273f</literal></expr>, <expr><literal type="number">0.048696758f</literal></expr>, 
<expr><literal type="number">0.051861348f</literal></expr>, <expr><literal type="number">0.055231591f</literal></expr>, <expr><literal type="number">0.058820850f</literal></expr>, <expr><literal type="number">0.062643361f</literal></expr>, 
<expr><literal type="number">0.066714279f</literal></expr>, <expr><literal type="number">0.071049749f</literal></expr>, <expr><literal type="number">0.075666962f</literal></expr>, <expr><literal type="number">0.080584227f</literal></expr>, 
<expr><literal type="number">0.085821044f</literal></expr>, <expr><literal type="number">0.091398179f</literal></expr>, <expr><literal type="number">0.097337747f</literal></expr>, <expr><literal type="number">0.10366330f</literal></expr>, 
<expr><literal type="number">0.11039993f</literal></expr>, <expr><literal type="number">0.11757434f</literal></expr>, <expr><literal type="number">0.12521498f</literal></expr>, <expr><literal type="number">0.13335215f</literal></expr>, 
<expr><literal type="number">0.14201813f</literal></expr>, <expr><literal type="number">0.15124727f</literal></expr>, <expr><literal type="number">0.16107617f</literal></expr>, <expr><literal type="number">0.17154380f</literal></expr>, 
<expr><literal type="number">0.18269168f</literal></expr>, <expr><literal type="number">0.19456402f</literal></expr>, <expr><literal type="number">0.20720788f</literal></expr>, <expr><literal type="number">0.22067342f</literal></expr>, 
<expr><literal type="number">0.23501402f</literal></expr>, <expr><literal type="number">0.25028656f</literal></expr>, <expr><literal type="number">0.26655159f</literal></expr>, <expr><literal type="number">0.28387361f</literal></expr>, 
<expr><literal type="number">0.30232132f</literal></expr>, <expr><literal type="number">0.32196786f</literal></expr>, <expr><literal type="number">0.34289114f</literal></expr>, <expr><literal type="number">0.36517414f</literal></expr>, 
<expr><literal type="number">0.38890521f</literal></expr>, <expr><literal type="number">0.41417847f</literal></expr>, <expr><literal type="number">0.44109412f</literal></expr>, <expr><literal type="number">0.46975890f</literal></expr>, 
<expr><literal type="number">0.50028648f</literal></expr>, <expr><literal type="number">0.53279791f</literal></expr>, <expr><literal type="number">0.56742212f</literal></expr>, <expr><literal type="number">0.60429640f</literal></expr>, 
<expr><literal type="number">0.64356699f</literal></expr>, <expr><literal type="number">0.68538959f</literal></expr>, <expr><literal type="number">0.72993007f</literal></expr>, <expr><literal type="number">0.77736504f</literal></expr>, 
<expr><literal type="number">0.82788260f</literal></expr>, <expr><literal type="number">0.88168307f</literal></expr>, <expr><literal type="number">0.9389798f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>
}</block></expr></init></decl>;</decl_stmt>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_DEFER_FLOOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_LINE_OP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a *= b</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_LINE_OP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = b</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDE_TABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_DIVTAB_NUMER</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_DIVTAB_DENOM</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<decl_stmt><decl><type><name>stbv_int8</name></type> <name><name>stbv_integer_divide_table</name><index>[<expr><name>STBV_DIVTAB_NUMER</name></expr>]</index><index>[<expr><name>STBV_DIVTAB_DENOM</name></expr>]</index></name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__forceinline</name> <name>void</name></type> <name>stbv_draw_line</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><name>y1</name> <operator>-</operator> <name>y0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>adx</name> <init>= <expr><name>x1</name> <operator>-</operator> <name>x0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ady</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>dy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><name>x0</name></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><name>y0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sy</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDE_TABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>adx</name> <operator>&lt;</operator> <name>STBV_DIVTAB_DENOM</name> <operator>&amp;&amp;</operator> <name>ady</name> <operator>&lt;</operator> <name>STBV_DIVTAB_NUMER</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dy</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <operator>-</operator><name><name>stbv_integer_divide_table</name><index>[<expr><name>ady</name></expr>]</index><index>[<expr><name>adx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sy</name> <operator>=</operator> <name>base</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name><name>stbv_integer_divide_table</name><index>[<expr><name>ady</name></expr>]</index><index>[<expr><name>adx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sy</name> <operator>=</operator> <name>base</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>dy</name> <operator>/</operator> <name>adx</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dy</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sy</name> <operator>=</operator> <name>base</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sy</name> <operator>=</operator> <name>base</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>dy</name> <operator>/</operator> <name>adx</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dy</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sy</name> <operator>=</operator> <name>base</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sy</name> <operator>=</operator> <name>base</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>ady</name> <operator>-=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>adx</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x1</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x1</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>x1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STBV_LINE_OP</name><argument_list>(<argument><expr><name><name>output</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>stbv_inverse_db_table</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><operator>++</operator><name>x</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>x1</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>+=</operator> <name>ady</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&gt;=</operator> <name>adx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>-=</operator> <name>adx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>sy</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>base</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>STBV_LINE_OP</name><argument_list>(<argument><expr><name><name>output</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>stbv_inverse_db_table</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_residue_decode</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>book</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rtype</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><name>n</name> <operator>/</operator> <name><name>book</name><operator>-&gt;</operator><name>dimensions</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>step</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_codebook_decode_step</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>book</name></expr></argument>, <argument><expr><name>target</name><operator>+</operator><name>offset</name><operator>+</operator><name>k</name></expr></argument>, <argument><expr><name>n</name><operator>-</operator><name>offset</name><operator>-</operator><name>k</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_codebook_decode</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>book</name></expr></argument>, <argument><expr><name>target</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><name>n</name><operator>-</operator><name>k</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <name><name>book</name><operator>-&gt;</operator><name>dimensions</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>book</name><operator>-&gt;</operator><name>dimensions</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_decode_residue</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name><name>residue_buffers</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rn</name></decl></parameter>, <parameter><decl><type><name>stbv_uint8</name> <modifier>*</modifier></type><name>do_not_decode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>pass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StbvResidue</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>residue_config</name></name> <operator>+</operator> <name>rn</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rtype</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>residue_types</name><index>[<expr><name>rn</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>classbook</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>classwords</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>dimensions</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>actual_size</name> <init>= <expr><ternary><condition><expr><name>rtype</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>n</name><operator>*</operator><literal type="number">2</literal></expr> </then><else>: <expr><name>n</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>limit_r_begin</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>r</name><operator>-&gt;</operator><name>begin</name></name> <operator>&lt;</operator> <name>actual_size</name></expr> ?</condition><then> <expr><name><name>r</name><operator>-&gt;</operator><name>begin</name></name></expr> </then><else>: <expr><name>actual_size</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>limit_r_end</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>r</name><operator>-&gt;</operator><name>end</name></name> <operator>&lt;</operator> <name>actual_size</name></expr> ?</condition><then> <expr><name><name>r</name><operator>-&gt;</operator><name>end</name></name></expr> </then><else>: <expr><name>actual_size</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_read</name> <init>= <expr><name>limit_r_end</name> <operator>-</operator> <name>limit_r_begin</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>part_read</name> <init>= <expr><name>n_read</name> <operator>/</operator> <name><name>r</name><operator>-&gt;</operator><name>part_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp_alloc_point</name> <init>= <expr><call><name>stbv_temp_alloc_save</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDES_IN_RESIDUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>stbv_uint8</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>part_classdata</name> <init>= <expr><operator>(</operator><name>stbv_uint8</name> <operator>*</operator><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>stbv_temp_block_array</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>part_read</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>part_classdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>classifications</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>stbv_temp_block_array</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>part_read</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>classifications</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>STBV_CHECK</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ch</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>do_not_decode</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>residue_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>rtype</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ch</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>do_not_decode</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>ch</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>pass</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>pass</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>pass</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>class_set</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>pcount</name> <operator>&lt;</operator> <name>part_read</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>begin</name></name> <operator>+</operator> <name>pcount</name><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>part_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c_inter</name> <init>= <expr><operator>(</operator><name>z</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>p_inter</name> <init>= <expr><name>z</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pass</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>codebooks</name></name><operator>+</operator><name><name>r</name><operator>-&gt;</operator><name>classbook</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBV_DECODE</name><argument_list>(<argument><expr><name>q</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>STBV_EOP</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDES_IN_RESIDUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>part_classdata</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>class_set</name></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>classdata</name><index>[<expr><name>q</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>classwords</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>classifications</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><name>pcount</name></expr>]</index></name> <operator>=</operator> <name>q</name> <operator>%</operator> <name><name>r</name><operator>-&gt;</operator><name>classifications</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>/=</operator> <name><name>r</name><operator>-&gt;</operator><name>classifications</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>classwords</name> <operator>&amp;&amp;</operator> <name>pcount</name> <operator>&lt;</operator> <name>part_read</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>pcount</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>begin</name></name> <operator>+</operator> <name>pcount</name><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>part_size</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDES_IN_RESIDUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>part_classdata</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>class_set</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>classifications</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>pcount</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>residue_books</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>pass</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>book</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>codebooks</name></name> <operator>+</operator> <name>b</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDES_IN_CODEBOOK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_codebook_decode_deinterleave_repeat</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>book</name></expr></argument>, <argument><expr><name>residue_buffers</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_inter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_inter</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>part_size</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_codebook_decode_deinterleave_repeat</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>book</name></expr></argument>, <argument><expr><name>residue_buffers</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_inter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_inter</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>part_size</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>z</name> <operator>+=</operator> <name><name>r</name><operator>-&gt;</operator><name>part_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_inter</name> <operator>=</operator> <name>z</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_inter</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDES_IN_RESIDUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>++</operator><name>class_set</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></while>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>pcount</name> <operator>&lt;</operator> <name>part_read</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>begin</name></name> <operator>+</operator> <name>pcount</name><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>part_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c_inter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p_inter</name> <init>= <expr><name>z</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pass</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>codebooks</name></name><operator>+</operator><name><name>r</name><operator>-&gt;</operator><name>classbook</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBV_DECODE</name><argument_list>(<argument><expr><name>q</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>STBV_EOP</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDES_IN_RESIDUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>part_classdata</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>class_set</name></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>classdata</name><index>[<expr><name>q</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>classwords</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>classifications</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><name>pcount</name></expr>]</index></name> <operator>=</operator> <name>q</name> <operator>%</operator> <name><name>r</name><operator>-&gt;</operator><name>classifications</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>/=</operator> <name><name>r</name><operator>-&gt;</operator><name>classifications</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>classwords</name> <operator>&amp;&amp;</operator> <name>pcount</name> <operator>&lt;</operator> <name>part_read</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>pcount</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>begin</name></name> <operator>+</operator> <name>pcount</name><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>part_size</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDES_IN_RESIDUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>part_classdata</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>class_set</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>classifications</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>pcount</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>residue_books</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>pass</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>book</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>codebooks</name></name> <operator>+</operator> <name>b</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_codebook_decode_deinterleave_repeat</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>book</name></expr></argument>, <argument><expr><name>residue_buffers</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_inter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_inter</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>part_size</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>z</name> <operator>+=</operator> <name><name>r</name><operator>-&gt;</operator><name>part_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_inter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p_inter</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDES_IN_RESIDUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>++</operator><name>class_set</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><name>pcount</name> <operator>&lt;</operator> <name>part_read</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>begin</name></name> <operator>+</operator> <name>pcount</name><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>part_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c_inter</name> <init>= <expr><name>z</name> <operator>%</operator> <name>ch</name></expr></init></decl>, <decl><type ref="prev"/><name>p_inter</name> <init>= <expr><name>z</name><operator>/</operator><name>ch</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pass</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>codebooks</name></name><operator>+</operator><name><name>r</name><operator>-&gt;</operator><name>classbook</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBV_DECODE</name><argument_list>(<argument><expr><name>q</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>STBV_EOP</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDES_IN_RESIDUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>part_classdata</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>class_set</name></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>classdata</name><index>[<expr><name>q</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>classwords</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>classifications</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><name>pcount</name></expr>]</index></name> <operator>=</operator> <name>q</name> <operator>%</operator> <name><name>r</name><operator>-&gt;</operator><name>classifications</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>/=</operator> <name><name>r</name><operator>-&gt;</operator><name>classifications</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>classwords</name> <operator>&amp;&amp;</operator> <name>pcount</name> <operator>&lt;</operator> <name>part_read</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>pcount</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>begin</name></name> <operator>+</operator> <name>pcount</name><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>part_size</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDES_IN_RESIDUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>part_classdata</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>class_set</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>classifications</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>pcount</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>residue_books</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>pass</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>book</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>codebooks</name></name> <operator>+</operator> <name>b</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_codebook_decode_deinterleave_repeat</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>book</name></expr></argument>, <argument><expr><name>residue_buffers</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_inter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_inter</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>part_size</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>z</name> <operator>+=</operator> <name><name>r</name><operator>-&gt;</operator><name>part_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_inter</name> <operator>=</operator> <name>z</name> <operator>%</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p_inter</name> <operator>=</operator> <name>z</name> <operator>/</operator> <name>ch</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDES_IN_RESIDUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>++</operator><name>class_set</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STBV_CHECK</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pass</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>pass</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>pass</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>class_set</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>pcount</name> <operator>&lt;</operator> <name>part_read</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pass</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ch</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>do_not_decode</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>codebooks</name></name><operator>+</operator><name><name>r</name><operator>-&gt;</operator><name>classbook</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBV_DECODE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>==</operator> <name>STBV_EOP</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDES_IN_RESIDUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>part_classdata</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>class_set</name></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>classdata</name><index>[<expr><name>temp</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>classwords</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>classifications</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name><operator>+</operator><name>pcount</name></expr>]</index></name> <operator>=</operator> <name>temp</name> <operator>%</operator> <name><name>r</name><operator>-&gt;</operator><name>classifications</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>/=</operator> <name><name>r</name><operator>-&gt;</operator><name>classifications</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>classwords</name> <operator>&amp;&amp;</operator> <name>pcount</name> <operator>&lt;</operator> <name>part_read</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>pcount</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ch</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>do_not_decode</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDES_IN_RESIDUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>part_classdata</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>class_set</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>classifications</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>pcount</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>residue_books</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>pass</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><name><name>residue_buffers</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>begin</name></name> <operator>+</operator> <name>pcount</name> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>part_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>part_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>book</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>codebooks</name></name> <operator>+</operator> <name>b</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_residue_decode</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>book</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>rtype</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDES_IN_RESIDUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>++</operator><name>class_set</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></while>
</block_content>}</block></for>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>STBV_CHECK</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDES_IN_RESIDUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>stbv_temp_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>part_classdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>stbv_temp_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>classifications</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>stbv_temp_alloc_restore</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>temp_alloc_point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

void inverse_mdct_slow(float *buffer, int n)
{
int i,j;
int n2 = n &gt;&gt; 1;
float *x = (float *) malloc(sizeof(*x) * n2);
memcpy(x, buffer, sizeof(*x) * n2);
for (i=0; i &lt; n; ++i) {
float acc = 0;
for (j=0; j &lt; n2; ++j)







acc += x[j] * (float) cos(M_PI / 2 / n * (2 * i + 1 + n/2.0)*(2*j+1));
buffer[i] = acc;
}
free(x);
}
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:elif>

<function><type><name>void</name></type> <name>inverse_mdct_slow</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocktype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name><name>mcos</name><index>[<expr><literal type="number">16384</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n2</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>nmask</name> <init>= <expr><operator>(</operator><name>n</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>x</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>x</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal><operator>*</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mcos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name>cos</name><argument_list>(<argument><expr><name>M_PI</name> <operator>/</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>/</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>acc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n2</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>acc</name> <operator>+=</operator> <name><name>x</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>mcos</name><index>[<expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>n2</name><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>nmask</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:elif>


<function><type><name>void</name></type> <name>dct_iv_slow</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name><name>mcos</name><index>[<expr><literal type="number">16384</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>x</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n2</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>nmask</name> <init>= <expr><operator>(</operator><name>n</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>x</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>*</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mcos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name>cos</name><argument_list>(<argument><expr><name>M_PI</name> <operator>/</operator> <literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>/</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>acc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>acc</name> <operator>+=</operator> <name><name>x</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>mcos</name><index>[<expr><operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>nmask</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>inverse_mdct_slow</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocktype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n4</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>n2</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>n3_4</name> <init>= <expr><name>n</name> <operator>-</operator> <name>n4</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>temp</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>n2</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dct_iv_slow</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n4</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>i</name><operator>+</operator><name>n4</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for> 
<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n3_4</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>temp</name><index>[<expr><name>n3_4</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for> 
<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>temp</name><index>[<expr><name>i</name> <operator>-</operator> <name>n3_4</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for> 
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBVORBIS_MDCT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBVORBIS_MDCT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBVORBIS_MDCT</name></expr></cpp:if>


<typedef>typedef <type><struct>struct 
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log2n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>trig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>bitrev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>scale</name></decl>;</decl_stmt>
}</block></struct></type> <name>mdct_lookup</name>;</typedef>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>mdct_init</name><parameter_list>(<parameter><decl><type><name>mdct_lookup</name> <modifier>*</modifier></type><name>lookup</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>mdct_clear</name><parameter_list>(<parameter><decl><type><name>mdct_lookup</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>mdct_backward</name><parameter_list>(<parameter><decl><type><name>mdct_lookup</name> <modifier>*</modifier></type><name>init</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>mdct_lookup</name></type> <name>M1</name></decl>,<decl><type ref="prev"/><name>M2</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>stbv_inverse_mdct</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocktype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mdct_lookup</name> <modifier>*</modifier></type><name>M</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>M1</name><operator>.</operator><name>n</name></name> <operator>==</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>M</name> <operator>=</operator> <operator>&amp;</operator><name>M1</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>M2</name><operator>.</operator><name>n</name></name> <operator>==</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>M</name> <operator>=</operator> <operator>&amp;</operator><name>M2</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>M1</name><operator>.</operator><name>n</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>mdct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M1</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>M</name> <operator>=</operator> <operator>&amp;</operator><name>M1</name></expr>;</expr_stmt> </block_content>}</block></if>
<else>else <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>M2</name><operator>.</operator><name>n</name></name></expr>)</condition><block type="pseudo"><block_content> <asm>__asm int 3;</asm>
<expr_stmt><expr><call><name>mdct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M2</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>M</name> <operator>=</operator> <operator>&amp;</operator><name>M2</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>mdct_backward</name><argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_imdct_step3_iter0_loop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k_off</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>A</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>ee0</name> <init>= <expr><name>e</name> <operator>+</operator> <name>i_off</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>ee2</name> <init>= <expr><name>ee0</name> <operator>+</operator> <name>k_off</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><operator>(</operator><name>n</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>k00_20</name></decl>, <decl><type ref="prev"/><name>k01_21</name></decl>;</decl_stmt>
<expr_stmt><expr><name>k00_20</name> <operator>=</operator> <name><name>ee0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>ee2</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k01_21</name> <operator>=</operator> <name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>ee2</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee2</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>k00_20</name> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>k01_21</name> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>k01_21</name> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>k00_20</name> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>A</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k00_20</name> <operator>=</operator> <name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k01_21</name> <operator>=</operator> <name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>k00_20</name> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>k01_21</name> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>k01_21</name> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>k00_20</name> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>A</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k00_20</name> <operator>=</operator> <name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k01_21</name> <operator>=</operator> <name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>k00_20</name> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>k01_21</name> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>k01_21</name> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>k00_20</name> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>A</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k00_20</name> <operator>=</operator> <name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k01_21</name> <operator>=</operator> <name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name> <operator>+=</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>k00_20</name> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>k01_21</name> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>k01_21</name> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>k00_20</name> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>A</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ee0</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ee2</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_imdct_step3_inner_r_loop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lim</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k_off</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>k00_20</name></decl>, <decl><type ref="prev"/><name>k01_21</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>e0</name> <init>= <expr><name>e</name> <operator>+</operator> <name>d0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>e2</name> <init>= <expr><name>e0</name> <operator>+</operator> <name>k_off</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>lim</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>k00_20</name> <operator>=</operator> <name><name>e0</name><index>[<expr><operator>-</operator><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k01_21</name> <operator>=</operator> <name><name>e0</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e0</name><index>[<expr><operator>-</operator><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e0</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k00_20</name><operator>)</operator><operator>*</operator><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>k01_21</name><operator>)</operator> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k01_21</name><operator>)</operator><operator>*</operator><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>k00_20</name><operator>)</operator> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>+=</operator> <name>k1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k00_20</name> <operator>=</operator> <name><name>e0</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k01_21</name> <operator>=</operator> <name><name>e0</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e0</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e0</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k00_20</name><operator>)</operator><operator>*</operator><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>k01_21</name><operator>)</operator> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k01_21</name><operator>)</operator><operator>*</operator><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>k00_20</name><operator>)</operator> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>+=</operator> <name>k1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k00_20</name> <operator>=</operator> <name><name>e0</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k01_21</name> <operator>=</operator> <name><name>e0</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e0</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e0</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k00_20</name><operator>)</operator><operator>*</operator><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>k01_21</name><operator>)</operator> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k01_21</name><operator>)</operator><operator>*</operator><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>k00_20</name><operator>)</operator> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>+=</operator> <name>k1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k00_20</name> <operator>=</operator> <name><name>e0</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k01_21</name> <operator>=</operator> <name><name>e0</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e0</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name> <operator>+=</operator> <name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e0</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k00_20</name><operator>)</operator><operator>*</operator><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>k01_21</name><operator>)</operator> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e2</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k01_21</name><operator>)</operator><operator>*</operator><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>k00_20</name><operator>)</operator> <operator>*</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>e0</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>e2</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>+=</operator> <name>k1</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_imdct_step3_inner_s_loop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k_off</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a_off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>A0</name> <init>= <expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>A1</name> <init>= <expr><name><name>A</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>A2</name> <init>= <expr><name><name>A</name><index>[<expr><literal type="number">0</literal><operator>+</operator><name>a_off</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>A3</name> <init>= <expr><name><name>A</name><index>[<expr><literal type="number">0</literal><operator>+</operator><name>a_off</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>A4</name> <init>= <expr><name><name>A</name><index>[<expr><literal type="number">0</literal><operator>+</operator><name>a_off</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>A5</name> <init>= <expr><name><name>A</name><index>[<expr><literal type="number">0</literal><operator>+</operator><name>a_off</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>A6</name> <init>= <expr><name><name>A</name><index>[<expr><literal type="number">0</literal><operator>+</operator><name>a_off</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>A7</name> <init>= <expr><name><name>A</name><index>[<expr><literal type="number">0</literal><operator>+</operator><name>a_off</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>k00</name></decl>,<decl><type ref="prev"/><name>k11</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>ee0</name> <init>= <expr><name>e</name> <operator>+</operator><name>i_off</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>ee2</name> <init>= <expr><name>ee0</name><operator>+</operator><name>k_off</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>n</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>k00</name> <operator>=</operator> <name><name>ee0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>ee2</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k11</name> <operator>=</operator> <name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ee0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>ee2</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee2</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k00</name><operator>)</operator> <operator>*</operator> <name>A0</name> <operator>-</operator> <operator>(</operator><name>k11</name><operator>)</operator> <operator>*</operator> <name>A1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k11</name><operator>)</operator> <operator>*</operator> <name>A0</name> <operator>+</operator> <operator>(</operator><name>k00</name><operator>)</operator> <operator>*</operator> <name>A1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k00</name> <operator>=</operator> <name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k11</name> <operator>=</operator> <name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k00</name><operator>)</operator> <operator>*</operator> <name>A2</name> <operator>-</operator> <operator>(</operator><name>k11</name><operator>)</operator> <operator>*</operator> <name>A3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k11</name><operator>)</operator> <operator>*</operator> <name>A2</name> <operator>+</operator> <operator>(</operator><name>k00</name><operator>)</operator> <operator>*</operator> <name>A3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k00</name> <operator>=</operator> <name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k11</name> <operator>=</operator> <name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k00</name><operator>)</operator> <operator>*</operator> <name>A4</name> <operator>-</operator> <operator>(</operator><name>k11</name><operator>)</operator> <operator>*</operator> <name>A5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k11</name><operator>)</operator> <operator>*</operator> <name>A4</name> <operator>+</operator> <operator>(</operator><name>k00</name><operator>)</operator> <operator>*</operator> <name>A5</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k00</name> <operator>=</operator> <name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k11</name> <operator>=</operator> <name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>ee0</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k00</name><operator>)</operator> <operator>*</operator> <name>A6</name> <operator>-</operator> <operator>(</operator><name>k11</name><operator>)</operator> <operator>*</operator> <name>A7</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ee2</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k11</name><operator>)</operator> <operator>*</operator> <name>A6</name> <operator>+</operator> <operator>(</operator><name>k00</name><operator>)</operator> <operator>*</operator> <name>A7</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ee0</name> <operator>-=</operator> <name>k0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ee2</name> <operator>-=</operator> <name>k0</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__forceinline</name> <name>void</name></type> <name>stbv_iter_54</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>k00</name></decl>,<decl><type ref="prev"/><name>k11</name></decl>,<decl><type ref="prev"/><name>k22</name></decl>,<decl><type ref="prev"/><name>k33</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y0</name></decl>,<decl><type ref="prev"/><name>y1</name></decl>,<decl><type ref="prev"/><name>y2</name></decl>,<decl><type ref="prev"/><name>y3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>k00</name> <operator>=</operator> <name><name>z</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y0</name> <operator>=</operator> <name><name>z</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y2</name> <operator>=</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k22</name> <operator>=</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><index>[<expr><operator>-</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>y0</name> <operator>+</operator> <name>y2</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>z</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>y0</name> <operator>-</operator> <name>y2</name></expr>;</expr_stmt> 



<expr_stmt><expr><name>k33</name> <operator>=</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>k00</name> <operator>+</operator> <name>k33</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>z</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>k00</name> <operator>-</operator> <name>k33</name></expr>;</expr_stmt> 



<expr_stmt><expr><name>k11</name> <operator>=</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y1</name> <operator>=</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y3</name> <operator>=</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y1</name> <operator>+</operator> <name>y3</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>z</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>y1</name> <operator>-</operator> <name>y3</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>z</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>k11</name> <operator>-</operator> <name>k22</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>z</name><index>[<expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>k11</name> <operator>+</operator> <name>k22</name></expr>;</expr_stmt> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_imdct_step3_inner_s_loop_ld654</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_off</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base_n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a_off</name> <init>= <expr><name>base_n</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>A2</name> <init>= <expr><name><name>A</name><index>[<expr><literal type="number">0</literal><operator>+</operator><name>a_off</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name>e</name> <operator>+</operator> <name>i_off</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>z</name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name>n</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>z</name> <operator>&gt;</operator> <name>base</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>k00</name></decl>,<decl><type ref="prev"/><name>k11</name></decl>;</decl_stmt>

<expr_stmt><expr><name>k00</name> <operator>=</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k11</name> <operator>=</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><operator>-</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><operator>-</operator><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>k00</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><operator>-</operator><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>k11</name></expr> ;</expr_stmt>

<expr_stmt><expr><name>k00</name> <operator>=</operator> <name><name>z</name><index>[ <expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k11</name> <operator>=</operator> <name><name>z</name><index>[ <expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[ <expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[ <expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[ <expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[ <expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><operator>-</operator><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k00</name><operator>+</operator><name>k11</name><operator>)</operator> <operator>*</operator> <name>A2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><operator>-</operator><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k11</name><operator>-</operator><name>k00</name><operator>)</operator> <operator>*</operator> <name>A2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k00</name> <operator>=</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">12</literal></expr>]</index></name> <operator>-</operator> <name><name>z</name><index>[ <expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>k11</name> <operator>=</operator> <name><name>z</name><index>[ <expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[ <expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[ <expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[ <expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[ <expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><operator>-</operator><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name>k11</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><operator>-</operator><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name>k00</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k00</name> <operator>=</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">14</literal></expr>]</index></name> <operator>-</operator> <name><name>z</name><index>[ <expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>k11</name> <operator>=</operator> <name><name>z</name><index>[ <expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[ <expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[ <expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[ <expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>z</name><index>[ <expr><operator>-</operator><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><operator>-</operator><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><operator>-</operator><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k00</name><operator>+</operator><name>k11</name><operator>)</operator> <operator>*</operator> <name>A2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><operator>-</operator><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k00</name><operator>-</operator><name>k11</name><operator>)</operator> <operator>*</operator> <name>A2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbv_iter_54</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_iter_54</name><argument_list>(<argument><expr><name>z</name><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_inverse_mdct</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocktype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n2</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>n4</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>n8</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ld</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_point</name> <init>= <expr><call><name>stbv_temp_alloc_save</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buf2</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <call><name>stbv_temp_alloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>n2</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buf2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>u</name><init>=<expr><name>NULL</name></expr></init></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>v</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>A</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>A</name><index>[<expr><name>blocktype</name></expr>]</index></name></expr></init></decl>;</decl_stmt>




















<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>d</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>AA</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e_stop</name></decl>;</decl_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>&amp;</operator><name><name>buf2</name><index>[<expr><name>n2</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>AA</name> <operator>=</operator> <name>A</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e_stop</name> <operator>=</operator> <operator>&amp;</operator><name><name>buffer</name><index>[<expr><name>n2</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>e</name> <operator>!=</operator> <name>e_stop</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>AA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>e</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name><name>AA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>AA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>e</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name><name>AA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>AA</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>&amp;</operator><name><name>buffer</name><index>[<expr><name>n2</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>d</name> <operator>&gt;=</operator> <name>buf2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name><name>e</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>AA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>-</operator><name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>AA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name><name>e</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>AA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>-</operator><name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>AA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>AA</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block>





<expr_stmt><expr><name>u</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>buf2</name></expr>;</expr_stmt>




<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>AA</name> <init>= <expr><operator>&amp;</operator><name><name>A</name><index>[<expr><name>n2</name><operator>-</operator><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>d0</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>d1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>e0</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><index>[<expr><name>n4</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d0</name> <operator>=</operator> <operator>&amp;</operator><name><name>u</name><index>[<expr><name>n4</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <operator>&amp;</operator><name><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>AA</name> <operator>&gt;=</operator> <name>A</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>v40_20</name></decl>, <decl><type ref="prev"/><name>v41_21</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v41_21</name> <operator>=</operator> <name><name>e0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>e1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>v40_20</name> <operator>=</operator> <name><name>e0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>e1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>e0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>e1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>e0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>e1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v41_21</name><operator>*</operator><name><name>AA</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name>v40_20</name><operator>*</operator><name><name>AA</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>v40_20</name><operator>*</operator><name><name>AA</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>v41_21</name><operator>*</operator><name><name>AA</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v41_21</name> <operator>=</operator> <name><name>e0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>e1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>v40_20</name> <operator>=</operator> <name><name>e0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>e1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>e0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>e1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>e0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>e1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>v41_21</name><operator>*</operator><name><name>AA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>v40_20</name><operator>*</operator><name><name>AA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>v40_20</name><operator>*</operator><name><name>AA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>v41_21</name><operator>*</operator><name><name>AA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>AA</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d0</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>e0</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>e1</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block>


<expr_stmt><expr><name>ld</name> <operator>=</operator> <call><name>stbv_ilog</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 









<expr_stmt><expr><call><name>stbv_imdct_step3_iter0_loop</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>n2</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>n4</name><operator>*</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_imdct_step3_iter0_loop</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>n2</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>n4</name><operator>*</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>stbv_imdct_step3_inner_r_loop</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>n2</name><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <name>n8</name><operator>*</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_imdct_step3_inner_r_loop</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>n2</name><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <name>n8</name><operator>*</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_imdct_step3_inner_r_loop</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>n2</name><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <name>n8</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_imdct_step3_inner_r_loop</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>n2</name><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <name>n8</name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name><name>l</name> <argument_list type="generic">&lt; <argument><expr><operator>(</operator><name>ld</name><operator>-</operator><literal type="number">3</literal><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&gt;</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>l</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k0</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>l</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>k0_2</name> <init>= <expr><name>k0</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lim</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lim</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbv_imdct_step3_inner_r_loop</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>l</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>n2</name><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <name>k0</name><operator>*</operator><name>i</name></expr></argument>, <argument><expr><operator>-</operator><name>k0_2</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>l</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>ld</name><operator>-</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>l</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k0</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>l</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>k1</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>l</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>k0_2</name> <init>= <expr><name>k0</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rlim</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>l</name><operator>+</operator><literal type="number">6</literal><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lim</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>A0</name> <init>= <expr><name>A</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i_off</name> <operator>=</operator> <name>n2</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>r</name><operator>=</operator><name>rlim</name></expr>;</init> <condition><expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>r</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>stbv_imdct_step3_inner_s_loop</name><argument_list>(<argument><expr><name>lim</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>i_off</name></expr></argument>, <argument><expr><operator>-</operator><name>k0_2</name></expr></argument>, <argument><expr><name>A0</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>A0</name> <operator>+=</operator> <name>k1</name><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i_off</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>






<expr_stmt><expr><call><name>stbv_imdct_step3_inner_s_loop_ld654</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>n2</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<block>{<block_content>
<decl_stmt><decl><type><name>stbv_uint16</name> <modifier>*</modifier></type><name>bitrev</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>stbv_bit_reverse</name><index>[<expr><name>blocktype</name></expr>]</index></name></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>d0</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><index>[<expr><name>n4</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>d1</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><index>[<expr><name>n2</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>d0</name> <operator>&gt;=</operator> <name>v</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k4</name></decl>;</decl_stmt>

<expr_stmt><expr><name>k4</name> <operator>=</operator> <name><name>bitrev</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>u</name><index>[<expr><name>k4</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>u</name><index>[<expr><name>k4</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>u</name><index>[<expr><name>k4</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>u</name><index>[<expr><name>k4</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>k4</name> <operator>=</operator> <name><name>bitrev</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>u</name><index>[<expr><name>k4</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>u</name><index>[<expr><name>k4</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>u</name><index>[<expr><name>k4</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>u</name><index>[<expr><name>k4</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d0</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bitrev</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block>




<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>v</name> <operator>==</operator> <name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>C</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>C</name><index>[<expr><name>blocktype</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>d</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>v</name> <operator>+</operator> <name>n2</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>e</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>a02</name></decl>,<decl><type ref="prev"/><name>a11</name></decl>,<decl><type ref="prev"/><name>b0</name></decl>,<decl><type ref="prev"/><name>b1</name></decl>,<decl><type ref="prev"/><name>b2</name></decl>,<decl><type ref="prev"/><name>b3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a02</name> <operator>=</operator> <name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>e</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a11</name> <operator>=</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>e</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b0</name> <operator>=</operator> <name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>a02</name> <operator>+</operator> <name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>a11</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>a11</name> <operator>-</operator> <name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>a02</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b2</name> <operator>=</operator> <name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>e</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b3</name> <operator>=</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>e</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>b2</name> <operator>+</operator> <name>b0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>b3</name> <operator>+</operator> <name>b1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b2</name> <operator>-</operator> <name>b0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>b1</name> <operator>-</operator> <name>b3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a02</name> <operator>=</operator> <name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a11</name> <operator>=</operator> <name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b0</name> <operator>=</operator> <name><name>C</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><name>a02</name> <operator>+</operator> <name><name>C</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name>a11</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <name><name>C</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><name>a11</name> <operator>-</operator> <name><name>C</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name>a02</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b2</name> <operator>=</operator> <name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>e</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b3</name> <operator>=</operator> <name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>e</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b2</name> <operator>+</operator> <name>b0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>b3</name> <operator>+</operator> <name>b1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>b2</name> <operator>-</operator> <name>b0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>b1</name> <operator>-</operator> <name>b3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block>











<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>d0</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>d1</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>d2</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>d3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>B</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>B</name><index>[<expr><name>blocktype</name></expr>]</index></name> <operator>+</operator> <name>n2</name> <operator>-</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>buf2</name> <operator>+</operator> <name>n2</name> <operator>-</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>d0</name> <operator>=</operator> <operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <operator>&amp;</operator><name><name>buffer</name><index>[<expr><name>n2</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <operator>&amp;</operator><name><name>buffer</name><index>[<expr><name>n2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d3</name> <operator>=</operator> <operator>&amp;</operator><name><name>buffer</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>e</name> <operator>&gt;=</operator> <name>v</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>p0</name></decl>,<decl><type ref="prev"/><name>p1</name></decl>,<decl><type ref="prev"/><name>p2</name></decl>,<decl><type ref="prev"/><name>p3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p3</name> <operator>=</operator> <name><name>e</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>*</operator><name><name>B</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>e</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>*</operator><name><name>B</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>-</operator><name><name>e</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>*</operator><name><name>B</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>e</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>*</operator><name><name>B</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>d0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>p3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator> <name>p3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <name><name>e</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>*</operator><name><name>B</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>e</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>*</operator><name><name>B</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p0</name> <operator>=</operator> <operator>-</operator><name><name>e</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>*</operator><name><name>B</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>e</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>*</operator><name><name>B</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>d0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator> <name>p1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>p0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>p0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p3</name> <operator>=</operator> <name><name>e</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name><name>B</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>e</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>-</operator><name><name>e</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>e</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><name><name>B</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>d0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>p3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator> <name>p3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p0</name> <operator>=</operator> <operator>-</operator><name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>d0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator> <name>p1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>p0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>p0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>B</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d0</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d3</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block>

<expr_stmt><expr><call><name>stbv_temp_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_temp_alloc_restore</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>save_point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

void inverse_mdct_naive(float *buffer, int n)
{
float s;
float A[1 &lt;&lt; 12], B[1 &lt;&lt; 12], C[1 &lt;&lt; 11];
int i,k,k2,k4, n2 = n &gt;&gt; 1, n4 = n &gt;&gt; 2, n8 = n &gt;&gt; 3, l;
int n3_4 = n - n4, ld;


float u[1 &lt;&lt; 13], X[1 &lt;&lt; 13], v[1 &lt;&lt; 13], w[1 &lt;&lt; 13];


for (k=k2=0; k &lt; n4; ++k,k2+=2) {
A[k2 ] = (float) cos(4*k*M_PI/n);
A[k2+1] = (float) -sin(4*k*M_PI/n);
B[k2 ] = (float) cos((k2+1)*M_PI/n/2);
B[k2+1] = (float) sin((k2+1)*M_PI/n/2);
}
for (k=k2=0; k &lt; n8; ++k,k2+=2) {
C[k2 ] = (float) cos(2*(k2+1)*M_PI/n);
C[k2+1] = (float) -sin(2*(k2+1)*M_PI/n);
}









for (k=0; k &lt; n2; ++k) u[k] = buffer[k];
for ( ; k &lt; n ; ++k) u[k] = -buffer[n - k - 1];


for (k=k2=k4=0; k &lt; n4; k+=1, k2+=2, k4+=4) {
v[n-k4-1] = (u[k4] - u[n-k4-1]) * A[k2] - (u[k4+2] - u[n-k4-3])*A[k2+1];
v[n-k4-3] = (u[k4] - u[n-k4-1]) * A[k2+1] + (u[k4+2] - u[n-k4-3])*A[k2];
}

for (k=k4=0; k &lt; n8; k+=1, k4+=4) {
w[n2+3+k4] = v[n2+3+k4] + v[k4+3];
w[n2+1+k4] = v[n2+1+k4] + v[k4+1];
w[k4+3] = (v[n2+3+k4] - v[k4+3])*A[n2-4-k4] - (v[n2+1+k4]-v[k4+1])*A[n2-3-k4];
w[k4+1] = (v[n2+1+k4] - v[k4+1])*A[n2-4-k4] + (v[n2+3+k4]-v[k4+3])*A[n2-3-k4];
}

ld = stbv_ilog(n) - 1; 
for (l=0; l &lt; ld-3; ++l) {
int k0 = n &gt;&gt; (l+2), k1 = 1 &lt;&lt; (l+3);
int rlim = n &gt;&gt; (l+4), r4, r;
int s2lim = 1 &lt;&lt; (l+2), s2;
for (r=r4=0; r &lt; rlim; r4+=4,++r) {
for (s2=0; s2 &lt; s2lim; s2+=2) {
u[n-1-k0*s2-r4] = w[n-1-k0*s2-r4] + w[n-1-k0*(s2+1)-r4];
u[n-3-k0*s2-r4] = w[n-3-k0*s2-r4] + w[n-3-k0*(s2+1)-r4];
u[n-1-k0*(s2+1)-r4] = (w[n-1-k0*s2-r4] - w[n-1-k0*(s2+1)-r4]) * A[r*k1]
- (w[n-3-k0*s2-r4] - w[n-3-k0*(s2+1)-r4]) * A[r*k1+1];
u[n-3-k0*(s2+1)-r4] = (w[n-3-k0*s2-r4] - w[n-3-k0*(s2+1)-r4]) * A[r*k1]
+ (w[n-1-k0*s2-r4] - w[n-1-k0*(s2+1)-r4]) * A[r*k1+1];
}
}
if (l+1 &lt; ld-3) {

memcpy(w, u, sizeof(u));
}
}


for (i=0; i &lt; n8; ++i) {
int j = stbv_bit_reverse(i) &gt;&gt; (32-ld+3);
assert(j &lt; n8);
if (i == j) {


int i8 = i &lt;&lt; 3;
v[i8+1] = u[i8+1];
v[i8+3] = u[i8+3];
v[i8+5] = u[i8+5];
v[i8+7] = u[i8+7];
} else if (i &lt; j) {
int i8 = i &lt;&lt; 3, j8 = j &lt;&lt; 3;
v[j8+1] = u[i8+1], v[i8+1] = u[j8 + 1];
v[j8+3] = u[i8+3], v[i8+3] = u[j8 + 3];
v[j8+5] = u[i8+5], v[i8+5] = u[j8 + 5];
v[j8+7] = u[i8+7], v[i8+7] = u[j8 + 7];
}
}

for (k=0; k &lt; n2; ++k) {
w[k] = v[k*2+1];
}

for (k=k2=k4=0; k &lt; n8; ++k, k2 += 2, k4 += 4) {
u[n-1-k2] = w[k4];
u[n-2-k2] = w[k4+1];
u[n3_4 - 1 - k2] = w[k4+2];
u[n3_4 - 2 - k2] = w[k4+3];
}

for (k=k2=0; k &lt; n8; ++k, k2 += 2) {
v[n2 + k2 ] = ( u[n2 + k2] + u[n-2-k2] + C[k2+1]*(u[n2+k2]-u[n-2-k2]) + C[k2]*(u[n2+k2+1]+u[n-2-k2+1]))/2;
v[n-2 - k2] = ( u[n2 + k2] + u[n-2-k2] - C[k2+1]*(u[n2+k2]-u[n-2-k2]) - C[k2]*(u[n2+k2+1]+u[n-2-k2+1]))/2;
v[n2+1+ k2] = ( u[n2+1+k2] - u[n-1-k2] + C[k2+1]*(u[n2+1+k2]+u[n-1-k2]) - C[k2]*(u[n2+k2]-u[n-2-k2]))/2;
v[n-1 - k2] = (-u[n2+1+k2] + u[n-1-k2] + C[k2+1]*(u[n2+1+k2]+u[n-1-k2]) - C[k2]*(u[n2+k2]-u[n-2-k2]))/2;
}

for (k=k2=0; k &lt; n4; ++k,k2 += 2) {
X[k] = v[k2+n2]*B[k2 ] + v[k2+1+n2]*B[k2+1];
X[n2-1-k] = v[k2+n2]*B[k2+1] - v[k2+1+n2]*B[k2 ];
}





s = 0.5; 




for (i=0; i &lt; n4 ; ++i) buffer[i] = s * X[i+n4];
for ( ; i &lt; n3_4; ++i) buffer[i] = -s * X[n3_4 - i - 1];
for ( ; i &lt; n ; ++i) buffer[i] = -s * X[i - n3_4];
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>float</name> <modifier>*</modifier></type><name>stbv_get_window</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name><name>f</name><operator>-&gt;</operator><name>blocksize_0</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>f</name><operator>-&gt;</operator><name>window</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name><name>f</name><operator>-&gt;</operator><name>blocksize_1</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>f</name><operator>-&gt;</operator><name>window</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_DEFER_FLOOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>stbv_int16</name></type> <name>STBV_YTYPE</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>int</name></type> <name>STBV_YTYPE</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_do_floor</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>StbvMapping</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>STBV_YTYPE</name> <modifier>*</modifier></type><name>finalY</name></decl></parameter>, <parameter><decl><type><name>stbv_uint8</name> <modifier>*</modifier></type><name>step2_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n2</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name><name>map</name><operator>-&gt;</operator><name>chan</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mux</name></expr></init></decl>, <decl><type ref="prev"/><name>floor</name></decl>;</decl_stmt>
<expr_stmt><expr><name>floor</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>submap_floor</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>floor_types</name><index>[<expr><name>floor</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_stream</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>StbvFloor1</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>floor_config</name><index>[<expr><name>floor</name></expr>]</index></name><operator>.</operator><name>floor1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>,<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ly</name> <init>= <expr><name><name>finalY</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>g</name><operator>-&gt;</operator><name>floor1_multiplier</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>q</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>values</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>q</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>sorted_order</name><index>[<expr><name>q</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_DEFER_FLOOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>finalY</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name><name>step2_flag</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hy</name> <init>= <expr><name><name>finalY</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>g</name><operator>-&gt;</operator><name>floor1_multiplier</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hx</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>Xlist</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lx</name> <operator>!=</operator> <name>hx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbv_draw_line</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>lx</name></expr></argument>,<argument><expr><name>ly</name></expr></argument>, <argument><expr><name>hx</name></expr></argument>,<argument><expr><name>hy</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>STBV_CHECK</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lx</name> <operator>=</operator> <name>hx</name></expr><operator>,</operator> <expr><name>ly</name> <operator>=</operator> <name>hy</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>lx</name> <operator>&lt;</operator> <name>n2</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><name>lx</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n2</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STBV_LINE_OP</name><argument_list>(<argument><expr><name><name>target</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>stbv_inverse_db_table</name><index>[<expr><name>ly</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>STBV_CHECK</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_vorbis_decode_initial</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_left_start</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_left_end</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_right_start</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_right_end</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>StbvMode</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>prev</name></decl>, <decl><type ref="prev"/><name>next</name></decl>, <decl><type ref="prev"/><name>window_center</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffer_start</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>channel_buffer_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>retry</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_maybe_start_packet</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STBV_IS_PUSH_MODE</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>VORBIS_bad_packet_type</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>STBV_EOP</name> <operator>!=</operator> <call><name>stbv_get8_packet</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>alloc</name><operator>.</operator><name>alloc_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>alloc</name><operator>.</operator><name>alloc_buffer_length_in_bytes</name></name> <operator>==</operator> <name><name>f</name><operator>-&gt;</operator><name>temp_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>stbv_ilog</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>mode_count</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>STBV_EOP</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>mode_count</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>mode</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>mode_config</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>blockflag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>blocksize_1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>next</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>blocksize_0</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name>window_center</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>blockflag</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>prev</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_left_start</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>blocksize_0</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_left_end</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>blocksize_0</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_left_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_left_end</name> <operator>=</operator> <name>window_center</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>blockflag</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>next</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_right_start</name> <operator>=</operator> <operator>(</operator><name>n</name><operator>*</operator><literal type="number">3</literal> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>blocksize_0</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_right_end</name> <operator>=</operator> <operator>(</operator><name>n</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>blocksize_0</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p_right_start</name> <operator>=</operator> <name>window_center</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_right_end</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_vorbis_decode_packet_rest</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name>StbvMode</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left_start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left_end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right_start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right_end</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_left</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>StbvMapping</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>n2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>zero_channel</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>really_zero_channel</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>



<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>blocksize</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>blockflag</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>map</name> <operator>=</operator> <operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>mapping</name></name></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><name>n2</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBV_CHECK</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name><name>map</name><operator>-&gt;</operator><name>chan</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mux</name></expr></init></decl>, <decl><type ref="prev"/><name>floor</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>zero_channel</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>floor</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>submap_floor</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>floor_types</name><index>[<expr><name>floor</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_stream</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>StbvFloor1</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>floor_config</name><index>[<expr><name>floor</name></expr>]</index></name><operator>.</operator><name>floor1</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>finalY</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name><name>step2_flag</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>range_list</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">256</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>range</name> <init>= <expr><name><name>range_list</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>floor1_multiplier</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>finalY</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>finalY</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>finalY</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>stbv_ilog</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>finalY</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>stbv_ilog</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>partitions</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pclass</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>partition_class_list</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cdim</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>class_dimensions</name><index>[<expr><name>pclass</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cbits</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>class_subclasses</name><index>[<expr><name>pclass</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>csub</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>cbits</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cbits</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>codebooks</name></name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>class_masterbooks</name><index>[<expr><name>pclass</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBV_DECODE</name><argument_list>(<argument><expr><name>cval</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>cdim</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>book</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>subclass_books</name><index>[<expr><name>pclass</name></expr>]</index><index>[<expr><name>cval</name> <operator>&amp;</operator> <name>csub</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cval</name> <operator>=</operator> <name>cval</name> <operator>&gt;&gt;</operator> <name>cbits</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>book</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>codebooks</name></name> <operator>+</operator> <name>book</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBV_DECODE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>finalY</name><index>[<expr><name>offset</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>finalY</name><index>[<expr><name>offset</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>==</operator> <name>STBV_INVALID_BITS</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>step2_flag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>step2_flag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>values</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>low</name></decl>, <decl><type ref="prev"/><name>high</name></decl>, <decl><type ref="prev"/><name>pred</name></decl>, <decl><type ref="prev"/><name>highroom</name></decl>, <decl><type ref="prev"/><name>lowroom</name></decl>, <decl><type ref="prev"/><name>room</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name>low</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>stbv_neighbors</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>stbv_neighbors</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <call><name>stbv_predict_point</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>Xlist</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>Xlist</name><index>[<expr><name>low</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>Xlist</name><index>[<expr><name>high</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>finalY</name><index>[<expr><name>low</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>finalY</name><index>[<expr><name>high</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>finalY</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>highroom</name> <operator>=</operator> <name>range</name> <operator>-</operator> <name>pred</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lowroom</name> <operator>=</operator> <name>pred</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>highroom</name> <operator>&lt;</operator> <name>lowroom</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>room</name> <operator>=</operator> <name>highroom</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>room</name> <operator>=</operator> <name>lowroom</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>step2_flag</name><index>[<expr><name>low</name></expr>]</index></name> <operator>=</operator> <name><name>step2_flag</name><index>[<expr><name>high</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>step2_flag</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <name>room</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>highroom</name> <operator>&gt;</operator> <name>lowroom</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>finalY</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>val</name> <operator>-</operator> <name>lowroom</name> <operator>+</operator> <name>pred</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>finalY</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>pred</name> <operator>-</operator> <name>val</name> <operator>+</operator> <name>highroom</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><name>val</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>finalY</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>pred</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>val</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>finalY</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>pred</name> <operator>+</operator> <operator>(</operator><name>val</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>step2_flag</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>finalY</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>pred</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_DEFER_FLOOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>stbv_do_floor</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>floor_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>finalY</name></expr></argument>, <argument><expr><name>step2_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>values</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>step2_flag</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>finalY</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<label><name>error</name>:</label>
<expr_stmt><expr><name><name>zero_channel</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>STBV_CHECK</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>alloc</name><operator>.</operator><name>alloc_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>alloc</name><operator>.</operator><name>alloc_buffer_length_in_bytes</name></name> <operator>==</operator> <name><name>f</name><operator>-&gt;</operator><name>temp_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>really_zero_channel</name></expr></argument>, <argument><expr><name>zero_channel</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>really_zero_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>coupling_steps</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>zero_channel</name><index>[<expr><name><name>map</name><operator>-&gt;</operator><name>chan</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>magnitude</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>zero_channel</name><index>[<expr><name><name>map</name><operator>-&gt;</operator><name>chan</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>angle</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zero_channel</name><index>[<expr><name><name>map</name><operator>-&gt;</operator><name>chan</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>magnitude</name></expr>]</index></name> <operator>=</operator> <name><name>zero_channel</name><index>[<expr><name><name>map</name><operator>-&gt;</operator><name>chan</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>angle</name></expr>]</index></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>STBV_CHECK</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>submaps</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name><name>residue_buffers</name><index>[<expr><name>STB_VORBIS_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name><name>do_not_decode</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>chan</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>mux</name> <operator>==</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>zero_channel</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>do_not_decode</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>residue_buffers</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>do_not_decode</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>residue_buffers</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>channel_buffers</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>ch</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>submap_residue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_decode_residue</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>residue_buffers</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>do_not_decode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>alloc</name><operator>.</operator><name>alloc_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>alloc</name><operator>.</operator><name>alloc_buffer_length_in_bytes</name></name> <operator>==</operator> <name><name>f</name><operator>-&gt;</operator><name>temp_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>STBV_CHECK</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>coupling_steps</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n2</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffers</name><index>[<expr><name><name>map</name><operator>-&gt;</operator><name>chan</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>magnitude</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffers</name><index>[<expr><name><name>map</name><operator>-&gt;</operator><name>chan</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>angle</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n2</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>a2</name></decl>,<decl><type ref="prev"/><name>m2</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m2</name> <operator>=</operator> <name><name>m</name><index>[<expr><name>j</name></expr>]</index></name></expr><operator>,</operator> <expr><name>a2</name> <operator>=</operator> <name><name>m</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <name><name>m</name><index>[<expr><name>j</name></expr>]</index></name></expr><operator>,</operator> <expr><name>m2</name> <operator>=</operator> <name><name>m</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m2</name> <operator>=</operator> <name><name>m</name><index>[<expr><name>j</name></expr>]</index></name></expr><operator>,</operator> <expr><name>a2</name> <operator>=</operator> <name><name>m</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <name><name>m</name><index>[<expr><name>j</name></expr>]</index></name></expr><operator>,</operator> <expr><name>m2</name> <operator>=</operator> <name><name>m</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>m</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>m2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>a2</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>STBV_CHECK</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_DEFER_FLOOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>really_zero_channel</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>channel_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>stbv_do_floor</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>finalY</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>really_zero_channel</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>channel_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n2</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffers</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*=</operator> <name><name>f</name><operator>-&gt;</operator><name>floor_buffers</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>STBV_CHECK</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbv_inverse_mdct</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>blockflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>STBV_CHECK</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>stbv_flush_packet</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>first_decode</name></name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>current_loc</name></name> <operator>=</operator> <operator>-</operator><name>n2</name></expr>;</expr_stmt> 


<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>discard_samples_deferred</name></name> <operator>=</operator> <name>n</name> <operator>-</operator> <name>right_end</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>current_loc_valid</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>first_decode</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>discard_samples_deferred</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>discard_samples_deferred</name></name> <operator>&gt;=</operator> <name>right_start</name> <operator>-</operator> <name>left_start</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>discard_samples_deferred</name></name> <operator>-=</operator> <operator>(</operator><name>right_start</name> <operator>-</operator> <name>left_start</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>left_start</name> <operator>=</operator> <name>right_start</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_left</name> <operator>=</operator> <name>left_start</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>left_start</name> <operator>+=</operator> <name><name>f</name><operator>-&gt;</operator><name>discard_samples_deferred</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_left</name> <operator>=</operator> <name>left_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>discard_samples_deferred</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>previous_length</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>current_loc_valid</name></name></expr>)</condition> <block>{<block_content>






</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>last_seg_which</name></name> <operator>==</operator> <name><name>f</name><operator>-&gt;</operator><name>end_seg_with_known_loc</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>current_loc_valid</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>page_flag</name></name> <operator>&amp;</operator> <name>STBV_PAGEFLAG_last_page</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>current_end</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>known_loc_for_packet</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>current_end</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>current_loc</name></name> <operator>+</operator> <operator>(</operator><name>right_end</name><operator>-</operator><name>left_start</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>current_end</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>current_loc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>current_end</name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>current_loc</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <name>left_start</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>len</name> <operator>&gt;</operator> <name>right_end</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>right_end</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>current_loc</name></name> <operator>+=</operator> <operator>*</operator><name>len</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>current_loc</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>known_loc_for_packet</name></name> <operator>-</operator> <operator>(</operator><name>n2</name><operator>-</operator><name>left_start</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>current_loc_valid</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>current_loc_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>current_loc</name></name> <operator>+=</operator> <operator>(</operator><name>right_start</name> <operator>-</operator> <name>left_start</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>alloc</name><operator>.</operator><name>alloc_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>alloc</name><operator>.</operator><name>alloc_buffer_length_in_bytes</name></name> <operator>==</operator> <name><name>f</name><operator>-&gt;</operator><name>temp_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>right_end</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>STBV_CHECK</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_vorbis_decode_packet</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_left</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>, <decl><type ref="prev"/><name>left_end</name></decl>, <decl><type ref="prev"/><name>right_end</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_vorbis_decode_initial</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>p_left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left_end</name></expr></argument>, <argument><expr><name>p_right</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>stbv_vorbis_decode_packet_rest</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>mode_config</name></name> <operator>+</operator> <name>mode</name></expr></argument>, <argument><expr><operator>*</operator><name>p_left</name></expr></argument>, <argument><expr><name>left_end</name></expr></argument>, <argument><expr><operator>*</operator><name>p_right</name></expr></argument>, <argument><expr><name>right_end</name></expr></argument>, <argument><expr><name>p_left</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_vorbis_finish_frame</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>prev</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>









<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>previous_length</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>previous_length</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><call><name>stbv_get_window</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffers</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>left</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator>
<name><name>f</name><operator>-&gt;</operator><name>channel_buffers</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>left</name><operator>+</operator><name>j</name></expr>]</index></name><operator>*</operator><name><name>w</name><index>[ <expr><name>j</name></expr>]</index></name> <operator>+</operator>
<name><name>f</name><operator>-&gt;</operator><name>previous_window</name><index>[<expr><name>i</name></expr>]</index><index>[ <expr><name>j</name></expr>]</index></name><operator>*</operator><name><name>w</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>previous_length</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>previous_length</name></name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>right</name></expr>;</expr_stmt>







<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>right</name><operator>+</operator><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>previous_window</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>channel_buffers</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>right</name><operator>+</operator><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prev</name></expr>)</condition><block type="pseudo"><block_content>



<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>right</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>right</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>samples_output</name></name> <operator>+=</operator> <name>right</name><operator>-</operator><name>left</name></expr>;</expr_stmt>

<return>return <expr><name>right</name> <operator>-</operator> <name>left</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_vorbis_pump_first_frame</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>right</name></decl>, <decl><type ref="prev"/><name>left</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>stbv_vorbis_decode_packet</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbv_vorbis_finish_frame</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_PUSHDATA_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_is_whole_packet_present</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_page</name></decl></parameter>)</parameter_list>
<block>{<block_content>








<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>next_seg</name></name></expr></init></decl>, <decl><type ref="prev"/><name>first</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<for>for <control>(<init>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>segment_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>f</name><operator>-&gt;</operator><name>segments</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>segments</name><index>[<expr><name>s</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> 
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>end_page</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>segment_count</name></name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_stream</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name><name>f</name><operator>-&gt;</operator><name>segment_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>stream_end</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_need_more_data</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>s</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>stbv_uint8</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">26</literal> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>stream_end</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_need_more_data</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>stbv_ogg_page_header</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_stream</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_stream</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>previous_length</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <name>STBV_PAGEFLAG_continued_packet</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_stream</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>


</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <name>STBV_PAGEFLAG_continued_packet</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_stream</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name><operator>+</operator><literal type="number">27</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>stream_end</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_need_more_data</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>q</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>q</name><index>[<expr><name>s</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>end_page</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_stream</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>stream_end</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_need_more_data</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_start_decoder</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name><name>header</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>max_submaps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>longest_floorlist</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_start_page</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>page_flag</name></name> <operator>&amp;</operator> <name>STBV_PAGEFLAG_first_page</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_first_page</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>page_flag</name></name> <operator>&amp;</operator> <name>STBV_PAGEFLAG_last_page</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_first_page</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>page_flag</name></name> <operator>&amp;</operator> <name>STBV_PAGEFLAG_continued_packet</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_first_page</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>segment_count</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_first_page</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>segments</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_first_page</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STBV_VORBIS_packet_id</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_first_page</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_getn</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_unexpected_eof</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_vorbis_validate</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_first_page</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbv_get32</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_first_page</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_first_page</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <name>STB_VORBIS_MAX_CHANNELS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_too_many_channels</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <call><name>stbv_get32</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_first_page</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbv_get32</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>stbv_get32</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>stbv_get32</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>log0</name></decl>,<decl><type ref="prev"/><name>log1</name></decl>;</decl_stmt>
<expr_stmt><expr><name>log0</name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>log1</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>blocksize_0</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>blocksize_1</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>log0</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">6</literal> <operator>||</operator> <name>log0</name></expr></argument> &gt;</argument_list></name> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>log1</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">6</literal> <operator>||</operator> <name>log1</name></expr></argument> &gt;</argument_list></name> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>log0</name> <operator>&gt;</operator> <name>log1</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>


<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_first_page</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_start_page</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_start_packet</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>stbv_next_segment</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_skip</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>bytes_in_seg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>len</name></expr>)</condition>;</do>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_start_packet</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_PUSHDATA_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>STBV_IS_PUSH_MODE</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_is_whole_packet_present</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>error</name></name> <operator>==</operator> <name>VORBIS_invalid_stream</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>VORBIS_invalid_setup</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>stbv_crc32_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>stbv_get8_packet</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STBV_VORBIS_packet_setup</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>header</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>stbv_get8_packet</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_vorbis_validate</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>codebook_count</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>codebooks</name></name> <operator>=</operator> <operator>(</operator><name>StbvCodebook</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>codebooks</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>codebook_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>codebooks</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>codebooks</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>codebooks</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>codebook_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>codebook_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>stbv_uint32</name> <modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ordered</name></decl>, <decl><type ref="prev"/><name>sorted_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name> <modifier>*</modifier></type><name>lengths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>codebooks</name></name><operator>+</operator><name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBV_CHECK</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <literal type="number">0x42</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <literal type="number">0x43</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <literal type="number">0x56</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dimensions</name></name> <operator>=</operator> <operator>(</operator><call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <operator>(</operator><call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ordered</name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sparse</name></name> <operator>=</operator> <ternary><condition><expr><name>ordered</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>dimensions</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>entries</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sparse</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lengths</name> <operator>=</operator> <operator>(</operator><name>stbv_uint8</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_temp_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>lengths</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>codeword_lengths</name></name> <operator>=</operator> <operator>(</operator><name>stbv_uint8</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lengths</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ordered</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>current_entry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>current_length</name> <init>= <expr><call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>current_entry</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>entries</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>entries</name></name> <operator>-</operator> <name>current_entry</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>stbv_ilog</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>current_entry</name> <operator>+</operator> <name>n</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>entries</name></name></expr>)</condition> <block>{<block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>lengths</name> <operator>+</operator> <name>current_entry</name></expr></argument>, <argument><expr><name>current_length</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_entry</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>current_length</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>entries</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>present</name> <init>= <expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>sparse</name></name></expr> ?</condition><then> <expr><call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>present</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>lengths</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>total</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lengths</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>lengths</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NO_CODE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sparse</name></name> <operator>&amp;&amp;</operator> <name>total</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>entries</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>entries</name></name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>f</name><operator>-&gt;</operator><name>setup_temp_memory_required</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>setup_temp_memory_required</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>entries</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>codeword_lengths</name></name> <operator>=</operator> <operator>(</operator><name>stbv_uint8</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>codeword_lengths</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>codeword_lengths</name></name></expr></argument>, <argument><expr><name>lengths</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_setup_temp_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>lengths</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>lengths</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>codeword_lengths</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sparse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sparse</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sorted_count</name> <operator>=</operator> <name>total</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>sorted_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_HUFFMAN_BINARY_SEARCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>entries</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>lengths</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name>STB_VORBIS_FAST_HUFFMAN_LENGTH</name> <operator>&amp;&amp;</operator> <name><name>lengths</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NO_CODE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>sorted_count</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name> <operator>=</operator> <name>sorted_count</name></expr>;</expr_stmt>
<expr_stmt><expr><name>values</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBV_CHECK</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>sparse</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>codewords</name></name> <operator>=</operator> <operator>(</operator><name>stbv_uint32</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>codewords</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>codewords</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>codeword_lengths</name></name> <operator>=</operator> <operator>(</operator><name>stbv_uint8</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>codeword_lengths</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>codewords</name></name> <operator>=</operator> <operator>(</operator><name>stbv_uint32</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_temp_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>codewords</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>codewords</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>values</name> <operator>=</operator> <operator>(</operator><name>stbv_uint32</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_temp_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>values</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>values</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>entries</name></name> <operator>+</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>codewords</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>values</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>setup_temp_memory_required</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>setup_temp_memory_required</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_compute_codewords</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>lengths</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sparse</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>stbv_setup_temp_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sorted_codewords</name></name> <operator>=</operator> <operator>(</operator><name>stbv_uint32</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>sorted_codewords</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sorted_codewords</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sorted_values</name></name> <operator>=</operator> <operator>(</operator> <name>int</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>sorted_values</name></name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sorted_values</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>c</name><operator>-&gt;</operator><name>sorted_values</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sorted_values</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_compute_sorted_huffman</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>lengths</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sparse</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stbv_setup_temp_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>values</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_setup_temp_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>codewords</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>codewords</name></name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_setup_temp_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>lengths</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>codewords</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stbv_compute_accelerated_huffman</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBV_CHECK</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lookup_type</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>lookup_type</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>lookup_type</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbv_uint16</name> <modifier>*</modifier></type><name>mults</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>minimum_value</name></name> <operator>=</operator> <call><name>stbv_float32_unpack</name><argument_list>(<argument><expr><call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>delta_value</name></name> <operator>=</operator> <call><name>stbv_float32_unpack</name><argument_list>(<argument><expr><call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>value_bits</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sequence_p</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>lookup_type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lookup_values</name></name> <operator>=</operator> <call><name>stbv_lookup1_values</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>dimensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lookup_values</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>entries</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>dimensions</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>lookup_values</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mults</name> <operator>=</operator> <operator>(</operator><name>stbv_uint16</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_temp_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mults</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>lookup_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mults</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>lookup_values</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>q</name> <init>= <expr><call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>value_bits</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>STBV_EOP</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>stbv_setup_temp_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>mults</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mults</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>lookup_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mults</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDES_IN_CODEBOOK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>lookup_type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>sparse</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>sparse</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>last</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sparse</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>stbv_skip</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>multiplicands</name></name> <operator>=</operator> <operator>(</operator><name>stbv_codetype</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>multiplicands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>dimensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>multiplicands</name></name> <operator>=</operator> <operator>(</operator><name>stbv_codetype</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>multiplicands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>entries</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>dimensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>multiplicands</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>stbv_setup_temp_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>mults</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mults</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>lookup_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>sparse</name></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>sorted_entries</name></name></expr> </then><else>: <expr><name><name>c</name><operator>-&gt;</operator><name>entries</name></name></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>z</name> <init>= <expr><ternary><condition><expr><name>sparse</name></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>sorted_values</name><index>[<expr><name>j</name></expr>]</index></name></expr> </then><else>: <expr><name>j</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>div</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>dimensions</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><operator>(</operator><name>z</name> <operator>/</operator> <name>div</name><operator>)</operator> <operator>%</operator> <name><name>c</name><operator>-&gt;</operator><name>lookup_values</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>val</name> <init>= <expr><name><name>mults</name><index>[<expr><name>off</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>mults</name><index>[<expr><name>off</name></expr>]</index></name><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>delta_value</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>minimum_value</name></name> <operator>+</operator> <name>last</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>multiplicands</name><index>[<expr><name>j</name><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>dimensions</name></name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sequence_p</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>dimensions</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>div</name> <operator>&gt;</operator> <name>UINT_MAX</name> <operator>/</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>lookup_values</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stbv_setup_temp_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>mults</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mults</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>lookup_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>div</name> <operator>*=</operator> <name><name>c</name><operator>-&gt;</operator><name>lookup_values</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lookup_type</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>last</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STBV_CHECK</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>multiplicands</name></name> <operator>=</operator> <operator>(</operator><name>stbv_codetype</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>multiplicands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>lookup_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>multiplicands</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>stbv_setup_temp_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>mults</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mults</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>lookup_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>lookup_values</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>val</name> <init>= <expr><name><name>mults</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>delta_value</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>minimum_value</name></name> <operator>+</operator> <name>last</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>multiplicands</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>sequence_p</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDES_IN_CODEBOOK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<label><name>stbv_skip</name>:</label><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>stbv_setup_temp_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>mults</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mults</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>lookup_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STBV_CHECK</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STBV_CHECK</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>



<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>x</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>z</name> <init>= <expr><call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>z</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>floor_count</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>floor_config</name></name> <operator>=</operator> <operator>(</operator><name>StbvFloor</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>floor_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>floor_config</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>floor_config</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>floor_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>floor_types</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>floor_types</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>floor_types</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>StbvFloor0</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>floor_config</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>floor0</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>bark_map_size</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>amplitude_bits</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>amplitude_offset</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>number_of_books</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>number_of_books</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>book_list</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_feature_not_supported</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>stbv_floor_ordering</name></type> <name><name>p</name><index>[<expr><literal type="number">31</literal><operator>*</operator><literal type="number">8</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StbvFloor1</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>floor_config</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>floor1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_class</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>partitions</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>partitions</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>partition_class_list</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>partition_class_list</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name>max_class</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_class</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>partition_class_list</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>max_class</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>class_dimensions</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>class_subclasses</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>class_subclasses</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>class_masterbooks</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>class_masterbooks</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>codebook_count</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>class_subclasses</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>subclass_books</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>subclass_books</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>codebook_count</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>floor1_multiplier</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>rangebits</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>Xlist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>Xlist</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>rangebits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>partitions</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>partition_class_list</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>class_dimensions</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>Xlist</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>values</name></name></expr>]</index></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>rangebits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>g</name><operator>-&gt;</operator><name>values</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>values</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>Xlist</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stbv_point_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>values</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sorted_order</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbv_uint8</name><operator>)</operator> <name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>values</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>low</name></decl>,<decl><type ref="prev"/><name>hi</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbv_neighbors</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>Xlist</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>low</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stbv_neighbors</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>low</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>stbv_neighbors</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>hi</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>values</name></name> <operator>&gt;</operator> <name>longest_floorlist</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>longest_floorlist</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>values</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>residue_count</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>residue_config</name></name> <operator>=</operator> <operator>(</operator><name>StbvResidue</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>residue_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>residue_config</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>residue_config</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>residue_config</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>residue_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>residue_config</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>residue_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name><name>residue_cascade</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StbvResidue</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>residue_config</name></name><operator>+</operator><name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>residue_types</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>residue_types</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>end</name></name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>begin</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>part_size</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>classifications</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>classbook</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>classbook</name></name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>codebook_count</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>classifications</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>high_bits</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name>low_bits</name><init>=<expr><call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>high_bits</name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>residue_cascade</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>high_bits</name><operator>*</operator><literal type="number">8</literal> <operator>+</operator> <name>low_bits</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>residue_books</name></name> <operator>=</operator> <operator>(</operator><call><name>short</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>residue_books</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>classifications</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>residue_books</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>classifications</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>residue_cascade</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>residue_books</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>residue_books</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>codebook_count</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>residue_books</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>classdata</name></name> <operator>=</operator> <operator>(</operator><name>stbv_uint8</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>classdata</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>classbook</name></name></expr>]</index></name><operator>.</operator><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>classdata</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>classdata</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>r</name><operator>-&gt;</operator><name>classdata</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>classbook</name></name></expr>]</index></name><operator>.</operator><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>classbook</name></name></expr>]</index></name><operator>.</operator><name>entries</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>classwords</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>classbook</name></name></expr>]</index></name><operator>.</operator><name>dimensions</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>classdata</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbv_uint8</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>classdata</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>classwords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>classdata</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>k</name><operator>=</operator><name>classwords</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>classdata</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>temp</name> <operator>%</operator> <name><name>r</name><operator>-&gt;</operator><name>classifications</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>/=</operator> <name><name>r</name><operator>-&gt;</operator><name>classifications</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>mapping_count</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>mapping</name></name> <operator>=</operator> <operator>(</operator><name>StbvMapping</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>mapping_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>mapping</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>mapping_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>mapping_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>StbvMapping</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>mapping</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mapping_type</name> <init>= <expr><call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mapping_type</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>chan</name></name> <operator>=</operator> <operator>(</operator><name>StbvMappingChannel</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>m</name><operator>-&gt;</operator><name>chan</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>chan</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>submaps</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>submaps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>submaps</name></name> <operator>&gt;</operator> <name>max_submaps</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_submaps</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>submaps</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>coupling_steps</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>coupling_steps</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>chan</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>magnitude</name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>stbv_ilog</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>chan</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>angle</name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>stbv_ilog</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>chan</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>magnitude</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>chan</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>angle</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>chan</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>magnitude</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>chan</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>angle</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>coupling_steps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>submaps</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>chan</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>mux</name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>chan</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>mux</name> <operator>&gt;=</operator> <name><name>m</name><operator>-&gt;</operator><name>submaps</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>chan</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>mux</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>submaps</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>submap_floor</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>submap_residue</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>submap_floor</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>floor_count</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>submap_residue</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>residue_count</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>mode_count</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>mode_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>StbvMode</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>mode_config</name></name><operator>+</operator><name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>blockflag</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>windowtype</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>transformtype</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>mapping</name></name> <operator>=</operator> <call><name>stbv_get_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>windowtype</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>transformtype</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>mapping</name></name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>mapping_count</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_setup</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>stbv_flush_packet</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>previous_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>blocksize_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>previous_window</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>blocksize_1</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>finalY</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>stbv_int16</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stbv_int16</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>longest_floorlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>f</name><operator>-&gt;</operator><name>previous_window</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>f</name><operator>-&gt;</operator><name>finalY</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>blocksize_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_DEFER_FLOOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>floor_buffers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>blocksize_1</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>floor_buffers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_init_blocksize</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>blocksize_0</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_init_blocksize</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>blocksize_1</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>blocksize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>blocksize_0</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>blocksize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>blocksize_1</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDE_TABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>stbv_integer_divide_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>STBV_DIVTAB_NUMER</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>STBV_DIVTAB_DENOM</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>stbv_integer_divide_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>/</operator> <name>j</name></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<block>{<block_content>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>imdct_mem</name> <init>= <expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>blocksize_1</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>classify_mem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>max_part_read</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>residue_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>StbvResidue</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>residue_config</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>actual_size</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>blocksize_1</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>limit_r_begin</name> <init>= <expr><ternary><condition><expr><name><name>r</name><operator>-&gt;</operator><name>begin</name></name> <operator>&lt;</operator> <name>actual_size</name></expr> ?</condition><then> <expr><name><name>r</name><operator>-&gt;</operator><name>begin</name></name></expr> </then><else>: <expr><name>actual_size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>limit_r_end</name> <init>= <expr><ternary><condition><expr><name><name>r</name><operator>-&gt;</operator><name>end</name></name> <operator>&lt;</operator> <name>actual_size</name></expr> ?</condition><then> <expr><name><name>r</name><operator>-&gt;</operator><name>end</name></name></expr> </then><else>: <expr><name>actual_size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_read</name> <init>= <expr><name>limit_r_end</name> <operator>-</operator> <name>limit_r_begin</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>part_read</name> <init>= <expr><name>n_read</name> <operator>/</operator> <name><name>r</name><operator>-&gt;</operator><name>part_size</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>part_read</name> <operator>&gt;</operator> <name>max_part_read</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_part_read</name> <operator>=</operator> <name>part_read</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_DIVIDES_IN_RESIDUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>classify_mem</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>max_part_read</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>stbv_uint8</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>classify_mem</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>max_part_read</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>temp_memory_required</name></name> <operator>=</operator> <name>classify_mem</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>imdct_mem</name> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>temp_memory_required</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>temp_memory_required</name></name> <operator>=</operator> <name>imdct_mem</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>first_decode</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>alloc</name><operator>.</operator><name>alloc_buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>temp_offset</name></name> <operator>==</operator> <name><name>f</name><operator>-&gt;</operator><name>alloc</name><operator>.</operator><name>alloc_buffer_length_in_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>setup_offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>temp_memory_required</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>f</name><operator>-&gt;</operator><name>temp_offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_outofmem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>first_audio_page_offset</name></name> <operator>=</operator> <call><name>stb_vorbis_get_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_vorbis_deinit</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>residue_config</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>residue_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>StbvResidue</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>residue_config</name></name><operator>+</operator><name>i</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>classdata</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>classbook</name></name></expr>]</index></name><operator>.</operator><name>entries</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbv_setup_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>classdata</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>stbv_setup_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>classdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>stbv_setup_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>residue_books</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>codebooks</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STBV_CHECK</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>codebook_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>StbvCodebook</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>codebooks</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbv_setup_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>codeword_lengths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_setup_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>multiplicands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_setup_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>codewords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_setup_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>sorted_codewords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stbv_setup_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>sorted_values</name></name></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>sorted_values</name></name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>stbv_setup_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>codebooks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>stbv_setup_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>floor_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_setup_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>residue_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>mapping</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>mapping_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbv_setup_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>chan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>stbv_setup_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>STBV_CHECK</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>channels</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>STB_VORBIS_MAX_CHANNELS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>stbv_setup_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>channel_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_setup_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>previous_window</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_DEFER_FLOOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>stbv_setup_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>floor_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>stbv_setup_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>finalY</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>stbv_setup_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_setup_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>B</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_setup_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_setup_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_setup_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>stbv_bit_reverse</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>close_on_free</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>STBVDEF</name> <name>void</name></type> <name>stb_vorbis_close</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbv_vorbis_deinit</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_setup_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_vorbis_init</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>stb_vorbis_alloc</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>z</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <operator>*</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>alloc</name><operator>.</operator><name>alloc_buffer_length_in_bytes</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>alloc</name><operator>.</operator><name>alloc_buffer_length_in_bytes</name></name><operator>+</operator><literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>temp_offset</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>alloc</name><operator>.</operator><name>alloc_buffer_length_in_bytes</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>VORBIS__no_error</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>codebooks</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>page_crc_tests</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>close_on_free</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_get_sample_offset</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>current_loc_valid</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>f</name><operator>-&gt;</operator><name>current_loc</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>STBVDEF</name> <name>stb_vorbis_info</name></type> <name>stb_vorbis_get_info</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stb_vorbis_info</name></type> <name>d</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>setup_memory_required</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>setup_memory_required</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>setup_temp_memory_required</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>setup_temp_memory_required</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>temp_memory_required</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>temp_memory_required</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>.</operator><name>max_frame_size</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>blocksize_1</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>d</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_get_error</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>error</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>VORBIS__no_error</name></expr>;</expr_stmt>
<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stb_vorbis</name> <modifier>*</modifier></type> <name>stbv_vorbis_alloc</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>stb_vorbis</name> <operator>*</operator><operator>)</operator> <call><name>stbv_setup_malloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_PUSHDATA_API</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>STBVDEF</name> <name>void</name></type> <name>stb_vorbis_flush_pushdata</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>previous_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>page_crc_tests</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>discard_samples_deferred</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>current_loc_valid</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>first_decode</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>samples_output</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffer_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffer_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_vorbis_search_for_page_pushdata</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>stbv_uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>data_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>page_crc_tests</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>scan</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes_done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>



<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>page_crc_tests</name></name> <operator>&lt;</operator> <name>STB_VORBIS_PUSHDATA_CRC_COUNT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>data_len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>data_len</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>data_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x4f</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>stbv_ogg_page_header</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>,<decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>crc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>+</operator><literal type="number">26</literal> <operator>&gt;=</operator> <name>data_len</name> <operator>||</operator> <name>i</name><operator>+</operator><literal type="number">27</literal><operator>+</operator><name><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">26</literal></expr>]</index></name> <operator>&gt;=</operator> <name>data_len</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>data_len</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">27</literal> <operator>+</operator> <name><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">26</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">26</literal></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">27</literal><operator>+</operator><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">22</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>stbv_crc32_update</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>( <init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>stbv_crc32_update</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>page_crc_tests</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>scan</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>bytes_left</name> <operator>=</operator> <name>len</name><operator>-</operator><name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>scan</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>crc_so_far</name> <operator>=</operator> <name>crc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>scan</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>goal_crc</name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">22</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">23</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">24</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">25</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">27</literal><operator>+</operator><name><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">26</literal></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>scan</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>sample_loc</name> <operator>=</operator> <operator>~</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>scan</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>sample_loc</name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>i</name><operator>+</operator> <literal type="number">8</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>i</name><operator>+</operator> <literal type="number">9</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>scan</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>bytes_done</name> <operator>=</operator> <name>i</name><operator>+</operator><name>j</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>page_crc_tests</name></name> <operator>==</operator> <name>STB_VORBIS_PUSHDATA_CRC_COUNT</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>page_crc_tests</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>crc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>scan</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes_done</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>scan</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes_left</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;</operator> <name>data_len</name> <operator>-</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>m</name> <operator>=</operator> <name>data_len</name> <operator>-</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>scan</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>crc_so_far</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>stbv_crc32_update</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>n</name><operator>+</operator><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>scan</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes_left</name> <operator>-=</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>scan</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>crc_so_far</name> <operator>=</operator> <name>crc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>scan</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes_left</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>scan</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>crc_so_far</name> <operator>==</operator> <name><name>f</name><operator>-&gt;</operator><name>scan</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>goal_crc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>data_len</name> <operator>=</operator> <name>n</name><operator>+</operator><name>m</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>page_crc_tests</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>previous_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>next_seg</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>current_loc</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>scan</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sample_loc</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>current_loc_valid</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>current_loc</name></name> <operator>!=</operator> <operator>~</operator><literal type="number">0U</literal></expr>;</expr_stmt>
<return>return <expr><name>data_len</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>scan</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>scan</name><index>[<expr><operator>--</operator><name><name>f</name><operator>-&gt;</operator><name>page_crc_tests</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>data_len</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_decode_frame_pushdata</name><parameter_list>(
<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, 
<parameter><decl><type><specifier>const</specifier> <name>stbv_uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>data_len</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels</name></decl></parameter>, 
<parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>samples</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>,<decl><type ref="prev"/><name>right</name></decl>,<decl><type ref="prev"/><name>left</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STBV_IS_PUSH_MODE</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_api_mixing</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>page_crc_tests</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>samples</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>stbv_vorbis_search_for_page_pushdata</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>(</operator><name>stbv_uint8</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <operator>(</operator><name>stbv_uint8</name> <operator>*</operator><operator>)</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>stream_end</name></name> <operator>=</operator> <operator>(</operator><name>stbv_uint8</name> <operator>*</operator><operator>)</operator> <name>data</name> <operator>+</operator> <name>data_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>VORBIS__no_error</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_is_whole_packet_present</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>samples</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_vorbis_decode_packet</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>STBVorbisError</name></name></type> <name>error</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>error</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>VORBIS_bad_packet_type</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>VORBIS__no_error</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>stbv_get8_packet</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STBV_EOP</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>samples</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>stream</name></name> <operator>-</operator> <name>data</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>VORBIS_continued_packet_flag_invalid</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>previous_length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>VORBIS__no_error</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>stbv_get8_packet</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STBV_EOP</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>samples</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>stream</name></name> <operator>-</operator> <name>data</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>stb_vorbis_flush_pushdata</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>stbv_vorbis_finish_frame</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>channel_buffers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>left</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>samples</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>output</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>outputs</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>stream</name></name> <operator>-</operator> <name>data</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBVDEF</name> <name>stb_vorbis</name> <modifier>*</modifier></type><name>stb_vorbis_open_pushdata</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>data_len</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>data_used</name></decl></parameter>, 
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>stb_vorbis_alloc</name> <modifier>*</modifier></type><name>alloc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbv_vorbis_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>stream</name></name> <operator>=</operator> <operator>(</operator><name>stbv_uint8</name> <operator>*</operator><operator>)</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>stream_end</name></name> <operator>=</operator> <operator>(</operator><name>stbv_uint8</name> <operator>*</operator><operator>)</operator> <name>data</name> <operator>+</operator> <name>data_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>push_mode</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_start_decoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>VORBIS_need_more_data</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>error</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>stbv_vorbis_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>f</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data_used</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>stream</name></name> <operator>-</operator> <name>data</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>stbv_vorbis_deinit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>STBVDEF</name> <name>unsigned</name> <name>int</name></type> <name>stb_vorbis_get_file_offset</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_PUSHDATA_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>push_mode</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>STBV_USE_MEMORY</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>stream</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>stream_start</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><call><name>ftell</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>f_start</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_PULLDATA_API</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>stbv_uint32</name></type> <name>stbv_vorbis_find_page</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>stbv_uint32</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>stbv_uint32</name> <modifier>*</modifier></type><name>last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0x4f</literal></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>retry_loc</name> <init>= <expr><call><name>stb_vorbis_get_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>retry_loc</name> <operator>-</operator> <literal type="number">25</literal> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>stream_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>stbv_ogg_page_header</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name><name>header</name><index>[<expr><literal type="number">27</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>crc</name></decl>, <decl><type ref="prev"/><name>goal</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>header</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>stbv_ogg_page_header</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">27</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>header</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>header</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>goal</name> <operator>=</operator> <name><name>header</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>header</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>header</name><index>[<expr><literal type="number">24</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>header</name><index>[<expr><literal type="number">25</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">22</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>header</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">27</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>stbv_crc32_update</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name><name>header</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>header</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>stbv_crc32_update</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>stbv_crc32_update</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><call><name>stbv_get8</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>crc</name> <operator>==</operator> <name>goal</name></expr>)</condition> <block>{<block_content>








<if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <call><name>stb_vorbis_get_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>header</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x04</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>stbv_set_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>retry_loc</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<label><name>invalid</name>:</label>

<expr_stmt><expr><call><name>stbv_set_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>retry_loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_SAMPLE_unknown</name></cpp:macro> <cpp:value>0xffffffff</cpp:value></cpp:define>










<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_get_seek_page_info</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>StbvProbedPage</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbv_uint8</name></type> <name><name>header</name><index>[<expr><literal type="number">27</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>lacing</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>page_start</name></name> <operator>=</operator> <call><name>stb_vorbis_get_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>stbv_getn</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'O'</literal> <operator>||</operator> <name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'g'</literal> <operator>||</operator> <name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'g'</literal> <operator>||</operator> <name><name>header</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'S'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbv_getn</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>lacing</name></expr></argument>, <argument><expr><name><name>header</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>header</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name><name>lacing</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>page_end</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>page_start</name></name> <operator>+</operator> <literal type="number">27</literal> <operator>+</operator> <name><name>header</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>last_decoded_sample</name></name> <operator>=</operator> <name><name>header</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>header</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>header</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>header</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><call><name>stbv_set_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>page_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_go_to_page_before</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>limit_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>previous_safe</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>limit_offset</name> <operator>&gt;=</operator> <literal type="number">65536</literal> <operator>&amp;&amp;</operator> <name>limit_offset</name><operator>-</operator><literal type="number">65536</literal> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>first_audio_page_offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>previous_safe</name> <operator>=</operator> <name>limit_offset</name> <operator>-</operator> <literal type="number">65536</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>previous_safe</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>first_audio_page_offset</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>stbv_set_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>previous_safe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>stbv_vorbis_find_page</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;=</operator> <name>limit_offset</name> <operator>&amp;&amp;</operator> <call><name>stb_vorbis_get_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>limit_offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbv_set_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_seek_to_sample_coarse</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>stbv_uint32</name></type> <name>sample_number</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>StbvProbedPage</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>, <decl><type ref="prev"/><name>mid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>start_seg_with_known_loc</name></decl>, <decl><type ref="prev"/><name>end_pos</name></decl>, <decl><type ref="prev"/><name>page_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>delta</name></decl>, <decl><type ref="prev"/><name>stream_length</name></decl>, <decl><type ref="prev"/><name>padding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>bytes_per_sample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>probe</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>stream_length</name> <operator>=</operator> <call><name>stb_vorbis_stream_length_in_samples</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stream_length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_seek_without_length</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sample_number</name> <operator>&gt;</operator> <name>stream_length</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_seek_invalid</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>padding</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>blocksize_1</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>blocksize_0</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sample_number</name> <operator>&lt;</operator> <name>padding</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sample_number</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sample_number</name> <operator>-=</operator> <name>padding</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>left</name><operator>.</operator><name>last_decoded_sample</name></name> <operator>==</operator> <operator>~</operator><literal type="number">0U</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbv_set_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>left</name><operator>.</operator><name>page_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_get_seek_page_info</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>right</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>p_last</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>right</name><operator>.</operator><name>last_decoded_sample</name></name> <operator>!=</operator> <operator>~</operator><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>sample_number</name> <operator>&lt;=</operator> <name><name>left</name><operator>.</operator><name>last_decoded_sample</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>stb_vorbis_seek_start</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>left</name><operator>.</operator><name>page_end</name></name> <operator>!=</operator> <name><name>right</name><operator>.</operator><name>page_start</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>left</name><operator>.</operator><name>page_end</name></name> <operator>&lt;</operator> <name><name>right</name><operator>.</operator><name>page_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name><name>right</name><operator>.</operator><name>page_start</name></name> <operator>-</operator> <name><name>left</name><operator>.</operator><name>page_end</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;=</operator> <literal type="number">65536</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbv_set_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>left</name><operator>.</operator><name>page_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>probe</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>probe</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>data_bytes</name> <init>= <expr><name><name>right</name><operator>.</operator><name>page_end</name></name> <operator>-</operator> <name><name>left</name><operator>.</operator><name>page_start</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bytes_per_sample</name> <operator>=</operator> <name>data_bytes</name> <operator>/</operator> <name><name>right</name><operator>.</operator><name>last_decoded_sample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>page_start</name></name> <operator>+</operator> <name>bytes_per_sample</name> <operator>*</operator> <operator>(</operator><name>sample_number</name> <operator>-</operator> <name><name>left</name><operator>.</operator><name>last_decoded_sample</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>error</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>sample_number</name> <operator>-</operator> <name><name>mid</name><operator>.</operator><name>last_decoded_sample</name></name><operator>)</operator> <operator>*</operator> <name>bytes_per_sample</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>error</name> <operator>&lt;</operator> <literal type="number">8000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="number">8000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>error</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>error</name></expr></argument> &gt;</argument_list></name> <operator>-</operator><literal type="number">8000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>error</name> <operator>=</operator> <operator>-</operator><literal type="number">8000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>error</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name><name>left</name><operator>.</operator><name>page_end</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>page_end</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name><name>right</name><operator>.</operator><name>page_start</name></name> <operator>-</operator> <literal type="number">65536</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>right</name><operator>.</operator><name>page_start</name></name> <operator>-</operator> <literal type="number">65536</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stbv_set_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><call><name>stbv_set_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>left</name><operator>.</operator><name>page_end</name></name> <operator>+</operator> <operator>(</operator><name>delta</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">32768</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_vorbis_find_page</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_get_seek_page_info</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mid</name><operator>.</operator><name>last_decoded_sample</name></name> <operator>!=</operator> <operator>~</operator><literal type="number">0U</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stbv_set_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>mid</name><operator>.</operator><name>page_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mid</name><operator>.</operator><name>page_start</name></name> <operator>&lt;</operator> <name><name>right</name><operator>.</operator><name>page_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><name><name>mid</name><operator>.</operator><name>page_start</name></name> <operator>==</operator> <name><name>right</name><operator>.</operator><name>page_start</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sample_number</name> <operator>&lt;</operator> <name><name>mid</name><operator>.</operator><name>last_decoded_sample</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>right</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>left</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>probe</name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>page_start</name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>page_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_set_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>page_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_start_page</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_seek_failed</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>end_pos</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>end_seg_with_known_loc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>end_pos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>end_pos</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>segments</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>start_seg_with_known_loc</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start_seg_with_known_loc</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>page_flag</name></name> <operator>&amp;</operator> <name>STBV_PAGEFLAG_continued_packet</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_go_to_page_before</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>page_start</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>page_start</name> <operator>=</operator> <call><name>stb_vorbis_get_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_start_page</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>end_pos</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>segment_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>current_loc_valid</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>last_seg</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>packet_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>bytes_in_seg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>previous_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>next_seg</name></name> <operator>=</operator> <name>start_seg_with_known_loc</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>start_seg_with_known_loc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbv_skip</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>segments</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_vorbis_pump_first_frame</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>current_loc</name></name> <operator>&gt;</operator> <name>sample_number</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_seek_failed</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>stb_vorbis_seek_start</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_seek_failed</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>stbv_peek_decode_initial</name><parameter_list>(<parameter><decl><type><name>stbv_vorb</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_left_start</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_left_end</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_right_start</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_right_end</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bits_read</name></decl>, <decl><type ref="prev"/><name>bytes_read</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_vorbis_decode_initial</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>p_left_start</name></expr></argument>, <argument><expr><name>p_left_end</name></expr></argument>, <argument><expr><name>p_right_start</name></expr></argument>, <argument><expr><name>p_right_end</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>bits_read</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>stbv_ilog</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>mode_count</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>mode_config</name><index>[<expr><operator>*</operator><name>mode</name></expr>]</index></name><operator>.</operator><name>blockflag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits_read</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <operator>(</operator><name>bits_read</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>bytes_in_seg</name></name> <operator>+=</operator> <name>bytes_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>packet_bytes</name></name> <operator>-=</operator> <name>bytes_read</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_skip</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>-</operator><name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>next_seg</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>next_seg</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>segment_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>next_seg</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>valid_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_seek_frame</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>sample_number</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>max_frame_samples</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STBV_IS_PUSH_MODE</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_api_mixing</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_seek_to_sample_coarse</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>sample_number</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>current_loc_valid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>current_loc</name></name> <operator>&lt;=</operator> <name>sample_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>max_frame_samples</name> <operator>=</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>blocksize_1</name></name><operator>*</operator><literal type="number">3</literal> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>blocksize_0</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>current_loc</name></name> <operator>&lt;</operator> <name>sample_number</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>left_start</name></decl>, <decl><type ref="prev"/><name>left_end</name></decl>, <decl><type ref="prev"/><name>right_start</name></decl>, <decl><type ref="prev"/><name>right_end</name></decl>, <decl><type ref="prev"/><name>mode</name></decl>, <decl><type ref="prev"/><name>frame_samples</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_peek_decode_initial</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_seek_failed</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frame_samples</name> <operator>=</operator> <name>right_start</name> <operator>-</operator> <name>left_start</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>current_loc</name></name> <operator>+</operator> <name>frame_samples</name> <operator>&gt;</operator> <name>sample_number</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>current_loc</name></name> <operator>+</operator> <name>frame_samples</name> <operator>+</operator> <name>max_frame_samples</name> <operator>&gt;</operator> <name>sample_number</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>stbv_vorbis_pump_first_frame</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>current_loc</name></name> <operator>+=</operator> <name>frame_samples</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>previous_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_maybe_start_packet</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_flush_packet</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>current_loc</name></name> <operator>==</operator> <name>sample_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_seek</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>sample_number</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stb_vorbis_seek_frame</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>sample_number</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sample_number</name> <operator>!=</operator> <name><name>f</name><operator>-&gt;</operator><name>current_loc</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>frame_start</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>current_loc</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stb_vorbis_get_frame_float</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sample_number</name> <operator>&gt;</operator> <name>frame_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffer_start</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>sample_number</name><operator>-</operator><name>frame_start</name><operator>)</operator> <operator>&lt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>channel_buffer_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffer_start</name></name> <operator>+=</operator> <operator>(</operator><name>sample_number</name> <operator>-</operator> <name>frame_start</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_seek_start</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STBV_IS_PUSH_MODE</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_api_mixing</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>stbv_set_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>first_audio_page_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>previous_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>first_decode</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>next_seg</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><call><name>stbv_vorbis_pump_first_frame</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBVDEF</name> <name>unsigned</name> <name>int</name></type> <name>stb_vorbis_stream_length_in_samples</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>restore_offset</name></decl>, <decl><type ref="prev"/><name>previous_safe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>end</name></decl>, <decl><type ref="prev"/><name>last_page_loc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STBV_IS_PUSH_MODE</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_api_mixing</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>total_samples</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stbv_uint32</name></type> <name>lo</name></decl>,<decl><type ref="prev"/><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>header</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><name>restore_offset</name> <operator>=</operator> <call><name>stb_vorbis_get_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>stream_len</name></name> <operator>&gt;=</operator> <literal type="number">65536</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>stream_len</name></name><operator>-</operator><literal type="number">65536</literal> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>first_audio_page_offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>previous_safe</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>stream_len</name></name> <operator>-</operator> <literal type="number">65536</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>previous_safe</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>first_audio_page_offset</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>stbv_set_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>previous_safe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_vorbis_find_page</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>VORBIS_cant_find_last_page</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>total_samples</name></name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>last_page_loc</name> <operator>=</operator> <call><name>stb_vorbis_get_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<while>while <condition>(<expr><operator>!</operator><name>last</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stbv_set_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_vorbis_find_page</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>previous_safe</name> <operator>=</operator> <name>last_page_loc</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>last_page_loc</name> <operator>=</operator> <call><name>stb_vorbis_get_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>stbv_set_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>last_page_loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>stbv_getn</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lo</name> <operator>=</operator> <call><name>stbv_get32</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>stbv_get32</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lo</name> <operator>==</operator> <literal type="number">0xffffffff</literal> <operator>&amp;&amp;</operator> <name>hi</name> <operator>==</operator> <literal type="number">0xffffffff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>VORBIS_cant_find_last_page</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>total_samples</name></name> <operator>=</operator> <name>STBV_SAMPLE_unknown</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hi</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <literal type="number">0xfffffffe</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>total_samples</name></name> <operator>=</operator> <name>lo</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>p_last</name><operator>.</operator><name>page_start</name></name> <operator>=</operator> <name>last_page_loc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>p_last</name><operator>.</operator><name>page_end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>p_last</name><operator>.</operator><name>last_decoded_sample</name></name> <operator>=</operator> <name>lo</name></expr>;</expr_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>stbv_set_file_offset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>restore_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name><name>f</name><operator>-&gt;</operator><name>total_samples</name></name> <operator>==</operator> <name>STBV_SAMPLE_unknown</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>f</name><operator>-&gt;</operator><name>total_samples</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBVDEF</name> <name>float</name></type> <name>stb_vorbis_stream_length_in_seconds</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>stb_vorbis_stream_length_in_samples</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>f</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</return>
</block_content>}</block></function>



<function><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_get_frame_float</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>right</name></decl>,<decl><type ref="prev"/><name>left</name></decl>,<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>STBV_IS_PUSH_MODE</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stbv_error</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VORBIS_invalid_api_mixing</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stbv_vorbis_decode_packet</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffer_start</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>channel_buffer_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>stbv_vorbis_finish_frame</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>channel_buffers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>left</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffer_start</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffer_end</name></name> <operator>=</operator> <name>left</name><operator>+</operator><name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>output</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>output</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>outputs</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>STBVDEF</name> <name>stb_vorbis</name> <modifier>*</modifier></type> <name>stb_vorbis_open_file_section</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>close_on_free</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>stb_vorbis_alloc</name> <modifier>*</modifier></type><name>alloc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbv_vorbis_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>f_start</name></name> <operator>=</operator> <operator>(</operator><name>stbv_uint32</name><operator>)</operator> <call><name>ftell</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>stream_len</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>close_on_free</name></name> <operator>=</operator> <name>close_on_free</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stbv_start_decoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>stbv_vorbis_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>f</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_vorbis_pump_first_frame</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>error</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbv_vorbis_deinit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBVDEF</name> <name>stb_vorbis</name> <modifier>*</modifier></type> <name>stb_vorbis_open_file</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>close_on_free</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>stb_vorbis_alloc</name> <modifier>*</modifier></type><name>alloc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>start</name></decl>;</decl_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>ftell</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><call><name>ftell</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>stb_vorbis_open_file_section</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>close_on_free</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBVDEF</name> <name>stb_vorbis</name> <modifier>*</modifier></type> <name>stb_vorbis_open_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>stb_vorbis_alloc</name> <modifier>*</modifier></type><name>alloc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition><block type="pseudo"><block_content> 
<return>return <expr><call><name>stb_vorbis_open_file</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>VORBIS_file_open_failure</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>STBVDEF</name> <name>stb_vorbis</name> <modifier>*</modifier></type> <name>stb_vorbis_open_memory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>stb_vorbis_alloc</name> <modifier>*</modifier></type><name>alloc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbv_vorbis_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>stream</name></name> <operator>=</operator> <operator>(</operator><name>stbv_uint8</name> <operator>*</operator><operator>)</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>stream_end</name></name> <operator>=</operator> <operator>(</operator><name>stbv_uint8</name> <operator>*</operator><operator>)</operator> <name>data</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>stream_start</name></name> <operator>=</operator> <operator>(</operator><name>stbv_uint8</name> <operator>*</operator><operator>)</operator> <name><name>p</name><operator>.</operator><name>stream</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>stream_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>push_mode</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stbv_start_decoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>stbv_vorbis_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>f</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stbv_vorbis_pump_first_frame</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>VORBIS__no_error</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>error</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbv_vorbis_deinit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_INTEGER_CONVERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_PLAYBACK_MONO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_PLAYBACK_LEFT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_PLAYBACK_RIGHT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_L</name></cpp:macro> <cpp:value>(STBV_PLAYBACK_LEFT | STBV_PLAYBACK_MONO)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_C</name></cpp:macro> <cpp:value>(STBV_PLAYBACK_LEFT | STBV_PLAYBACK_RIGHT | STBV_PLAYBACK_MONO)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_R</name></cpp:macro> <cpp:value>(STBV_PLAYBACK_RIGHT | STBV_PLAYBACK_MONO)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>stbv_int8</name></type> <name><name>stbv_channel_position</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>STBV_C</name></expr> }</block></expr>,
<expr><block>{ <expr><name>STBV_L</name></expr>, <expr><name>STBV_R</name></expr> }</block></expr>,
<expr><block>{ <expr><name>STBV_L</name></expr>, <expr><name>STBV_C</name></expr>, <expr><name>STBV_R</name></expr> }</block></expr>,
<expr><block>{ <expr><name>STBV_L</name></expr>, <expr><name>STBV_R</name></expr>, <expr><name>STBV_L</name></expr>, <expr><name>STBV_R</name></expr> }</block></expr>,
<expr><block>{ <expr><name>STBV_L</name></expr>, <expr><name>STBV_C</name></expr>, <expr><name>STBV_R</name></expr>, <expr><name>STBV_L</name></expr>, <expr><name>STBV_R</name></expr> }</block></expr>,
<expr><block>{ <expr><name>STBV_L</name></expr>, <expr><name>STBV_C</name></expr>, <expr><name>STBV_R</name></expr>, <expr><name>STBV_L</name></expr>, <expr><name>STBV_R</name></expr>, <expr><name>STBV_C</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_FAST_SCALED_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><union>union <block>{
<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
}</block></union></type> <name>stbv_float_conv</name>;</typedef>
<typedef>typedef <type><name>char</name></type> <name><name>stb_vorbis_float_size_test</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>==</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">4</literal></expr>]</index></name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_FASTDEF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stbv_float_conv x</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_MAGIC</name><parameter_list>(<parameter><type><name>SHIFT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1.5f * (1 &lt;&lt; (23-SHIFT)) + 0.5f/(1 &lt;&lt; SHIFT))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_ADDEND</name><parameter_list>(<parameter><type><name>SHIFT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((150-SHIFT) &lt;&lt; 23) + (1 &lt;&lt; 22))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_FAST_SCALED_FLOAT_TO_INT</name><parameter_list>(<parameter><type><name>temp</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(temp.f = (x) + STBV_MAGIC(s), temp.i - STBV_ADDEND(s))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbv_check_endianness</name><parameter_list>()</parameter_list></cpp:macro></cpp:define> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_FAST_SCALED_FLOAT_TO_INT</name><parameter_list>(<parameter><type><name>temp</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int) ((x) * (1 &lt;&lt; (s))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stbv_check_endianness</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBV_FASTDEF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_copy_samples</name><parameter_list>(<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbv_check_endianness</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>STBV_FASTDEF</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>STBV_FAST_SCALED_FLOAT_TO_INT</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><name>v</name> <operator>+</operator> <literal type="number">32768</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">32768</literal></expr> </then><else>: <expr><literal type="number">32767</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_compute_samples</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_c</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<decl_stmt><decl><type><name>float</name></type> <name><name>buffer</name><index>[<expr><name>BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>o</name></decl>,<decl><type ref="prev"/><name>n</name> <init>= <expr><name>BUFFER_SIZE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbv_check_endianness</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>o</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>o</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>o</name> <operator>+=</operator> <name>BUFFER_SIZE</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>o</name> <operator>+</operator> <name>n</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>o</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_c</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>stbv_channel_position</name><index>[<expr><name>num_c</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>data</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>d_offset</name><operator>+</operator><name>o</name><operator>+</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>STBV_FASTDEF</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>STBV_FAST_SCALED_FLOAT_TO_INT</name><argument_list>(<argument><expr><name>temp</name></expr></argument>,<argument><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><name>v</name> <operator>+</operator> <literal type="number">32768</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">32768</literal></expr> </then><else>: <expr><literal type="number">32767</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>o</name><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_compute_stereo_samples</name><parameter_list>(<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_c</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<decl_stmt><decl><type><name>float</name></type> <name><name>buffer</name><index>[<expr><name>BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>o</name></decl>,<decl><type ref="prev"/><name>n</name> <init>= <expr><name>BUFFER_SIZE</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbv_check_endianness</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>o</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>o</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>o</name> <operator>+=</operator> <name>BUFFER_SIZE</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>o2</name> <init>= <expr><name>o</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>o</name> <operator>+</operator> <name>n</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>o</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_c</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name><name>stbv_channel_position</name><index>[<expr><name>num_c</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>STBV_PLAYBACK_LEFT</name> <operator>|</operator> <name>STBV_PLAYBACK_RIGHT</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <operator>(</operator><name>STBV_PLAYBACK_LEFT</name> <operator>|</operator> <name>STBV_PLAYBACK_RIGHT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>data</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>d_offset</name><operator>+</operator><name>o</name><operator>+</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>data</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>d_offset</name><operator>+</operator><name>o</name><operator>+</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>m</name> <operator>==</operator> <name>STBV_PLAYBACK_LEFT</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>data</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>d_offset</name><operator>+</operator><name>o</name><operator>+</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>m</name> <operator>==</operator> <name>STBV_PLAYBACK_RIGHT</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>data</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>d_offset</name><operator>+</operator><name>o</name><operator>+</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>n</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>STBV_FASTDEF</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>STBV_FAST_SCALED_FLOAT_TO_INT</name><argument_list>(<argument><expr><name>temp</name></expr></argument>,<argument><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><name>v</name> <operator>+</operator> <literal type="number">32768</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">32768</literal></expr> </then><else>: <expr><literal type="number">32767</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>o2</name><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_convert_samples_short</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>buf_c</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>data_c</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_c</name> <operator>!=</operator> <name>data_c</name> <operator>&amp;&amp;</operator> <name>buf_c</name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>data_c</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>channel_selector</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><name>STBV_PLAYBACK_MONO</name></expr>}</block></expr>, <expr><block>{<expr><name>STBV_PLAYBACK_LEFT</name></expr>, <expr><name>STBV_PLAYBACK_RIGHT</name></expr>}</block></expr> }</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buf_c</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbv_compute_samples</name><argument_list>(<argument><expr><name><name>channel_selector</name><index>[<expr><name>buf_c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>b_offset</name></expr></argument>, <argument><expr><name>data_c</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>d_offset</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><ternary><condition><expr><name>buf_c</name> <operator>&lt;</operator> <name>data_c</name></expr> ?</condition><then> <expr><name>buf_c</name></expr> </then><else>: <expr><name>data_c</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbv_copy_samples</name><argument_list>(<argument><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>b_offset</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>d_offset</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buf_c</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>b_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_get_frame_short</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_c</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>stb_vorbis_get_frame_float</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>num_samples</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <name>num_samples</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbv_convert_samples_short</name><argument_list>(<argument><expr><name>num_c</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stbv_convert_channels_short_interleaved</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>buf_c</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>data_c</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>stbv_check_endianness</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_c</name> <operator>!=</operator> <name>data_c</name> <operator>&amp;&amp;</operator> <name>buf_c</name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>data_c</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>buf_c</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buf_c</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbv_compute_stereo_samples</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>data_c</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>d_offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><ternary><condition><expr><name>buf_c</name> <operator>&lt;</operator> <name>data_c</name></expr> ?</condition><then> <expr><name>buf_c</name></expr> </then><else>: <expr><name>data_c</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>STBV_FASTDEF</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>d_offset</name><operator>+</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>STBV_FAST_SCALED_FLOAT_TO_INT</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator><name>v</name> <operator>+</operator> <literal type="number">32768</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">32768</literal></expr> </then><else>: <expr><literal type="number">32767</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>buffer</name><operator>++</operator> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buf_c</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>buffer</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_get_frame_short_interleaved</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_c</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_shorts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>num_c</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>stb_vorbis_get_frame_short</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>num_c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>num_shorts</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>stb_vorbis_get_frame_float</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name><operator>*</operator><name>num_c</name> <operator>&gt;</operator> <name>num_shorts</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <name>num_shorts</name> <operator>/</operator> <name>num_c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>stbv_convert_channels_short_interleaved</name><argument_list>(<argument><expr><name>num_c</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_get_samples_short_interleaved</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_shorts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>outputs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>num_shorts</name> <operator>/</operator> <name>channels</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&gt;</operator> <name>channels</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffer_end</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>channel_buffer_start</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name><operator>+</operator><name>k</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>k</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbv_convert_channels_short_interleaved</name><argument_list>(<argument><expr><name>channels</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffers</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffer_start</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>buffer</name> <operator>+=</operator> <name>k</name><operator>*</operator><name>channels</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffer_start</name></name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stb_vorbis_get_frame_float</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_get_samples_short</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>outputs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&gt;</operator> <name>channels</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffer_end</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>channel_buffer_start</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name><operator>+</operator><name>k</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>k</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>stbv_convert_samples_short</name><argument_list>(<argument><expr><name>channels</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffers</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffer_start</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffer_start</name></name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stb_vorbis_get_frame_float</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STB_VORBIS_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_decode_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>data_len</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>total</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>, <decl><type ref="prev"/><name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>stb_vorbis_open_filename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sample_rate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>sample_rate</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>data_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>total</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stb_vorbis_close</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>stb_vorbis_get_frame_short_interleaved</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>data</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><name>total</name><operator>-</operator><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>data_len</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>n</name> <operator>*</operator> <name><name>v</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <name>limit</name> <operator>&gt;</operator> <name>total</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>data2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>total</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data2</name> <operator>=</operator> <operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>total</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>data2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stb_vorbis_close</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>data2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>output</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stb_vorbis_close</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>data_len</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_decode_memory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>stbv_uint8</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>data_len</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>total</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>, <decl><type ref="prev"/><name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>stb_vorbis_open_memory</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sample_rate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>sample_rate</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>data_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>total</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>stb_vorbis_close</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>stb_vorbis_get_frame_short_interleaved</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>data</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><name>total</name><operator>-</operator><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>data_len</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>n</name> <operator>*</operator> <name><name>v</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <name>limit</name> <operator>&gt;</operator> <name>total</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>data2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>total</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data2</name> <operator>=</operator> <operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>total</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>data2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stb_vorbis_close</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>data2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>output</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stb_vorbis_close</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>data_len</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_get_samples_float_interleaved</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_floats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>outputs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>num_floats</name> <operator>/</operator> <name>channels</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&gt;</operator> <name>channels</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffer_end</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>channel_buffer_start</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name><operator>+</operator><name>k</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>k</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>z</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>buffer</name><operator>++</operator> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>channel_buffers</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffer_start</name></name><operator>+</operator><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>buffer</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffer_start</name></name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stb_vorbis_get_frame_float</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STBVDEF</name> <name>int</name></type> <name>stb_vorbis_get_samples_float</name><parameter_list>(<parameter><decl><type><name>stb_vorbis</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_samples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>outputs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&gt;</operator> <name>channels</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>num_samples</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffer_end</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>channel_buffer_start</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name><operator>+</operator><name>k</name> <operator>&gt;=</operator> <name>num_samples</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>k</name> <operator>=</operator> <name>num_samples</name> <operator>-</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>z</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>n</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffers</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>f</name><operator>-&gt;</operator><name>channel_buffer_start</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>channel_buffer_start</name></name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>num_samples</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stb_vorbis_get_frame_float</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outputs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
























































<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 











































</unit>
