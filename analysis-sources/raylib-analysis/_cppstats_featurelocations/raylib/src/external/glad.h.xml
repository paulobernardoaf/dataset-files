<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\glad.h">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__glad_h_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__glad_h_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__gl_h_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> OpenGL header already included, remove this include, glad already provides it</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__gl_h_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>APIENTRY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SCITECH_SNAP__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32_LEAN_AND_MEAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APIENTRY</name></cpp:macro> <cpp:value>__stdcall</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>APIENTRY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APIENTRY</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>APIENTRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APIENTRYP</name></cpp:macro> <cpp:value>APIENTRY *</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_REALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_REALLOC</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>realloc(n,sz)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_FREE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(p)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>gladGLversionStruct</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minor</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier> <name>GLADloadproc</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_GLAPI_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_GLAPI_EXPORT_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>__attribute__ ((dllexport)) extern</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>__declspec(dllexport) extern</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>__attribute__ ((dllimport)) extern</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>__declspec(dllimport) extern</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GLAD_GLAPI_EXPORT_BUILD</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>__attribute__ ((visibility ("default"))) extern</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAPI</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>GLAPI</name> <name><name>struct</name> <name>gladGLversionStruct</name></name></type> <name>GLVersion</name></decl>;</decl_stmt>
<function_decl><type><name>GLAPI</name> <name>int</name></type> <name>gladLoadGLLoader</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GLEXT_64_TYPES_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLEXT_64_TYPES_DEFINED</name></cpp:macro></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sun__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__digital__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arch64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LP64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>long</name> <name>int</name></type> <name>int64_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>int</name></type> <name>uint64_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>int64_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>uint64_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__VMS</name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__sgi</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SCO__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__USLC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__UNIXOS2__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SOL64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>long</name> <name>int</name></type> <name>int32_t</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>int64_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>uint64_t</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <type><name>__int32</name></type> <name>int32_t</name>;</typedef>
<typedef>typedef <type><name>__int64</name></type> <name>int64_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>uint64_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>GLenum</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>GLboolean</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>GLbitfield</name>;</typedef>
<typedef>typedef <type><name>void</name></type> <name>GLvoid</name>;</typedef>
<typedef>typedef <type><name>signed</name> <name>char</name></type> <name>GLbyte</name>;</typedef>
<typedef>typedef <type><name>short</name></type> <name>GLshort</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>GLint</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>GLclampx</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>GLubyte</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>GLushort</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>GLuint</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>GLsizei</name>;</typedef>
<typedef>typedef <type><name>float</name></type> <name>GLfloat</name>;</typedef>
<typedef>typedef <type><name>float</name></type> <name>GLclampf</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>GLdouble</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>GLclampd</name>;</typedef>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>GLeglImageOES</name>;</typedef>
<typedef>typedef <type><name>char</name></type> <name>GLchar</name>;</typedef>
<typedef>typedef <type><name>char</name></type> <name>GLcharARB</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>GLhandleARB</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>GLhandleARB</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>GLhalfARB</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>GLhalf</name>;</typedef>
<typedef>typedef <type><name>GLint</name></type> <name>GLfixed</name>;</typedef>
<typedef>typedef <type><name>ptrdiff_t</name></type> <name>GLintptr</name>;</typedef>
<typedef>typedef <type><name>ptrdiff_t</name></type> <name>GLsizeiptr</name>;</typedef>
<typedef>typedef <type><name>int64_t</name></type> <name>GLint64</name>;</typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>GLuint64</name>;</typedef>
<typedef>typedef <type><name>ptrdiff_t</name></type> <name>GLintptrARB</name>;</typedef>
<typedef>typedef <type><name>ptrdiff_t</name></type> <name>GLsizeiptrARB</name>;</typedef>
<typedef>typedef <type><name>int64_t</name></type> <name>GLint64EXT</name>;</typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>GLuint64EXT</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>__GLsync</name></name> <modifier>*</modifier></type><name>GLsync</name>;</typedef>
<struct_decl>struct <name>_cl_context</name>;</struct_decl>
<struct_decl>struct <name>_cl_event</name>;</struct_decl>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>GLDEBUGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>,<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>,<parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>userParam</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>GLDEBUGPROCARB</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>,<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>,<parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>userParam</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>GLDEBUGPROCKHR</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>,<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>,<parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>userParam</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRY</name> <modifier>*</modifier><name>GLDEBUGPROCAMD</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>category</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>,<parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userParam</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>GLhalfNV</name>;</typedef>
<typedef>typedef <type><name>GLintptr</name></type> <name>GLvdpauSurfaceNV</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINTS</name></cpp:macro> <cpp:value>0x0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINES</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_LOOP</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_STRIP</name></cpp:macro> <cpp:value>0x0003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLES</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLE_STRIP</name></cpp:macro> <cpp:value>0x0005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLE_FAN</name></cpp:macro> <cpp:value>0x0006</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEVER</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LESS</name></cpp:macro> <cpp:value>0x0201</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EQUAL</name></cpp:macro> <cpp:value>0x0202</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LEQUAL</name></cpp:macro> <cpp:value>0x0203</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREATER</name></cpp:macro> <cpp:value>0x0204</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NOTEQUAL</name></cpp:macro> <cpp:value>0x0205</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEQUAL</name></cpp:macro> <cpp:value>0x0206</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALWAYS</name></cpp:macro> <cpp:value>0x0207</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ZERO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC_COLOR</name></cpp:macro> <cpp:value>0x0300</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_SRC_COLOR</name></cpp:macro> <cpp:value>0x0301</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC_ALPHA</name></cpp:macro> <cpp:value>0x0302</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_SRC_ALPHA</name></cpp:macro> <cpp:value>0x0303</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DST_ALPHA</name></cpp:macro> <cpp:value>0x0304</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_DST_ALPHA</name></cpp:macro> <cpp:value>0x0305</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DST_COLOR</name></cpp:macro> <cpp:value>0x0306</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_DST_COLOR</name></cpp:macro> <cpp:value>0x0307</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC_ALPHA_SATURATE</name></cpp:macro> <cpp:value>0x0308</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRONT_LEFT</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRONT_RIGHT</name></cpp:macro> <cpp:value>0x0401</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BACK_LEFT</name></cpp:macro> <cpp:value>0x0402</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BACK_RIGHT</name></cpp:macro> <cpp:value>0x0403</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRONT</name></cpp:macro> <cpp:value>0x0404</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BACK</name></cpp:macro> <cpp:value>0x0405</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LEFT</name></cpp:macro> <cpp:value>0x0406</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RIGHT</name></cpp:macro> <cpp:value>0x0407</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRONT_AND_BACK</name></cpp:macro> <cpp:value>0x0408</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NO_ERROR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_ENUM</name></cpp:macro> <cpp:value>0x0500</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_VALUE</name></cpp:macro> <cpp:value>0x0501</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_OPERATION</name></cpp:macro> <cpp:value>0x0502</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUT_OF_MEMORY</name></cpp:macro> <cpp:value>0x0505</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CW</name></cpp:macro> <cpp:value>0x0900</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CCW</name></cpp:macro> <cpp:value>0x0901</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE</name></cpp:macro> <cpp:value>0x0B11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE_RANGE</name></cpp:macro> <cpp:value>0x0B12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SIZE_GRANULARITY</name></cpp:macro> <cpp:value>0x0B13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_SMOOTH</name></cpp:macro> <cpp:value>0x0B20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_WIDTH</name></cpp:macro> <cpp:value>0x0B21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_WIDTH_RANGE</name></cpp:macro> <cpp:value>0x0B22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_WIDTH_GRANULARITY</name></cpp:macro> <cpp:value>0x0B23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_MODE</name></cpp:macro> <cpp:value>0x0B40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_SMOOTH</name></cpp:macro> <cpp:value>0x0B41</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CULL_FACE</name></cpp:macro> <cpp:value>0x0B44</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CULL_FACE_MODE</name></cpp:macro> <cpp:value>0x0B45</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRONT_FACE</name></cpp:macro> <cpp:value>0x0B46</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_RANGE</name></cpp:macro> <cpp:value>0x0B70</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_TEST</name></cpp:macro> <cpp:value>0x0B71</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_WRITEMASK</name></cpp:macro> <cpp:value>0x0B72</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_CLEAR_VALUE</name></cpp:macro> <cpp:value>0x0B73</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_FUNC</name></cpp:macro> <cpp:value>0x0B74</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_TEST</name></cpp:macro> <cpp:value>0x0B90</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_CLEAR_VALUE</name></cpp:macro> <cpp:value>0x0B91</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_FUNC</name></cpp:macro> <cpp:value>0x0B92</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_VALUE_MASK</name></cpp:macro> <cpp:value>0x0B93</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_FAIL</name></cpp:macro> <cpp:value>0x0B94</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_PASS_DEPTH_FAIL</name></cpp:macro> <cpp:value>0x0B95</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_PASS_DEPTH_PASS</name></cpp:macro> <cpp:value>0x0B96</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_REF</name></cpp:macro> <cpp:value>0x0B97</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_WRITEMASK</name></cpp:macro> <cpp:value>0x0B98</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEWPORT</name></cpp:macro> <cpp:value>0x0BA2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DITHER</name></cpp:macro> <cpp:value>0x0BD0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_DST</name></cpp:macro> <cpp:value>0x0BE0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_SRC</name></cpp:macro> <cpp:value>0x0BE1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND</name></cpp:macro> <cpp:value>0x0BE2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOGIC_OP_MODE</name></cpp:macro> <cpp:value>0x0BF0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_LOGIC_OP</name></cpp:macro> <cpp:value>0x0BF2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER</name></cpp:macro> <cpp:value>0x0C01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_BUFFER</name></cpp:macro> <cpp:value>0x0C02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCISSOR_BOX</name></cpp:macro> <cpp:value>0x0C10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCISSOR_TEST</name></cpp:macro> <cpp:value>0x0C11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_CLEAR_VALUE</name></cpp:macro> <cpp:value>0x0C22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_WRITEMASK</name></cpp:macro> <cpp:value>0x0C23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLEBUFFER</name></cpp:macro> <cpp:value>0x0C32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STEREO</name></cpp:macro> <cpp:value>0x0C33</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_SMOOTH_HINT</name></cpp:macro> <cpp:value>0x0C52</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_SMOOTH_HINT</name></cpp:macro> <cpp:value>0x0C53</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SWAP_BYTES</name></cpp:macro> <cpp:value>0x0CF0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_LSB_FIRST</name></cpp:macro> <cpp:value>0x0CF1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_ROW_LENGTH</name></cpp:macro> <cpp:value>0x0CF2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SKIP_ROWS</name></cpp:macro> <cpp:value>0x0CF3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SKIP_PIXELS</name></cpp:macro> <cpp:value>0x0CF4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_ALIGNMENT</name></cpp:macro> <cpp:value>0x0CF5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_SWAP_BYTES</name></cpp:macro> <cpp:value>0x0D00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_LSB_FIRST</name></cpp:macro> <cpp:value>0x0D01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_ROW_LENGTH</name></cpp:macro> <cpp:value>0x0D02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_SKIP_ROWS</name></cpp:macro> <cpp:value>0x0D03</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_SKIP_PIXELS</name></cpp:macro> <cpp:value>0x0D04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_ALIGNMENT</name></cpp:macro> <cpp:value>0x0D05</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_SIZE</name></cpp:macro> <cpp:value>0x0D33</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VIEWPORT_DIMS</name></cpp:macro> <cpp:value>0x0D3A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUBPIXEL_BITS</name></cpp:macro> <cpp:value>0x0D50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_1D</name></cpp:macro> <cpp:value>0x0DE0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D</name></cpp:macro> <cpp:value>0x0DE1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_UNITS</name></cpp:macro> <cpp:value>0x2A00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_POINT</name></cpp:macro> <cpp:value>0x2A01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_LINE</name></cpp:macro> <cpp:value>0x2A02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_FILL</name></cpp:macro> <cpp:value>0x8037</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_FACTOR</name></cpp:macro> <cpp:value>0x8038</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_1D</name></cpp:macro> <cpp:value>0x8068</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_2D</name></cpp:macro> <cpp:value>0x8069</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_WIDTH</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_HEIGHT</name></cpp:macro> <cpp:value>0x1001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_INTERNAL_FORMAT</name></cpp:macro> <cpp:value>0x1003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BORDER_COLOR</name></cpp:macro> <cpp:value>0x1004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RED_SIZE</name></cpp:macro> <cpp:value>0x805C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GREEN_SIZE</name></cpp:macro> <cpp:value>0x805D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BLUE_SIZE</name></cpp:macro> <cpp:value>0x805E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_ALPHA_SIZE</name></cpp:macro> <cpp:value>0x805F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DONT_CARE</name></cpp:macro> <cpp:value>0x1100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FASTEST</name></cpp:macro> <cpp:value>0x1101</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NICEST</name></cpp:macro> <cpp:value>0x1102</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BYTE</name></cpp:macro> <cpp:value>0x1400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_BYTE</name></cpp:macro> <cpp:value>0x1401</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHORT</name></cpp:macro> <cpp:value>0x1402</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT</name></cpp:macro> <cpp:value>0x1403</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT</name></cpp:macro> <cpp:value>0x1404</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT</name></cpp:macro> <cpp:value>0x1405</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT</name></cpp:macro> <cpp:value>0x1406</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOUBLE</name></cpp:macro> <cpp:value>0x140A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLEAR</name></cpp:macro> <cpp:value>0x1500</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AND</name></cpp:macro> <cpp:value>0x1501</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AND_REVERSE</name></cpp:macro> <cpp:value>0x1502</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COPY</name></cpp:macro> <cpp:value>0x1503</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AND_INVERTED</name></cpp:macro> <cpp:value>0x1504</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NOOP</name></cpp:macro> <cpp:value>0x1505</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_XOR</name></cpp:macro> <cpp:value>0x1506</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OR</name></cpp:macro> <cpp:value>0x1507</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NOR</name></cpp:macro> <cpp:value>0x1508</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EQUIV</name></cpp:macro> <cpp:value>0x1509</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVERT</name></cpp:macro> <cpp:value>0x150A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OR_REVERSE</name></cpp:macro> <cpp:value>0x150B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COPY_INVERTED</name></cpp:macro> <cpp:value>0x150C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OR_INVERTED</name></cpp:macro> <cpp:value>0x150D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NAND</name></cpp:macro> <cpp:value>0x150E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SET</name></cpp:macro> <cpp:value>0x150F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE</name></cpp:macro> <cpp:value>0x1702</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR</name></cpp:macro> <cpp:value>0x1800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH</name></cpp:macro> <cpp:value>0x1801</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL</name></cpp:macro> <cpp:value>0x1802</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX</name></cpp:macro> <cpp:value>0x1901</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT</name></cpp:macro> <cpp:value>0x1902</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED</name></cpp:macro> <cpp:value>0x1903</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREEN</name></cpp:macro> <cpp:value>0x1904</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLUE</name></cpp:macro> <cpp:value>0x1905</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA</name></cpp:macro> <cpp:value>0x1906</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB</name></cpp:macro> <cpp:value>0x1907</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA</name></cpp:macro> <cpp:value>0x1908</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT</name></cpp:macro> <cpp:value>0x1B00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE</name></cpp:macro> <cpp:value>0x1B01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FILL</name></cpp:macro> <cpp:value>0x1B02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_KEEP</name></cpp:macro> <cpp:value>0x1E00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLACE</name></cpp:macro> <cpp:value>0x1E01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INCR</name></cpp:macro> <cpp:value>0x1E02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DECR</name></cpp:macro> <cpp:value>0x1E03</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VENDOR</name></cpp:macro> <cpp:value>0x1F00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERER</name></cpp:macro> <cpp:value>0x1F01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION</name></cpp:macro> <cpp:value>0x1F02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXTENSIONS</name></cpp:macro> <cpp:value>0x1F03</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEAREST</name></cpp:macro> <cpp:value>0x2600</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR</name></cpp:macro> <cpp:value>0x2601</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEAREST_MIPMAP_NEAREST</name></cpp:macro> <cpp:value>0x2700</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_MIPMAP_NEAREST</name></cpp:macro> <cpp:value>0x2701</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEAREST_MIPMAP_LINEAR</name></cpp:macro> <cpp:value>0x2702</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_MIPMAP_LINEAR</name></cpp:macro> <cpp:value>0x2703</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAG_FILTER</name></cpp:macro> <cpp:value>0x2800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MIN_FILTER</name></cpp:macro> <cpp:value>0x2801</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_WRAP_S</name></cpp:macro> <cpp:value>0x2802</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_WRAP_T</name></cpp:macro> <cpp:value>0x2803</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_1D</name></cpp:macro> <cpp:value>0x8063</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_2D</name></cpp:macro> <cpp:value>0x8064</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPEAT</name></cpp:macro> <cpp:value>0x2901</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R3_G3_B2</name></cpp:macro> <cpp:value>0x2A10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB4</name></cpp:macro> <cpp:value>0x804F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB5</name></cpp:macro> <cpp:value>0x8050</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8</name></cpp:macro> <cpp:value>0x8051</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB10</name></cpp:macro> <cpp:value>0x8052</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB12</name></cpp:macro> <cpp:value>0x8053</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16</name></cpp:macro> <cpp:value>0x8054</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA2</name></cpp:macro> <cpp:value>0x8055</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA4</name></cpp:macro> <cpp:value>0x8056</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB5_A1</name></cpp:macro> <cpp:value>0x8057</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8</name></cpp:macro> <cpp:value>0x8058</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB10_A2</name></cpp:macro> <cpp:value>0x8059</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA12</name></cpp:macro> <cpp:value>0x805A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16</name></cpp:macro> <cpp:value>0x805B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_BYTE_3_3_2</name></cpp:macro> <cpp:value>0x8032</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_4_4_4_4</name></cpp:macro> <cpp:value>0x8033</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_5_5_5_1</name></cpp:macro> <cpp:value>0x8034</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_8_8_8_8</name></cpp:macro> <cpp:value>0x8035</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_10_10_10_2</name></cpp:macro> <cpp:value>0x8036</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_3D</name></cpp:macro> <cpp:value>0x806A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_SKIP_IMAGES</name></cpp:macro> <cpp:value>0x806B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_IMAGE_HEIGHT</name></cpp:macro> <cpp:value>0x806C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SKIP_IMAGES</name></cpp:macro> <cpp:value>0x806D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_IMAGE_HEIGHT</name></cpp:macro> <cpp:value>0x806E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_3D</name></cpp:macro> <cpp:value>0x806F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_3D</name></cpp:macro> <cpp:value>0x8070</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEPTH</name></cpp:macro> <cpp:value>0x8071</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_WRAP_R</name></cpp:macro> <cpp:value>0x8072</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_3D_TEXTURE_SIZE</name></cpp:macro> <cpp:value>0x8073</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_BYTE_2_3_3_REV</name></cpp:macro> <cpp:value>0x8362</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_5_6_5</name></cpp:macro> <cpp:value>0x8363</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_5_6_5_REV</name></cpp:macro> <cpp:value>0x8364</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_4_4_4_4_REV</name></cpp:macro> <cpp:value>0x8365</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_1_5_5_5_REV</name></cpp:macro> <cpp:value>0x8366</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_8_8_8_8_REV</name></cpp:macro> <cpp:value>0x8367</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_2_10_10_10_REV</name></cpp:macro> <cpp:value>0x8368</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGR</name></cpp:macro> <cpp:value>0x80E0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGRA</name></cpp:macro> <cpp:value>0x80E1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ELEMENTS_VERTICES</name></cpp:macro> <cpp:value>0x80E8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ELEMENTS_INDICES</name></cpp:macro> <cpp:value>0x80E9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_TO_EDGE</name></cpp:macro> <cpp:value>0x812F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MIN_LOD</name></cpp:macro> <cpp:value>0x813A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_LOD</name></cpp:macro> <cpp:value>0x813B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BASE_LEVEL</name></cpp:macro> <cpp:value>0x813C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_LEVEL</name></cpp:macro> <cpp:value>0x813D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SMOOTH_POINT_SIZE_RANGE</name></cpp:macro> <cpp:value>0x0B12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SMOOTH_POINT_SIZE_GRANULARITY</name></cpp:macro> <cpp:value>0x0B13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SMOOTH_LINE_WIDTH_RANGE</name></cpp:macro> <cpp:value>0x0B22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SMOOTH_LINE_WIDTH_GRANULARITY</name></cpp:macro> <cpp:value>0x0B23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALIASED_LINE_WIDTH_RANGE</name></cpp:macro> <cpp:value>0x846E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE0</name></cpp:macro> <cpp:value>0x84C0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE1</name></cpp:macro> <cpp:value>0x84C1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE2</name></cpp:macro> <cpp:value>0x84C2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE3</name></cpp:macro> <cpp:value>0x84C3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE4</name></cpp:macro> <cpp:value>0x84C4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE5</name></cpp:macro> <cpp:value>0x84C5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE6</name></cpp:macro> <cpp:value>0x84C6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE7</name></cpp:macro> <cpp:value>0x84C7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE8</name></cpp:macro> <cpp:value>0x84C8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE9</name></cpp:macro> <cpp:value>0x84C9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE10</name></cpp:macro> <cpp:value>0x84CA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE11</name></cpp:macro> <cpp:value>0x84CB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE12</name></cpp:macro> <cpp:value>0x84CC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE13</name></cpp:macro> <cpp:value>0x84CD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE14</name></cpp:macro> <cpp:value>0x84CE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE15</name></cpp:macro> <cpp:value>0x84CF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE16</name></cpp:macro> <cpp:value>0x84D0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE17</name></cpp:macro> <cpp:value>0x84D1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE18</name></cpp:macro> <cpp:value>0x84D2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE19</name></cpp:macro> <cpp:value>0x84D3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE20</name></cpp:macro> <cpp:value>0x84D4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE21</name></cpp:macro> <cpp:value>0x84D5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE22</name></cpp:macro> <cpp:value>0x84D6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE23</name></cpp:macro> <cpp:value>0x84D7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE24</name></cpp:macro> <cpp:value>0x84D8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE25</name></cpp:macro> <cpp:value>0x84D9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE26</name></cpp:macro> <cpp:value>0x84DA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE27</name></cpp:macro> <cpp:value>0x84DB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE28</name></cpp:macro> <cpp:value>0x84DC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE29</name></cpp:macro> <cpp:value>0x84DD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE30</name></cpp:macro> <cpp:value>0x84DE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE31</name></cpp:macro> <cpp:value>0x84DF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_TEXTURE</name></cpp:macro> <cpp:value>0x84E0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE</name></cpp:macro> <cpp:value>0x809D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_COVERAGE</name></cpp:macro> <cpp:value>0x809E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_ONE</name></cpp:macro> <cpp:value>0x809F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE</name></cpp:macro> <cpp:value>0x80A0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_BUFFERS</name></cpp:macro> <cpp:value>0x80A8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLES</name></cpp:macro> <cpp:value>0x80A9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE_VALUE</name></cpp:macro> <cpp:value>0x80AA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE_INVERT</name></cpp:macro> <cpp:value>0x80AB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP</name></cpp:macro> <cpp:value>0x8513</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_CUBE_MAP</name></cpp:macro> <cpp:value>0x8514</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_X</name></cpp:macro> <cpp:value>0x8515</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_X</name></cpp:macro> <cpp:value>0x8516</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_Y</name></cpp:macro> <cpp:value>0x8517</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_Y</name></cpp:macro> <cpp:value>0x8518</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_Z</name></cpp:macro> <cpp:value>0x8519</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_Z</name></cpp:macro> <cpp:value>0x851A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_CUBE_MAP</name></cpp:macro> <cpp:value>0x851B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CUBE_MAP_TEXTURE_SIZE</name></cpp:macro> <cpp:value>0x851C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB</name></cpp:macro> <cpp:value>0x84ED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA</name></cpp:macro> <cpp:value>0x84EE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSION_HINT</name></cpp:macro> <cpp:value>0x84EF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSED_IMAGE_SIZE</name></cpp:macro> <cpp:value>0x86A0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSED</name></cpp:macro> <cpp:value>0x86A1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_COMPRESSED_TEXTURE_FORMATS</name></cpp:macro> <cpp:value>0x86A2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_TEXTURE_FORMATS</name></cpp:macro> <cpp:value>0x86A3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_TO_BORDER</name></cpp:macro> <cpp:value>0x812D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_DST_RGB</name></cpp:macro> <cpp:value>0x80C8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_SRC_RGB</name></cpp:macro> <cpp:value>0x80C9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_DST_ALPHA</name></cpp:macro> <cpp:value>0x80CA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_SRC_ALPHA</name></cpp:macro> <cpp:value>0x80CB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_FADE_THRESHOLD_SIZE</name></cpp:macro> <cpp:value>0x8128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT16</name></cpp:macro> <cpp:value>0x81A5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT24</name></cpp:macro> <cpp:value>0x81A6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT32</name></cpp:macro> <cpp:value>0x81A7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIRRORED_REPEAT</name></cpp:macro> <cpp:value>0x8370</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_LOD_BIAS</name></cpp:macro> <cpp:value>0x84FD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LOD_BIAS</name></cpp:macro> <cpp:value>0x8501</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INCR_WRAP</name></cpp:macro> <cpp:value>0x8507</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DECR_WRAP</name></cpp:macro> <cpp:value>0x8508</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEPTH_SIZE</name></cpp:macro> <cpp:value>0x884A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPARE_MODE</name></cpp:macro> <cpp:value>0x884C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPARE_FUNC</name></cpp:macro> <cpp:value>0x884D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FUNC_ADD</name></cpp:macro> <cpp:value>0x8006</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FUNC_SUBTRACT</name></cpp:macro> <cpp:value>0x800A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FUNC_REVERSE_SUBTRACT</name></cpp:macro> <cpp:value>0x800B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN</name></cpp:macro> <cpp:value>0x8007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX</name></cpp:macro> <cpp:value>0x8008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_COLOR</name></cpp:macro> <cpp:value>0x8001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_CONSTANT_COLOR</name></cpp:macro> <cpp:value>0x8002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_ALPHA</name></cpp:macro> <cpp:value>0x8003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_CONSTANT_ALPHA</name></cpp:macro> <cpp:value>0x8004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x8764</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_USAGE</name></cpp:macro> <cpp:value>0x8765</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_COUNTER_BITS</name></cpp:macro> <cpp:value>0x8864</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_QUERY</name></cpp:macro> <cpp:value>0x8865</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_RESULT</name></cpp:macro> <cpp:value>0x8866</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_RESULT_AVAILABLE</name></cpp:macro> <cpp:value>0x8867</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_BUFFER</name></cpp:macro> <cpp:value>0x8892</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_BUFFER</name></cpp:macro> <cpp:value>0x8893</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8894</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8895</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x889F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_ONLY</name></cpp:macro> <cpp:value>0x88B8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WRITE_ONLY</name></cpp:macro> <cpp:value>0x88B9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_WRITE</name></cpp:macro> <cpp:value>0x88BA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_ACCESS</name></cpp:macro> <cpp:value>0x88BB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAPPED</name></cpp:macro> <cpp:value>0x88BC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAP_POINTER</name></cpp:macro> <cpp:value>0x88BD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_DRAW</name></cpp:macro> <cpp:value>0x88E0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_READ</name></cpp:macro> <cpp:value>0x88E1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_COPY</name></cpp:macro> <cpp:value>0x88E2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_DRAW</name></cpp:macro> <cpp:value>0x88E4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_READ</name></cpp:macro> <cpp:value>0x88E5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_COPY</name></cpp:macro> <cpp:value>0x88E6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_DRAW</name></cpp:macro> <cpp:value>0x88E8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_READ</name></cpp:macro> <cpp:value>0x88E9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_COPY</name></cpp:macro> <cpp:value>0x88EA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLES_PASSED</name></cpp:macro> <cpp:value>0x8914</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC1_ALPHA</name></cpp:macro> <cpp:value>0x8589</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_EQUATION_RGB</name></cpp:macro> <cpp:value>0x8009</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_ENABLED</name></cpp:macro> <cpp:value>0x8622</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_SIZE</name></cpp:macro> <cpp:value>0x8623</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x8624</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_TYPE</name></cpp:macro> <cpp:value>0x8625</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_VERTEX_ATTRIB</name></cpp:macro> <cpp:value>0x8626</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_POINT_SIZE</name></cpp:macro> <cpp:value>0x8642</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_POINTER</name></cpp:macro> <cpp:value>0x8645</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_FUNC</name></cpp:macro> <cpp:value>0x8800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_FAIL</name></cpp:macro> <cpp:value>0x8801</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_PASS_DEPTH_FAIL</name></cpp:macro> <cpp:value>0x8802</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_PASS_DEPTH_PASS</name></cpp:macro> <cpp:value>0x8803</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DRAW_BUFFERS</name></cpp:macro> <cpp:value>0x8824</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER0</name></cpp:macro> <cpp:value>0x8825</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER1</name></cpp:macro> <cpp:value>0x8826</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER2</name></cpp:macro> <cpp:value>0x8827</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER3</name></cpp:macro> <cpp:value>0x8828</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER4</name></cpp:macro> <cpp:value>0x8829</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER5</name></cpp:macro> <cpp:value>0x882A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER6</name></cpp:macro> <cpp:value>0x882B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER7</name></cpp:macro> <cpp:value>0x882C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER8</name></cpp:macro> <cpp:value>0x882D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER9</name></cpp:macro> <cpp:value>0x882E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER10</name></cpp:macro> <cpp:value>0x882F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER11</name></cpp:macro> <cpp:value>0x8830</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER12</name></cpp:macro> <cpp:value>0x8831</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER13</name></cpp:macro> <cpp:value>0x8832</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER14</name></cpp:macro> <cpp:value>0x8833</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER15</name></cpp:macro> <cpp:value>0x8834</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_EQUATION_ALPHA</name></cpp:macro> <cpp:value>0x883D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_ATTRIBS</name></cpp:macro> <cpp:value>0x8869</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_NORMALIZED</name></cpp:macro> <cpp:value>0x886A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8872</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SHADER</name></cpp:macro> <cpp:value>0x8B30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER</name></cpp:macro> <cpp:value>0x8B31</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8B49</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8B4A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VARYING_FLOATS</name></cpp:macro> <cpp:value>0x8B4B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8B4C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8B4D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_TYPE</name></cpp:macro> <cpp:value>0x8B4F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC2</name></cpp:macro> <cpp:value>0x8B50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC3</name></cpp:macro> <cpp:value>0x8B51</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC4</name></cpp:macro> <cpp:value>0x8B52</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_VEC2</name></cpp:macro> <cpp:value>0x8B53</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_VEC3</name></cpp:macro> <cpp:value>0x8B54</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_VEC4</name></cpp:macro> <cpp:value>0x8B55</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL</name></cpp:macro> <cpp:value>0x8B56</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL_VEC2</name></cpp:macro> <cpp:value>0x8B57</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL_VEC3</name></cpp:macro> <cpp:value>0x8B58</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL_VEC4</name></cpp:macro> <cpp:value>0x8B59</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT2</name></cpp:macro> <cpp:value>0x8B5A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT3</name></cpp:macro> <cpp:value>0x8B5B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT4</name></cpp:macro> <cpp:value>0x8B5C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D</name></cpp:macro> <cpp:value>0x8B5D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D</name></cpp:macro> <cpp:value>0x8B5E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_3D</name></cpp:macro> <cpp:value>0x8B5F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_CUBE</name></cpp:macro> <cpp:value>0x8B60</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D_SHADOW</name></cpp:macro> <cpp:value>0x8B61</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_SHADOW</name></cpp:macro> <cpp:value>0x8B62</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DELETE_STATUS</name></cpp:macro> <cpp:value>0x8B80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPILE_STATUS</name></cpp:macro> <cpp:value>0x8B81</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINK_STATUS</name></cpp:macro> <cpp:value>0x8B82</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VALIDATE_STATUS</name></cpp:macro> <cpp:value>0x8B83</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INFO_LOG_LENGTH</name></cpp:macro> <cpp:value>0x8B84</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATTACHED_SHADERS</name></cpp:macro> <cpp:value>0x8B85</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_UNIFORMS</name></cpp:macro> <cpp:value>0x8B86</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_UNIFORM_MAX_LENGTH</name></cpp:macro> <cpp:value>0x8B87</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_SOURCE_LENGTH</name></cpp:macro> <cpp:value>0x8B88</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_ATTRIBUTES</name></cpp:macro> <cpp:value>0x8B89</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_ATTRIBUTE_MAX_LENGTH</name></cpp:macro> <cpp:value>0x8B8A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SHADER_DERIVATIVE_HINT</name></cpp:macro> <cpp:value>0x8B8B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADING_LANGUAGE_VERSION</name></cpp:macro> <cpp:value>0x8B8C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_PROGRAM</name></cpp:macro> <cpp:value>0x8B8D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINT_SPRITE_COORD_ORIGIN</name></cpp:macro> <cpp:value>0x8CA0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOWER_LEFT</name></cpp:macro> <cpp:value>0x8CA1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UPPER_LEFT</name></cpp:macro> <cpp:value>0x8CA2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_REF</name></cpp:macro> <cpp:value>0x8CA3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_VALUE_MASK</name></cpp:macro> <cpp:value>0x8CA4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_WRITEMASK</name></cpp:macro> <cpp:value>0x8CA5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_PACK_BUFFER</name></cpp:macro> <cpp:value>0x88EB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_UNPACK_BUFFER</name></cpp:macro> <cpp:value>0x88EC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_PACK_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x88ED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_UNPACK_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x88EF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT2x3</name></cpp:macro> <cpp:value>0x8B65</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT2x4</name></cpp:macro> <cpp:value>0x8B66</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT3x2</name></cpp:macro> <cpp:value>0x8B67</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT3x4</name></cpp:macro> <cpp:value>0x8B68</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT4x2</name></cpp:macro> <cpp:value>0x8B69</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT4x3</name></cpp:macro> <cpp:value>0x8B6A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB</name></cpp:macro> <cpp:value>0x8C40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB8</name></cpp:macro> <cpp:value>0x8C41</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB_ALPHA</name></cpp:macro> <cpp:value>0x8C42</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB8_ALPHA8</name></cpp:macro> <cpp:value>0x8C43</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB</name></cpp:macro> <cpp:value>0x8C48</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_ALPHA</name></cpp:macro> <cpp:value>0x8C49</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPARE_REF_TO_TEXTURE</name></cpp:macro> <cpp:value>0x884E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE0</name></cpp:macro> <cpp:value>0x3000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE1</name></cpp:macro> <cpp:value>0x3001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE2</name></cpp:macro> <cpp:value>0x3002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE3</name></cpp:macro> <cpp:value>0x3003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE4</name></cpp:macro> <cpp:value>0x3004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE5</name></cpp:macro> <cpp:value>0x3005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE6</name></cpp:macro> <cpp:value>0x3006</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIP_DISTANCE7</name></cpp:macro> <cpp:value>0x3007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CLIP_DISTANCES</name></cpp:macro> <cpp:value>0x0D32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAJOR_VERSION</name></cpp:macro> <cpp:value>0x821B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MINOR_VERSION</name></cpp:macro> <cpp:value>0x821C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_EXTENSIONS</name></cpp:macro> <cpp:value>0x821D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_FLAGS</name></cpp:macro> <cpp:value>0x821E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RED</name></cpp:macro> <cpp:value>0x8225</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RG</name></cpp:macro> <cpp:value>0x8226</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA32F</name></cpp:macro> <cpp:value>0x8814</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB32F</name></cpp:macro> <cpp:value>0x8815</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16F</name></cpp:macro> <cpp:value>0x881A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16F</name></cpp:macro> <cpp:value>0x881B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_INTEGER</name></cpp:macro> <cpp:value>0x88FD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ARRAY_TEXTURE_LAYERS</name></cpp:macro> <cpp:value>0x88FF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_PROGRAM_TEXEL_OFFSET</name></cpp:macro> <cpp:value>0x8904</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TEXEL_OFFSET</name></cpp:macro> <cpp:value>0x8905</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_READ_COLOR</name></cpp:macro> <cpp:value>0x891C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIXED_ONLY</name></cpp:macro> <cpp:value>0x891D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VARYING_COMPONENTS</name></cpp:macro> <cpp:value>0x8B4B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_1D_ARRAY</name></cpp:macro> <cpp:value>0x8C18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_1D_ARRAY</name></cpp:macro> <cpp:value>0x8C19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D_ARRAY</name></cpp:macro> <cpp:value>0x8C1A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_2D_ARRAY</name></cpp:macro> <cpp:value>0x8C1B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_1D_ARRAY</name></cpp:macro> <cpp:value>0x8C1C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_2D_ARRAY</name></cpp:macro> <cpp:value>0x8C1D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R11F_G11F_B10F</name></cpp:macro> <cpp:value>0x8C3A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_10F_11F_11F_REV</name></cpp:macro> <cpp:value>0x8C3B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB9_E5</name></cpp:macro> <cpp:value>0x8C3D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_5_9_9_9_REV</name></cpp:macro> <cpp:value>0x8C3E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SHARED_SIZE</name></cpp:macro> <cpp:value>0x8C3F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH</name></cpp:macro> <cpp:value>0x8C76</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_MODE</name></cpp:macro> <cpp:value>0x8C7F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS</name></cpp:macro> <cpp:value>0x8C80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_VARYINGS</name></cpp:macro> <cpp:value>0x8C83</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_START</name></cpp:macro> <cpp:value>0x8C84</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x8C85</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVES_GENERATED</name></cpp:macro> <cpp:value>0x8C87</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN</name></cpp:macro> <cpp:value>0x8C88</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RASTERIZER_DISCARD</name></cpp:macro> <cpp:value>0x8C89</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS</name></cpp:macro> <cpp:value>0x8C8A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS</name></cpp:macro> <cpp:value>0x8C8B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERLEAVED_ATTRIBS</name></cpp:macro> <cpp:value>0x8C8C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SEPARATE_ATTRIBS</name></cpp:macro> <cpp:value>0x8C8D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER</name></cpp:macro> <cpp:value>0x8C8E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8C8F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA32UI</name></cpp:macro> <cpp:value>0x8D70</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB32UI</name></cpp:macro> <cpp:value>0x8D71</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16UI</name></cpp:macro> <cpp:value>0x8D76</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16UI</name></cpp:macro> <cpp:value>0x8D77</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8UI</name></cpp:macro> <cpp:value>0x8D7C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8UI</name></cpp:macro> <cpp:value>0x8D7D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA32I</name></cpp:macro> <cpp:value>0x8D82</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB32I</name></cpp:macro> <cpp:value>0x8D83</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16I</name></cpp:macro> <cpp:value>0x8D88</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16I</name></cpp:macro> <cpp:value>0x8D89</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8I</name></cpp:macro> <cpp:value>0x8D8E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8I</name></cpp:macro> <cpp:value>0x8D8F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED_INTEGER</name></cpp:macro> <cpp:value>0x8D94</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREEN_INTEGER</name></cpp:macro> <cpp:value>0x8D95</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLUE_INTEGER</name></cpp:macro> <cpp:value>0x8D96</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_INTEGER</name></cpp:macro> <cpp:value>0x8D98</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_INTEGER</name></cpp:macro> <cpp:value>0x8D99</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGR_INTEGER</name></cpp:macro> <cpp:value>0x8D9A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGRA_INTEGER</name></cpp:macro> <cpp:value>0x8D9B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D_ARRAY</name></cpp:macro> <cpp:value>0x8DC0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_ARRAY</name></cpp:macro> <cpp:value>0x8DC1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_1D_ARRAY_SHADOW</name></cpp:macro> <cpp:value>0x8DC3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_ARRAY_SHADOW</name></cpp:macro> <cpp:value>0x8DC4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_CUBE_SHADOW</name></cpp:macro> <cpp:value>0x8DC5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC2</name></cpp:macro> <cpp:value>0x8DC6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC3</name></cpp:macro> <cpp:value>0x8DC7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC4</name></cpp:macro> <cpp:value>0x8DC8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_1D</name></cpp:macro> <cpp:value>0x8DC9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D</name></cpp:macro> <cpp:value>0x8DCA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_3D</name></cpp:macro> <cpp:value>0x8DCB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_CUBE</name></cpp:macro> <cpp:value>0x8DCC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_1D_ARRAY</name></cpp:macro> <cpp:value>0x8DCE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D_ARRAY</name></cpp:macro> <cpp:value>0x8DCF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_1D</name></cpp:macro> <cpp:value>0x8DD1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D</name></cpp:macro> <cpp:value>0x8DD2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_3D</name></cpp:macro> <cpp:value>0x8DD3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_CUBE</name></cpp:macro> <cpp:value>0x8DD4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_1D_ARRAY</name></cpp:macro> <cpp:value>0x8DD6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D_ARRAY</name></cpp:macro> <cpp:value>0x8DD7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_WAIT</name></cpp:macro> <cpp:value>0x8E13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_NO_WAIT</name></cpp:macro> <cpp:value>0x8E14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_BY_REGION_WAIT</name></cpp:macro> <cpp:value>0x8E15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_BY_REGION_NO_WAIT</name></cpp:macro> <cpp:value>0x8E16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_ACCESS_FLAGS</name></cpp:macro> <cpp:value>0x911F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAP_LENGTH</name></cpp:macro> <cpp:value>0x9120</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAP_OFFSET</name></cpp:macro> <cpp:value>0x9121</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT32F</name></cpp:macro> <cpp:value>0x8CAC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH32F_STENCIL8</name></cpp:macro> <cpp:value>0x8CAD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_32_UNSIGNED_INT_24_8_REV</name></cpp:macro> <cpp:value>0x8DAD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_FRAMEBUFFER_OPERATION</name></cpp:macro> <cpp:value>0x0506</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING</name></cpp:macro> <cpp:value>0x8210</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE</name></cpp:macro> <cpp:value>0x8211</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE</name></cpp:macro> <cpp:value>0x8212</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE</name></cpp:macro> <cpp:value>0x8213</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE</name></cpp:macro> <cpp:value>0x8214</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE</name></cpp:macro> <cpp:value>0x8215</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE</name></cpp:macro> <cpp:value>0x8216</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE</name></cpp:macro> <cpp:value>0x8217</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_DEFAULT</name></cpp:macro> <cpp:value>0x8218</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_UNDEFINED</name></cpp:macro> <cpp:value>0x8219</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_STENCIL_ATTACHMENT</name></cpp:macro> <cpp:value>0x821A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_RENDERBUFFER_SIZE</name></cpp:macro> <cpp:value>0x84E8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_STENCIL</name></cpp:macro> <cpp:value>0x84F9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_24_8</name></cpp:macro> <cpp:value>0x84FA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH24_STENCIL8</name></cpp:macro> <cpp:value>0x88F0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_STENCIL_SIZE</name></cpp:macro> <cpp:value>0x88F1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RED_TYPE</name></cpp:macro> <cpp:value>0x8C10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GREEN_TYPE</name></cpp:macro> <cpp:value>0x8C11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BLUE_TYPE</name></cpp:macro> <cpp:value>0x8C12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_ALPHA_TYPE</name></cpp:macro> <cpp:value>0x8C13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEPTH_TYPE</name></cpp:macro> <cpp:value>0x8C16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_NORMALIZED</name></cpp:macro> <cpp:value>0x8C17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_BINDING</name></cpp:macro> <cpp:value>0x8CA6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER_BINDING</name></cpp:macro> <cpp:value>0x8CA6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_BINDING</name></cpp:macro> <cpp:value>0x8CA7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER</name></cpp:macro> <cpp:value>0x8CA8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER</name></cpp:macro> <cpp:value>0x8CA9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER_BINDING</name></cpp:macro> <cpp:value>0x8CAA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_SAMPLES</name></cpp:macro> <cpp:value>0x8CAB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE</name></cpp:macro> <cpp:value>0x8CD0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME</name></cpp:macro> <cpp:value>0x8CD1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL</name></cpp:macro> <cpp:value>0x8CD2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE</name></cpp:macro> <cpp:value>0x8CD3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER</name></cpp:macro> <cpp:value>0x8CD4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_COMPLETE</name></cpp:macro> <cpp:value>0x8CD5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT</name></cpp:macro> <cpp:value>0x8CD6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT</name></cpp:macro> <cpp:value>0x8CD7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER</name></cpp:macro> <cpp:value>0x8CDB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER</name></cpp:macro> <cpp:value>0x8CDC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_UNSUPPORTED</name></cpp:macro> <cpp:value>0x8CDD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COLOR_ATTACHMENTS</name></cpp:macro> <cpp:value>0x8CDF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT0</name></cpp:macro> <cpp:value>0x8CE0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT1</name></cpp:macro> <cpp:value>0x8CE1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT2</name></cpp:macro> <cpp:value>0x8CE2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT3</name></cpp:macro> <cpp:value>0x8CE3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT4</name></cpp:macro> <cpp:value>0x8CE4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT5</name></cpp:macro> <cpp:value>0x8CE5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT6</name></cpp:macro> <cpp:value>0x8CE6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT7</name></cpp:macro> <cpp:value>0x8CE7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT8</name></cpp:macro> <cpp:value>0x8CE8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT9</name></cpp:macro> <cpp:value>0x8CE9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT10</name></cpp:macro> <cpp:value>0x8CEA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT11</name></cpp:macro> <cpp:value>0x8CEB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT12</name></cpp:macro> <cpp:value>0x8CEC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT13</name></cpp:macro> <cpp:value>0x8CED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT14</name></cpp:macro> <cpp:value>0x8CEE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT15</name></cpp:macro> <cpp:value>0x8CEF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT16</name></cpp:macro> <cpp:value>0x8CF0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT17</name></cpp:macro> <cpp:value>0x8CF1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT18</name></cpp:macro> <cpp:value>0x8CF2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT19</name></cpp:macro> <cpp:value>0x8CF3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT20</name></cpp:macro> <cpp:value>0x8CF4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT21</name></cpp:macro> <cpp:value>0x8CF5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT22</name></cpp:macro> <cpp:value>0x8CF6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT23</name></cpp:macro> <cpp:value>0x8CF7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT24</name></cpp:macro> <cpp:value>0x8CF8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT25</name></cpp:macro> <cpp:value>0x8CF9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT26</name></cpp:macro> <cpp:value>0x8CFA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT27</name></cpp:macro> <cpp:value>0x8CFB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT28</name></cpp:macro> <cpp:value>0x8CFC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT29</name></cpp:macro> <cpp:value>0x8CFD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT30</name></cpp:macro> <cpp:value>0x8CFE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT31</name></cpp:macro> <cpp:value>0x8CFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_ATTACHMENT</name></cpp:macro> <cpp:value>0x8D00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_ATTACHMENT</name></cpp:macro> <cpp:value>0x8D20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER</name></cpp:macro> <cpp:value>0x8D40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER</name></cpp:macro> <cpp:value>0x8D41</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_WIDTH</name></cpp:macro> <cpp:value>0x8D42</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_HEIGHT</name></cpp:macro> <cpp:value>0x8D43</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_INTERNAL_FORMAT</name></cpp:macro> <cpp:value>0x8D44</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX1</name></cpp:macro> <cpp:value>0x8D46</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX4</name></cpp:macro> <cpp:value>0x8D47</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX8</name></cpp:macro> <cpp:value>0x8D48</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX16</name></cpp:macro> <cpp:value>0x8D49</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_RED_SIZE</name></cpp:macro> <cpp:value>0x8D50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_GREEN_SIZE</name></cpp:macro> <cpp:value>0x8D51</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_BLUE_SIZE</name></cpp:macro> <cpp:value>0x8D52</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_ALPHA_SIZE</name></cpp:macro> <cpp:value>0x8D53</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_DEPTH_SIZE</name></cpp:macro> <cpp:value>0x8D54</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_STENCIL_SIZE</name></cpp:macro> <cpp:value>0x8D55</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE</name></cpp:macro> <cpp:value>0x8D56</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SAMPLES</name></cpp:macro> <cpp:value>0x8D57</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX</name></cpp:macro> <cpp:value>0x8222</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_SRGB</name></cpp:macro> <cpp:value>0x8DB9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HALF_FLOAT</name></cpp:macro> <cpp:value>0x140B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_READ_BIT</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_WRITE_BIT</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_INVALIDATE_RANGE_BIT</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_INVALIDATE_BUFFER_BIT</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_FLUSH_EXPLICIT_BIT</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_UNSYNCHRONIZED_BIT</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RED_RGTC1</name></cpp:macro> <cpp:value>0x8DBB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_RED_RGTC1</name></cpp:macro> <cpp:value>0x8DBC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RG_RGTC2</name></cpp:macro> <cpp:value>0x8DBD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_RG_RGTC2</name></cpp:macro> <cpp:value>0x8DBE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG</name></cpp:macro> <cpp:value>0x8227</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG_INTEGER</name></cpp:macro> <cpp:value>0x8228</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R8</name></cpp:macro> <cpp:value>0x8229</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16</name></cpp:macro> <cpp:value>0x822A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG8</name></cpp:macro> <cpp:value>0x822B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16</name></cpp:macro> <cpp:value>0x822C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16F</name></cpp:macro> <cpp:value>0x822D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R32F</name></cpp:macro> <cpp:value>0x822E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16F</name></cpp:macro> <cpp:value>0x822F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG32F</name></cpp:macro> <cpp:value>0x8230</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R8I</name></cpp:macro> <cpp:value>0x8231</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R8UI</name></cpp:macro> <cpp:value>0x8232</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16I</name></cpp:macro> <cpp:value>0x8233</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16UI</name></cpp:macro> <cpp:value>0x8234</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R32I</name></cpp:macro> <cpp:value>0x8235</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R32UI</name></cpp:macro> <cpp:value>0x8236</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG8I</name></cpp:macro> <cpp:value>0x8237</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG8UI</name></cpp:macro> <cpp:value>0x8238</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16I</name></cpp:macro> <cpp:value>0x8239</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16UI</name></cpp:macro> <cpp:value>0x823A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG32I</name></cpp:macro> <cpp:value>0x823B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG32UI</name></cpp:macro> <cpp:value>0x823C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_BINDING</name></cpp:macro> <cpp:value>0x85B5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_RECT</name></cpp:macro> <cpp:value>0x8B63</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_RECT_SHADOW</name></cpp:macro> <cpp:value>0x8B64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_BUFFER</name></cpp:macro> <cpp:value>0x8DC2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D_RECT</name></cpp:macro> <cpp:value>0x8DCD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_BUFFER</name></cpp:macro> <cpp:value>0x8DD0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D_RECT</name></cpp:macro> <cpp:value>0x8DD5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_BUFFER</name></cpp:macro> <cpp:value>0x8DD8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER</name></cpp:macro> <cpp:value>0x8C2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x8C2B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_BUFFER</name></cpp:macro> <cpp:value>0x8C2C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BUFFER_DATA_STORE_BINDING</name></cpp:macro> <cpp:value>0x8C2D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RECTANGLE</name></cpp:macro> <cpp:value>0x84F5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_RECTANGLE</name></cpp:macro> <cpp:value>0x84F6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_RECTANGLE</name></cpp:macro> <cpp:value>0x84F7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_RECTANGLE_TEXTURE_SIZE</name></cpp:macro> <cpp:value>0x84F8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R8_SNORM</name></cpp:macro> <cpp:value>0x8F94</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG8_SNORM</name></cpp:macro> <cpp:value>0x8F95</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8_SNORM</name></cpp:macro> <cpp:value>0x8F96</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8_SNORM</name></cpp:macro> <cpp:value>0x8F97</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16_SNORM</name></cpp:macro> <cpp:value>0x8F98</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16_SNORM</name></cpp:macro> <cpp:value>0x8F99</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16_SNORM</name></cpp:macro> <cpp:value>0x8F9A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16_SNORM</name></cpp:macro> <cpp:value>0x8F9B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_NORMALIZED</name></cpp:macro> <cpp:value>0x8F9C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVE_RESTART</name></cpp:macro> <cpp:value>0x8F9D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVE_RESTART_INDEX</name></cpp:macro> <cpp:value>0x8F9E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COPY_READ_BUFFER</name></cpp:macro> <cpp:value>0x8F36</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COPY_WRITE_BUFFER</name></cpp:macro> <cpp:value>0x8F37</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER</name></cpp:macro> <cpp:value>0x8A11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8A28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_START</name></cpp:macro> <cpp:value>0x8A29</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x8A2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A2B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A2C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A2D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A2E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_UNIFORM_BUFFER_BINDINGS</name></cpp:macro> <cpp:value>0x8A2F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_UNIFORM_BLOCK_SIZE</name></cpp:macro> <cpp:value>0x8A30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8A31</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8A32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8A33</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT</name></cpp:macro> <cpp:value>0x8A34</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH</name></cpp:macro> <cpp:value>0x8A35</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A36</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_TYPE</name></cpp:macro> <cpp:value>0x8A37</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_SIZE</name></cpp:macro> <cpp:value>0x8A38</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_NAME_LENGTH</name></cpp:macro> <cpp:value>0x8A39</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_INDEX</name></cpp:macro> <cpp:value>0x8A3A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_OFFSET</name></cpp:macro> <cpp:value>0x8A3B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x8A3C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_MATRIX_STRIDE</name></cpp:macro> <cpp:value>0x8A3D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_IS_ROW_MAJOR</name></cpp:macro> <cpp:value>0x8A3E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_BINDING</name></cpp:macro> <cpp:value>0x8A3F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_DATA_SIZE</name></cpp:macro> <cpp:value>0x8A40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_NAME_LENGTH</name></cpp:macro> <cpp:value>0x8A41</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS</name></cpp:macro> <cpp:value>0x8A42</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES</name></cpp:macro> <cpp:value>0x8A43</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER</name></cpp:macro> <cpp:value>0x8A44</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER</name></cpp:macro> <cpp:value>0x8A45</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER</name></cpp:macro> <cpp:value>0x8A46</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_INDEX</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_CORE_PROFILE_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_COMPATIBILITY_PROFILE_BIT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINES_ADJACENCY</name></cpp:macro> <cpp:value>0x000A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_STRIP_ADJACENCY</name></cpp:macro> <cpp:value>0x000B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLES_ADJACENCY</name></cpp:macro> <cpp:value>0x000C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLE_STRIP_ADJACENCY</name></cpp:macro> <cpp:value>0x000D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_POINT_SIZE</name></cpp:macro> <cpp:value>0x8642</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8C29</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_LAYERED</name></cpp:macro> <cpp:value>0x8DA7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS</name></cpp:macro> <cpp:value>0x8DA8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_SHADER</name></cpp:macro> <cpp:value>0x8DD9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_VERTICES_OUT</name></cpp:macro> <cpp:value>0x8916</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_INPUT_TYPE</name></cpp:macro> <cpp:value>0x8917</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEOMETRY_OUTPUT_TYPE</name></cpp:macro> <cpp:value>0x8918</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8DDF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_OUTPUT_VERTICES</name></cpp:macro> <cpp:value>0x8DE0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x8DE1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_OUTPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x9122</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_INPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x9123</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_GEOMETRY_OUTPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x9124</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_INPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x9125</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_PROFILE_MASK</name></cpp:macro> <cpp:value>0x9126</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_CLAMP</name></cpp:macro> <cpp:value>0x864F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION</name></cpp:macro> <cpp:value>0x8E4C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIRST_VERTEX_CONVENTION</name></cpp:macro> <cpp:value>0x8E4D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LAST_VERTEX_CONVENTION</name></cpp:macro> <cpp:value>0x8E4E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROVOKING_VERTEX</name></cpp:macro> <cpp:value>0x8E4F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_SEAMLESS</name></cpp:macro> <cpp:value>0x884F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SERVER_WAIT_TIMEOUT</name></cpp:macro> <cpp:value>0x9111</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_TYPE</name></cpp:macro> <cpp:value>0x9112</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_CONDITION</name></cpp:macro> <cpp:value>0x9113</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_STATUS</name></cpp:macro> <cpp:value>0x9114</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_FLAGS</name></cpp:macro> <cpp:value>0x9115</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_FENCE</name></cpp:macro> <cpp:value>0x9116</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_GPU_COMMANDS_COMPLETE</name></cpp:macro> <cpp:value>0x9117</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNALED</name></cpp:macro> <cpp:value>0x9118</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNALED</name></cpp:macro> <cpp:value>0x9119</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALREADY_SIGNALED</name></cpp:macro> <cpp:value>0x911A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TIMEOUT_EXPIRED</name></cpp:macro> <cpp:value>0x911B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONDITION_SATISFIED</name></cpp:macro> <cpp:value>0x911C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WAIT_FAILED</name></cpp:macro> <cpp:value>0x911D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TIMEOUT_IGNORED</name></cpp:macro> <cpp:value>0xFFFFFFFFFFFFFFFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_FLUSH_COMMANDS_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_POSITION</name></cpp:macro> <cpp:value>0x8E50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK</name></cpp:macro> <cpp:value>0x8E51</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_MASK_VALUE</name></cpp:macro> <cpp:value>0x8E52</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SAMPLE_MASK_WORDS</name></cpp:macro> <cpp:value>0x8E59</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x9100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x9101</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x9102</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x9103</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x9104</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x9105</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SAMPLES</name></cpp:macro> <cpp:value>0x9106</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_FIXED_SAMPLE_LOCATIONS</name></cpp:macro> <cpp:value>0x9107</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x9108</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x9109</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE</name></cpp:macro> <cpp:value>0x910A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x910B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x910C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY</name></cpp:macro> <cpp:value>0x910D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COLOR_TEXTURE_SAMPLES</name></cpp:macro> <cpp:value>0x910E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEPTH_TEXTURE_SAMPLES</name></cpp:macro> <cpp:value>0x910F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_INTEGER_SAMPLES</name></cpp:macro> <cpp:value>0x9110</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_DIVISOR</name></cpp:macro> <cpp:value>0x88FE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC1_COLOR</name></cpp:macro> <cpp:value>0x88F9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_SRC1_COLOR</name></cpp:macro> <cpp:value>0x88FA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_SRC1_ALPHA</name></cpp:macro> <cpp:value>0x88FB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DUAL_SOURCE_DRAW_BUFFERS</name></cpp:macro> <cpp:value>0x88FC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ANY_SAMPLES_PASSED</name></cpp:macro> <cpp:value>0x8C2F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_BINDING</name></cpp:macro> <cpp:value>0x8919</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB10_A2UI</name></cpp:macro> <cpp:value>0x906F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_R</name></cpp:macro> <cpp:value>0x8E42</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_G</name></cpp:macro> <cpp:value>0x8E43</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_B</name></cpp:macro> <cpp:value>0x8E44</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_A</name></cpp:macro> <cpp:value>0x8E45</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_RGBA</name></cpp:macro> <cpp:value>0x8E46</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TIME_ELAPSED</name></cpp:macro> <cpp:value>0x88BF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TIMESTAMP</name></cpp:macro> <cpp:value>0x8E28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_2_10_10_10_REV</name></cpp:macro> <cpp:value>0x8D9F</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_1_0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_1_0</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_1_0</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCULLFACEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCULLFACEPROC</name></type> <name>glad_glCullFace</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCullFace</name></cpp:macro> <cpp:value>glad_glCullFace</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRONTFACEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRONTFACEPROC</name></type> <name>glad_glFrontFace</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFrontFace</name></cpp:macro> <cpp:value>glad_glFrontFace</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLHINTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLHINTPROC</name></type> <name>glad_glHint</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glHint</name></cpp:macro> <cpp:value>glad_glHint</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLINEWIDTHPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>width</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLINEWIDTHPROC</name></type> <name>glad_glLineWidth</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLineWidth</name></cpp:macro> <cpp:value>glad_glLineWidth</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOINTSIZEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOINTSIZEPROC</name></type> <name>glad_glPointSize</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointSize</name></cpp:macro> <cpp:value>glad_glPointSize</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOLYGONMODEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>face</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOLYGONMODEPROC</name></type> <name>glad_glPolygonMode</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPolygonMode</name></cpp:macro> <cpp:value>glad_glPolygonMode</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSCISSORPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSCISSORPROC</name></type> <name>glad_glScissor</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glScissor</name></cpp:macro> <cpp:value>glad_glScissor</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXPARAMETERFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXPARAMETERFPROC</name></type> <name>glad_glTexParameterf</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexParameterf</name></cpp:macro> <cpp:value>glad_glTexParameterf</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXPARAMETERFVPROC</name></type> <name>glad_glTexParameterfv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexParameterfv</name></cpp:macro> <cpp:value>glad_glTexParameterfv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXPARAMETERIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXPARAMETERIPROC</name></type> <name>glad_glTexParameteri</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexParameteri</name></cpp:macro> <cpp:value>glad_glTexParameteri</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXPARAMETERIVPROC</name></type> <name>glad_glTexParameteriv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexParameteriv</name></cpp:macro> <cpp:value>glad_glTexParameteriv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXIMAGE1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXIMAGE1DPROC</name></type> <name>glad_glTexImage1D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexImage1D</name></cpp:macro> <cpp:value>glad_glTexImage1D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXIMAGE2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXIMAGE2DPROC</name></type> <name>glad_glTexImage2D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexImage2D</name></cpp:macro> <cpp:value>glad_glTexImage2D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWBUFFERPROC</name></type> <name>glad_glDrawBuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawBuffer</name></cpp:macro> <cpp:value>glad_glDrawBuffer</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARPROC</name>)<parameter_list>(<parameter><decl><type><name>GLbitfield</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARPROC</name></type> <name>glad_glClear</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClear</name></cpp:macro> <cpp:value>glad_glClear</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARCOLORPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>blue</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARCOLORPROC</name></type> <name>glad_glClearColor</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearColor</name></cpp:macro> <cpp:value>glad_glClearColor</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARSTENCILPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARSTENCILPROC</name></type> <name>glad_glClearStencil</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearStencil</name></cpp:macro> <cpp:value>glad_glClearStencil</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARDEPTHPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>depth</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARDEPTHPROC</name></type> <name>glad_glClearDepth</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearDepth</name></cpp:macro> <cpp:value>glad_glClearDepth</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSTENCILMASKPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSTENCILMASKPROC</name></type> <name>glad_glStencilMask</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilMask</name></cpp:macro> <cpp:value>glad_glStencilMask</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORMASKPROC</name>)<parameter_list>(<parameter><decl><type><name>GLboolean</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>blue</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORMASKPROC</name></type> <name>glad_glColorMask</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorMask</name></cpp:macro> <cpp:value>glad_glColorMask</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEPTHMASKPROC</name>)<parameter_list>(<parameter><decl><type><name>GLboolean</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEPTHMASKPROC</name></type> <name>glad_glDepthMask</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDepthMask</name></cpp:macro> <cpp:value>glad_glDepthMask</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDISABLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>cap</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDISABLEPROC</name></type> <name>glad_glDisable</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDisable</name></cpp:macro> <cpp:value>glad_glDisable</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENABLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>cap</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENABLEPROC</name></type> <name>glad_glEnable</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEnable</name></cpp:macro> <cpp:value>glad_glEnable</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFINISHPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFINISHPROC</name></type> <name>glad_glFinish</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFinish</name></cpp:macro> <cpp:value>glad_glFinish</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFLUSHPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFLUSHPROC</name></type> <name>glad_glFlush</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFlush</name></cpp:macro> <cpp:value>glad_glFlush</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDFUNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>sfactor</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>dfactor</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDFUNCPROC</name></type> <name>glad_glBlendFunc</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendFunc</name></cpp:macro> <cpp:value>glad_glBlendFunc</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLOGICOPPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>opcode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLOGICOPPROC</name></type> <name>glad_glLogicOp</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLogicOp</name></cpp:macro> <cpp:value>glad_glLogicOp</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSTENCILFUNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>ref</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSTENCILFUNCPROC</name></type> <name>glad_glStencilFunc</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilFunc</name></cpp:macro> <cpp:value>glad_glStencilFunc</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSTENCILOPPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>fail</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>zfail</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>zpass</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSTENCILOPPROC</name></type> <name>glad_glStencilOp</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilOp</name></cpp:macro> <cpp:value>glad_glStencilOp</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEPTHFUNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>func</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEPTHFUNCPROC</name></type> <name>glad_glDepthFunc</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDepthFunc</name></cpp:macro> <cpp:value>glad_glDepthFunc</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPIXELSTOREFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPIXELSTOREFPROC</name></type> <name>glad_glPixelStoref</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelStoref</name></cpp:macro> <cpp:value>glad_glPixelStoref</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPIXELSTOREIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPIXELSTOREIPROC</name></type> <name>glad_glPixelStorei</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPixelStorei</name></cpp:macro> <cpp:value>glad_glPixelStorei</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREADBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>src</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREADBUFFERPROC</name></type> <name>glad_glReadBuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReadBuffer</name></cpp:macro> <cpp:value>glad_glReadBuffer</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLREADPIXELSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLREADPIXELSPROC</name></type> <name>glad_glReadPixels</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReadPixels</name></cpp:macro> <cpp:value>glad_glReadPixels</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETBOOLEANVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETBOOLEANVPROC</name></type> <name>glad_glGetBooleanv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBooleanv</name></cpp:macro> <cpp:value>glad_glGetBooleanv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETDOUBLEVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETDOUBLEVPROC</name></type> <name>glad_glGetDoublev</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetDoublev</name></cpp:macro> <cpp:value>glad_glGetDoublev</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLenum</name></type> (<name>APIENTRYP</name> <name>PFNGLGETERRORPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETERRORPROC</name></type> <name>glad_glGetError</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetError</name></cpp:macro> <cpp:value>glad_glGetError</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFLOATVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFLOATVPROC</name></type> <name>glad_glGetFloatv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFloatv</name></cpp:macro> <cpp:value>glad_glGetFloatv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETINTEGERVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETINTEGERVPROC</name></type> <name>glad_glGetIntegerv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetIntegerv</name></cpp:macro> <cpp:value>glad_glGetIntegerv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLGETSTRINGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSTRINGPROC</name></type> <name>glad_glGetString</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetString</name></cpp:macro> <cpp:value>glad_glGetString</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXIMAGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXIMAGEPROC</name></type> <name>glad_glGetTexImage</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexImage</name></cpp:macro> <cpp:value>glad_glGetTexImage</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXPARAMETERFVPROC</name></type> <name>glad_glGetTexParameterfv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexParameterfv</name></cpp:macro> <cpp:value>glad_glGetTexParameterfv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXPARAMETERIVPROC</name></type> <name>glad_glGetTexParameteriv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexParameteriv</name></cpp:macro> <cpp:value>glad_glGetTexParameteriv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXLEVELPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXLEVELPARAMETERFVPROC</name></type> <name>glad_glGetTexLevelParameterfv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexLevelParameterfv</name></cpp:macro> <cpp:value>glad_glGetTexLevelParameterfv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXLEVELPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXLEVELPARAMETERIVPROC</name></type> <name>glad_glGetTexLevelParameteriv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexLevelParameteriv</name></cpp:macro> <cpp:value>glad_glGetTexLevelParameteriv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISENABLEDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>cap</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISENABLEDPROC</name></type> <name>glad_glIsEnabled</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsEnabled</name></cpp:macro> <cpp:value>glad_glIsEnabled</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEPTHRANGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLdouble</name></type> <name>near</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>far</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEPTHRANGEPROC</name></type> <name>glad_glDepthRange</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDepthRange</name></cpp:macro> <cpp:value>glad_glDepthRange</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVIEWPORTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVIEWPORTPROC</name></type> <name>glad_glViewport</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glViewport</name></cpp:macro> <cpp:value>glad_glViewport</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_1_1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_1_1</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWARRAYSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWARRAYSPROC</name></type> <name>glad_glDrawArrays</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawArrays</name></cpp:macro> <cpp:value>glad_glDrawArrays</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWELEMENTSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>indices</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWELEMENTSPROC</name></type> <name>glad_glDrawElements</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawElements</name></cpp:macro> <cpp:value>glad_glDrawElements</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOLYGONOFFSETPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>factor</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>units</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOLYGONOFFSETPROC</name></type> <name>glad_glPolygonOffset</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPolygonOffset</name></cpp:macro> <cpp:value>glad_glPolygonOffset</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYTEXIMAGE1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYTEXIMAGE1DPROC</name></type> <name>glad_glCopyTexImage1D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTexImage1D</name></cpp:macro> <cpp:value>glad_glCopyTexImage1D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYTEXIMAGE2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYTEXIMAGE2DPROC</name></type> <name>glad_glCopyTexImage2D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTexImage2D</name></cpp:macro> <cpp:value>glad_glCopyTexImage2D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYTEXSUBIMAGE1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYTEXSUBIMAGE1DPROC</name></type> <name>glad_glCopyTexSubImage1D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTexSubImage1D</name></cpp:macro> <cpp:value>glad_glCopyTexSubImage1D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYTEXSUBIMAGE2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYTEXSUBIMAGE2DPROC</name></type> <name>glad_glCopyTexSubImage2D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTexSubImage2D</name></cpp:macro> <cpp:value>glad_glCopyTexSubImage2D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXSUBIMAGE1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXSUBIMAGE1DPROC</name></type> <name>glad_glTexSubImage1D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexSubImage1D</name></cpp:macro> <cpp:value>glad_glTexSubImage1D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXSUBIMAGE2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXSUBIMAGE2DPROC</name></type> <name>glad_glTexSubImage2D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexSubImage2D</name></cpp:macro> <cpp:value>glad_glTexSubImage2D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDTEXTUREPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDTEXTUREPROC</name></type> <name>glad_glBindTexture</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindTexture</name></cpp:macro> <cpp:value>glad_glBindTexture</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETETEXTURESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>textures</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETETEXTURESPROC</name></type> <name>glad_glDeleteTextures</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteTextures</name></cpp:macro> <cpp:value>glad_glDeleteTextures</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENTEXTURESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>textures</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENTEXTURESPROC</name></type> <name>glad_glGenTextures</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenTextures</name></cpp:macro> <cpp:value>glad_glGenTextures</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISTEXTUREPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISTEXTUREPROC</name></type> <name>glad_glIsTexture</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsTexture</name></cpp:macro> <cpp:value>glad_glIsTexture</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_1_2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_1_2</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWRANGEELEMENTSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>indices</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWRANGEELEMENTSPROC</name></type> <name>glad_glDrawRangeElements</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawRangeElements</name></cpp:macro> <cpp:value>glad_glDrawRangeElements</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXIMAGE3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXIMAGE3DPROC</name></type> <name>glad_glTexImage3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexImage3D</name></cpp:macro> <cpp:value>glad_glTexImage3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXSUBIMAGE3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXSUBIMAGE3DPROC</name></type> <name>glad_glTexSubImage3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexSubImage3D</name></cpp:macro> <cpp:value>glad_glTexSubImage3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYTEXSUBIMAGE3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYTEXSUBIMAGE3DPROC</name></type> <name>glad_glCopyTexSubImage3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyTexSubImage3D</name></cpp:macro> <cpp:value>glad_glCopyTexSubImage3D</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_1_3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_1_3</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_1_3</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLACTIVETEXTUREPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>texture</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLACTIVETEXTUREPROC</name></type> <name>glad_glActiveTexture</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glActiveTexture</name></cpp:macro> <cpp:value>glad_glActiveTexture</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLECOVERAGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>invert</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLECOVERAGEPROC</name></type> <name>glad_glSampleCoverage</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSampleCoverage</name></cpp:macro> <cpp:value>glad_glSampleCoverage</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXIMAGE3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXIMAGE3DPROC</name></type> <name>glad_glCompressedTexImage3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexImage3D</name></cpp:macro> <cpp:value>glad_glCompressedTexImage3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXIMAGE2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXIMAGE2DPROC</name></type> <name>glad_glCompressedTexImage2D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexImage2D</name></cpp:macro> <cpp:value>glad_glCompressedTexImage2D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXIMAGE1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXIMAGE1DPROC</name></type> <name>glad_glCompressedTexImage1D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexImage1D</name></cpp:macro> <cpp:value>glad_glCompressedTexImage1D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC</name></type> <name>glad_glCompressedTexSubImage3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexSubImage3D</name></cpp:macro> <cpp:value>glad_glCompressedTexSubImage3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC</name></type> <name>glad_glCompressedTexSubImage2D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexSubImage2D</name></cpp:macro> <cpp:value>glad_glCompressedTexSubImage2D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC</name></type> <name>glad_glCompressedTexSubImage1D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexSubImage1D</name></cpp:macro> <cpp:value>glad_glCompressedTexSubImage1D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCOMPRESSEDTEXIMAGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>img</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCOMPRESSEDTEXIMAGEPROC</name></type> <name>glad_glGetCompressedTexImage</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetCompressedTexImage</name></cpp:macro> <cpp:value>glad_glGetCompressedTexImage</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_1_4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_1_4</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_1_4</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDFUNCSEPARATEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>sfactorRGB</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>dfactorRGB</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>sfactorAlpha</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>dfactorAlpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDFUNCSEPARATEPROC</name></type> <name>glad_glBlendFuncSeparate</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendFuncSeparate</name></cpp:macro> <cpp:value>glad_glBlendFuncSeparate</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTIDRAWARRAYSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>first</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name><modifier>*</modifier></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>drawcount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTIDRAWARRAYSPROC</name></type> <name>glad_glMultiDrawArrays</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiDrawArrays</name></cpp:macro> <cpp:value>glad_glMultiDrawArrays</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTIDRAWELEMENTSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name><modifier>*</modifier></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>indices</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>drawcount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTIDRAWELEMENTSPROC</name></type> <name>glad_glMultiDrawElements</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiDrawElements</name></cpp:macro> <cpp:value>glad_glMultiDrawElements</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOINTPARAMETERFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOINTPARAMETERFPROC</name></type> <name>glad_glPointParameterf</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointParameterf</name></cpp:macro> <cpp:value>glad_glPointParameterf</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOINTPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOINTPARAMETERFVPROC</name></type> <name>glad_glPointParameterfv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointParameterfv</name></cpp:macro> <cpp:value>glad_glPointParameterfv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOINTPARAMETERIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOINTPARAMETERIPROC</name></type> <name>glad_glPointParameteri</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointParameteri</name></cpp:macro> <cpp:value>glad_glPointParameteri</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOINTPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOINTPARAMETERIVPROC</name></type> <name>glad_glPointParameteriv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPointParameteriv</name></cpp:macro> <cpp:value>glad_glPointParameteriv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDCOLORPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>blue</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDCOLORPROC</name></type> <name>glad_glBlendColor</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendColor</name></cpp:macro> <cpp:value>glad_glBlendColor</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDEQUATIONPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDEQUATIONPROC</name></type> <name>glad_glBlendEquation</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendEquation</name></cpp:macro> <cpp:value>glad_glBlendEquation</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_1_5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_1_5</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_1_5</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENQUERIESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>ids</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENQUERIESPROC</name></type> <name>glad_glGenQueries</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenQueries</name></cpp:macro> <cpp:value>glad_glGenQueries</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEQUERIESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>ids</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEQUERIESPROC</name></type> <name>glad_glDeleteQueries</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteQueries</name></cpp:macro> <cpp:value>glad_glDeleteQueries</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISQUERYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISQUERYPROC</name></type> <name>glad_glIsQuery</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsQuery</name></cpp:macro> <cpp:value>glad_glIsQuery</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBEGINQUERYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBEGINQUERYPROC</name></type> <name>glad_glBeginQuery</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBeginQuery</name></cpp:macro> <cpp:value>glad_glBeginQuery</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENDQUERYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENDQUERYPROC</name></type> <name>glad_glEndQuery</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndQuery</name></cpp:macro> <cpp:value>glad_glEndQuery</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETQUERYIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETQUERYIVPROC</name></type> <name>glad_glGetQueryiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetQueryiv</name></cpp:macro> <cpp:value>glad_glGetQueryiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETQUERYOBJECTIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETQUERYOBJECTIVPROC</name></type> <name>glad_glGetQueryObjectiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetQueryObjectiv</name></cpp:macro> <cpp:value>glad_glGetQueryObjectiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETQUERYOBJECTUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETQUERYOBJECTUIVPROC</name></type> <name>glad_glGetQueryObjectuiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetQueryObjectuiv</name></cpp:macro> <cpp:value>glad_glGetQueryObjectuiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDBUFFERPROC</name></type> <name>glad_glBindBuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindBuffer</name></cpp:macro> <cpp:value>glad_glBindBuffer</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEBUFFERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>buffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEBUFFERSPROC</name></type> <name>glad_glDeleteBuffers</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteBuffers</name></cpp:macro> <cpp:value>glad_glDeleteBuffers</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENBUFFERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>buffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENBUFFERSPROC</name></type> <name>glad_glGenBuffers</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenBuffers</name></cpp:macro> <cpp:value>glad_glGenBuffers</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISBUFFERPROC</name></type> <name>glad_glIsBuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsBuffer</name></cpp:macro> <cpp:value>glad_glIsBuffer</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBUFFERDATAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>usage</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBUFFERDATAPROC</name></type> <name>glad_glBufferData</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBufferData</name></cpp:macro> <cpp:value>glad_glBufferData</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBUFFERSUBDATAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBUFFERSUBDATAPROC</name></type> <name>glad_glBufferSubData</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBufferSubData</name></cpp:macro> <cpp:value>glad_glBufferSubData</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETBUFFERSUBDATAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETBUFFERSUBDATAPROC</name></type> <name>glad_glGetBufferSubData</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBufferSubData</name></cpp:macro> <cpp:value>glad_glGetBufferSubData</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLMAPBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>access</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAPBUFFERPROC</name></type> <name>glad_glMapBuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapBuffer</name></cpp:macro> <cpp:value>glad_glMapBuffer</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLUNMAPBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNMAPBUFFERPROC</name></type> <name>glad_glUnmapBuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUnmapBuffer</name></cpp:macro> <cpp:value>glad_glUnmapBuffer</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETBUFFERPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETBUFFERPARAMETERIVPROC</name></type> <name>glad_glGetBufferParameteriv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBufferParameteriv</name></cpp:macro> <cpp:value>glad_glGetBufferParameteriv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETBUFFERPOINTERVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETBUFFERPOINTERVPROC</name></type> <name>glad_glGetBufferPointerv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBufferPointerv</name></cpp:macro> <cpp:value>glad_glGetBufferPointerv</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_2_0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_2_0</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_2_0</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDEQUATIONSEPARATEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>modeRGB</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>modeAlpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDEQUATIONSEPARATEPROC</name></type> <name>glad_glBlendEquationSeparate</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendEquationSeparate</name></cpp:macro> <cpp:value>glad_glBlendEquationSeparate</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWBUFFERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name><modifier>*</modifier></type> <name>bufs</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWBUFFERSPROC</name></type> <name>glad_glDrawBuffers</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawBuffers</name></cpp:macro> <cpp:value>glad_glDrawBuffers</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSTENCILOPSEPARATEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>face</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>sfail</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>dpfail</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>dppass</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSTENCILOPSEPARATEPROC</name></type> <name>glad_glStencilOpSeparate</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilOpSeparate</name></cpp:macro> <cpp:value>glad_glStencilOpSeparate</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSTENCILFUNCSEPARATEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>face</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>ref</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSTENCILFUNCSEPARATEPROC</name></type> <name>glad_glStencilFuncSeparate</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilFuncSeparate</name></cpp:macro> <cpp:value>glad_glStencilFuncSeparate</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSTENCILMASKSEPARATEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>face</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSTENCILMASKSEPARATEPROC</name></type> <name>glad_glStencilMaskSeparate</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glStencilMaskSeparate</name></cpp:macro> <cpp:value>glad_glStencilMaskSeparate</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLATTACHSHADERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLATTACHSHADERPROC</name></type> <name>glad_glAttachShader</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glAttachShader</name></cpp:macro> <cpp:value>glad_glAttachShader</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDATTRIBLOCATIONPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDATTRIBLOCATIONPROC</name></type> <name>glad_glBindAttribLocation</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindAttribLocation</name></cpp:macro> <cpp:value>glad_glBindAttribLocation</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPILESHADERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPILESHADERPROC</name></type> <name>glad_glCompileShader</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompileShader</name></cpp:macro> <cpp:value>glad_glCompileShader</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLCREATEPROGRAMPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCREATEPROGRAMPROC</name></type> <name>glad_glCreateProgram</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCreateProgram</name></cpp:macro> <cpp:value>glad_glCreateProgram</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLCREATESHADERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCREATESHADERPROC</name></type> <name>glad_glCreateShader</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCreateShader</name></cpp:macro> <cpp:value>glad_glCreateShader</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEPROGRAMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEPROGRAMPROC</name></type> <name>glad_glDeleteProgram</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteProgram</name></cpp:macro> <cpp:value>glad_glDeleteProgram</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETESHADERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETESHADERPROC</name></type> <name>glad_glDeleteShader</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteShader</name></cpp:macro> <cpp:value>glad_glDeleteShader</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDETACHSHADERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDETACHSHADERPROC</name></type> <name>glad_glDetachShader</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDetachShader</name></cpp:macro> <cpp:value>glad_glDetachShader</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDISABLEVERTEXATTRIBARRAYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDISABLEVERTEXATTRIBARRAYPROC</name></type> <name>glad_glDisableVertexAttribArray</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDisableVertexAttribArray</name></cpp:macro> <cpp:value>glad_glDisableVertexAttribArray</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENABLEVERTEXATTRIBARRAYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENABLEVERTEXATTRIBARRAYPROC</name></type> <name>glad_glEnableVertexAttribArray</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEnableVertexAttribArray</name></cpp:macro> <cpp:value>glad_glEnableVertexAttribArray</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETACTIVEATTRIBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETACTIVEATTRIBPROC</name></type> <name>glad_glGetActiveAttrib</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveAttrib</name></cpp:macro> <cpp:value>glad_glGetActiveAttrib</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETACTIVEUNIFORMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETACTIVEUNIFORMPROC</name></type> <name>glad_glGetActiveUniform</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveUniform</name></cpp:macro> <cpp:value>glad_glGetActiveUniform</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETATTACHEDSHADERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>maxCount</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>shaders</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETATTACHEDSHADERSPROC</name></type> <name>glad_glGetAttachedShaders</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetAttachedShaders</name></cpp:macro> <cpp:value>glad_glGetAttachedShaders</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETATTRIBLOCATIONPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETATTRIBLOCATIONPROC</name></type> <name>glad_glGetAttribLocation</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetAttribLocation</name></cpp:macro> <cpp:value>glad_glGetAttribLocation</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMIVPROC</name></type> <name>glad_glGetProgramiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramiv</name></cpp:macro> <cpp:value>glad_glGetProgramiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMINFOLOGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type> <name>infoLog</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMINFOLOGPROC</name></type> <name>glad_glGetProgramInfoLog</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramInfoLog</name></cpp:macro> <cpp:value>glad_glGetProgramInfoLog</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSHADERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSHADERIVPROC</name></type> <name>glad_glGetShaderiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetShaderiv</name></cpp:macro> <cpp:value>glad_glGetShaderiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSHADERINFOLOGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type> <name>infoLog</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSHADERINFOLOGPROC</name></type> <name>glad_glGetShaderInfoLog</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetShaderInfoLog</name></cpp:macro> <cpp:value>glad_glGetShaderInfoLog</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSHADERSOURCEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSHADERSOURCEPROC</name></type> <name>glad_glGetShaderSource</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetShaderSource</name></cpp:macro> <cpp:value>glad_glGetShaderSource</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETUNIFORMLOCATIONPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETUNIFORMLOCATIONPROC</name></type> <name>glad_glGetUniformLocation</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformLocation</name></cpp:macro> <cpp:value>glad_glGetUniformLocation</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETUNIFORMFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETUNIFORMFVPROC</name></type> <name>glad_glGetUniformfv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformfv</name></cpp:macro> <cpp:value>glad_glGetUniformfv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETUNIFORMIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETUNIFORMIVPROC</name></type> <name>glad_glGetUniformiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformiv</name></cpp:macro> <cpp:value>glad_glGetUniformiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBDVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBDVPROC</name></type> <name>glad_glGetVertexAttribdv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribdv</name></cpp:macro> <cpp:value>glad_glGetVertexAttribdv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBFVPROC</name></type> <name>glad_glGetVertexAttribfv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribfv</name></cpp:macro> <cpp:value>glad_glGetVertexAttribfv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBIVPROC</name></type> <name>glad_glGetVertexAttribiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribiv</name></cpp:macro> <cpp:value>glad_glGetVertexAttribiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBPOINTERVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBPOINTERVPROC</name></type> <name>glad_glGetVertexAttribPointerv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribPointerv</name></cpp:macro> <cpp:value>glad_glGetVertexAttribPointerv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISPROGRAMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISPROGRAMPROC</name></type> <name>glad_glIsProgram</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsProgram</name></cpp:macro> <cpp:value>glad_glIsProgram</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISSHADERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISSHADERPROC</name></type> <name>glad_glIsShader</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsShader</name></cpp:macro> <cpp:value>glad_glIsShader</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLLINKPROGRAMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLLINKPROGRAMPROC</name></type> <name>glad_glLinkProgram</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glLinkProgram</name></cpp:macro> <cpp:value>glad_glLinkProgram</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSHADERSOURCEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier><modifier>*</modifier></type> <name>string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSHADERSOURCEPROC</name></type> <name>glad_glShaderSource</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glShaderSource</name></cpp:macro> <cpp:value>glad_glShaderSource</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUSEPROGRAMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUSEPROGRAMPROC</name></type> <name>glad_glUseProgram</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUseProgram</name></cpp:macro> <cpp:value>glad_glUseProgram</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v0</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1FPROC</name></type> <name>glad_glUniform1f</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1f</name></cpp:macro> <cpp:value>glad_glUniform1f</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v1</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2FPROC</name></type> <name>glad_glUniform2f</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2f</name></cpp:macro> <cpp:value>glad_glUniform2f</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3FPROC</name></type> <name>glad_glUniform3f</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3f</name></cpp:macro> <cpp:value>glad_glUniform3f</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>v3</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4FPROC</name></type> <name>glad_glUniform4f</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4f</name></cpp:macro> <cpp:value>glad_glUniform4f</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>v0</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1IPROC</name></type> <name>glad_glUniform1i</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1i</name></cpp:macro> <cpp:value>glad_glUniform1i</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>v1</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2IPROC</name></type> <name>glad_glUniform2i</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2i</name></cpp:macro> <cpp:value>glad_glUniform2i</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>v2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3IPROC</name></type> <name>glad_glUniform3i</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3i</name></cpp:macro> <cpp:value>glad_glUniform3i</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>v3</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4IPROC</name></type> <name>glad_glUniform4i</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4i</name></cpp:macro> <cpp:value>glad_glUniform4i</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1FVPROC</name></type> <name>glad_glUniform1fv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1fv</name></cpp:macro> <cpp:value>glad_glUniform1fv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2FVPROC</name></type> <name>glad_glUniform2fv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2fv</name></cpp:macro> <cpp:value>glad_glUniform2fv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3FVPROC</name></type> <name>glad_glUniform3fv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3fv</name></cpp:macro> <cpp:value>glad_glUniform3fv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4FVPROC</name></type> <name>glad_glUniform4fv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4fv</name></cpp:macro> <cpp:value>glad_glUniform4fv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1IVPROC</name></type> <name>glad_glUniform1iv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1iv</name></cpp:macro> <cpp:value>glad_glUniform1iv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2IVPROC</name></type> <name>glad_glUniform2iv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2iv</name></cpp:macro> <cpp:value>glad_glUniform2iv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3IVPROC</name></type> <name>glad_glUniform3iv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3iv</name></cpp:macro> <cpp:value>glad_glUniform3iv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4IVPROC</name></type> <name>glad_glUniform4iv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4iv</name></cpp:macro> <cpp:value>glad_glUniform4iv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX2FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX2FVPROC</name></type> <name>glad_glUniformMatrix2fv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix2fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix2fv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX3FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX3FVPROC</name></type> <name>glad_glUniformMatrix3fv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix3fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix3fv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX4FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX4FVPROC</name></type> <name>glad_glUniformMatrix4fv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix4fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix4fv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVALIDATEPROGRAMPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVALIDATEPROGRAMPROC</name></type> <name>glad_glValidateProgram</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glValidateProgram</name></cpp:macro> <cpp:value>glad_glValidateProgram</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1DPROC</name></type> <name>glad_glVertexAttrib1d</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1d</name></cpp:macro> <cpp:value>glad_glVertexAttrib1d</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1DVPROC</name></type> <name>glad_glVertexAttrib1dv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1dv</name></cpp:macro> <cpp:value>glad_glVertexAttrib1dv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1FPROC</name></type> <name>glad_glVertexAttrib1f</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1f</name></cpp:macro> <cpp:value>glad_glVertexAttrib1f</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1FVPROC</name></type> <name>glad_glVertexAttrib1fv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1fv</name></cpp:macro> <cpp:value>glad_glVertexAttrib1fv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1SPROC</name></type> <name>glad_glVertexAttrib1s</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1s</name></cpp:macro> <cpp:value>glad_glVertexAttrib1s</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1SVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1SVPROC</name></type> <name>glad_glVertexAttrib1sv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1sv</name></cpp:macro> <cpp:value>glad_glVertexAttrib1sv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2DPROC</name></type> <name>glad_glVertexAttrib2d</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2d</name></cpp:macro> <cpp:value>glad_glVertexAttrib2d</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2DVPROC</name></type> <name>glad_glVertexAttrib2dv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2dv</name></cpp:macro> <cpp:value>glad_glVertexAttrib2dv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2FPROC</name></type> <name>glad_glVertexAttrib2f</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2f</name></cpp:macro> <cpp:value>glad_glVertexAttrib2f</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2FVPROC</name></type> <name>glad_glVertexAttrib2fv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2fv</name></cpp:macro> <cpp:value>glad_glVertexAttrib2fv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2SPROC</name></type> <name>glad_glVertexAttrib2s</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2s</name></cpp:macro> <cpp:value>glad_glVertexAttrib2s</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2SVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2SVPROC</name></type> <name>glad_glVertexAttrib2sv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2sv</name></cpp:macro> <cpp:value>glad_glVertexAttrib2sv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3DPROC</name></type> <name>glad_glVertexAttrib3d</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3d</name></cpp:macro> <cpp:value>glad_glVertexAttrib3d</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3DVPROC</name></type> <name>glad_glVertexAttrib3dv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3dv</name></cpp:macro> <cpp:value>glad_glVertexAttrib3dv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3FPROC</name></type> <name>glad_glVertexAttrib3f</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3f</name></cpp:macro> <cpp:value>glad_glVertexAttrib3f</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3FVPROC</name></type> <name>glad_glVertexAttrib3fv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3fv</name></cpp:macro> <cpp:value>glad_glVertexAttrib3fv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3SPROC</name></type> <name>glad_glVertexAttrib3s</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3s</name></cpp:macro> <cpp:value>glad_glVertexAttrib3s</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3SVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3SVPROC</name></type> <name>glad_glVertexAttrib3sv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3sv</name></cpp:macro> <cpp:value>glad_glVertexAttrib3sv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NBVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NBVPROC</name></type> <name>glad_glVertexAttrib4Nbv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4Nbv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4Nbv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NIVPROC</name></type> <name>glad_glVertexAttrib4Niv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4Niv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4Niv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NSVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NSVPROC</name></type> <name>glad_glVertexAttrib4Nsv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4Nsv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4Nsv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NUBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NUBPROC</name></type> <name>glad_glVertexAttrib4Nub</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4Nub</name></cpp:macro> <cpp:value>glad_glVertexAttrib4Nub</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NUBVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NUBVPROC</name></type> <name>glad_glVertexAttrib4Nubv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4Nubv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4Nubv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NUIVPROC</name></type> <name>glad_glVertexAttrib4Nuiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4Nuiv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4Nuiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NUSVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLushort</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NUSVPROC</name></type> <name>glad_glVertexAttrib4Nusv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4Nusv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4Nusv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4BVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4BVPROC</name></type> <name>glad_glVertexAttrib4bv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4bv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4bv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4DPROC</name></type> <name>glad_glVertexAttrib4d</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4d</name></cpp:macro> <cpp:value>glad_glVertexAttrib4d</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4DVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4DVPROC</name></type> <name>glad_glVertexAttrib4dv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4dv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4dv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4FPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4FPROC</name></type> <name>glad_glVertexAttrib4f</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4f</name></cpp:macro> <cpp:value>glad_glVertexAttrib4f</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4FVPROC</name></type> <name>glad_glVertexAttrib4fv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4fv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4fv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4IVPROC</name></type> <name>glad_glVertexAttrib4iv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4iv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4iv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4SPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4SPROC</name></type> <name>glad_glVertexAttrib4s</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4s</name></cpp:macro> <cpp:value>glad_glVertexAttrib4s</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4SVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4SVPROC</name></type> <name>glad_glVertexAttrib4sv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4sv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4sv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4UBVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4UBVPROC</name></type> <name>glad_glVertexAttrib4ubv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4ubv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4ubv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4UIVPROC</name></type> <name>glad_glVertexAttrib4uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4uiv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4USVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLushort</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4USVPROC</name></type> <name>glad_glVertexAttrib4usv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4usv</name></cpp:macro> <cpp:value>glad_glVertexAttrib4usv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBPOINTERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBPOINTERPROC</name></type> <name>glad_glVertexAttribPointer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribPointer</name></cpp:macro> <cpp:value>glad_glVertexAttribPointer</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_2_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_2_1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_2_1</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX2X3FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX2X3FVPROC</name></type> <name>glad_glUniformMatrix2x3fv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix2x3fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix2x3fv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX3X2FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX3X2FVPROC</name></type> <name>glad_glUniformMatrix3x2fv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix3x2fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix3x2fv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX2X4FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX2X4FVPROC</name></type> <name>glad_glUniformMatrix2x4fv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix2x4fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix2x4fv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX4X2FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX4X2FVPROC</name></type> <name>glad_glUniformMatrix4x2fv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix4x2fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix4x2fv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX3X4FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX3X4FVPROC</name></type> <name>glad_glUniformMatrix3x4fv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix3x4fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix3x4fv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMMATRIX4X3FVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMMATRIX4X3FVPROC</name></type> <name>glad_glUniformMatrix4x3fv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformMatrix4x3fv</name></cpp:macro> <cpp:value>glad_glUniformMatrix4x3fv</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_3_0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_3_0</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_3_0</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORMASKIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORMASKIPROC</name></type> <name>glad_glColorMaski</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorMaski</name></cpp:macro> <cpp:value>glad_glColorMaski</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETBOOLEANI_VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETBOOLEANI_VPROC</name></type> <name>glad_glGetBooleani_v</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBooleani_v</name></cpp:macro> <cpp:value>glad_glGetBooleani_v</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETINTEGERI_VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETINTEGERI_VPROC</name></type> <name>glad_glGetIntegeri_v</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetIntegeri_v</name></cpp:macro> <cpp:value>glad_glGetIntegeri_v</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENABLEIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENABLEIPROC</name></type> <name>glad_glEnablei</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEnablei</name></cpp:macro> <cpp:value>glad_glEnablei</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDISABLEIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDISABLEIPROC</name></type> <name>glad_glDisablei</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDisablei</name></cpp:macro> <cpp:value>glad_glDisablei</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISENABLEDIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISENABLEDIPROC</name></type> <name>glad_glIsEnabledi</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsEnabledi</name></cpp:macro> <cpp:value>glad_glIsEnabledi</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBEGINTRANSFORMFEEDBACKPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>primitiveMode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBEGINTRANSFORMFEEDBACKPROC</name></type> <name>glad_glBeginTransformFeedback</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBeginTransformFeedback</name></cpp:macro> <cpp:value>glad_glBeginTransformFeedback</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENDTRANSFORMFEEDBACKPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENDTRANSFORMFEEDBACKPROC</name></type> <name>glad_glEndTransformFeedback</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndTransformFeedback</name></cpp:macro> <cpp:value>glad_glEndTransformFeedback</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDBUFFERRANGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDBUFFERRANGEPROC</name></type> <name>glad_glBindBufferRange</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindBufferRange</name></cpp:macro> <cpp:value>glad_glBindBufferRange</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDBUFFERBASEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDBUFFERBASEPROC</name></type> <name>glad_glBindBufferBase</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindBufferBase</name></cpp:macro> <cpp:value>glad_glBindBufferBase</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTRANSFORMFEEDBACKVARYINGSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier><modifier>*</modifier></type> <name>varyings</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>bufferMode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTRANSFORMFEEDBACKVARYINGSPROC</name></type> <name>glad_glTransformFeedbackVaryings</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTransformFeedbackVaryings</name></cpp:macro> <cpp:value>glad_glTransformFeedbackVaryings</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTRANSFORMFEEDBACKVARYINGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTRANSFORMFEEDBACKVARYINGPROC</name></type> <name>glad_glGetTransformFeedbackVarying</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTransformFeedbackVarying</name></cpp:macro> <cpp:value>glad_glGetTransformFeedbackVarying</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLAMPCOLORPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>clamp</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLAMPCOLORPROC</name></type> <name>glad_glClampColor</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClampColor</name></cpp:macro> <cpp:value>glad_glClampColor</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBEGINCONDITIONALRENDERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBEGINCONDITIONALRENDERPROC</name></type> <name>glad_glBeginConditionalRender</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBeginConditionalRender</name></cpp:macro> <cpp:value>glad_glBeginConditionalRender</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENDCONDITIONALRENDERPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENDCONDITIONALRENDERPROC</name></type> <name>glad_glEndConditionalRender</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndConditionalRender</name></cpp:macro> <cpp:value>glad_glEndConditionalRender</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBIPOINTERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBIPOINTERPROC</name></type> <name>glad_glVertexAttribIPointer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribIPointer</name></cpp:macro> <cpp:value>glad_glVertexAttribIPointer</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBIIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBIIVPROC</name></type> <name>glad_glGetVertexAttribIiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribIiv</name></cpp:macro> <cpp:value>glad_glGetVertexAttribIiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBIUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBIUIVPROC</name></type> <name>glad_glGetVertexAttribIuiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribIuiv</name></cpp:macro> <cpp:value>glad_glGetVertexAttribIuiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI1IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI1IPROC</name></type> <name>glad_glVertexAttribI1i</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI1i</name></cpp:macro> <cpp:value>glad_glVertexAttribI1i</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI2IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI2IPROC</name></type> <name>glad_glVertexAttribI2i</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI2i</name></cpp:macro> <cpp:value>glad_glVertexAttribI2i</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI3IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI3IPROC</name></type> <name>glad_glVertexAttribI3i</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI3i</name></cpp:macro> <cpp:value>glad_glVertexAttribI3i</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4IPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4IPROC</name></type> <name>glad_glVertexAttribI4i</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4i</name></cpp:macro> <cpp:value>glad_glVertexAttribI4i</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI1UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI1UIPROC</name></type> <name>glad_glVertexAttribI1ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI1ui</name></cpp:macro> <cpp:value>glad_glVertexAttribI1ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI2UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI2UIPROC</name></type> <name>glad_glVertexAttribI2ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI2ui</name></cpp:macro> <cpp:value>glad_glVertexAttribI2ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI3UIPROC</name></type> <name>glad_glVertexAttribI3ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI3ui</name></cpp:macro> <cpp:value>glad_glVertexAttribI3ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4UIPROC</name></type> <name>glad_glVertexAttribI4ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4ui</name></cpp:macro> <cpp:value>glad_glVertexAttribI4ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI1IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI1IVPROC</name></type> <name>glad_glVertexAttribI1iv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI1iv</name></cpp:macro> <cpp:value>glad_glVertexAttribI1iv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI2IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI2IVPROC</name></type> <name>glad_glVertexAttribI2iv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI2iv</name></cpp:macro> <cpp:value>glad_glVertexAttribI2iv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI3IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI3IVPROC</name></type> <name>glad_glVertexAttribI3iv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI3iv</name></cpp:macro> <cpp:value>glad_glVertexAttribI3iv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4IVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4IVPROC</name></type> <name>glad_glVertexAttribI4iv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4iv</name></cpp:macro> <cpp:value>glad_glVertexAttribI4iv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI1UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI1UIVPROC</name></type> <name>glad_glVertexAttribI1uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI1uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribI1uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI2UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI2UIVPROC</name></type> <name>glad_glVertexAttribI2uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI2uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribI2uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI3UIVPROC</name></type> <name>glad_glVertexAttribI3uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI3uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribI3uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4UIVPROC</name></type> <name>glad_glVertexAttribI4uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribI4uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4BVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4BVPROC</name></type> <name>glad_glVertexAttribI4bv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4bv</name></cpp:macro> <cpp:value>glad_glVertexAttribI4bv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4SVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4SVPROC</name></type> <name>glad_glVertexAttribI4sv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4sv</name></cpp:macro> <cpp:value>glad_glVertexAttribI4sv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4UBVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4UBVPROC</name></type> <name>glad_glVertexAttribI4ubv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4ubv</name></cpp:macro> <cpp:value>glad_glVertexAttribI4ubv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBI4USVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLushort</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBI4USVPROC</name></type> <name>glad_glVertexAttribI4usv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribI4usv</name></cpp:macro> <cpp:value>glad_glVertexAttribI4usv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETUNIFORMUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETUNIFORMUIVPROC</name></type> <name>glad_glGetUniformuiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformuiv</name></cpp:macro> <cpp:value>glad_glGetUniformuiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDFRAGDATALOCATIONPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDFRAGDATALOCATIONPROC</name></type> <name>glad_glBindFragDataLocation</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindFragDataLocation</name></cpp:macro> <cpp:value>glad_glBindFragDataLocation</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFRAGDATALOCATIONPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFRAGDATALOCATIONPROC</name></type> <name>glad_glGetFragDataLocation</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFragDataLocation</name></cpp:macro> <cpp:value>glad_glGetFragDataLocation</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v0</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1UIPROC</name></type> <name>glad_glUniform1ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1ui</name></cpp:macro> <cpp:value>glad_glUniform1ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v1</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2UIPROC</name></type> <name>glad_glUniform2ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2ui</name></cpp:macro> <cpp:value>glad_glUniform2ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3UIPROC</name></type> <name>glad_glUniform3ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3ui</name></cpp:macro> <cpp:value>glad_glUniform3ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v3</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4UIPROC</name></type> <name>glad_glUniform4ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4ui</name></cpp:macro> <cpp:value>glad_glUniform4ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM1UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM1UIVPROC</name></type> <name>glad_glUniform1uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform1uiv</name></cpp:macro> <cpp:value>glad_glUniform1uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM2UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM2UIVPROC</name></type> <name>glad_glUniform2uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform2uiv</name></cpp:macro> <cpp:value>glad_glUniform2uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM3UIVPROC</name></type> <name>glad_glUniform3uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform3uiv</name></cpp:macro> <cpp:value>glad_glUniform3uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORM4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORM4UIVPROC</name></type> <name>glad_glUniform4uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniform4uiv</name></cpp:macro> <cpp:value>glad_glUniform4uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXPARAMETERIIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXPARAMETERIIVPROC</name></type> <name>glad_glTexParameterIiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexParameterIiv</name></cpp:macro> <cpp:value>glad_glTexParameterIiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXPARAMETERIUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXPARAMETERIUIVPROC</name></type> <name>glad_glTexParameterIuiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexParameterIuiv</name></cpp:macro> <cpp:value>glad_glTexParameterIuiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXPARAMETERIIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXPARAMETERIIVPROC</name></type> <name>glad_glGetTexParameterIiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexParameterIiv</name></cpp:macro> <cpp:value>glad_glGetTexParameterIiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETTEXPARAMETERIUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETTEXPARAMETERIUIVPROC</name></type> <name>glad_glGetTexParameterIuiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetTexParameterIuiv</name></cpp:macro> <cpp:value>glad_glGetTexParameterIuiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARBUFFERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>drawbuffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARBUFFERIVPROC</name></type> <name>glad_glClearBufferiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearBufferiv</name></cpp:macro> <cpp:value>glad_glClearBufferiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARBUFFERUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>drawbuffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARBUFFERUIVPROC</name></type> <name>glad_glClearBufferuiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearBufferuiv</name></cpp:macro> <cpp:value>glad_glClearBufferuiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARBUFFERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>drawbuffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARBUFFERFVPROC</name></type> <name>glad_glClearBufferfv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearBufferfv</name></cpp:macro> <cpp:value>glad_glClearBufferfv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARBUFFERFIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>drawbuffer</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>stencil</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARBUFFERFIPROC</name></type> <name>glad_glClearBufferfi</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearBufferfi</name></cpp:macro> <cpp:value>glad_glClearBufferfi</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLGETSTRINGIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSTRINGIPROC</name></type> <name>glad_glGetStringi</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetStringi</name></cpp:macro> <cpp:value>glad_glGetStringi</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISRENDERBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>renderbuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISRENDERBUFFERPROC</name></type> <name>glad_glIsRenderbuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsRenderbuffer</name></cpp:macro> <cpp:value>glad_glIsRenderbuffer</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDRENDERBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>renderbuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDRENDERBUFFERPROC</name></type> <name>glad_glBindRenderbuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindRenderbuffer</name></cpp:macro> <cpp:value>glad_glBindRenderbuffer</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETERENDERBUFFERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>renderbuffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETERENDERBUFFERSPROC</name></type> <name>glad_glDeleteRenderbuffers</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteRenderbuffers</name></cpp:macro> <cpp:value>glad_glDeleteRenderbuffers</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENRENDERBUFFERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>renderbuffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENRENDERBUFFERSPROC</name></type> <name>glad_glGenRenderbuffers</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenRenderbuffers</name></cpp:macro> <cpp:value>glad_glGenRenderbuffers</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRENDERBUFFERSTORAGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRENDERBUFFERSTORAGEPROC</name></type> <name>glad_glRenderbufferStorage</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRenderbufferStorage</name></cpp:macro> <cpp:value>glad_glRenderbufferStorage</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETRENDERBUFFERPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETRENDERBUFFERPARAMETERIVPROC</name></type> <name>glad_glGetRenderbufferParameteriv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetRenderbufferParameteriv</name></cpp:macro> <cpp:value>glad_glGetRenderbufferParameteriv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISFRAMEBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>framebuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISFRAMEBUFFERPROC</name></type> <name>glad_glIsFramebuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsFramebuffer</name></cpp:macro> <cpp:value>glad_glIsFramebuffer</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDFRAMEBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>framebuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDFRAMEBUFFERPROC</name></type> <name>glad_glBindFramebuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindFramebuffer</name></cpp:macro> <cpp:value>glad_glBindFramebuffer</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEFRAMEBUFFERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>framebuffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEFRAMEBUFFERSPROC</name></type> <name>glad_glDeleteFramebuffers</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteFramebuffers</name></cpp:macro> <cpp:value>glad_glDeleteFramebuffers</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENFRAMEBUFFERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>framebuffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENFRAMEBUFFERSPROC</name></type> <name>glad_glGenFramebuffers</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenFramebuffers</name></cpp:macro> <cpp:value>glad_glGenFramebuffers</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLenum</name></type> (<name>APIENTRYP</name> <name>PFNGLCHECKFRAMEBUFFERSTATUSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCHECKFRAMEBUFFERSTATUSPROC</name></type> <name>glad_glCheckFramebufferStatus</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCheckFramebufferStatus</name></cpp:macro> <cpp:value>glad_glCheckFramebufferStatus</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTURE1DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>textarget</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERTEXTURE1DPROC</name></type> <name>glad_glFramebufferTexture1D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTexture1D</name></cpp:macro> <cpp:value>glad_glFramebufferTexture1D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTURE2DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>textarget</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERTEXTURE2DPROC</name></type> <name>glad_glFramebufferTexture2D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTexture2D</name></cpp:macro> <cpp:value>glad_glFramebufferTexture2D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTURE3DPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>textarget</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERTEXTURE3DPROC</name></type> <name>glad_glFramebufferTexture3D</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTexture3D</name></cpp:macro> <cpp:value>glad_glFramebufferTexture3D</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERRENDERBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>renderbuffertarget</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>renderbuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERRENDERBUFFERPROC</name></type> <name>glad_glFramebufferRenderbuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferRenderbuffer</name></cpp:macro> <cpp:value>glad_glFramebufferRenderbuffer</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC</name></type> <name>glad_glGetFramebufferAttachmentParameteriv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFramebufferAttachmentParameteriv</name></cpp:macro> <cpp:value>glad_glGetFramebufferAttachmentParameteriv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENERATEMIPMAPPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENERATEMIPMAPPROC</name></type> <name>glad_glGenerateMipmap</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenerateMipmap</name></cpp:macro> <cpp:value>glad_glGenerateMipmap</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLITFRAMEBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>srcX0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcY0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcX1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcY1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstX0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstY0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstX1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstY1</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>filter</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLITFRAMEBUFFERPROC</name></type> <name>glad_glBlitFramebuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlitFramebuffer</name></cpp:macro> <cpp:value>glad_glBlitFramebuffer</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC</name></type> <name>glad_glRenderbufferStorageMultisample</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRenderbufferStorageMultisample</name></cpp:macro> <cpp:value>glad_glRenderbufferStorageMultisample</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTURELAYERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>layer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERTEXTURELAYERPROC</name></type> <name>glad_glFramebufferTextureLayer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTextureLayer</name></cpp:macro> <cpp:value>glad_glFramebufferTextureLayer</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLMAPBUFFERRANGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>access</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAPBUFFERRANGEPROC</name></type> <name>glad_glMapBufferRange</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapBufferRange</name></cpp:macro> <cpp:value>glad_glMapBufferRange</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFLUSHMAPPEDBUFFERRANGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFLUSHMAPPEDBUFFERRANGEPROC</name></type> <name>glad_glFlushMappedBufferRange</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFlushMappedBufferRange</name></cpp:macro> <cpp:value>glad_glFlushMappedBufferRange</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDVERTEXARRAYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>array</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDVERTEXARRAYPROC</name></type> <name>glad_glBindVertexArray</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindVertexArray</name></cpp:macro> <cpp:value>glad_glBindVertexArray</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEVERTEXARRAYSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>arrays</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEVERTEXARRAYSPROC</name></type> <name>glad_glDeleteVertexArrays</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteVertexArrays</name></cpp:macro> <cpp:value>glad_glDeleteVertexArrays</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENVERTEXARRAYSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>arrays</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENVERTEXARRAYSPROC</name></type> <name>glad_glGenVertexArrays</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenVertexArrays</name></cpp:macro> <cpp:value>glad_glGenVertexArrays</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISVERTEXARRAYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>array</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISVERTEXARRAYPROC</name></type> <name>glad_glIsVertexArray</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsVertexArray</name></cpp:macro> <cpp:value>glad_glIsVertexArray</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_3_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_3_1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_3_1</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWARRAYSINSTANCEDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>instancecount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWARRAYSINSTANCEDPROC</name></type> <name>glad_glDrawArraysInstanced</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawArraysInstanced</name></cpp:macro> <cpp:value>glad_glDrawArraysInstanced</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWELEMENTSINSTANCEDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>indices</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>instancecount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWELEMENTSINSTANCEDPROC</name></type> <name>glad_glDrawElementsInstanced</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawElementsInstanced</name></cpp:macro> <cpp:value>glad_glDrawElementsInstanced</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXBUFFERPROC</name></type> <name>glad_glTexBuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexBuffer</name></cpp:macro> <cpp:value>glad_glTexBuffer</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPRIMITIVERESTARTINDEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPRIMITIVERESTARTINDEXPROC</name></type> <name>glad_glPrimitiveRestartIndex</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPrimitiveRestartIndex</name></cpp:macro> <cpp:value>glad_glPrimitiveRestartIndex</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOPYBUFFERSUBDATAPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>readTarget</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>writeTarget</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>readOffset</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>writeOffset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOPYBUFFERSUBDATAPROC</name></type> <name>glad_glCopyBufferSubData</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCopyBufferSubData</name></cpp:macro> <cpp:value>glad_glCopyBufferSubData</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETUNIFORMINDICESPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>uniformCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier><modifier>*</modifier></type> <name>uniformNames</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>uniformIndices</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETUNIFORMINDICESPROC</name></type> <name>glad_glGetUniformIndices</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformIndices</name></cpp:macro> <cpp:value>glad_glGetUniformIndices</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETACTIVEUNIFORMSIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>uniformCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>uniformIndices</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETACTIVEUNIFORMSIVPROC</name></type> <name>glad_glGetActiveUniformsiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveUniformsiv</name></cpp:macro> <cpp:value>glad_glGetActiveUniformsiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETACTIVEUNIFORMNAMEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>uniformIndex</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type> <name>uniformName</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETACTIVEUNIFORMNAMEPROC</name></type> <name>glad_glGetActiveUniformName</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveUniformName</name></cpp:macro> <cpp:value>glad_glGetActiveUniformName</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETUNIFORMBLOCKINDEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type> <name>uniformBlockName</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETUNIFORMBLOCKINDEXPROC</name></type> <name>glad_glGetUniformBlockIndex</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetUniformBlockIndex</name></cpp:macro> <cpp:value>glad_glGetUniformBlockIndex</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETACTIVEUNIFORMBLOCKIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>uniformBlockIndex</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETACTIVEUNIFORMBLOCKIVPROC</name></type> <name>glad_glGetActiveUniformBlockiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveUniformBlockiv</name></cpp:macro> <cpp:value>glad_glGetActiveUniformBlockiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>uniformBlockIndex</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type> <name>uniformBlockName</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC</name></type> <name>glad_glGetActiveUniformBlockName</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveUniformBlockName</name></cpp:macro> <cpp:value>glad_glGetActiveUniformBlockName</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUNIFORMBLOCKBINDINGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>uniformBlockIndex</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>uniformBlockBinding</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNIFORMBLOCKBINDINGPROC</name></type> <name>glad_glUniformBlockBinding</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUniformBlockBinding</name></cpp:macro> <cpp:value>glad_glUniformBlockBinding</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_3_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_3_2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_3_2</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWELEMENTSBASEVERTEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>indices</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>basevertex</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWELEMENTSBASEVERTEXPROC</name></type> <name>glad_glDrawElementsBaseVertex</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawElementsBaseVertex</name></cpp:macro> <cpp:value>glad_glDrawElementsBaseVertex</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>indices</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>basevertex</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC</name></type> <name>glad_glDrawRangeElementsBaseVertex</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawRangeElementsBaseVertex</name></cpp:macro> <cpp:value>glad_glDrawRangeElementsBaseVertex</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>indices</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>instancecount</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>basevertex</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC</name></type> <name>glad_glDrawElementsInstancedBaseVertex</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawElementsInstancedBaseVertex</name></cpp:macro> <cpp:value>glad_glDrawElementsInstancedBaseVertex</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name><modifier>*</modifier></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>indices</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>drawcount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>basevertex</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC</name></type> <name>glad_glMultiDrawElementsBaseVertex</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiDrawElementsBaseVertex</name></cpp:macro> <cpp:value>glad_glMultiDrawElementsBaseVertex</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROVOKINGVERTEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROVOKINGVERTEXPROC</name></type> <name>glad_glProvokingVertex</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProvokingVertex</name></cpp:macro> <cpp:value>glad_glProvokingVertex</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLsync</name></type> (<name>APIENTRYP</name> <name>PFNGLFENCESYNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>condition</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFENCESYNCPROC</name></type> <name>glad_glFenceSync</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFenceSync</name></cpp:macro> <cpp:value>glad_glFenceSync</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISSYNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISSYNCPROC</name></type> <name>glad_glIsSync</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsSync</name></cpp:macro> <cpp:value>glad_glIsSync</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETESYNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETESYNCPROC</name></type> <name>glad_glDeleteSync</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteSync</name></cpp:macro> <cpp:value>glad_glDeleteSync</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLenum</name></type> (<name>APIENTRYP</name> <name>PFNGLCLIENTWAITSYNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>GLuint64</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLIENTWAITSYNCPROC</name></type> <name>glad_glClientWaitSync</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClientWaitSync</name></cpp:macro> <cpp:value>glad_glClientWaitSync</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWAITSYNCPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>GLuint64</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWAITSYNCPROC</name></type> <name>glad_glWaitSync</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWaitSync</name></cpp:macro> <cpp:value>glad_glWaitSync</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETINTEGER64VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint64</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETINTEGER64VPROC</name></type> <name>glad_glGetInteger64v</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetInteger64v</name></cpp:macro> <cpp:value>glad_glGetInteger64v</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSYNCIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>values</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSYNCIVPROC</name></type> <name>glad_glGetSynciv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetSynciv</name></cpp:macro> <cpp:value>glad_glGetSynciv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETINTEGER64I_VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint64</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETINTEGER64I_VPROC</name></type> <name>glad_glGetInteger64i_v</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetInteger64i_v</name></cpp:macro> <cpp:value>glad_glGetInteger64i_v</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETBUFFERPARAMETERI64VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint64</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETBUFFERPARAMETERI64VPROC</name></type> <name>glad_glGetBufferParameteri64v</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBufferParameteri64v</name></cpp:macro> <cpp:value>glad_glGetBufferParameteri64v</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTUREPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERTEXTUREPROC</name></type> <name>glad_glFramebufferTexture</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTexture</name></cpp:macro> <cpp:value>glad_glFramebufferTexture</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXIMAGE2DMULTISAMPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>fixedsamplelocations</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXIMAGE2DMULTISAMPLEPROC</name></type> <name>glad_glTexImage2DMultisample</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexImage2DMultisample</name></cpp:macro> <cpp:value>glad_glTexImage2DMultisample</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXIMAGE3DMULTISAMPLEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>fixedsamplelocations</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXIMAGE3DMULTISAMPLEPROC</name></type> <name>glad_glTexImage3DMultisample</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexImage3DMultisample</name></cpp:macro> <cpp:value>glad_glTexImage3DMultisample</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETMULTISAMPLEFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETMULTISAMPLEFVPROC</name></type> <name>glad_glGetMultisamplefv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetMultisamplefv</name></cpp:macro> <cpp:value>glad_glGetMultisamplefv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLEMASKIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>maskNumber</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLEMASKIPROC</name></type> <name>glad_glSampleMaski</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSampleMaski</name></cpp:macro> <cpp:value>glad_glSampleMaski</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_3_3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION_3_3</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_VERSION_3_3</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDFRAGDATALOCATIONINDEXEDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>colorNumber</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDFRAGDATALOCATIONINDEXEDPROC</name></type> <name>glad_glBindFragDataLocationIndexed</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindFragDataLocationIndexed</name></cpp:macro> <cpp:value>glad_glBindFragDataLocationIndexed</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFRAGDATAINDEXPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFRAGDATAINDEXPROC</name></type> <name>glad_glGetFragDataIndex</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFragDataIndex</name></cpp:macro> <cpp:value>glad_glGetFragDataIndex</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENSAMPLERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>samplers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENSAMPLERSPROC</name></type> <name>glad_glGenSamplers</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenSamplers</name></cpp:macro> <cpp:value>glad_glGenSamplers</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETESAMPLERSPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>samplers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETESAMPLERSPROC</name></type> <name>glad_glDeleteSamplers</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteSamplers</name></cpp:macro> <cpp:value>glad_glDeleteSamplers</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISSAMPLERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISSAMPLERPROC</name></type> <name>glad_glIsSampler</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsSampler</name></cpp:macro> <cpp:value>glad_glIsSampler</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDSAMPLERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>unit</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDSAMPLERPROC</name></type> <name>glad_glBindSampler</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindSampler</name></cpp:macro> <cpp:value>glad_glBindSampler</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLERPARAMETERIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLERPARAMETERIPROC</name></type> <name>glad_glSamplerParameteri</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSamplerParameteri</name></cpp:macro> <cpp:value>glad_glSamplerParameteri</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLERPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLERPARAMETERIVPROC</name></type> <name>glad_glSamplerParameteriv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSamplerParameteriv</name></cpp:macro> <cpp:value>glad_glSamplerParameteriv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLERPARAMETERFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLERPARAMETERFPROC</name></type> <name>glad_glSamplerParameterf</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSamplerParameterf</name></cpp:macro> <cpp:value>glad_glSamplerParameterf</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLERPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLERPARAMETERFVPROC</name></type> <name>glad_glSamplerParameterfv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSamplerParameterfv</name></cpp:macro> <cpp:value>glad_glSamplerParameterfv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLERPARAMETERIIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLERPARAMETERIIVPROC</name></type> <name>glad_glSamplerParameterIiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSamplerParameterIiv</name></cpp:macro> <cpp:value>glad_glSamplerParameterIiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLERPARAMETERIUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLERPARAMETERIUIVPROC</name></type> <name>glad_glSamplerParameterIuiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSamplerParameterIuiv</name></cpp:macro> <cpp:value>glad_glSamplerParameterIuiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSAMPLERPARAMETERIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSAMPLERPARAMETERIVPROC</name></type> <name>glad_glGetSamplerParameteriv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetSamplerParameteriv</name></cpp:macro> <cpp:value>glad_glGetSamplerParameteriv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSAMPLERPARAMETERIIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSAMPLERPARAMETERIIVPROC</name></type> <name>glad_glGetSamplerParameterIiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetSamplerParameterIiv</name></cpp:macro> <cpp:value>glad_glGetSamplerParameterIiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSAMPLERPARAMETERFVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSAMPLERPARAMETERFVPROC</name></type> <name>glad_glGetSamplerParameterfv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetSamplerParameterfv</name></cpp:macro> <cpp:value>glad_glGetSamplerParameterfv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSAMPLERPARAMETERIUIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSAMPLERPARAMETERIUIVPROC</name></type> <name>glad_glGetSamplerParameterIuiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetSamplerParameterIuiv</name></cpp:macro> <cpp:value>glad_glGetSamplerParameterIuiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLQUERYCOUNTERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLQUERYCOUNTERPROC</name></type> <name>glad_glQueryCounter</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glQueryCounter</name></cpp:macro> <cpp:value>glad_glQueryCounter</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETQUERYOBJECTI64VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint64</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETQUERYOBJECTI64VPROC</name></type> <name>glad_glGetQueryObjecti64v</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetQueryObjecti64v</name></cpp:macro> <cpp:value>glad_glGetQueryObjecti64v</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETQUERYOBJECTUI64VPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLuint64</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETQUERYOBJECTUI64VPROC</name></type> <name>glad_glGetQueryObjectui64v</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetQueryObjectui64v</name></cpp:macro> <cpp:value>glad_glGetQueryObjectui64v</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBDIVISORPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>divisor</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBDIVISORPROC</name></type> <name>glad_glVertexAttribDivisor</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribDivisor</name></cpp:macro> <cpp:value>glad_glVertexAttribDivisor</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBP1UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBP1UIPROC</name></type> <name>glad_glVertexAttribP1ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP1ui</name></cpp:macro> <cpp:value>glad_glVertexAttribP1ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBP1UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBP1UIVPROC</name></type> <name>glad_glVertexAttribP1uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP1uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribP1uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBP2UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBP2UIPROC</name></type> <name>glad_glVertexAttribP2ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP2ui</name></cpp:macro> <cpp:value>glad_glVertexAttribP2ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBP2UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBP2UIVPROC</name></type> <name>glad_glVertexAttribP2uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP2uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribP2uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBP3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBP3UIPROC</name></type> <name>glad_glVertexAttribP3ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP3ui</name></cpp:macro> <cpp:value>glad_glVertexAttribP3ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBP3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBP3UIVPROC</name></type> <name>glad_glVertexAttribP3uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP3uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribP3uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBP4UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBP4UIPROC</name></type> <name>glad_glVertexAttribP4ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP4ui</name></cpp:macro> <cpp:value>glad_glVertexAttribP4ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBP4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBP4UIVPROC</name></type> <name>glad_glVertexAttribP4uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribP4uiv</name></cpp:macro> <cpp:value>glad_glVertexAttribP4uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXP2UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXP2UIPROC</name></type> <name>glad_glVertexP2ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexP2ui</name></cpp:macro> <cpp:value>glad_glVertexP2ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXP2UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXP2UIVPROC</name></type> <name>glad_glVertexP2uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexP2uiv</name></cpp:macro> <cpp:value>glad_glVertexP2uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXP3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXP3UIPROC</name></type> <name>glad_glVertexP3ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexP3ui</name></cpp:macro> <cpp:value>glad_glVertexP3ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXP3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXP3UIVPROC</name></type> <name>glad_glVertexP3uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexP3uiv</name></cpp:macro> <cpp:value>glad_glVertexP3uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXP4UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXP4UIPROC</name></type> <name>glad_glVertexP4ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexP4ui</name></cpp:macro> <cpp:value>glad_glVertexP4ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXP4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXP4UIVPROC</name></type> <name>glad_glVertexP4uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexP4uiv</name></cpp:macro> <cpp:value>glad_glVertexP4uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORDP1UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORDP1UIPROC</name></type> <name>glad_glTexCoordP1ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP1ui</name></cpp:macro> <cpp:value>glad_glTexCoordP1ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORDP1UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORDP1UIVPROC</name></type> <name>glad_glTexCoordP1uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP1uiv</name></cpp:macro> <cpp:value>glad_glTexCoordP1uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORDP2UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORDP2UIPROC</name></type> <name>glad_glTexCoordP2ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP2ui</name></cpp:macro> <cpp:value>glad_glTexCoordP2ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORDP2UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORDP2UIVPROC</name></type> <name>glad_glTexCoordP2uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP2uiv</name></cpp:macro> <cpp:value>glad_glTexCoordP2uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORDP3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORDP3UIPROC</name></type> <name>glad_glTexCoordP3ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP3ui</name></cpp:macro> <cpp:value>glad_glTexCoordP3ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORDP3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORDP3UIVPROC</name></type> <name>glad_glTexCoordP3uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP3uiv</name></cpp:macro> <cpp:value>glad_glTexCoordP3uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORDP4UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORDP4UIPROC</name></type> <name>glad_glTexCoordP4ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP4ui</name></cpp:macro> <cpp:value>glad_glTexCoordP4ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORDP4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORDP4UIVPROC</name></type> <name>glad_glTexCoordP4uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordP4uiv</name></cpp:macro> <cpp:value>glad_glTexCoordP4uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORDP1UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORDP1UIPROC</name></type> <name>glad_glMultiTexCoordP1ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP1ui</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP1ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORDP1UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORDP1UIVPROC</name></type> <name>glad_glMultiTexCoordP1uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP1uiv</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP1uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORDP2UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORDP2UIPROC</name></type> <name>glad_glMultiTexCoordP2ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP2ui</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP2ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORDP2UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORDP2UIVPROC</name></type> <name>glad_glMultiTexCoordP2uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP2uiv</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP2uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORDP3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORDP3UIPROC</name></type> <name>glad_glMultiTexCoordP3ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP3ui</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP3ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORDP3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORDP3UIVPROC</name></type> <name>glad_glMultiTexCoordP3uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP3uiv</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP3uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORDP4UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORDP4UIPROC</name></type> <name>glad_glMultiTexCoordP4ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP4ui</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP4ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLMULTITEXCOORDP4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMULTITEXCOORDP4UIVPROC</name></type> <name>glad_glMultiTexCoordP4uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMultiTexCoordP4uiv</name></cpp:macro> <cpp:value>glad_glMultiTexCoordP4uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMALP3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMALP3UIPROC</name></type> <name>glad_glNormalP3ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormalP3ui</name></cpp:macro> <cpp:value>glad_glNormalP3ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMALP3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>coords</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMALP3UIVPROC</name></type> <name>glad_glNormalP3uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormalP3uiv</name></cpp:macro> <cpp:value>glad_glNormalP3uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORP3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORP3UIPROC</name></type> <name>glad_glColorP3ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorP3ui</name></cpp:macro> <cpp:value>glad_glColorP3ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORP3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORP3UIVPROC</name></type> <name>glad_glColorP3uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorP3uiv</name></cpp:macro> <cpp:value>glad_glColorP3uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORP4UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORP4UIPROC</name></type> <name>glad_glColorP4ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorP4ui</name></cpp:macro> <cpp:value>glad_glColorP4ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORP4UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORP4UIVPROC</name></type> <name>glad_glColorP4uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorP4uiv</name></cpp:macro> <cpp:value>glad_glColorP4uiv</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLORP3UIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLORP3UIPROC</name></type> <name>glad_glSecondaryColorP3ui</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColorP3ui</name></cpp:macro> <cpp:value>glad_glSecondaryColorP3ui</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSECONDARYCOLORP3UIVPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSECONDARYCOLORP3UIVPROC</name></type> <name>glad_glSecondaryColorP3uiv</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSecondaryColorP3uiv</name></cpp:macro> <cpp:value>glad_glSecondaryColorP3uiv</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEBUG_MESSAGE_LENGTH_AMD</name></cpp:macro> <cpp:value>0x9143</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEBUG_LOGGED_MESSAGES_AMD</name></cpp:macro> <cpp:value>0x9144</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_LOGGED_MESSAGES_AMD</name></cpp:macro> <cpp:value>0x9145</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_HIGH_AMD</name></cpp:macro> <cpp:value>0x9146</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_MEDIUM_AMD</name></cpp:macro> <cpp:value>0x9147</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_LOW_AMD</name></cpp:macro> <cpp:value>0x9148</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CATEGORY_API_ERROR_AMD</name></cpp:macro> <cpp:value>0x9149</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD</name></cpp:macro> <cpp:value>0x914A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CATEGORY_DEPRECATION_AMD</name></cpp:macro> <cpp:value>0x914B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD</name></cpp:macro> <cpp:value>0x914C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CATEGORY_PERFORMANCE_AMD</name></cpp:macro> <cpp:value>0x914D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD</name></cpp:macro> <cpp:value>0x914E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CATEGORY_APPLICATION_AMD</name></cpp:macro> <cpp:value>0x914F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CATEGORY_OTHER_AMD</name></cpp:macro> <cpp:value>0x9150</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_BUFFER_AMD</name></cpp:macro> <cpp:value>0x9192</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_BUFFER_BINDING_AMD</name></cpp:macro> <cpp:value>0x9193</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_RESULT_NO_WAIT_AMD</name></cpp:macro> <cpp:value>0x9194</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIXED</name></cpp:macro> <cpp:value>0x140C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMPLEMENTATION_COLOR_READ_TYPE</name></cpp:macro> <cpp:value>0x8B9A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMPLEMENTATION_COLOR_READ_FORMAT</name></cpp:macro> <cpp:value>0x8B9B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOW_FLOAT</name></cpp:macro> <cpp:value>0x8DF0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MEDIUM_FLOAT</name></cpp:macro> <cpp:value>0x8DF1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HIGH_FLOAT</name></cpp:macro> <cpp:value>0x8DF2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOW_INT</name></cpp:macro> <cpp:value>0x8DF3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MEDIUM_INT</name></cpp:macro> <cpp:value>0x8DF4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HIGH_INT</name></cpp:macro> <cpp:value>0x8DF5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_COMPILER</name></cpp:macro> <cpp:value>0x8DFA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_BINARY_FORMATS</name></cpp:macro> <cpp:value>0x8DF8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_SHADER_BINARY_FORMATS</name></cpp:macro> <cpp:value>0x8DF9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_UNIFORM_VECTORS</name></cpp:macro> <cpp:value>0x8DFB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VARYING_VECTORS</name></cpp:macro> <cpp:value>0x8DFC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_UNIFORM_VECTORS</name></cpp:macro> <cpp:value>0x8DFD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB565</name></cpp:macro> <cpp:value>0x8D62</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB8_ETC2</name></cpp:macro> <cpp:value>0x9274</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ETC2</name></cpp:macro> <cpp:value>0x9275</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2</name></cpp:macro> <cpp:value>0x9276</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2</name></cpp:macro> <cpp:value>0x9277</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA8_ETC2_EAC</name></cpp:macro> <cpp:value>0x9278</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC</name></cpp:macro> <cpp:value>0x9279</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_R11_EAC</name></cpp:macro> <cpp:value>0x9270</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_R11_EAC</name></cpp:macro> <cpp:value>0x9271</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RG11_EAC</name></cpp:macro> <cpp:value>0x9272</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_RG11_EAC</name></cpp:macro> <cpp:value>0x9273</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVE_RESTART_FIXED_INDEX</name></cpp:macro> <cpp:value>0x8D69</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ANY_SAMPLES_PASSED_CONSERVATIVE</name></cpp:macro> <cpp:value>0x8D6A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ELEMENT_INDEX</name></cpp:macro> <cpp:value>0x8D6B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_PERSISTENT_BIT</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_COHERENT_BIT</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_STORAGE_BIT</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIENT_STORAGE_BIT</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_IMMUTABLE_STORAGE</name></cpp:macro> <cpp:value>0x821F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_STORAGE_FLAGS</name></cpp:macro> <cpp:value>0x8220</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_COMPRESSED_BLOCK_WIDTH</name></cpp:macro> <cpp:value>0x9127</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_COMPRESSED_BLOCK_HEIGHT</name></cpp:macro> <cpp:value>0x9128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_COMPRESSED_BLOCK_DEPTH</name></cpp:macro> <cpp:value>0x9129</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_COMPRESSED_BLOCK_SIZE</name></cpp:macro> <cpp:value>0x912A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_COMPRESSED_BLOCK_WIDTH</name></cpp:macro> <cpp:value>0x912B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_COMPRESSED_BLOCK_HEIGHT</name></cpp:macro> <cpp:value>0x912C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_COMPRESSED_BLOCK_DEPTH</name></cpp:macro> <cpp:value>0x912D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_COMPRESSED_BLOCK_SIZE</name></cpp:macro> <cpp:value>0x912E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB</name></cpp:macro> <cpp:value>0x8242</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB</name></cpp:macro> <cpp:value>0x8243</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CALLBACK_FUNCTION_ARB</name></cpp:macro> <cpp:value>0x8244</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CALLBACK_USER_PARAM_ARB</name></cpp:macro> <cpp:value>0x8245</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_API_ARB</name></cpp:macro> <cpp:value>0x8246</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB</name></cpp:macro> <cpp:value>0x8247</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_SHADER_COMPILER_ARB</name></cpp:macro> <cpp:value>0x8248</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_THIRD_PARTY_ARB</name></cpp:macro> <cpp:value>0x8249</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_APPLICATION_ARB</name></cpp:macro> <cpp:value>0x824A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_OTHER_ARB</name></cpp:macro> <cpp:value>0x824B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_ERROR_ARB</name></cpp:macro> <cpp:value>0x824C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB</name></cpp:macro> <cpp:value>0x824D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB</name></cpp:macro> <cpp:value>0x824E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_PORTABILITY_ARB</name></cpp:macro> <cpp:value>0x824F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_PERFORMANCE_ARB</name></cpp:macro> <cpp:value>0x8250</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_OTHER_ARB</name></cpp:macro> <cpp:value>0x8251</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEBUG_MESSAGE_LENGTH_ARB</name></cpp:macro> <cpp:value>0x9143</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEBUG_LOGGED_MESSAGES_ARB</name></cpp:macro> <cpp:value>0x9144</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_LOGGED_MESSAGES_ARB</name></cpp:macro> <cpp:value>0x9145</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_HIGH_ARB</name></cpp:macro> <cpp:value>0x9146</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_MEDIUM_ARB</name></cpp:macro> <cpp:value>0x9147</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_LOW_ARB</name></cpp:macro> <cpp:value>0x9148</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT16_ARB</name></cpp:macro> <cpp:value>0x81A5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT24_ARB</name></cpp:macro> <cpp:value>0x81A6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT32_ARB</name></cpp:macro> <cpp:value>0x81A7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEPTH_SIZE_ARB</name></cpp:macro> <cpp:value>0x884A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_TEXTURE_MODE_ARB</name></cpp:macro> <cpp:value>0x884B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DRAW_BUFFERS_ARB</name></cpp:macro> <cpp:value>0x8824</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER0_ARB</name></cpp:macro> <cpp:value>0x8825</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER1_ARB</name></cpp:macro> <cpp:value>0x8826</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER2_ARB</name></cpp:macro> <cpp:value>0x8827</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER3_ARB</name></cpp:macro> <cpp:value>0x8828</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER4_ARB</name></cpp:macro> <cpp:value>0x8829</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER5_ARB</name></cpp:macro> <cpp:value>0x882A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER6_ARB</name></cpp:macro> <cpp:value>0x882B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER7_ARB</name></cpp:macro> <cpp:value>0x882C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER8_ARB</name></cpp:macro> <cpp:value>0x882D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER9_ARB</name></cpp:macro> <cpp:value>0x882E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER10_ARB</name></cpp:macro> <cpp:value>0x882F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER11_ARB</name></cpp:macro> <cpp:value>0x8830</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER12_ARB</name></cpp:macro> <cpp:value>0x8831</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER13_ARB</name></cpp:macro> <cpp:value>0x8832</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER14_ARB</name></cpp:macro> <cpp:value>0x8833</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER15_ARB</name></cpp:macro> <cpp:value>0x8834</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_UNIFORM_LOCATIONS</name></cpp:macro> <cpp:value>0x826E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_PROGRAM_ARB</name></cpp:macro> <cpp:value>0x8804</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_FORMAT_ASCII_ARB</name></cpp:macro> <cpp:value>0x8875</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_LENGTH_ARB</name></cpp:macro> <cpp:value>0x8627</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_FORMAT_ARB</name></cpp:macro> <cpp:value>0x8876</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_BINDING_ARB</name></cpp:macro> <cpp:value>0x8677</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x88A0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x88A1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x88A2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x88A3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_TEMPORARIES_ARB</name></cpp:macro> <cpp:value>0x88A4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TEMPORARIES_ARB</name></cpp:macro> <cpp:value>0x88A5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_TEMPORARIES_ARB</name></cpp:macro> <cpp:value>0x88A6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB</name></cpp:macro> <cpp:value>0x88A7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_PARAMETERS_ARB</name></cpp:macro> <cpp:value>0x88A8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_PARAMETERS_ARB</name></cpp:macro> <cpp:value>0x88A9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_PARAMETERS_ARB</name></cpp:macro> <cpp:value>0x88AA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB</name></cpp:macro> <cpp:value>0x88AB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_ATTRIBS_ARB</name></cpp:macro> <cpp:value>0x88AC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_ATTRIBS_ARB</name></cpp:macro> <cpp:value>0x88AD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_ATTRIBS_ARB</name></cpp:macro> <cpp:value>0x88AE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB</name></cpp:macro> <cpp:value>0x88AF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB</name></cpp:macro> <cpp:value>0x88B4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_ENV_PARAMETERS_ARB</name></cpp:macro> <cpp:value>0x88B5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB</name></cpp:macro> <cpp:value>0x88B6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_ALU_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x8805</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_TEX_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x8806</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_TEX_INDIRECTIONS_ARB</name></cpp:macro> <cpp:value>0x8807</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x8808</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x8809</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB</name></cpp:macro> <cpp:value>0x880A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x880B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x880C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB</name></cpp:macro> <cpp:value>0x880D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x880E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB</name></cpp:macro> <cpp:value>0x880F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB</name></cpp:macro> <cpp:value>0x8810</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_STRING_ARB</name></cpp:macro> <cpp:value>0x8628</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_ERROR_POSITION_ARB</name></cpp:macro> <cpp:value>0x864B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_MATRIX_ARB</name></cpp:macro> <cpp:value>0x8641</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSPOSE_CURRENT_MATRIX_ARB</name></cpp:macro> <cpp:value>0x88B7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_MATRIX_STACK_DEPTH_ARB</name></cpp:macro> <cpp:value>0x8640</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_MATRICES_ARB</name></cpp:macro> <cpp:value>0x862F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB</name></cpp:macro> <cpp:value>0x862E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_COORDS_ARB</name></cpp:macro> <cpp:value>0x8871</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_IMAGE_UNITS_ARB</name></cpp:macro> <cpp:value>0x8872</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_ERROR_STRING_ARB</name></cpp:macro> <cpp:value>0x8874</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX0_ARB</name></cpp:macro> <cpp:value>0x88C0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX1_ARB</name></cpp:macro> <cpp:value>0x88C1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX2_ARB</name></cpp:macro> <cpp:value>0x88C2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX3_ARB</name></cpp:macro> <cpp:value>0x88C3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX4_ARB</name></cpp:macro> <cpp:value>0x88C4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX5_ARB</name></cpp:macro> <cpp:value>0x88C5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX6_ARB</name></cpp:macro> <cpp:value>0x88C6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX7_ARB</name></cpp:macro> <cpp:value>0x88C7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX8_ARB</name></cpp:macro> <cpp:value>0x88C8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX9_ARB</name></cpp:macro> <cpp:value>0x88C9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX10_ARB</name></cpp:macro> <cpp:value>0x88CA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX11_ARB</name></cpp:macro> <cpp:value>0x88CB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX12_ARB</name></cpp:macro> <cpp:value>0x88CC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX13_ARB</name></cpp:macro> <cpp:value>0x88CD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX14_ARB</name></cpp:macro> <cpp:value>0x88CE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX15_ARB</name></cpp:macro> <cpp:value>0x88CF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX16_ARB</name></cpp:macro> <cpp:value>0x88D0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX17_ARB</name></cpp:macro> <cpp:value>0x88D1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX18_ARB</name></cpp:macro> <cpp:value>0x88D2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX19_ARB</name></cpp:macro> <cpp:value>0x88D3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX20_ARB</name></cpp:macro> <cpp:value>0x88D4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX21_ARB</name></cpp:macro> <cpp:value>0x88D5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX22_ARB</name></cpp:macro> <cpp:value>0x88D6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX23_ARB</name></cpp:macro> <cpp:value>0x88D7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX24_ARB</name></cpp:macro> <cpp:value>0x88D8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX25_ARB</name></cpp:macro> <cpp:value>0x88D9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX26_ARB</name></cpp:macro> <cpp:value>0x88DA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX27_ARB</name></cpp:macro> <cpp:value>0x88DB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX28_ARB</name></cpp:macro> <cpp:value>0x88DC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX29_ARB</name></cpp:macro> <cpp:value>0x88DD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX30_ARB</name></cpp:macro> <cpp:value>0x88DE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX31_ARB</name></cpp:macro> <cpp:value>0x88DF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SHADER_ARB</name></cpp:macro> <cpp:value>0x8B30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB</name></cpp:macro> <cpp:value>0x8B49</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB</name></cpp:macro> <cpp:value>0x8B8B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_ARB</name></cpp:macro> <cpp:value>0x809D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_COVERAGE_ARB</name></cpp:macro> <cpp:value>0x809E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_ONE_ARB</name></cpp:macro> <cpp:value>0x809F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE_ARB</name></cpp:macro> <cpp:value>0x80A0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_BUFFERS_ARB</name></cpp:macro> <cpp:value>0x80A8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLES_ARB</name></cpp:macro> <cpp:value>0x80A9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE_VALUE_ARB</name></cpp:macro> <cpp:value>0x80AA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE_INVERT_ARB</name></cpp:macro> <cpp:value>0x80AB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_BIT_ARB</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB</name></cpp:macro> <cpp:value>0x933D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB</name></cpp:macro> <cpp:value>0x933E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB</name></cpp:macro> <cpp:value>0x933F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB</name></cpp:macro> <cpp:value>0x9340</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_LOCATION_ARB</name></cpp:macro> <cpp:value>0x8E50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB</name></cpp:macro> <cpp:value>0x9341</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB</name></cpp:macro> <cpp:value>0x9342</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB</name></cpp:macro> <cpp:value>0x9343</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_ALPHA_ARB</name></cpp:macro> <cpp:value>0x84E9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_LUMINANCE_ARB</name></cpp:macro> <cpp:value>0x84EA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_LUMINANCE_ALPHA_ARB</name></cpp:macro> <cpp:value>0x84EB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_INTENSITY_ARB</name></cpp:macro> <cpp:value>0x84EC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB_ARB</name></cpp:macro> <cpp:value>0x84ED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ARB</name></cpp:macro> <cpp:value>0x84EE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSION_HINT_ARB</name></cpp:macro> <cpp:value>0x84EF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB</name></cpp:macro> <cpp:value>0x86A0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPRESSED_ARB</name></cpp:macro> <cpp:value>0x86A1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB</name></cpp:macro> <cpp:value>0x86A2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_TEXTURE_FORMATS_ARB</name></cpp:macro> <cpp:value>0x86A3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RED_TYPE_ARB</name></cpp:macro> <cpp:value>0x8C10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GREEN_TYPE_ARB</name></cpp:macro> <cpp:value>0x8C11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BLUE_TYPE_ARB</name></cpp:macro> <cpp:value>0x8C12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_ALPHA_TYPE_ARB</name></cpp:macro> <cpp:value>0x8C13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LUMINANCE_TYPE_ARB</name></cpp:macro> <cpp:value>0x8C14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_INTENSITY_TYPE_ARB</name></cpp:macro> <cpp:value>0x8C15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEPTH_TYPE_ARB</name></cpp:macro> <cpp:value>0x8C16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_NORMALIZED_ARB</name></cpp:macro> <cpp:value>0x8C17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA32F_ARB</name></cpp:macro> <cpp:value>0x8814</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB32F_ARB</name></cpp:macro> <cpp:value>0x8815</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA32F_ARB</name></cpp:macro> <cpp:value>0x8816</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY32F_ARB</name></cpp:macro> <cpp:value>0x8817</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE32F_ARB</name></cpp:macro> <cpp:value>0x8818</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA32F_ARB</name></cpp:macro> <cpp:value>0x8819</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16F_ARB</name></cpp:macro> <cpp:value>0x881A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16F_ARB</name></cpp:macro> <cpp:value>0x881B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA16F_ARB</name></cpp:macro> <cpp:value>0x881C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY16F_ARB</name></cpp:macro> <cpp:value>0x881D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE16F_ARB</name></cpp:macro> <cpp:value>0x881E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA16F_ARB</name></cpp:macro> <cpp:value>0x881F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_BINDING</name></cpp:macro> <cpp:value>0x82D4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_RELATIVE_OFFSET</name></cpp:macro> <cpp:value>0x82D5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_BINDING_DIVISOR</name></cpp:macro> <cpp:value>0x82D6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_BINDING_OFFSET</name></cpp:macro> <cpp:value>0x82D7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_BINDING_STRIDE</name></cpp:macro> <cpp:value>0x82D8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET</name></cpp:macro> <cpp:value>0x82D9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_ATTRIB_BINDINGS</name></cpp:macro> <cpp:value>0x82DA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_SIZE_ARB</name></cpp:macro> <cpp:value>0x8764</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_USAGE_ARB</name></cpp:macro> <cpp:value>0x8765</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_BUFFER_ARB</name></cpp:macro> <cpp:value>0x8892</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_BUFFER_ARB</name></cpp:macro> <cpp:value>0x8893</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x8894</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x8895</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x8896</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x8897</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x8898</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x8899</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x889A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x889B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x889C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x889D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x889E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB</name></cpp:macro> <cpp:value>0x889F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_ONLY_ARB</name></cpp:macro> <cpp:value>0x88B8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WRITE_ONLY_ARB</name></cpp:macro> <cpp:value>0x88B9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_WRITE_ARB</name></cpp:macro> <cpp:value>0x88BA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_ACCESS_ARB</name></cpp:macro> <cpp:value>0x88BB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAPPED_ARB</name></cpp:macro> <cpp:value>0x88BC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAP_POINTER_ARB</name></cpp:macro> <cpp:value>0x88BD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_DRAW_ARB</name></cpp:macro> <cpp:value>0x88E0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_READ_ARB</name></cpp:macro> <cpp:value>0x88E1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_COPY_ARB</name></cpp:macro> <cpp:value>0x88E2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_DRAW_ARB</name></cpp:macro> <cpp:value>0x88E4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_READ_ARB</name></cpp:macro> <cpp:value>0x88E5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_COPY_ARB</name></cpp:macro> <cpp:value>0x88E6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_DRAW_ARB</name></cpp:macro> <cpp:value>0x88E8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_READ_ARB</name></cpp:macro> <cpp:value>0x88E9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_COPY_ARB</name></cpp:macro> <cpp:value>0x88EA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_SUM_ARB</name></cpp:macro> <cpp:value>0x8458</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_ARB</name></cpp:macro> <cpp:value>0x8620</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB</name></cpp:macro> <cpp:value>0x8622</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB</name></cpp:macro> <cpp:value>0x8623</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB</name></cpp:macro> <cpp:value>0x8624</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB</name></cpp:macro> <cpp:value>0x8625</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_VERTEX_ATTRIB_ARB</name></cpp:macro> <cpp:value>0x8626</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_POINT_SIZE_ARB</name></cpp:macro> <cpp:value>0x8642</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_PROGRAM_TWO_SIDE_ARB</name></cpp:macro> <cpp:value>0x8643</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB</name></cpp:macro> <cpp:value>0x8645</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_ATTRIBS_ARB</name></cpp:macro> <cpp:value>0x8869</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB</name></cpp:macro> <cpp:value>0x886A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_ADDRESS_REGISTERS_ARB</name></cpp:macro> <cpp:value>0x88B0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB</name></cpp:macro> <cpp:value>0x88B1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB</name></cpp:macro> <cpp:value>0x88B2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB</name></cpp:macro> <cpp:value>0x88B3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_ARB</name></cpp:macro> <cpp:value>0x8B31</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB</name></cpp:macro> <cpp:value>0x8B4A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VARYING_FLOATS_ARB</name></cpp:macro> <cpp:value>0x8B4B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB</name></cpp:macro> <cpp:value>0x8B4C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB</name></cpp:macro> <cpp:value>0x8B4D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_ACTIVE_ATTRIBUTES_ARB</name></cpp:macro> <cpp:value>0x8B89</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB</name></cpp:macro> <cpp:value>0x8B8A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC2_ARB</name></cpp:macro> <cpp:value>0x8B50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC3_ARB</name></cpp:macro> <cpp:value>0x8B51</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC4_ARB</name></cpp:macro> <cpp:value>0x8B52</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT2_ARB</name></cpp:macro> <cpp:value>0x8B5A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT3_ARB</name></cpp:macro> <cpp:value>0x8B5B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT4_ARB</name></cpp:macro> <cpp:value>0x8B5C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_ATI</name></cpp:macro> <cpp:value>0x8768</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_TYPE_ATI</name></cpp:macro> <cpp:value>0x8769</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_POINTER_ATI</name></cpp:macro> <cpp:value>0x876A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SHADER_ATI</name></cpp:macro> <cpp:value>0x8920</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_0_ATI</name></cpp:macro> <cpp:value>0x8921</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_1_ATI</name></cpp:macro> <cpp:value>0x8922</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_2_ATI</name></cpp:macro> <cpp:value>0x8923</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_3_ATI</name></cpp:macro> <cpp:value>0x8924</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_4_ATI</name></cpp:macro> <cpp:value>0x8925</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_5_ATI</name></cpp:macro> <cpp:value>0x8926</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_6_ATI</name></cpp:macro> <cpp:value>0x8927</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_7_ATI</name></cpp:macro> <cpp:value>0x8928</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_8_ATI</name></cpp:macro> <cpp:value>0x8929</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_9_ATI</name></cpp:macro> <cpp:value>0x892A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_10_ATI</name></cpp:macro> <cpp:value>0x892B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_11_ATI</name></cpp:macro> <cpp:value>0x892C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_12_ATI</name></cpp:macro> <cpp:value>0x892D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_13_ATI</name></cpp:macro> <cpp:value>0x892E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_14_ATI</name></cpp:macro> <cpp:value>0x892F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_15_ATI</name></cpp:macro> <cpp:value>0x8930</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_16_ATI</name></cpp:macro> <cpp:value>0x8931</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_17_ATI</name></cpp:macro> <cpp:value>0x8932</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_18_ATI</name></cpp:macro> <cpp:value>0x8933</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_19_ATI</name></cpp:macro> <cpp:value>0x8934</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_20_ATI</name></cpp:macro> <cpp:value>0x8935</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_21_ATI</name></cpp:macro> <cpp:value>0x8936</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_22_ATI</name></cpp:macro> <cpp:value>0x8937</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_23_ATI</name></cpp:macro> <cpp:value>0x8938</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_24_ATI</name></cpp:macro> <cpp:value>0x8939</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_25_ATI</name></cpp:macro> <cpp:value>0x893A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_26_ATI</name></cpp:macro> <cpp:value>0x893B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_27_ATI</name></cpp:macro> <cpp:value>0x893C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_28_ATI</name></cpp:macro> <cpp:value>0x893D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_29_ATI</name></cpp:macro> <cpp:value>0x893E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_30_ATI</name></cpp:macro> <cpp:value>0x893F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REG_31_ATI</name></cpp:macro> <cpp:value>0x8940</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_0_ATI</name></cpp:macro> <cpp:value>0x8941</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_1_ATI</name></cpp:macro> <cpp:value>0x8942</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_2_ATI</name></cpp:macro> <cpp:value>0x8943</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_3_ATI</name></cpp:macro> <cpp:value>0x8944</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_4_ATI</name></cpp:macro> <cpp:value>0x8945</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_5_ATI</name></cpp:macro> <cpp:value>0x8946</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_6_ATI</name></cpp:macro> <cpp:value>0x8947</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_7_ATI</name></cpp:macro> <cpp:value>0x8948</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_8_ATI</name></cpp:macro> <cpp:value>0x8949</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_9_ATI</name></cpp:macro> <cpp:value>0x894A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_10_ATI</name></cpp:macro> <cpp:value>0x894B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_11_ATI</name></cpp:macro> <cpp:value>0x894C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_12_ATI</name></cpp:macro> <cpp:value>0x894D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_13_ATI</name></cpp:macro> <cpp:value>0x894E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_14_ATI</name></cpp:macro> <cpp:value>0x894F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_15_ATI</name></cpp:macro> <cpp:value>0x8950</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_16_ATI</name></cpp:macro> <cpp:value>0x8951</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_17_ATI</name></cpp:macro> <cpp:value>0x8952</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_18_ATI</name></cpp:macro> <cpp:value>0x8953</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_19_ATI</name></cpp:macro> <cpp:value>0x8954</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_20_ATI</name></cpp:macro> <cpp:value>0x8955</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_21_ATI</name></cpp:macro> <cpp:value>0x8956</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_22_ATI</name></cpp:macro> <cpp:value>0x8957</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_23_ATI</name></cpp:macro> <cpp:value>0x8958</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_24_ATI</name></cpp:macro> <cpp:value>0x8959</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_25_ATI</name></cpp:macro> <cpp:value>0x895A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_26_ATI</name></cpp:macro> <cpp:value>0x895B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_27_ATI</name></cpp:macro> <cpp:value>0x895C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_28_ATI</name></cpp:macro> <cpp:value>0x895D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_29_ATI</name></cpp:macro> <cpp:value>0x895E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_30_ATI</name></cpp:macro> <cpp:value>0x895F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CON_31_ATI</name></cpp:macro> <cpp:value>0x8960</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MOV_ATI</name></cpp:macro> <cpp:value>0x8961</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ADD_ATI</name></cpp:macro> <cpp:value>0x8963</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MUL_ATI</name></cpp:macro> <cpp:value>0x8964</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUB_ATI</name></cpp:macro> <cpp:value>0x8965</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT3_ATI</name></cpp:macro> <cpp:value>0x8966</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT4_ATI</name></cpp:macro> <cpp:value>0x8967</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAD_ATI</name></cpp:macro> <cpp:value>0x8968</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LERP_ATI</name></cpp:macro> <cpp:value>0x8969</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CND_ATI</name></cpp:macro> <cpp:value>0x896A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CND0_ATI</name></cpp:macro> <cpp:value>0x896B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DOT2_ADD_ATI</name></cpp:macro> <cpp:value>0x896C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SECONDARY_INTERPOLATOR_ATI</name></cpp:macro> <cpp:value>0x896D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_FRAGMENT_REGISTERS_ATI</name></cpp:macro> <cpp:value>0x896E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_FRAGMENT_CONSTANTS_ATI</name></cpp:macro> <cpp:value>0x896F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_PASSES_ATI</name></cpp:macro> <cpp:value>0x8970</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_INSTRUCTIONS_PER_PASS_ATI</name></cpp:macro> <cpp:value>0x8971</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_INSTRUCTIONS_TOTAL_ATI</name></cpp:macro> <cpp:value>0x8972</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI</name></cpp:macro> <cpp:value>0x8973</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_LOOPBACK_COMPONENTS_ATI</name></cpp:macro> <cpp:value>0x8974</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ALPHA_PAIRING_ATI</name></cpp:macro> <cpp:value>0x8975</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SWIZZLE_STR_ATI</name></cpp:macro> <cpp:value>0x8976</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SWIZZLE_STQ_ATI</name></cpp:macro> <cpp:value>0x8977</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SWIZZLE_STR_DR_ATI</name></cpp:macro> <cpp:value>0x8978</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SWIZZLE_STQ_DQ_ATI</name></cpp:macro> <cpp:value>0x8979</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SWIZZLE_STRQ_ATI</name></cpp:macro> <cpp:value>0x897A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SWIZZLE_STRQ_DQ_ATI</name></cpp:macro> <cpp:value>0x897B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED_BIT_ATI</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREEN_BIT_ATI</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLUE_BIT_ATI</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_2X_BIT_ATI</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_4X_BIT_ATI</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_8X_BIT_ATI</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HALF_BIT_ATI</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUARTER_BIT_ATI</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EIGHTH_BIT_ATI</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SATURATE_BIT_ATI</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMP_BIT_ATI</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEGATE_BIT_ATI</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BIAS_BIT_ATI</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_ATI</name></cpp:macro> <cpp:value>0x8760</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_ATI</name></cpp:macro> <cpp:value>0x8761</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRESERVE_ATI</name></cpp:macro> <cpp:value>0x8762</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DISCARD_ATI</name></cpp:macro> <cpp:value>0x8763</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_BUFFER_SIZE_ATI</name></cpp:macro> <cpp:value>0x8764</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_BUFFER_USAGE_ATI</name></cpp:macro> <cpp:value>0x8765</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_OBJECT_BUFFER_ATI</name></cpp:macro> <cpp:value>0x8766</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_OBJECT_OFFSET_ATI</name></cpp:macro> <cpp:value>0x8767</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_COLOR_EXT</name></cpp:macro> <cpp:value>0x8001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_CONSTANT_COLOR_EXT</name></cpp:macro> <cpp:value>0x8002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_CONSTANT_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_COLOR_EXT</name></cpp:macro> <cpp:value>0x8005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_EQUATION_RGB_EXT</name></cpp:macro> <cpp:value>0x8009</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_EQUATION_ALPHA_EXT</name></cpp:macro> <cpp:value>0x883D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_DST_RGB_EXT</name></cpp:macro> <cpp:value>0x80C8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_SRC_RGB_EXT</name></cpp:macro> <cpp:value>0x80C9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_DST_ALPHA_EXT</name></cpp:macro> <cpp:value>0x80CA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_SRC_ALPHA_EXT</name></cpp:macro> <cpp:value>0x80CB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER_EXT</name></cpp:macro> <cpp:value>0x8CA8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER_EXT</name></cpp:macro> <cpp:value>0x8CA9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER_BINDING_EXT</name></cpp:macro> <cpp:value>0x8CA6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER_BINDING_EXT</name></cpp:macro> <cpp:value>0x8CAA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_SAMPLES_EXT</name></cpp:macro> <cpp:value>0x8CAB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT</name></cpp:macro> <cpp:value>0x8D56</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SAMPLES_EXT</name></cpp:macro> <cpp:value>0x8D57</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCALED_RESOLVE_FASTEST_EXT</name></cpp:macro> <cpp:value>0x90BA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCALED_RESOLVE_NICEST_EXT</name></cpp:macro> <cpp:value>0x90BB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_FRAMEBUFFER_OPERATION_EXT</name></cpp:macro> <cpp:value>0x0506</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_RENDERBUFFER_SIZE_EXT</name></cpp:macro> <cpp:value>0x84E8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_BINDING_EXT</name></cpp:macro> <cpp:value>0x8CA6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_BINDING_EXT</name></cpp:macro> <cpp:value>0x8CA7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT</name></cpp:macro> <cpp:value>0x8CD0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT</name></cpp:macro> <cpp:value>0x8CD1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT</name></cpp:macro> <cpp:value>0x8CD2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT</name></cpp:macro> <cpp:value>0x8CD3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT</name></cpp:macro> <cpp:value>0x8CD4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_COMPLETE_EXT</name></cpp:macro> <cpp:value>0x8CD5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT</name></cpp:macro> <cpp:value>0x8CD6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT</name></cpp:macro> <cpp:value>0x8CD7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT</name></cpp:macro> <cpp:value>0x8CD9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT</name></cpp:macro> <cpp:value>0x8CDA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT</name></cpp:macro> <cpp:value>0x8CDB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT</name></cpp:macro> <cpp:value>0x8CDC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_UNSUPPORTED_EXT</name></cpp:macro> <cpp:value>0x8CDD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COLOR_ATTACHMENTS_EXT</name></cpp:macro> <cpp:value>0x8CDF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT0_EXT</name></cpp:macro> <cpp:value>0x8CE0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT1_EXT</name></cpp:macro> <cpp:value>0x8CE1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT2_EXT</name></cpp:macro> <cpp:value>0x8CE2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT3_EXT</name></cpp:macro> <cpp:value>0x8CE3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT4_EXT</name></cpp:macro> <cpp:value>0x8CE4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT5_EXT</name></cpp:macro> <cpp:value>0x8CE5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT6_EXT</name></cpp:macro> <cpp:value>0x8CE6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT7_EXT</name></cpp:macro> <cpp:value>0x8CE7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT8_EXT</name></cpp:macro> <cpp:value>0x8CE8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT9_EXT</name></cpp:macro> <cpp:value>0x8CE9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT10_EXT</name></cpp:macro> <cpp:value>0x8CEA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT11_EXT</name></cpp:macro> <cpp:value>0x8CEB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT12_EXT</name></cpp:macro> <cpp:value>0x8CEC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT13_EXT</name></cpp:macro> <cpp:value>0x8CED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT14_EXT</name></cpp:macro> <cpp:value>0x8CEE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT15_EXT</name></cpp:macro> <cpp:value>0x8CEF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_ATTACHMENT_EXT</name></cpp:macro> <cpp:value>0x8D00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_ATTACHMENT_EXT</name></cpp:macro> <cpp:value>0x8D20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_EXT</name></cpp:macro> <cpp:value>0x8D40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_EXT</name></cpp:macro> <cpp:value>0x8D41</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_WIDTH_EXT</name></cpp:macro> <cpp:value>0x8D42</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_HEIGHT_EXT</name></cpp:macro> <cpp:value>0x8D43</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_INTERNAL_FORMAT_EXT</name></cpp:macro> <cpp:value>0x8D44</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX1_EXT</name></cpp:macro> <cpp:value>0x8D46</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX4_EXT</name></cpp:macro> <cpp:value>0x8D47</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX8_EXT</name></cpp:macro> <cpp:value>0x8D48</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX16_EXT</name></cpp:macro> <cpp:value>0x8D49</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_RED_SIZE_EXT</name></cpp:macro> <cpp:value>0x8D50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_GREEN_SIZE_EXT</name></cpp:macro> <cpp:value>0x8D51</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_BLUE_SIZE_EXT</name></cpp:macro> <cpp:value>0x8D52</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_ALPHA_SIZE_EXT</name></cpp:macro> <cpp:value>0x8D53</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_DEPTH_SIZE_EXT</name></cpp:macro> <cpp:value>0x8D54</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_STENCIL_SIZE_EXT</name></cpp:macro> <cpp:value>0x8D55</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_SRGB_EXT</name></cpp:macro> <cpp:value>0x8DB9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_SRGB_CAPABLE_EXT</name></cpp:macro> <cpp:value>0x8DBA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IUI_V2F_EXT</name></cpp:macro> <cpp:value>0x81AD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IUI_V3F_EXT</name></cpp:macro> <cpp:value>0x81AE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IUI_N3F_V2F_EXT</name></cpp:macro> <cpp:value>0x81AF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IUI_N3F_V3F_EXT</name></cpp:macro> <cpp:value>0x81B0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_T2F_IUI_V2F_EXT</name></cpp:macro> <cpp:value>0x81B1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_T2F_IUI_V3F_EXT</name></cpp:macro> <cpp:value>0x81B2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_T2F_IUI_N3F_V2F_EXT</name></cpp:macro> <cpp:value>0x81B3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_T2F_IUI_N3F_V3F_EXT</name></cpp:macro> <cpp:value>0x81B4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA4_EXT</name></cpp:macro> <cpp:value>0x803B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA8_EXT</name></cpp:macro> <cpp:value>0x803C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA12_EXT</name></cpp:macro> <cpp:value>0x803D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA16_EXT</name></cpp:macro> <cpp:value>0x803E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE4_EXT</name></cpp:macro> <cpp:value>0x803F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE8_EXT</name></cpp:macro> <cpp:value>0x8040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE12_EXT</name></cpp:macro> <cpp:value>0x8041</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE16_EXT</name></cpp:macro> <cpp:value>0x8042</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE4_ALPHA4_EXT</name></cpp:macro> <cpp:value>0x8043</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE6_ALPHA2_EXT</name></cpp:macro> <cpp:value>0x8044</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE8_ALPHA8_EXT</name></cpp:macro> <cpp:value>0x8045</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE12_ALPHA4_EXT</name></cpp:macro> <cpp:value>0x8046</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE12_ALPHA12_EXT</name></cpp:macro> <cpp:value>0x8047</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE16_ALPHA16_EXT</name></cpp:macro> <cpp:value>0x8048</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY_EXT</name></cpp:macro> <cpp:value>0x8049</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY4_EXT</name></cpp:macro> <cpp:value>0x804A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY8_EXT</name></cpp:macro> <cpp:value>0x804B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY12_EXT</name></cpp:macro> <cpp:value>0x804C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTENSITY16_EXT</name></cpp:macro> <cpp:value>0x804D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB2_EXT</name></cpp:macro> <cpp:value>0x804E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB4_EXT</name></cpp:macro> <cpp:value>0x804F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB5_EXT</name></cpp:macro> <cpp:value>0x8050</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8_EXT</name></cpp:macro> <cpp:value>0x8051</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB10_EXT</name></cpp:macro> <cpp:value>0x8052</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB12_EXT</name></cpp:macro> <cpp:value>0x8053</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16_EXT</name></cpp:macro> <cpp:value>0x8054</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA2_EXT</name></cpp:macro> <cpp:value>0x8055</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA4_EXT</name></cpp:macro> <cpp:value>0x8056</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB5_A1_EXT</name></cpp:macro> <cpp:value>0x8057</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8_EXT</name></cpp:macro> <cpp:value>0x8058</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB10_A2_EXT</name></cpp:macro> <cpp:value>0x8059</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA12_EXT</name></cpp:macro> <cpp:value>0x805A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16_EXT</name></cpp:macro> <cpp:value>0x805B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_RED_SIZE_EXT</name></cpp:macro> <cpp:value>0x805C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_GREEN_SIZE_EXT</name></cpp:macro> <cpp:value>0x805D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BLUE_SIZE_EXT</name></cpp:macro> <cpp:value>0x805E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_ALPHA_SIZE_EXT</name></cpp:macro> <cpp:value>0x805F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_LUMINANCE_SIZE_EXT</name></cpp:macro> <cpp:value>0x8060</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_INTENSITY_SIZE_EXT</name></cpp:macro> <cpp:value>0x8061</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLACE_EXT</name></cpp:macro> <cpp:value>0x8062</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_1D_EXT</name></cpp:macro> <cpp:value>0x8063</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROXY_TEXTURE_2D_EXT</name></cpp:macro> <cpp:value>0x8064</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_TOO_LARGE_EXT</name></cpp:macro> <cpp:value>0x8065</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB_S3TC_DXT1_EXT</name></cpp:macro> <cpp:value>0x83F0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_S3TC_DXT1_EXT</name></cpp:macro> <cpp:value>0x83F1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_S3TC_DXT3_EXT</name></cpp:macro> <cpp:value>0x83F2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_S3TC_DXT5_EXT</name></cpp:macro> <cpp:value>0x83F3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB_EXT</name></cpp:macro> <cpp:value>0x8C40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB8_EXT</name></cpp:macro> <cpp:value>0x8C41</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8C42</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB8_ALPHA8_EXT</name></cpp:macro> <cpp:value>0x8C43</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8C44</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE8_ALPHA8_EXT</name></cpp:macro> <cpp:value>0x8C45</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE_EXT</name></cpp:macro> <cpp:value>0x8C46</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE8_EXT</name></cpp:macro> <cpp:value>0x8C47</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_EXT</name></cpp:macro> <cpp:value>0x8C48</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8C49</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SLUMINANCE_EXT</name></cpp:macro> <cpp:value>0x8C4A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SLUMINANCE_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8C4B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_S3TC_DXT1_EXT</name></cpp:macro> <cpp:value>0x8C4C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT</name></cpp:macro> <cpp:value>0x8C4D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT</name></cpp:macro> <cpp:value>0x8C4E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT</name></cpp:macro> <cpp:value>0x8C4F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_R_EXT</name></cpp:macro> <cpp:value>0x8E42</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_G_EXT</name></cpp:macro> <cpp:value>0x8E43</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_B_EXT</name></cpp:macro> <cpp:value>0x8E44</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_A_EXT</name></cpp:macro> <cpp:value>0x8E45</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_RGBA_EXT</name></cpp:macro> <cpp:value>0x8E46</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8074</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8075</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8076</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8077</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8078</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_EXT</name></cpp:macro> <cpp:value>0x8079</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_SIZE_EXT</name></cpp:macro> <cpp:value>0x807A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x807B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x807C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_COUNT_EXT</name></cpp:macro> <cpp:value>0x807D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x807E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x807F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_COUNT_EXT</name></cpp:macro> <cpp:value>0x8080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_SIZE_EXT</name></cpp:macro> <cpp:value>0x8081</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x8082</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x8083</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_COUNT_EXT</name></cpp:macro> <cpp:value>0x8084</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x8085</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x8086</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_COUNT_EXT</name></cpp:macro> <cpp:value>0x8087</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_SIZE_EXT</name></cpp:macro> <cpp:value>0x8088</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x8089</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x808A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_COUNT_EXT</name></cpp:macro> <cpp:value>0x808B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x808C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_COUNT_EXT</name></cpp:macro> <cpp:value>0x808D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x808E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMAL_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x808F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x8090</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INDEX_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x8091</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COORD_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x8092</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EDGE_FLAG_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x8093</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_EXT</name></cpp:macro> <cpp:value>0x8780</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_BINDING_EXT</name></cpp:macro> <cpp:value>0x8781</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_INDEX_EXT</name></cpp:macro> <cpp:value>0x8782</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_NEGATE_EXT</name></cpp:macro> <cpp:value>0x8783</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_DOT3_EXT</name></cpp:macro> <cpp:value>0x8784</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_DOT4_EXT</name></cpp:macro> <cpp:value>0x8785</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_MUL_EXT</name></cpp:macro> <cpp:value>0x8786</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_ADD_EXT</name></cpp:macro> <cpp:value>0x8787</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_MADD_EXT</name></cpp:macro> <cpp:value>0x8788</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_FRAC_EXT</name></cpp:macro> <cpp:value>0x8789</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_MAX_EXT</name></cpp:macro> <cpp:value>0x878A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_MIN_EXT</name></cpp:macro> <cpp:value>0x878B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_SET_GE_EXT</name></cpp:macro> <cpp:value>0x878C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_SET_LT_EXT</name></cpp:macro> <cpp:value>0x878D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_CLAMP_EXT</name></cpp:macro> <cpp:value>0x878E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_FLOOR_EXT</name></cpp:macro> <cpp:value>0x878F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_ROUND_EXT</name></cpp:macro> <cpp:value>0x8790</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_EXP_BASE_2_EXT</name></cpp:macro> <cpp:value>0x8791</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_LOG_BASE_2_EXT</name></cpp:macro> <cpp:value>0x8792</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_POWER_EXT</name></cpp:macro> <cpp:value>0x8793</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_RECIP_EXT</name></cpp:macro> <cpp:value>0x8794</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_RECIP_SQRT_EXT</name></cpp:macro> <cpp:value>0x8795</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_SUB_EXT</name></cpp:macro> <cpp:value>0x8796</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_CROSS_PRODUCT_EXT</name></cpp:macro> <cpp:value>0x8797</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_MULTIPLY_MATRIX_EXT</name></cpp:macro> <cpp:value>0x8798</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OP_MOV_EXT</name></cpp:macro> <cpp:value>0x8799</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_VERTEX_EXT</name></cpp:macro> <cpp:value>0x879A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_COLOR0_EXT</name></cpp:macro> <cpp:value>0x879B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_COLOR1_EXT</name></cpp:macro> <cpp:value>0x879C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD0_EXT</name></cpp:macro> <cpp:value>0x879D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD1_EXT</name></cpp:macro> <cpp:value>0x879E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD2_EXT</name></cpp:macro> <cpp:value>0x879F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD3_EXT</name></cpp:macro> <cpp:value>0x87A0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD4_EXT</name></cpp:macro> <cpp:value>0x87A1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD5_EXT</name></cpp:macro> <cpp:value>0x87A2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD6_EXT</name></cpp:macro> <cpp:value>0x87A3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD7_EXT</name></cpp:macro> <cpp:value>0x87A4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD8_EXT</name></cpp:macro> <cpp:value>0x87A5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD9_EXT</name></cpp:macro> <cpp:value>0x87A6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD10_EXT</name></cpp:macro> <cpp:value>0x87A7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD11_EXT</name></cpp:macro> <cpp:value>0x87A8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD12_EXT</name></cpp:macro> <cpp:value>0x87A9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD13_EXT</name></cpp:macro> <cpp:value>0x87AA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD14_EXT</name></cpp:macro> <cpp:value>0x87AB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD15_EXT</name></cpp:macro> <cpp:value>0x87AC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD16_EXT</name></cpp:macro> <cpp:value>0x87AD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD17_EXT</name></cpp:macro> <cpp:value>0x87AE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD18_EXT</name></cpp:macro> <cpp:value>0x87AF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD19_EXT</name></cpp:macro> <cpp:value>0x87B0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD20_EXT</name></cpp:macro> <cpp:value>0x87B1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD21_EXT</name></cpp:macro> <cpp:value>0x87B2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD22_EXT</name></cpp:macro> <cpp:value>0x87B3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD23_EXT</name></cpp:macro> <cpp:value>0x87B4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD24_EXT</name></cpp:macro> <cpp:value>0x87B5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD25_EXT</name></cpp:macro> <cpp:value>0x87B6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD26_EXT</name></cpp:macro> <cpp:value>0x87B7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD27_EXT</name></cpp:macro> <cpp:value>0x87B8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD28_EXT</name></cpp:macro> <cpp:value>0x87B9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD29_EXT</name></cpp:macro> <cpp:value>0x87BA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD30_EXT</name></cpp:macro> <cpp:value>0x87BB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_TEXTURE_COORD31_EXT</name></cpp:macro> <cpp:value>0x87BC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUTPUT_FOG_EXT</name></cpp:macro> <cpp:value>0x87BD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCALAR_EXT</name></cpp:macro> <cpp:value>0x87BE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VECTOR_EXT</name></cpp:macro> <cpp:value>0x87BF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MATRIX_EXT</name></cpp:macro> <cpp:value>0x87C0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIANT_EXT</name></cpp:macro> <cpp:value>0x87C1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVARIANT_EXT</name></cpp:macro> <cpp:value>0x87C2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOCAL_CONSTANT_EXT</name></cpp:macro> <cpp:value>0x87C3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOCAL_EXT</name></cpp:macro> <cpp:value>0x87C4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT</name></cpp:macro> <cpp:value>0x87C5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_SHADER_VARIANTS_EXT</name></cpp:macro> <cpp:value>0x87C6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_SHADER_INVARIANTS_EXT</name></cpp:macro> <cpp:value>0x87C7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT</name></cpp:macro> <cpp:value>0x87C8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_SHADER_LOCALS_EXT</name></cpp:macro> <cpp:value>0x87C9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT</name></cpp:macro> <cpp:value>0x87CA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT</name></cpp:macro> <cpp:value>0x87CB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT</name></cpp:macro> <cpp:value>0x87CC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT</name></cpp:macro> <cpp:value>0x87CD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT</name></cpp:macro> <cpp:value>0x87CE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_INSTRUCTIONS_EXT</name></cpp:macro> <cpp:value>0x87CF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_VARIANTS_EXT</name></cpp:macro> <cpp:value>0x87D0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_INVARIANTS_EXT</name></cpp:macro> <cpp:value>0x87D1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT</name></cpp:macro> <cpp:value>0x87D2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_LOCALS_EXT</name></cpp:macro> <cpp:value>0x87D3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_OPTIMIZED_EXT</name></cpp:macro> <cpp:value>0x87D4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_X_EXT</name></cpp:macro> <cpp:value>0x87D5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_Y_EXT</name></cpp:macro> <cpp:value>0x87D6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_Z_EXT</name></cpp:macro> <cpp:value>0x87D7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_W_EXT</name></cpp:macro> <cpp:value>0x87D8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEGATIVE_X_EXT</name></cpp:macro> <cpp:value>0x87D9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEGATIVE_Y_EXT</name></cpp:macro> <cpp:value>0x87DA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEGATIVE_Z_EXT</name></cpp:macro> <cpp:value>0x87DB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEGATIVE_W_EXT</name></cpp:macro> <cpp:value>0x87DC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ZERO_EXT</name></cpp:macro> <cpp:value>0x87DD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_EXT</name></cpp:macro> <cpp:value>0x87DE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEGATIVE_ONE_EXT</name></cpp:macro> <cpp:value>0x87DF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NORMALIZED_RANGE_EXT</name></cpp:macro> <cpp:value>0x87E0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FULL_RANGE_EXT</name></cpp:macro> <cpp:value>0x87E1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_VERTEX_EXT</name></cpp:macro> <cpp:value>0x87E2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MVP_MATRIX_EXT</name></cpp:macro> <cpp:value>0x87E3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIANT_VALUE_EXT</name></cpp:macro> <cpp:value>0x87E4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIANT_DATATYPE_EXT</name></cpp:macro> <cpp:value>0x87E5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIANT_ARRAY_STRIDE_EXT</name></cpp:macro> <cpp:value>0x87E6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIANT_ARRAY_TYPE_EXT</name></cpp:macro> <cpp:value>0x87E7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIANT_ARRAY_EXT</name></cpp:macro> <cpp:value>0x87E8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VARIANT_ARRAY_POINTER_EXT</name></cpp:macro> <cpp:value>0x87E9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVARIANT_VALUE_EXT</name></cpp:macro> <cpp:value>0x87EA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVARIANT_DATATYPE_EXT</name></cpp:macro> <cpp:value>0x87EB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOCAL_CONSTANT_VALUE_EXT</name></cpp:macro> <cpp:value>0x87EC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOCAL_CONSTANT_DATATYPE_EXT</name></cpp:macro> <cpp:value>0x87ED</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_debug_output</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_debug_output</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_debug_output</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEBUGMESSAGEENABLEAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>category</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>ids</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEBUGMESSAGEENABLEAMDPROC</name></type> <name>glad_glDebugMessageEnableAMD</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDebugMessageEnableAMD</name></cpp:macro> <cpp:value>glad_glDebugMessageEnableAMD</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEBUGMESSAGEINSERTAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>category</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEBUGMESSAGEINSERTAMDPROC</name></type> <name>glad_glDebugMessageInsertAMD</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDebugMessageInsertAMD</name></cpp:macro> <cpp:value>glad_glDebugMessageInsertAMD</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEBUGMESSAGECALLBACKAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLDEBUGPROCAMD</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userParam</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEBUGMESSAGECALLBACKAMDPROC</name></type> <name>glad_glDebugMessageCallbackAMD</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDebugMessageCallbackAMD</name></cpp:macro> <cpp:value>glad_glDebugMessageCallbackAMD</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETDEBUGMESSAGELOGAMDPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type> <name>categories</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>severities</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>ids</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>lengths</name></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type> <name>message</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETDEBUGMESSAGELOGAMDPROC</name></type> <name>glad_glGetDebugMessageLogAMD</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetDebugMessageLogAMD</name></cpp:macro> <cpp:value>glad_glGetDebugMessageLogAMD</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_query_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_query_buffer_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_AMD_query_buffer_object</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_ES2_compatibility</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_ES2_compatibility</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_ES2_compatibility</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRELEASESHADERCOMPILERPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRELEASESHADERCOMPILERPROC</name></type> <name>glad_glReleaseShaderCompiler</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glReleaseShaderCompiler</name></cpp:macro> <cpp:value>glad_glReleaseShaderCompiler</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSHADERBINARYPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>shaders</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>binaryformat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>binary</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSHADERBINARYPROC</name></type> <name>glad_glShaderBinary</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glShaderBinary</name></cpp:macro> <cpp:value>glad_glShaderBinary</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETSHADERPRECISIONFORMATPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>shadertype</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>precisiontype</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>precision</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETSHADERPRECISIONFORMATPROC</name></type> <name>glad_glGetShaderPrecisionFormat</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetShaderPrecisionFormat</name></cpp:macro> <cpp:value>glad_glGetShaderPrecisionFormat</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEPTHRANGEFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEPTHRANGEFPROC</name></type> <name>glad_glDepthRangef</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDepthRangef</name></cpp:macro> <cpp:value>glad_glDepthRangef</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCLEARDEPTHFPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCLEARDEPTHFPROC</name></type> <name>glad_glClearDepthf</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearDepthf</name></cpp:macro> <cpp:value>glad_glClearDepthf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_ES3_compatibility</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_ES3_compatibility</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_ES3_compatibility</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_buffer_storage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_buffer_storage</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_buffer_storage</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBUFFERSTORAGEPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBUFFERSTORAGEPROC</name></type> <name>glad_glBufferStorage</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBufferStorage</name></cpp:macro> <cpp:value>glad_glBufferStorage</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_compatibility</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_compatibility</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_compatibility</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_compressed_texture_pixel_storage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_compressed_texture_pixel_storage</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_compressed_texture_pixel_storage</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_debug_output</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_debug_output</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_debug_output</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEBUGMESSAGECONTROLARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>ids</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEBUGMESSAGECONTROLARBPROC</name></type> <name>glad_glDebugMessageControlARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDebugMessageControlARB</name></cpp:macro> <cpp:value>glad_glDebugMessageControlARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEBUGMESSAGEINSERTARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEBUGMESSAGEINSERTARBPROC</name></type> <name>glad_glDebugMessageInsertARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDebugMessageInsertARB</name></cpp:macro> <cpp:value>glad_glDebugMessageInsertARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDEBUGMESSAGECALLBACKARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLDEBUGPROCARB</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>userParam</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDEBUGMESSAGECALLBACKARBPROC</name></type> <name>glad_glDebugMessageCallbackARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDebugMessageCallbackARB</name></cpp:macro> <cpp:value>glad_glDebugMessageCallbackARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETDEBUGMESSAGELOGARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type> <name>sources</name></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type> <name>types</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>ids</name></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type> <name>severities</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>lengths</name></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type> <name>messageLog</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETDEBUGMESSAGELOGARBPROC</name></type> <name>glad_glGetDebugMessageLogARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetDebugMessageLogARB</name></cpp:macro> <cpp:value>glad_glGetDebugMessageLogARB</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_depth_buffer_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_depth_buffer_float</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_depth_buffer_float</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_depth_clamp</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_depth_clamp</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_depth_clamp</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_depth_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_depth_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_depth_texture</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_draw_buffers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_draw_buffers</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_draw_buffers</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWBUFFERSARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name><modifier>*</modifier></type> <name>bufs</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWBUFFERSARBPROC</name></type> <name>glad_glDrawBuffersARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawBuffersARB</name></cpp:macro> <cpp:value>glad_glDrawBuffersARB</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_draw_buffers_blend</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_draw_buffers_blend</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_draw_buffers_blend</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDEQUATIONIARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDEQUATIONIARBPROC</name></type> <name>glad_glBlendEquationiARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendEquationiARB</name></cpp:macro> <cpp:value>glad_glBlendEquationiARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDEQUATIONSEPARATEIARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>modeRGB</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>modeAlpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDEQUATIONSEPARATEIARBPROC</name></type> <name>glad_glBlendEquationSeparateiARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendEquationSeparateiARB</name></cpp:macro> <cpp:value>glad_glBlendEquationSeparateiARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDFUNCIARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>dst</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDFUNCIARBPROC</name></type> <name>glad_glBlendFunciARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendFunciARB</name></cpp:macro> <cpp:value>glad_glBlendFunciARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDFUNCSEPARATEIARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>srcRGB</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>dstRGB</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>srcAlpha</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>dstAlpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDFUNCSEPARATEIARBPROC</name></type> <name>glad_glBlendFuncSeparateiARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendFuncSeparateiARB</name></cpp:macro> <cpp:value>glad_glBlendFuncSeparateiARB</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_explicit_attrib_location</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_explicit_attrib_location</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_explicit_attrib_location</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_explicit_uniform_location</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_explicit_uniform_location</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_explicit_uniform_location</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_fragment_program</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_fragment_program</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_fragment_program</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMSTRINGARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>string</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMSTRINGARBPROC</name></type> <name>glad_glProgramStringARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramStringARB</name></cpp:macro> <cpp:value>glad_glProgramStringARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDPROGRAMARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDPROGRAMARBPROC</name></type> <name>glad_glBindProgramARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindProgramARB</name></cpp:macro> <cpp:value>glad_glBindProgramARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEPROGRAMSARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>programs</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEPROGRAMSARBPROC</name></type> <name>glad_glDeleteProgramsARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteProgramsARB</name></cpp:macro> <cpp:value>glad_glDeleteProgramsARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENPROGRAMSARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>programs</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENPROGRAMSARBPROC</name></type> <name>glad_glGenProgramsARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenProgramsARB</name></cpp:macro> <cpp:value>glad_glGenProgramsARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMENVPARAMETER4DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMENVPARAMETER4DARBPROC</name></type> <name>glad_glProgramEnvParameter4dARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramEnvParameter4dARB</name></cpp:macro> <cpp:value>glad_glProgramEnvParameter4dARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMENVPARAMETER4DVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMENVPARAMETER4DVARBPROC</name></type> <name>glad_glProgramEnvParameter4dvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramEnvParameter4dvARB</name></cpp:macro> <cpp:value>glad_glProgramEnvParameter4dvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMENVPARAMETER4FARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMENVPARAMETER4FARBPROC</name></type> <name>glad_glProgramEnvParameter4fARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramEnvParameter4fARB</name></cpp:macro> <cpp:value>glad_glProgramEnvParameter4fARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMENVPARAMETER4FVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMENVPARAMETER4FVARBPROC</name></type> <name>glad_glProgramEnvParameter4fvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramEnvParameter4fvARB</name></cpp:macro> <cpp:value>glad_glProgramEnvParameter4fvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMLOCALPARAMETER4DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMLOCALPARAMETER4DARBPROC</name></type> <name>glad_glProgramLocalParameter4dARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramLocalParameter4dARB</name></cpp:macro> <cpp:value>glad_glProgramLocalParameter4dARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMLOCALPARAMETER4DVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMLOCALPARAMETER4DVARBPROC</name></type> <name>glad_glProgramLocalParameter4dvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramLocalParameter4dvARB</name></cpp:macro> <cpp:value>glad_glProgramLocalParameter4dvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMLOCALPARAMETER4FARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMLOCALPARAMETER4FARBPROC</name></type> <name>glad_glProgramLocalParameter4fARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramLocalParameter4fARB</name></cpp:macro> <cpp:value>glad_glProgramLocalParameter4fARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPROGRAMLOCALPARAMETER4FVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPROGRAMLOCALPARAMETER4FVARBPROC</name></type> <name>glad_glProgramLocalParameter4fvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glProgramLocalParameter4fvARB</name></cpp:macro> <cpp:value>glad_glProgramLocalParameter4fvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMENVPARAMETERDVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMENVPARAMETERDVARBPROC</name></type> <name>glad_glGetProgramEnvParameterdvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramEnvParameterdvARB</name></cpp:macro> <cpp:value>glad_glGetProgramEnvParameterdvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMENVPARAMETERFVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMENVPARAMETERFVARBPROC</name></type> <name>glad_glGetProgramEnvParameterfvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramEnvParameterfvARB</name></cpp:macro> <cpp:value>glad_glGetProgramEnvParameterfvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC</name></type> <name>glad_glGetProgramLocalParameterdvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramLocalParameterdvARB</name></cpp:macro> <cpp:value>glad_glGetProgramLocalParameterdvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC</name></type> <name>glad_glGetProgramLocalParameterfvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramLocalParameterfvARB</name></cpp:macro> <cpp:value>glad_glGetProgramLocalParameterfvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMIVARBPROC</name></type> <name>glad_glGetProgramivARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramivARB</name></cpp:macro> <cpp:value>glad_glGetProgramivARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPROGRAMSTRINGARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>string</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPROGRAMSTRINGARBPROC</name></type> <name>glad_glGetProgramStringARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetProgramStringARB</name></cpp:macro> <cpp:value>glad_glGetProgramStringARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISPROGRAMARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISPROGRAMARBPROC</name></type> <name>glad_glIsProgramARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsProgramARB</name></cpp:macro> <cpp:value>glad_glIsProgramARB</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_fragment_shader</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_fragment_shader</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_fragment_shader</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_framebuffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_framebuffer_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_framebuffer_object</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_framebuffer_sRGB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_framebuffer_sRGB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_framebuffer_sRGB</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_multisample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_multisample</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLECOVERAGEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>invert</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLECOVERAGEARBPROC</name></type> <name>glad_glSampleCoverageARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSampleCoverageARB</name></cpp:macro> <cpp:value>glad_glSampleCoverageARB</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_sample_locations</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_sample_locations</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_sample_locations</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC</name></type> <name>glad_glFramebufferSampleLocationsfvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferSampleLocationsfvARB</name></cpp:macro> <cpp:value>glad_glFramebufferSampleLocationsfvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>framebuffer</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC</name></type> <name>glad_glNamedFramebufferSampleLocationsfvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNamedFramebufferSampleLocationsfvARB</name></cpp:macro> <cpp:value>glad_glNamedFramebufferSampleLocationsfvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLEVALUATEDEPTHVALUESARBPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLEVALUATEDEPTHVALUESARBPROC</name></type> <name>glad_glEvaluateDepthValuesARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEvaluateDepthValuesARB</name></cpp:macro> <cpp:value>glad_glEvaluateDepthValuesARB</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_compression</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_compression</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_compression</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXIMAGE3DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXIMAGE3DARBPROC</name></type> <name>glad_glCompressedTexImage3DARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexImage3DARB</name></cpp:macro> <cpp:value>glad_glCompressedTexImage3DARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXIMAGE2DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXIMAGE2DARBPROC</name></type> <name>glad_glCompressedTexImage2DARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexImage2DARB</name></cpp:macro> <cpp:value>glad_glCompressedTexImage2DARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXIMAGE1DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXIMAGE1DARBPROC</name></type> <name>glad_glCompressedTexImage1DARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexImage1DARB</name></cpp:macro> <cpp:value>glad_glCompressedTexImage1DARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC</name></type> <name>glad_glCompressedTexSubImage3DARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexSubImage3DARB</name></cpp:macro> <cpp:value>glad_glCompressedTexSubImage3DARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC</name></type> <name>glad_glCompressedTexSubImage2DARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexSubImage2DARB</name></cpp:macro> <cpp:value>glad_glCompressedTexSubImage2DARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC</name></type> <name>glad_glCompressedTexSubImage1DARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCompressedTexSubImage1DARB</name></cpp:macro> <cpp:value>glad_glCompressedTexSubImage1DARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETCOMPRESSEDTEXIMAGEARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>img</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETCOMPRESSEDTEXIMAGEARBPROC</name></type> <name>glad_glGetCompressedTexImageARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetCompressedTexImageARB</name></cpp:macro> <cpp:value>glad_glGetCompressedTexImageARB</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_float</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_float</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_multisample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_multisample</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_non_power_of_two</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_non_power_of_two</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_non_power_of_two</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_rg</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_rg</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_rg</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_texture_swizzle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_texture_swizzle</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_texture_swizzle</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_uniform_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_uniform_buffer_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_uniform_buffer_object</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_array_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_vertex_array_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_vertex_array_object</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_attrib_binding</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_vertex_attrib_binding</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_vertex_attrib_binding</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDVERTEXBUFFERPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>bindingindex</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDVERTEXBUFFERPROC</name></type> <name>glad_glBindVertexBuffer</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindVertexBuffer</name></cpp:macro> <cpp:value>glad_glBindVertexBuffer</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBFORMATPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>attribindex</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>relativeoffset</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBFORMATPROC</name></type> <name>glad_glVertexAttribFormat</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribFormat</name></cpp:macro> <cpp:value>glad_glVertexAttribFormat</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBIFORMATPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>attribindex</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>relativeoffset</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBIFORMATPROC</name></type> <name>glad_glVertexAttribIFormat</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribIFormat</name></cpp:macro> <cpp:value>glad_glVertexAttribIFormat</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBLFORMATPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>attribindex</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>relativeoffset</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBLFORMATPROC</name></type> <name>glad_glVertexAttribLFormat</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribLFormat</name></cpp:macro> <cpp:value>glad_glVertexAttribLFormat</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBBINDINGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>attribindex</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>bindingindex</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBBINDINGPROC</name></type> <name>glad_glVertexAttribBinding</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribBinding</name></cpp:macro> <cpp:value>glad_glVertexAttribBinding</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXBINDINGDIVISORPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>bindingindex</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>divisor</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXBINDINGDIVISORPROC</name></type> <name>glad_glVertexBindingDivisor</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexBindingDivisor</name></cpp:macro> <cpp:value>glad_glVertexBindingDivisor</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_buffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_vertex_buffer_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_vertex_buffer_object</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDBUFFERARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDBUFFERARBPROC</name></type> <name>glad_glBindBufferARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindBufferARB</name></cpp:macro> <cpp:value>glad_glBindBufferARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEBUFFERSARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>buffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEBUFFERSARBPROC</name></type> <name>glad_glDeleteBuffersARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteBuffersARB</name></cpp:macro> <cpp:value>glad_glDeleteBuffersARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENBUFFERSARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>buffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENBUFFERSARBPROC</name></type> <name>glad_glGenBuffersARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenBuffersARB</name></cpp:macro> <cpp:value>glad_glGenBuffersARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISBUFFERARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISBUFFERARBPROC</name></type> <name>glad_glIsBufferARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsBufferARB</name></cpp:macro> <cpp:value>glad_glIsBufferARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBUFFERDATAARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptrARB</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>usage</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBUFFERDATAARBPROC</name></type> <name>glad_glBufferDataARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBufferDataARB</name></cpp:macro> <cpp:value>glad_glBufferDataARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBUFFERSUBDATAARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLintptrARB</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptrARB</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBUFFERSUBDATAARBPROC</name></type> <name>glad_glBufferSubDataARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBufferSubDataARB</name></cpp:macro> <cpp:value>glad_glBufferSubDataARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETBUFFERSUBDATAARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLintptrARB</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptrARB</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETBUFFERSUBDATAARBPROC</name></type> <name>glad_glGetBufferSubDataARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBufferSubDataARB</name></cpp:macro> <cpp:value>glad_glGetBufferSubDataARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<name>APIENTRYP</name> <name>PFNGLMAPBUFFERARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>access</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLMAPBUFFERARBPROC</name></type> <name>glad_glMapBufferARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glMapBufferARB</name></cpp:macro> <cpp:value>glad_glMapBufferARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLUNMAPBUFFERARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUNMAPBUFFERARBPROC</name></type> <name>glad_glUnmapBufferARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUnmapBufferARB</name></cpp:macro> <cpp:value>glad_glUnmapBufferARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETBUFFERPARAMETERIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETBUFFERPARAMETERIVARBPROC</name></type> <name>glad_glGetBufferParameterivARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBufferParameterivARB</name></cpp:macro> <cpp:value>glad_glGetBufferParameterivARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETBUFFERPOINTERVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETBUFFERPOINTERVARBPROC</name></type> <name>glad_glGetBufferPointervARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetBufferPointervARB</name></cpp:macro> <cpp:value>glad_glGetBufferPointervARB</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_program</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_vertex_program</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_vertex_program</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1DARBPROC</name></type> <name>glad_glVertexAttrib1dARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1dARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib1dARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1DVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1DVARBPROC</name></type> <name>glad_glVertexAttrib1dvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1dvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib1dvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1FARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1FARBPROC</name></type> <name>glad_glVertexAttrib1fARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1fARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib1fARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1FVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1FVARBPROC</name></type> <name>glad_glVertexAttrib1fvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1fvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib1fvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1SARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1SARBPROC</name></type> <name>glad_glVertexAttrib1sARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1sARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib1sARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB1SVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB1SVARBPROC</name></type> <name>glad_glVertexAttrib1svARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib1svARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib1svARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2DARBPROC</name></type> <name>glad_glVertexAttrib2dARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2dARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib2dARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2DVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2DVARBPROC</name></type> <name>glad_glVertexAttrib2dvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2dvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib2dvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2FARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2FARBPROC</name></type> <name>glad_glVertexAttrib2fARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2fARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib2fARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2FVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2FVARBPROC</name></type> <name>glad_glVertexAttrib2fvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2fvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib2fvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2SARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2SARBPROC</name></type> <name>glad_glVertexAttrib2sARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2sARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib2sARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB2SVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB2SVARBPROC</name></type> <name>glad_glVertexAttrib2svARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib2svARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib2svARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3DARBPROC</name></type> <name>glad_glVertexAttrib3dARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3dARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib3dARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3DVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3DVARBPROC</name></type> <name>glad_glVertexAttrib3dvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3dvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib3dvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3FARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3FARBPROC</name></type> <name>glad_glVertexAttrib3fARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3fARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib3fARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3FVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3FVARBPROC</name></type> <name>glad_glVertexAttrib3fvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3fvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib3fvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3SARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3SARBPROC</name></type> <name>glad_glVertexAttrib3sARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3sARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib3sARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB3SVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB3SVARBPROC</name></type> <name>glad_glVertexAttrib3svARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib3svARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib3svARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NBVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NBVARBPROC</name></type> <name>glad_glVertexAttrib4NbvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4NbvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4NbvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NIVARBPROC</name></type> <name>glad_glVertexAttrib4NivARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4NivARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4NivARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NSVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NSVARBPROC</name></type> <name>glad_glVertexAttrib4NsvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4NsvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4NsvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NUBARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLubyte</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NUBARBPROC</name></type> <name>glad_glVertexAttrib4NubARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4NubARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4NubARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NUBVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NUBVARBPROC</name></type> <name>glad_glVertexAttrib4NubvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4NubvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4NubvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NUIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NUIVARBPROC</name></type> <name>glad_glVertexAttrib4NuivARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4NuivARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4NuivARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4NUSVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLushort</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4NUSVARBPROC</name></type> <name>glad_glVertexAttrib4NusvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4NusvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4NusvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4BVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4BVARBPROC</name></type> <name>glad_glVertexAttrib4bvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4bvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4bvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4DARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4DARBPROC</name></type> <name>glad_glVertexAttrib4dARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4dARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4dARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4DVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4DVARBPROC</name></type> <name>glad_glVertexAttrib4dvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4dvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4dvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4FARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4FARBPROC</name></type> <name>glad_glVertexAttrib4fARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4fARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4fARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4FVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4FVARBPROC</name></type> <name>glad_glVertexAttrib4fvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4fvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4fvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4IVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4IVARBPROC</name></type> <name>glad_glVertexAttrib4ivARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4ivARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4ivARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4SARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLshort</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4SARBPROC</name></type> <name>glad_glVertexAttrib4sARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4sARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4sARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4SVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4SVARBPROC</name></type> <name>glad_glVertexAttrib4svARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4svARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4svARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4UBVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4UBVARBPROC</name></type> <name>glad_glVertexAttrib4ubvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4ubvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4ubvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4UIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4UIVARBPROC</name></type> <name>glad_glVertexAttrib4uivARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4uivARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4uivARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIB4USVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLushort</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIB4USVARBPROC</name></type> <name>glad_glVertexAttrib4usvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttrib4usvARB</name></cpp:macro> <cpp:value>glad_glVertexAttrib4usvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXATTRIBPOINTERARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXATTRIBPOINTERARBPROC</name></type> <name>glad_glVertexAttribPointerARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexAttribPointerARB</name></cpp:macro> <cpp:value>glad_glVertexAttribPointerARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENABLEVERTEXATTRIBARRAYARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENABLEVERTEXATTRIBARRAYARBPROC</name></type> <name>glad_glEnableVertexAttribArrayARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEnableVertexAttribArrayARB</name></cpp:macro> <cpp:value>glad_glEnableVertexAttribArrayARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDISABLEVERTEXATTRIBARRAYARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDISABLEVERTEXATTRIBARRAYARBPROC</name></type> <name>glad_glDisableVertexAttribArrayARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDisableVertexAttribArrayARB</name></cpp:macro> <cpp:value>glad_glDisableVertexAttribArrayARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBDVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLdouble</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBDVARBPROC</name></type> <name>glad_glGetVertexAttribdvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribdvARB</name></cpp:macro> <cpp:value>glad_glGetVertexAttribdvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBFVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBFVARBPROC</name></type> <name>glad_glGetVertexAttribfvARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribfvARB</name></cpp:macro> <cpp:value>glad_glGetVertexAttribfvARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBIVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBIVARBPROC</name></type> <name>glad_glGetVertexAttribivARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribivARB</name></cpp:macro> <cpp:value>glad_glGetVertexAttribivARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVERTEXATTRIBPOINTERVARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVERTEXATTRIBPOINTERVARBPROC</name></type> <name>glad_glGetVertexAttribPointervARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVertexAttribPointervARB</name></cpp:macro> <cpp:value>glad_glGetVertexAttribPointervARB</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARB_vertex_shader</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARB_vertex_shader</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ARB_vertex_shader</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDATTRIBLOCATIONARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhandleARB</name></type> <name>programObj</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLcharARB</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDATTRIBLOCATIONARBPROC</name></type> <name>glad_glBindAttribLocationARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindAttribLocationARB</name></cpp:macro> <cpp:value>glad_glBindAttribLocationARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETACTIVEATTRIBARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhandleARB</name></type> <name>programObj</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>maxLength</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLcharARB</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETACTIVEATTRIBARBPROC</name></type> <name>glad_glGetActiveAttribARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetActiveAttribARB</name></cpp:macro> <cpp:value>glad_glGetActiveAttribARB</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLint</name></type> (<name>APIENTRYP</name> <name>PFNGLGETATTRIBLOCATIONARBPROC</name>)<parameter_list>(<parameter><decl><type><name>GLhandleARB</name></type> <name>programObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLcharARB</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETATTRIBLOCATIONARBPROC</name></type> <name>glad_glGetAttribLocationARB</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetAttribLocationARB</name></cpp:macro> <cpp:value>glad_glGetAttribLocationARB</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_element_array</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_element_array</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ATI_element_array</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLELEMENTPOINTERATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLELEMENTPOINTERATIPROC</name></type> <name>glad_glElementPointerATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glElementPointerATI</name></cpp:macro> <cpp:value>glad_glElementPointerATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWELEMENTARRAYATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWELEMENTARRAYATIPROC</name></type> <name>glad_glDrawElementArrayATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawElementArrayATI</name></cpp:macro> <cpp:value>glad_glDrawElementArrayATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWRANGEELEMENTARRAYATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWRANGEELEMENTARRAYATIPROC</name></type> <name>glad_glDrawRangeElementArrayATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawRangeElementArrayATI</name></cpp:macro> <cpp:value>glad_glDrawRangeElementArrayATI</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_fragment_shader</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_fragment_shader</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ATI_fragment_shader</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLGENFRAGMENTSHADERSATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>range</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENFRAGMENTSHADERSATIPROC</name></type> <name>glad_glGenFragmentShadersATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenFragmentShadersATI</name></cpp:macro> <cpp:value>glad_glGenFragmentShadersATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDFRAGMENTSHADERATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDFRAGMENTSHADERATIPROC</name></type> <name>glad_glBindFragmentShaderATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindFragmentShaderATI</name></cpp:macro> <cpp:value>glad_glBindFragmentShaderATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEFRAGMENTSHADERATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEFRAGMENTSHADERATIPROC</name></type> <name>glad_glDeleteFragmentShaderATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteFragmentShaderATI</name></cpp:macro> <cpp:value>glad_glDeleteFragmentShaderATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBEGINFRAGMENTSHADERATIPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBEGINFRAGMENTSHADERATIPROC</name></type> <name>glad_glBeginFragmentShaderATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBeginFragmentShaderATI</name></cpp:macro> <cpp:value>glad_glBeginFragmentShaderATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENDFRAGMENTSHADERATIPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENDFRAGMENTSHADERATIPROC</name></type> <name>glad_glEndFragmentShaderATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndFragmentShaderATI</name></cpp:macro> <cpp:value>glad_glEndFragmentShaderATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPASSTEXCOORDATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>coord</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>swizzle</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPASSTEXCOORDATIPROC</name></type> <name>glad_glPassTexCoordATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPassTexCoordATI</name></cpp:macro> <cpp:value>glad_glPassTexCoordATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSAMPLEMAPATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>interp</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>swizzle</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSAMPLEMAPATIPROC</name></type> <name>glad_glSampleMapATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSampleMapATI</name></cpp:macro> <cpp:value>glad_glSampleMapATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORFRAGMENTOP1ATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>dstMask</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>dstMod</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg1Rep</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg1Mod</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORFRAGMENTOP1ATIPROC</name></type> <name>glad_glColorFragmentOp1ATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorFragmentOp1ATI</name></cpp:macro> <cpp:value>glad_glColorFragmentOp1ATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORFRAGMENTOP2ATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>dstMask</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>dstMod</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg1Rep</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg1Mod</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg2</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg2Rep</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg2Mod</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORFRAGMENTOP2ATIPROC</name></type> <name>glad_glColorFragmentOp2ATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorFragmentOp2ATI</name></cpp:macro> <cpp:value>glad_glColorFragmentOp2ATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORFRAGMENTOP3ATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>dstMask</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>dstMod</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg1Rep</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg1Mod</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg2</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg2Rep</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg2Mod</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg3</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg3Rep</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg3Mod</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORFRAGMENTOP3ATIPROC</name></type> <name>glad_glColorFragmentOp3ATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorFragmentOp3ATI</name></cpp:macro> <cpp:value>glad_glColorFragmentOp3ATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLALPHAFRAGMENTOP1ATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>dstMod</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg1Rep</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg1Mod</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLALPHAFRAGMENTOP1ATIPROC</name></type> <name>glad_glAlphaFragmentOp1ATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glAlphaFragmentOp1ATI</name></cpp:macro> <cpp:value>glad_glAlphaFragmentOp1ATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLALPHAFRAGMENTOP2ATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>dstMod</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg1Rep</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg1Mod</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg2</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg2Rep</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg2Mod</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLALPHAFRAGMENTOP2ATIPROC</name></type> <name>glad_glAlphaFragmentOp2ATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glAlphaFragmentOp2ATI</name></cpp:macro> <cpp:value>glad_glAlphaFragmentOp2ATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLALPHAFRAGMENTOP3ATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>dstMod</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg1Rep</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg1Mod</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg2</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg2Rep</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg2Mod</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg3</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg3Rep</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg3Mod</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLALPHAFRAGMENTOP3ATIPROC</name></type> <name>glad_glAlphaFragmentOp3ATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glAlphaFragmentOp3ATI</name></cpp:macro> <cpp:value>glad_glAlphaFragmentOp3ATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSETFRAGMENTSHADERCONSTANTATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSETFRAGMENTSHADERCONSTANTATIPROC</name></type> <name>glad_glSetFragmentShaderConstantATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSetFragmentShaderConstantATI</name></cpp:macro> <cpp:value>glad_glSetFragmentShaderConstantATI</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ATI_vertex_array_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATI_vertex_array_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_ATI_vertex_array_object</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLNEWOBJECTBUFFERATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>usage</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNEWOBJECTBUFFERATIPROC</name></type> <name>glad_glNewObjectBufferATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNewObjectBufferATI</name></cpp:macro> <cpp:value>glad_glNewObjectBufferATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISOBJECTBUFFERATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISOBJECTBUFFERATIPROC</name></type> <name>glad_glIsObjectBufferATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsObjectBufferATI</name></cpp:macro> <cpp:value>glad_glIsObjectBufferATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLUPDATEOBJECTBUFFERATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>preserve</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLUPDATEOBJECTBUFFERATIPROC</name></type> <name>glad_glUpdateObjectBufferATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glUpdateObjectBufferATI</name></cpp:macro> <cpp:value>glad_glUpdateObjectBufferATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETOBJECTBUFFERFVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETOBJECTBUFFERFVATIPROC</name></type> <name>glad_glGetObjectBufferfvATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetObjectBufferfvATI</name></cpp:macro> <cpp:value>glad_glGetObjectBufferfvATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETOBJECTBUFFERIVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETOBJECTBUFFERIVATIPROC</name></type> <name>glad_glGetObjectBufferivATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetObjectBufferivATI</name></cpp:macro> <cpp:value>glad_glGetObjectBufferivATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFREEOBJECTBUFFERATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFREEOBJECTBUFFERATIPROC</name></type> <name>glad_glFreeObjectBufferATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFreeObjectBufferATI</name></cpp:macro> <cpp:value>glad_glFreeObjectBufferATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLARRAYOBJECTATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLARRAYOBJECTATIPROC</name></type> <name>glad_glArrayObjectATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glArrayObjectATI</name></cpp:macro> <cpp:value>glad_glArrayObjectATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETARRAYOBJECTFVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETARRAYOBJECTFVATIPROC</name></type> <name>glad_glGetArrayObjectfvATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetArrayObjectfvATI</name></cpp:macro> <cpp:value>glad_glGetArrayObjectfvATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETARRAYOBJECTIVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETARRAYOBJECTIVATIPROC</name></type> <name>glad_glGetArrayObjectivATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetArrayObjectivATI</name></cpp:macro> <cpp:value>glad_glGetArrayObjectivATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVARIANTARRAYOBJECTATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVARIANTARRAYOBJECTATIPROC</name></type> <name>glad_glVariantArrayObjectATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVariantArrayObjectATI</name></cpp:macro> <cpp:value>glad_glVariantArrayObjectATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVARIANTARRAYOBJECTFVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVARIANTARRAYOBJECTFVATIPROC</name></type> <name>glad_glGetVariantArrayObjectfvATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVariantArrayObjectfvATI</name></cpp:macro> <cpp:value>glad_glGetVariantArrayObjectfvATI</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVARIANTARRAYOBJECTIVATIPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVARIANTARRAYOBJECTIVATIPROC</name></type> <name>glad_glGetVariantArrayObjectivATI</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVariantArrayObjectivATI</name></cpp:macro> <cpp:value>glad_glGetVariantArrayObjectivATI</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_blend_color</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_blend_color</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_blend_color</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDCOLOREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>blue</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDCOLOREXTPROC</name></type> <name>glad_glBlendColorEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendColorEXT</name></cpp:macro> <cpp:value>glad_glBlendColorEXT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_blend_equation_separate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_blend_equation_separate</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_blend_equation_separate</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDEQUATIONSEPARATEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>modeRGB</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>modeAlpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDEQUATIONSEPARATEEXTPROC</name></type> <name>glad_glBlendEquationSeparateEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendEquationSeparateEXT</name></cpp:macro> <cpp:value>glad_glBlendEquationSeparateEXT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_blend_func_separate</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_blend_func_separate</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_blend_func_separate</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLENDFUNCSEPARATEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>sfactorRGB</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>dfactorRGB</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>sfactorAlpha</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>dfactorAlpha</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLENDFUNCSEPARATEEXTPROC</name></type> <name>glad_glBlendFuncSeparateEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlendFuncSeparateEXT</name></cpp:macro> <cpp:value>glad_glBlendFuncSeparateEXT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_debug_marker</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_debug_marker</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_debug_marker</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLINSERTEVENTMARKEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>marker</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLINSERTEVENTMARKEREXTPROC</name></type> <name>glad_glInsertEventMarkerEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glInsertEventMarkerEXT</name></cpp:macro> <cpp:value>glad_glInsertEventMarkerEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPUSHGROUPMARKEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>marker</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPUSHGROUPMARKEREXTPROC</name></type> <name>glad_glPushGroupMarkerEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPushGroupMarkerEXT</name></cpp:macro> <cpp:value>glad_glPushGroupMarkerEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLPOPGROUPMARKEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLPOPGROUPMARKEREXTPROC</name></type> <name>glad_glPopGroupMarkerEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glPopGroupMarkerEXT</name></cpp:macro> <cpp:value>glad_glPopGroupMarkerEXT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_framebuffer_blit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_framebuffer_blit</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_framebuffer_blit</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBLITFRAMEBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>srcX0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcY0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcX1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcY1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstX0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstY0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstX1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstY1</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>filter</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBLITFRAMEBUFFEREXTPROC</name></type> <name>glad_glBlitFramebufferEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBlitFramebufferEXT</name></cpp:macro> <cpp:value>glad_glBlitFramebufferEXT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_framebuffer_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_framebuffer_multisample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_framebuffer_multisample</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC</name></type> <name>glad_glRenderbufferStorageMultisampleEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRenderbufferStorageMultisampleEXT</name></cpp:macro> <cpp:value>glad_glRenderbufferStorageMultisampleEXT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_framebuffer_multisample_blit_scaled</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_framebuffer_multisample_blit_scaled</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_framebuffer_multisample_blit_scaled</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_framebuffer_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_framebuffer_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_framebuffer_object</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISRENDERBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>renderbuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISRENDERBUFFEREXTPROC</name></type> <name>glad_glIsRenderbufferEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsRenderbufferEXT</name></cpp:macro> <cpp:value>glad_glIsRenderbufferEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDRENDERBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>renderbuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDRENDERBUFFEREXTPROC</name></type> <name>glad_glBindRenderbufferEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindRenderbufferEXT</name></cpp:macro> <cpp:value>glad_glBindRenderbufferEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETERENDERBUFFERSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>renderbuffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETERENDERBUFFERSEXTPROC</name></type> <name>glad_glDeleteRenderbuffersEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteRenderbuffersEXT</name></cpp:macro> <cpp:value>glad_glDeleteRenderbuffersEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENRENDERBUFFERSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>renderbuffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENRENDERBUFFERSEXTPROC</name></type> <name>glad_glGenRenderbuffersEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenRenderbuffersEXT</name></cpp:macro> <cpp:value>glad_glGenRenderbuffersEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLRENDERBUFFERSTORAGEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLRENDERBUFFERSTORAGEEXTPROC</name></type> <name>glad_glRenderbufferStorageEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glRenderbufferStorageEXT</name></cpp:macro> <cpp:value>glad_glRenderbufferStorageEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC</name></type> <name>glad_glGetRenderbufferParameterivEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetRenderbufferParameterivEXT</name></cpp:macro> <cpp:value>glad_glGetRenderbufferParameterivEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISFRAMEBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>framebuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISFRAMEBUFFEREXTPROC</name></type> <name>glad_glIsFramebufferEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsFramebufferEXT</name></cpp:macro> <cpp:value>glad_glIsFramebufferEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDFRAMEBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>framebuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDFRAMEBUFFEREXTPROC</name></type> <name>glad_glBindFramebufferEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindFramebufferEXT</name></cpp:macro> <cpp:value>glad_glBindFramebufferEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEFRAMEBUFFERSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>framebuffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEFRAMEBUFFERSEXTPROC</name></type> <name>glad_glDeleteFramebuffersEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteFramebuffersEXT</name></cpp:macro> <cpp:value>glad_glDeleteFramebuffersEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENFRAMEBUFFERSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>framebuffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENFRAMEBUFFERSEXTPROC</name></type> <name>glad_glGenFramebuffersEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenFramebuffersEXT</name></cpp:macro> <cpp:value>glad_glGenFramebuffersEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLenum</name></type> (<name>APIENTRYP</name> <name>PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC</name></type> <name>glad_glCheckFramebufferStatusEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glCheckFramebufferStatusEXT</name></cpp:macro> <cpp:value>glad_glCheckFramebufferStatusEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTURE1DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>textarget</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERTEXTURE1DEXTPROC</name></type> <name>glad_glFramebufferTexture1DEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTexture1DEXT</name></cpp:macro> <cpp:value>glad_glFramebufferTexture1DEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTURE2DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>textarget</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERTEXTURE2DEXTPROC</name></type> <name>glad_glFramebufferTexture2DEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTexture2DEXT</name></cpp:macro> <cpp:value>glad_glFramebufferTexture2DEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTURE3DEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>textarget</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERTEXTURE3DEXTPROC</name></type> <name>glad_glFramebufferTexture3DEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferTexture3DEXT</name></cpp:macro> <cpp:value>glad_glFramebufferTexture3DEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>renderbuffertarget</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>renderbuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC</name></type> <name>glad_glFramebufferRenderbufferEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glFramebufferRenderbufferEXT</name></cpp:macro> <cpp:value>glad_glFramebufferRenderbufferEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC</name></type> <name>glad_glGetFramebufferAttachmentParameterivEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetFramebufferAttachmentParameterivEXT</name></cpp:macro> <cpp:value>glad_glGetFramebufferAttachmentParameterivEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGENERATEMIPMAPEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENERATEMIPMAPEXTPROC</name></type> <name>glad_glGenerateMipmapEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenerateMipmapEXT</name></cpp:macro> <cpp:value>glad_glGenerateMipmapEXT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_framebuffer_sRGB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_framebuffer_sRGB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_framebuffer_sRGB</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_index_array_formats</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_index_array_formats</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_index_array_formats</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_compression_s3tc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_compression_s3tc</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture_compression_s3tc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_sRGB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_sRGB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture_sRGB</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_swizzle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_swizzle</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_texture_swizzle</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_vertex_array</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_vertex_array</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_vertex_array</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLARRAYELEMENTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLARRAYELEMENTEXTPROC</name></type> <name>glad_glArrayElementEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glArrayElementEXT</name></cpp:macro> <cpp:value>glad_glArrayElementEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLCOLORPOINTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLCOLORPOINTEREXTPROC</name></type> <name>glad_glColorPointerEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glColorPointerEXT</name></cpp:macro> <cpp:value>glad_glColorPointerEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDRAWARRAYSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDRAWARRAYSEXTPROC</name></type> <name>glad_glDrawArraysEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDrawArraysEXT</name></cpp:macro> <cpp:value>glad_glDrawArraysEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLEDGEFLAGPOINTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLboolean</name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLEDGEFLAGPOINTEREXTPROC</name></type> <name>glad_glEdgeFlagPointerEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEdgeFlagPointerEXT</name></cpp:macro> <cpp:value>glad_glEdgeFlagPointerEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETPOINTERVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETPOINTERVEXTPROC</name></type> <name>glad_glGetPointervEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetPointervEXT</name></cpp:macro> <cpp:value>glad_glGetPointervEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLINDEXPOINTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLINDEXPOINTEREXTPROC</name></type> <name>glad_glIndexPointerEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIndexPointerEXT</name></cpp:macro> <cpp:value>glad_glIndexPointerEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLNORMALPOINTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLNORMALPOINTEREXTPROC</name></type> <name>glad_glNormalPointerEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glNormalPointerEXT</name></cpp:macro> <cpp:value>glad_glNormalPointerEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLTEXCOORDPOINTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLTEXCOORDPOINTEREXTPROC</name></type> <name>glad_glTexCoordPointerEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glTexCoordPointerEXT</name></cpp:macro> <cpp:value>glad_glTexCoordPointerEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVERTEXPOINTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVERTEXPOINTEREXTPROC</name></type> <name>glad_glVertexPointerEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVertexPointerEXT</name></cpp:macro> <cpp:value>glad_glVertexPointerEXT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_vertex_shader</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_vertex_shader</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>GLAPI</name> <name>int</name></type> <name>GLAD_GL_EXT_vertex_shader</name></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBEGINVERTEXSHADEREXTPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBEGINVERTEXSHADEREXTPROC</name></type> <name>glad_glBeginVertexShaderEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBeginVertexShaderEXT</name></cpp:macro> <cpp:value>glad_glBeginVertexShaderEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENDVERTEXSHADEREXTPROC</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENDVERTEXSHADEREXTPROC</name></type> <name>glad_glEndVertexShaderEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEndVertexShaderEXT</name></cpp:macro> <cpp:value>glad_glEndVertexShaderEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDVERTEXSHADEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDVERTEXSHADEREXTPROC</name></type> <name>glad_glBindVertexShaderEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindVertexShaderEXT</name></cpp:macro> <cpp:value>glad_glBindVertexShaderEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLGENVERTEXSHADERSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>range</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENVERTEXSHADERSEXTPROC</name></type> <name>glad_glGenVertexShadersEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenVertexShadersEXT</name></cpp:macro> <cpp:value>glad_glGenVertexShadersEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDELETEVERTEXSHADEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDELETEVERTEXSHADEREXTPROC</name></type> <name>glad_glDeleteVertexShaderEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDeleteVertexShaderEXT</name></cpp:macro> <cpp:value>glad_glDeleteVertexShaderEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSHADEROP1EXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg1</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSHADEROP1EXTPROC</name></type> <name>glad_glShaderOp1EXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glShaderOp1EXT</name></cpp:macro> <cpp:value>glad_glShaderOp1EXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSHADEROP2EXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSHADEROP2EXTPROC</name></type> <name>glad_glShaderOp2EXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glShaderOp2EXT</name></cpp:macro> <cpp:value>glad_glShaderOp2EXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSHADEROP3EXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg2</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>arg3</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSHADEROP3EXTPROC</name></type> <name>glad_glShaderOp3EXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glShaderOp3EXT</name></cpp:macro> <cpp:value>glad_glShaderOp3EXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSWIZZLEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>outX</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>outY</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>outZ</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>outW</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSWIZZLEEXTPROC</name></type> <name>glad_glSwizzleEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSwizzleEXT</name></cpp:macro> <cpp:value>glad_glSwizzleEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLWRITEMASKEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>outX</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>outY</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>outZ</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>outW</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLWRITEMASKEXTPROC</name></type> <name>glad_glWriteMaskEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glWriteMaskEXT</name></cpp:macro> <cpp:value>glad_glWriteMaskEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLINSERTCOMPONENTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLINSERTCOMPONENTEXTPROC</name></type> <name>glad_glInsertComponentEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glInsertComponentEXT</name></cpp:macro> <cpp:value>glad_glInsertComponentEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLEXTRACTCOMPONENTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLEXTRACTCOMPONENTEXTPROC</name></type> <name>glad_glExtractComponentEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glExtractComponentEXT</name></cpp:macro> <cpp:value>glad_glExtractComponentEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLGENSYMBOLSEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>datatype</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>storagetype</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>components</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGENSYMBOLSEXTPROC</name></type> <name>glad_glGenSymbolsEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGenSymbolsEXT</name></cpp:macro> <cpp:value>glad_glGenSymbolsEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSETINVARIANTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSETINVARIANTEXTPROC</name></type> <name>glad_glSetInvariantEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSetInvariantEXT</name></cpp:macro> <cpp:value>glad_glSetInvariantEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLSETLOCALCONSTANTEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLSETLOCALCONSTANTEXTPROC</name></type> <name>glad_glSetLocalConstantEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glSetLocalConstantEXT</name></cpp:macro> <cpp:value>glad_glSetLocalConstantEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVARIANTBVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLbyte</name><modifier>*</modifier></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVARIANTBVEXTPROC</name></type> <name>glad_glVariantbvEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVariantbvEXT</name></cpp:macro> <cpp:value>glad_glVariantbvEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVARIANTSVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLshort</name><modifier>*</modifier></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVARIANTSVEXTPROC</name></type> <name>glad_glVariantsvEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVariantsvEXT</name></cpp:macro> <cpp:value>glad_glVariantsvEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVARIANTIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVARIANTIVEXTPROC</name></type> <name>glad_glVariantivEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVariantivEXT</name></cpp:macro> <cpp:value>glad_glVariantivEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVARIANTFVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVARIANTFVEXTPROC</name></type> <name>glad_glVariantfvEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVariantfvEXT</name></cpp:macro> <cpp:value>glad_glVariantfvEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVARIANTDVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLdouble</name><modifier>*</modifier></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVARIANTDVEXTPROC</name></type> <name>glad_glVariantdvEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVariantdvEXT</name></cpp:macro> <cpp:value>glad_glVariantdvEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVARIANTUBVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVARIANTUBVEXTPROC</name></type> <name>glad_glVariantubvEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVariantubvEXT</name></cpp:macro> <cpp:value>glad_glVariantubvEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVARIANTUSVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLushort</name><modifier>*</modifier></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVARIANTUSVEXTPROC</name></type> <name>glad_glVariantusvEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVariantusvEXT</name></cpp:macro> <cpp:value>glad_glVariantusvEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVARIANTUIVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVARIANTUIVEXTPROC</name></type> <name>glad_glVariantuivEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVariantuivEXT</name></cpp:macro> <cpp:value>glad_glVariantuivEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLVARIANTPOINTEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLVARIANTPOINTEREXTPROC</name></type> <name>glad_glVariantPointerEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glVariantPointerEXT</name></cpp:macro> <cpp:value>glad_glVariantPointerEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLENABLEVARIANTCLIENTSTATEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLENABLEVARIANTCLIENTSTATEEXTPROC</name></type> <name>glad_glEnableVariantClientStateEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glEnableVariantClientStateEXT</name></cpp:macro> <cpp:value>glad_glEnableVariantClientStateEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC</name></type> <name>glad_glDisableVariantClientStateEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glDisableVariantClientStateEXT</name></cpp:macro> <cpp:value>glad_glDisableVariantClientStateEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDLIGHTPARAMETEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>light</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDLIGHTPARAMETEREXTPROC</name></type> <name>glad_glBindLightParameterEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindLightParameterEXT</name></cpp:macro> <cpp:value>glad_glBindLightParameterEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDMATERIALPARAMETEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>face</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDMATERIALPARAMETEREXTPROC</name></type> <name>glad_glBindMaterialParameterEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindMaterialParameterEXT</name></cpp:macro> <cpp:value>glad_glBindMaterialParameterEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDTEXGENPARAMETEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>unit</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>coord</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDTEXGENPARAMETEREXTPROC</name></type> <name>glad_glBindTexGenParameterEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindTexGenParameterEXT</name></cpp:macro> <cpp:value>glad_glBindTexGenParameterEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDTEXTUREUNITPARAMETEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>unit</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDTEXTUREUNITPARAMETEREXTPROC</name></type> <name>glad_glBindTextureUnitParameterEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindTextureUnitParameterEXT</name></cpp:macro> <cpp:value>glad_glBindTextureUnitParameterEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>APIENTRYP</name> <name>PFNGLBINDPARAMETEREXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLBINDPARAMETEREXTPROC</name></type> <name>glad_glBindParameterEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glBindParameterEXT</name></cpp:macro> <cpp:value>glad_glBindParameterEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>APIENTRYP</name> <name>PFNGLISVARIANTENABLEDEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>cap</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLISVARIANTENABLEDEXTPROC</name></type> <name>glad_glIsVariantEnabledEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glIsVariantEnabledEXT</name></cpp:macro> <cpp:value>glad_glIsVariantEnabledEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVARIANTBOOLEANVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVARIANTBOOLEANVEXTPROC</name></type> <name>glad_glGetVariantBooleanvEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVariantBooleanvEXT</name></cpp:macro> <cpp:value>glad_glGetVariantBooleanvEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVARIANTINTEGERVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVARIANTINTEGERVEXTPROC</name></type> <name>glad_glGetVariantIntegervEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVariantIntegervEXT</name></cpp:macro> <cpp:value>glad_glGetVariantIntegervEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVARIANTFLOATVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVARIANTFLOATVEXTPROC</name></type> <name>glad_glGetVariantFloatvEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVariantFloatvEXT</name></cpp:macro> <cpp:value>glad_glGetVariantFloatvEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETVARIANTPOINTERVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETVARIANTPOINTERVEXTPROC</name></type> <name>glad_glGetVariantPointervEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetVariantPointervEXT</name></cpp:macro> <cpp:value>glad_glGetVariantPointervEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETINVARIANTBOOLEANVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETINVARIANTBOOLEANVEXTPROC</name></type> <name>glad_glGetInvariantBooleanvEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetInvariantBooleanvEXT</name></cpp:macro> <cpp:value>glad_glGetInvariantBooleanvEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETINVARIANTINTEGERVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETINVARIANTINTEGERVEXTPROC</name></type> <name>glad_glGetInvariantIntegervEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetInvariantIntegervEXT</name></cpp:macro> <cpp:value>glad_glGetInvariantIntegervEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETINVARIANTFLOATVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETINVARIANTFLOATVEXTPROC</name></type> <name>glad_glGetInvariantFloatvEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetInvariantFloatvEXT</name></cpp:macro> <cpp:value>glad_glGetInvariantFloatvEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC</name></type> <name>glad_glGetLocalConstantBooleanvEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetLocalConstantBooleanvEXT</name></cpp:macro> <cpp:value>glad_glGetLocalConstantBooleanvEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETLOCALCONSTANTINTEGERVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETLOCALCONSTANTINTEGERVEXTPROC</name></type> <name>glad_glGetLocalConstantIntegervEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetLocalConstantIntegervEXT</name></cpp:macro> <cpp:value>glad_glGetLocalConstantIntegervEXT</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APIENTRYP</name> <name>PFNGLGETLOCALCONSTANTFLOATVEXTPROC</name>)<parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>GLAPI</name> <name>PFNGLGETLOCALCONSTANTFLOATVEXTPROC</name></type> <name>glad_glGetLocalConstantFloatvEXT</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glGetLocalConstantFloatvEXT</name></cpp:macro> <cpp:value>glad_glGetLocalConstantFloatvEXT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GLAD_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name><name>struct</name> <name>gladGLversionStruct</name></name></type> <name>GLVersion</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_ES_VERSION_3_0</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GL_VERSION_3_0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GLAD_IS_SOME_NEW_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>max_loaded_major</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>max_loaded_minor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>num_exts_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>exts_i</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_exts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLAD_IS_SOME_NEW_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>max_loaded_major</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>exts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>glGetString</name><argument_list>(<argument><expr><name>GL_EXTENSIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLAD_IS_SOME_NEW_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num_exts_i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glGetIntegerv</name><argument_list>(<argument><expr><name>GL_NUM_EXTENSIONS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_exts_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num_exts_i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>exts_i</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>GLAD_REALLOC</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>exts_i</name></expr></argument>, <argument><expr><name>num_exts_i</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>exts_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>exts_i</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>num_exts_i</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>exts_i</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>glGetStringi</name><argument_list>(<argument><expr><name>GL_EXTENSIONS</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_exts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>exts_i</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GLAD_FREE</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>exts_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exts_i</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>has_ext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLAD_IS_SOME_NEW_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>max_loaded_major</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extensions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>terminator</name></decl>;</decl_stmt>
<expr_stmt><expr><name>extensions</name> <operator>=</operator> <name>exts</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>extensions</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ext</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>extensions</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>loc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>terminator</name> <operator>=</operator> <name>loc</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>loc</name> <operator>==</operator> <name>extensions</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>loc</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><name>terminator</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>terminator</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>extensions</name> <operator>=</operator> <name>terminator</name></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GLAD_IS_SOME_NEW_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>num_exts_i</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>exts_i</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_1_0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_1_1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_1_2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_1_3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_1_4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_1_5</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_2_0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_2_1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_3_0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_3_1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_3_2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_VERSION_3_3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOPYTEXIMAGE1DPROC</name></type> <name>glad_glCopyTexImage1D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI3UIPROC</name></type> <name>glad_glVertexAttribI3ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSTENCILMASKSEPARATEPROC</name></type> <name>glad_glStencilMaskSeparate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLFRAMEBUFFERRENDERBUFFERPROC</name></type> <name>glad_glFramebufferRenderbuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC</name></type> <name>glad_glCompressedTexSubImage3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXCOORDP3UIVPROC</name></type> <name>glad_glTexCoordP3uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB1SVPROC</name></type> <name>glad_glVertexAttrib1sv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDSAMPLERPROC</name></type> <name>glad_glBindSampler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLLINEWIDTHPROC</name></type> <name>glad_glLineWidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOLORP3UIVPROC</name></type> <name>glad_glColorP3uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETINTEGERI_VPROC</name></type> <name>glad_glGetIntegeri_v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOMPILESHADERPROC</name></type> <name>glad_glCompileShader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETTRANSFORMFEEDBACKVARYINGPROC</name></type> <name>glad_glGetTransformFeedbackVarying</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBIPOINTERPROC</name></type> <name>glad_glVertexAttribIPointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLMULTITEXCOORDP3UIPROC</name></type> <name>glad_glMultiTexCoordP3ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXP4UIPROC</name></type> <name>glad_glVertexP4ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLENABLEIPROC</name></type> <name>glad_glEnablei</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBP4UIPROC</name></type> <name>glad_glVertexAttribP4ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCREATESHADERPROC</name></type> <name>glad_glCreateShader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLISBUFFERPROC</name></type> <name>glad_glIsBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETMULTISAMPLEFVPROC</name></type> <name>glad_glGetMultisamplefv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGENRENDERBUFFERSPROC</name></type> <name>glad_glGenRenderbuffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOPYTEXSUBIMAGE2DPROC</name></type> <name>glad_glCopyTexSubImage2D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOMPRESSEDTEXIMAGE2DPROC</name></type> <name>glad_glCompressedTexImage2D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB1FPROC</name></type> <name>glad_glVertexAttrib1f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBLENDFUNCSEPARATEPROC</name></type> <name>glad_glBlendFuncSeparate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLHINTPROC</name></type> <name>glad_glHint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB1SPROC</name></type> <name>glad_glVertexAttrib1s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSAMPLEMASKIPROC</name></type> <name>glad_glSampleMaski</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXP2UIPROC</name></type> <name>glad_glVertexP2ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORMMATRIX3X2FVPROC</name></type> <name>glad_glUniformMatrix3x2fv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPOINTSIZEPROC</name></type> <name>glad_glPointSize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB2DVPROC</name></type> <name>glad_glVertexAttrib2dv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDELETEPROGRAMPROC</name></type> <name>glad_glDeleteProgram</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4NUIVPROC</name></type> <name>glad_glVertexAttrib4Nuiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLRENDERBUFFERSTORAGEPROC</name></type> <name>glad_glRenderbufferStorage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLWAITSYNCPROC</name></type> <name>glad_glWaitSync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORMMATRIX4X3FVPROC</name></type> <name>glad_glUniformMatrix4x3fv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM3IPROC</name></type> <name>glad_glUniform3i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCLEARBUFFERFVPROC</name></type> <name>glad_glClearBufferfv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM3FPROC</name></type> <name>glad_glUniform3f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4UBVPROC</name></type> <name>glad_glVertexAttrib4ubv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETBUFFERPARAMETERIVPROC</name></type> <name>glad_glGetBufferParameteriv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXCOORDP2UIPROC</name></type> <name>glad_glTexCoordP2ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOLORMASKIPROC</name></type> <name>glad_glColorMaski</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCLEARBUFFERFIPROC</name></type> <name>glad_glClearBufferfi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGENVERTEXARRAYSPROC</name></type> <name>glad_glGenVertexArrays</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLMULTITEXCOORDP2UIPROC</name></type> <name>glad_glMultiTexCoordP2ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETSAMPLERPARAMETERIIVPROC</name></type> <name>glad_glGetSamplerParameterIiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETFRAGDATAINDEXPROC</name></type> <name>glad_glGetFragDataIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETVERTEXATTRIBDVPROC</name></type> <name>glad_glGetVertexAttribdv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORMMATRIX3X4FVPROC</name></type> <name>glad_glUniformMatrix3x4fv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLMULTITEXCOORDP4UIPROC</name></type> <name>glad_glMultiTexCoordP4ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDELETEFRAMEBUFFERSPROC</name></type> <name>glad_glDeleteFramebuffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDRAWARRAYSPROC</name></type> <name>glad_glDrawArrays</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM1UIPROC</name></type> <name>glad_glUniform1ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI2IPROC</name></type> <name>glad_glVertexAttribI2i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXCOORDP3UIPROC</name></type> <name>glad_glTexCoordP3ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB3DPROC</name></type> <name>glad_glVertexAttrib3d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCLEARPROC</name></type> <name>glad_glClear</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETACTIVEUNIFORMNAMEPROC</name></type> <name>glad_glGetActiveUniformName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLISENABLEDPROC</name></type> <name>glad_glIsEnabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSTENCILOPPROC</name></type> <name>glad_glStencilOp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLFRAMEBUFFERTEXTURE2DPROC</name></type> <name>glad_glFramebufferTexture2D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC</name></type> <name>glad_glGetFramebufferAttachmentParameteriv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4NUBPROC</name></type> <name>glad_glVertexAttrib4Nub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETFRAGDATALOCATIONPROC</name></type> <name>glad_glGetFragDataLocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXIMAGE1DPROC</name></type> <name>glad_glTexImage1D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXPARAMETERIVPROC</name></type> <name>glad_glTexParameteriv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETTEXIMAGEPROC</name></type> <name>glad_glGetTexImage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETQUERYOBJECTI64VPROC</name></type> <name>glad_glGetQueryObjecti64v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGENFRAMEBUFFERSPROC</name></type> <name>glad_glGenFramebuffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETATTACHEDSHADERSPROC</name></type> <name>glad_glGetAttachedShaders</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLISRENDERBUFFERPROC</name></type> <name>glad_glIsRenderbuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDELETEVERTEXARRAYSPROC</name></type> <name>glad_glDeleteVertexArrays</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLISVERTEXARRAYPROC</name></type> <name>glad_glIsVertexArray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDISABLEVERTEXATTRIBARRAYPROC</name></type> <name>glad_glDisableVertexAttribArray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETQUERYIVPROC</name></type> <name>glad_glGetQueryiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETSAMPLERPARAMETERFVPROC</name></type> <name>glad_glGetSamplerParameterfv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETUNIFORMINDICESPROC</name></type> <name>glad_glGetUniformIndices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLISSHADERPROC</name></type> <name>glad_glIsShader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI4UBVPROC</name></type> <name>glad_glVertexAttribI4ubv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPOINTPARAMETERIVPROC</name></type> <name>glad_glPointParameteriv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLENABLEPROC</name></type> <name>glad_glEnable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETACTIVEUNIFORMSIVPROC</name></type> <name>glad_glGetActiveUniformsiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETATTRIBLOCATIONPROC</name></type> <name>glad_glGetAttribLocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4DVPROC</name></type> <name>glad_glVertexAttrib4dv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLMULTITEXCOORDP3UIVPROC</name></type> <name>glad_glMultiTexCoordP3uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBP3UIPROC</name></type> <name>glad_glVertexAttribP3ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETUNIFORMFVPROC</name></type> <name>glad_glGetUniformfv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETUNIFORMUIVPROC</name></type> <name>glad_glGetUniformuiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETVERTEXATTRIBIIVPROC</name></type> <name>glad_glGetVertexAttribIiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDRAWBUFFERPROC</name></type> <name>glad_glDrawBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCLEARBUFFERUIVPROC</name></type> <name>glad_glClearBufferuiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDRAWELEMENTSINSTANCEDPROC</name></type> <name>glad_glDrawElementsInstanced</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLFLUSHPROC</name></type> <name>glad_glFlush</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETRENDERBUFFERPARAMETERIVPROC</name></type> <name>glad_glGetRenderbufferParameteriv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETVERTEXATTRIBPOINTERVPROC</name></type> <name>glad_glGetVertexAttribPointerv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLFENCESYNCPROC</name></type> <name>glad_glFenceSync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOLORP3UIPROC</name></type> <name>glad_glColorP3ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB3SVPROC</name></type> <name>glad_glVertexAttrib3sv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBEGINCONDITIONALRENDERPROC</name></type> <name>glad_glBeginConditionalRender</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETTEXLEVELPARAMETERIVPROC</name></type> <name>glad_glGetTexLevelParameteriv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLMULTITEXCOORDP4UIVPROC</name></type> <name>glad_glMultiTexCoordP4uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSTENCILFUNCSEPARATEPROC</name></type> <name>glad_glStencilFuncSeparate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGENSAMPLERSPROC</name></type> <name>glad_glGenSamplers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCLAMPCOLORPROC</name></type> <name>glad_glClampColor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM4IVPROC</name></type> <name>glad_glUniform4iv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCLEARSTENCILPROC</name></type> <name>glad_glClearStencil</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXCOORDP1UIVPROC</name></type> <name>glad_glTexCoordP1uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGENTEXTURESPROC</name></type> <name>glad_glGenTextures</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETTEXPARAMETERIUIVPROC</name></type> <name>glad_glGetTexParameterIuiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4NBVPROC</name></type> <name>glad_glVertexAttrib4Nbv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLISSYNCPROC</name></type> <name>glad_glIsSync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC</name></type> <name>glad_glGetActiveUniformBlockName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM2IPROC</name></type> <name>glad_glUniform2i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM2FPROC</name></type> <name>glad_glUniform2f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXCOORDP4UIPROC</name></type> <name>glad_glTexCoordP4ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETPROGRAMIVPROC</name></type> <name>glad_glGetProgramiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBPOINTERPROC</name></type> <name>glad_glVertexAttribPointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLFRAMEBUFFERTEXTURELAYERPROC</name></type> <name>glad_glFramebufferTextureLayer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLFLUSHMAPPEDBUFFERRANGEPROC</name></type> <name>glad_glFlushMappedBufferRange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGENQUERIESPROC</name></type> <name>glad_glGenQueries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBP1UIPROC</name></type> <name>glad_glVertexAttribP1ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXSUBIMAGE3DPROC</name></type> <name>glad_glTexSubImage3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETINTEGER64I_VPROC</name></type> <name>glad_glGetInteger64i_v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDELETESAMPLERSPROC</name></type> <name>glad_glDeleteSamplers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOPYTEXIMAGE2DPROC</name></type> <name>glad_glCopyTexImage2D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBLITFRAMEBUFFERPROC</name></type> <name>glad_glBlitFramebuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLISENABLEDIPROC</name></type> <name>glad_glIsEnabledi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSECONDARYCOLORP3UIPROC</name></type> <name>glad_glSecondaryColorP3ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDFRAGDATALOCATIONINDEXEDPROC</name></type> <name>glad_glBindFragDataLocationIndexed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM2IVPROC</name></type> <name>glad_glUniform2iv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB1FVPROC</name></type> <name>glad_glVertexAttrib1fv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM4UIVPROC</name></type> <name>glad_glUniform4uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLFRAMEBUFFERTEXTURE1DPROC</name></type> <name>glad_glFramebufferTexture1D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETSHADERIVPROC</name></type> <name>glad_glGetShaderiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDFRAGDATALOCATIONPROC</name></type> <name>glad_glBindFragDataLocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPOLYGONOFFSETPROC</name></type> <name>glad_glPolygonOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETDOUBLEVPROC</name></type> <name>glad_glGetDoublev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB1DPROC</name></type> <name>glad_glVertexAttrib1d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETUNIFORMIVPROC</name></type> <name>glad_glGetUniformiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLMULTITEXCOORDP1UIVPROC</name></type> <name>glad_glMultiTexCoordP1uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM3FVPROC</name></type> <name>glad_glUniform3fv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDEPTHRANGEPROC</name></type> <name>glad_glDepthRange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLMAPBUFFERPROC</name></type> <name>glad_glMapBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOMPRESSEDTEXIMAGE3DPROC</name></type> <name>glad_glCompressedTexImage3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDELETESYNCPROC</name></type> <name>glad_glDeleteSync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOPYTEXSUBIMAGE3DPROC</name></type> <name>glad_glCopyTexSubImage3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETVERTEXATTRIBIVPROC</name></type> <name>glad_glGetVertexAttribiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLMULTIDRAWELEMENTSPROC</name></type> <name>glad_glMultiDrawElements</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB3FVPROC</name></type> <name>glad_glVertexAttrib3fv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM3IVPROC</name></type> <name>glad_glUniform3iv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPOLYGONMODEPROC</name></type> <name>glad_glPolygonMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDRAWBUFFERSPROC</name></type> <name>glad_glDrawBuffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETACTIVEUNIFORMBLOCKIVPROC</name></type> <name>glad_glGetActiveUniformBlockiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUSEPROGRAMPROC</name></type> <name>glad_glUseProgram</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETPROGRAMINFOLOGPROC</name></type> <name>glad_glGetProgramInfoLog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDVERTEXARRAYPROC</name></type> <name>glad_glBindVertexArray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDELETEBUFFERSPROC</name></type> <name>glad_glDeleteBuffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSAMPLERPARAMETERIIVPROC</name></type> <name>glad_glSamplerParameterIiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC</name></type> <name>glad_glMultiDrawElementsBaseVertex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM2UIVPROC</name></type> <name>glad_glUniform2uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC</name></type> <name>glad_glCompressedTexSubImage1D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLFINISHPROC</name></type> <name>glad_glFinish</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDELETESHADERPROC</name></type> <name>glad_glDeleteShader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4NSVPROC</name></type> <name>glad_glVertexAttrib4Nsv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVIEWPORTPROC</name></type> <name>glad_glViewport</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM1UIVPROC</name></type> <name>glad_glUniform1uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTRANSFORMFEEDBACKVARYINGSPROC</name></type> <name>glad_glTransformFeedbackVaryings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM2UIPROC</name></type> <name>glad_glUniform2ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI3IPROC</name></type> <name>glad_glVertexAttribI3i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCLEARDEPTHPROC</name></type> <name>glad_glClearDepth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI4USVPROC</name></type> <name>glad_glVertexAttribI4usv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXPARAMETERFPROC</name></type> <name>glad_glTexParameterf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXPARAMETERIPROC</name></type> <name>glad_glTexParameteri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETSHADERSOURCEPROC</name></type> <name>glad_glGetShaderSource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXBUFFERPROC</name></type> <name>glad_glTexBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPIXELSTOREIPROC</name></type> <name>glad_glPixelStorei</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVALIDATEPROGRAMPROC</name></type> <name>glad_glValidateProgram</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPIXELSTOREFPROC</name></type> <name>glad_glPixelStoref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETBOOLEANI_VPROC</name></type> <name>glad_glGetBooleani_v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLMULTITEXCOORDP2UIVPROC</name></type> <name>glad_glMultiTexCoordP2uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBP1UIVPROC</name></type> <name>glad_glVertexAttribP1uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLLINKPROGRAMPROC</name></type> <name>glad_glLinkProgram</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDTEXTUREPROC</name></type> <name>glad_glBindTexture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETSTRINGPROC</name></type> <name>glad_glGetString</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBP2UIVPROC</name></type> <name>glad_glVertexAttribP2uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDETACHSHADERPROC</name></type> <name>glad_glDetachShader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLENDQUERYPROC</name></type> <name>glad_glEndQuery</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLNORMALP3UIPROC</name></type> <name>glad_glNormalP3ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI2UIPROC</name></type> <name>glad_glVertexAttribI2ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDELETETEXTURESPROC</name></type> <name>glad_glDeleteTextures</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSTENCILOPSEPARATEPROC</name></type> <name>glad_glStencilOpSeparate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDELETEQUERIESPROC</name></type> <name>glad_glDeleteQueries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLNORMALP3UIVPROC</name></type> <name>glad_glNormalP3uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4FPROC</name></type> <name>glad_glVertexAttrib4f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4DPROC</name></type> <name>glad_glVertexAttrib4d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETTEXPARAMETERIVPROC</name></type> <name>glad_glGetTexParameteriv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4SPROC</name></type> <name>glad_glVertexAttrib4s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDRAWELEMENTSBASEVERTEXPROC</name></type> <name>glad_glDrawElementsBaseVertex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSAMPLECOVERAGEPROC</name></type> <name>glad_glSampleCoverage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSAMPLERPARAMETERIPROC</name></type> <name>glad_glSamplerParameteri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSAMPLERPARAMETERFPROC</name></type> <name>glad_glSamplerParameterf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM1FPROC</name></type> <name>glad_glUniform1f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETVERTEXATTRIBFVPROC</name></type> <name>glad_glGetVertexAttribfv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETCOMPRESSEDTEXIMAGEPROC</name></type> <name>glad_glGetCompressedTexImage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM1IPROC</name></type> <name>glad_glUniform1i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETACTIVEATTRIBPROC</name></type> <name>glad_glGetActiveAttrib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXSUBIMAGE2DPROC</name></type> <name>glad_glTexSubImage2D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDISABLEPROC</name></type> <name>glad_glDisable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLLOGICOPPROC</name></type> <name>glad_glLogicOp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM4UIPROC</name></type> <name>glad_glUniform4ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDFRAMEBUFFERPROC</name></type> <name>glad_glBindFramebuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCULLFACEPROC</name></type> <name>glad_glCullFace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETSTRINGIPROC</name></type> <name>glad_glGetStringi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLATTACHSHADERPROC</name></type> <name>glad_glAttachShader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLQUERYCOUNTERPROC</name></type> <name>glad_glQueryCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPROVOKINGVERTEXPROC</name></type> <name>glad_glProvokingVertex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDRAWELEMENTSPROC</name></type> <name>glad_glDrawElements</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI4SVPROC</name></type> <name>glad_glVertexAttribI4sv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM1IVPROC</name></type> <name>glad_glUniform1iv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETQUERYOBJECTIVPROC</name></type> <name>glad_glGetQueryObjectiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLREADBUFFERPROC</name></type> <name>glad_glReadBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXPARAMETERIUIVPROC</name></type> <name>glad_glTexParameterIuiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDRAWARRAYSINSTANCEDPROC</name></type> <name>glad_glDrawArraysInstanced</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGENERATEMIPMAPPROC</name></type> <name>glad_glGenerateMipmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSAMPLERPARAMETERIVPROC</name></type> <name>glad_glSamplerParameteriv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB3FPROC</name></type> <name>glad_glVertexAttrib3f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4UIVPROC</name></type> <name>glad_glVertexAttrib4uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPOINTPARAMETERIPROC</name></type> <name>glad_glPointParameteri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBLENDCOLORPROC</name></type> <name>glad_glBlendColor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSAMPLERPARAMETERIUIVPROC</name></type> <name>glad_glSamplerParameterIuiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNMAPBUFFERPROC</name></type> <name>glad_glUnmapBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPOINTPARAMETERFPROC</name></type> <name>glad_glPointParameterf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB3SPROC</name></type> <name>glad_glVertexAttrib3s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDRENDERBUFFERPROC</name></type> <name>glad_glBindRenderbuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBP4UIVPROC</name></type> <name>glad_glVertexAttribP4uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLISPROGRAMPROC</name></type> <name>glad_glIsProgram</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4BVPROC</name></type> <name>glad_glVertexAttrib4bv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4FVPROC</name></type> <name>glad_glVertexAttrib4fv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM4IPROC</name></type> <name>glad_glUniform4i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLACTIVETEXTUREPROC</name></type> <name>glad_glActiveTexture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLENABLEVERTEXATTRIBARRAYPROC</name></type> <name>glad_glEnableVertexAttribArray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLREADPIXELSPROC</name></type> <name>glad_glReadPixels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI3IVPROC</name></type> <name>glad_glVertexAttribI3iv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM4FPROC</name></type> <name>glad_glUniform4f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC</name></type> <name>glad_glRenderbufferStorageMultisample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORMMATRIX3FVPROC</name></type> <name>glad_glUniformMatrix3fv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC</name></type> <name>glad_glDrawElementsInstancedBaseVertex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSTENCILFUNCPROC</name></type> <name>glad_glStencilFunc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORMBLOCKBINDINGPROC</name></type> <name>glad_glUniformBlockBinding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOLORP4UIPROC</name></type> <name>glad_glColorP4ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI4IVPROC</name></type> <name>glad_glVertexAttribI4iv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETSHADERINFOLOGPROC</name></type> <name>glad_glGetShaderInfoLog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI4IPROC</name></type> <name>glad_glVertexAttribI4i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETBUFFERSUBDATAPROC</name></type> <name>glad_glGetBufferSubData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBLENDEQUATIONSEPARATEPROC</name></type> <name>glad_glBlendEquationSeparate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI1UIPROC</name></type> <name>glad_glVertexAttribI1ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGENBUFFERSPROC</name></type> <name>glad_glGenBuffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB2SVPROC</name></type> <name>glad_glVertexAttrib2sv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBLENDFUNCPROC</name></type> <name>glad_glBlendFunc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCREATEPROGRAMPROC</name></type> <name>glad_glCreateProgram</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXIMAGE3DPROC</name></type> <name>glad_glTexImage3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLISFRAMEBUFFERPROC</name></type> <name>glad_glIsFramebuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPRIMITIVERESTARTINDEXPROC</name></type> <name>glad_glPrimitiveRestartIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETINTEGER64VPROC</name></type> <name>glad_glGetInteger64v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSCISSORPROC</name></type> <name>glad_glScissor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXCOORDP4UIVPROC</name></type> <name>glad_glTexCoordP4uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETBOOLEANVPROC</name></type> <name>glad_glGetBooleanv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXP2UIVPROC</name></type> <name>glad_glVertexP2uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM3UIVPROC</name></type> <name>glad_glUniform3uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCLEARCOLORPROC</name></type> <name>glad_glClearColor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4NIVPROC</name></type> <name>glad_glVertexAttrib4Niv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCLEARBUFFERIVPROC</name></type> <name>glad_glClearBufferiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETBUFFERPARAMETERI64VPROC</name></type> <name>glad_glGetBufferParameteri64v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOLORP4UIVPROC</name></type> <name>glad_glColorP4uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI2UIVPROC</name></type> <name>glad_glVertexAttribI2uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM3UIPROC</name></type> <name>glad_glUniform3ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI4UIVPROC</name></type> <name>glad_glVertexAttribI4uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPOINTPARAMETERFVPROC</name></type> <name>glad_glPointParameterfv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM2FVPROC</name></type> <name>glad_glUniform2fv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETSAMPLERPARAMETERIUIVPROC</name></type> <name>glad_glGetSamplerParameterIuiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDBUFFERRANGEPROC</name></type> <name>glad_glBindBufferRange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORMMATRIX2X3FVPROC</name></type> <name>glad_glUniformMatrix2x3fv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETVERTEXATTRIBIUIVPROC</name></type> <name>glad_glGetVertexAttribIuiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4NUSVPROC</name></type> <name>glad_glVertexAttrib4Nusv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDEPTHFUNCPROC</name></type> <name>glad_glDepthFunc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC</name></type> <name>glad_glCompressedTexSubImage2D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI4BVPROC</name></type> <name>glad_glVertexAttribI4bv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETTEXPARAMETERFVPROC</name></type> <name>glad_glGetTexParameterfv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLMULTITEXCOORDP1UIPROC</name></type> <name>glad_glMultiTexCoordP1ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCLIENTWAITSYNCPROC</name></type> <name>glad_glClientWaitSync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI4UIPROC</name></type> <name>glad_glVertexAttribI4ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOLORMASKPROC</name></type> <name>glad_glColorMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXPARAMETERIIVPROC</name></type> <name>glad_glTexParameterIiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBLENDEQUATIONPROC</name></type> <name>glad_glBlendEquation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETUNIFORMLOCATIONPROC</name></type> <name>glad_glGetUniformLocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLENDTRANSFORMFEEDBACKPROC</name></type> <name>glad_glEndTransformFeedback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4USVPROC</name></type> <name>glad_glVertexAttrib4usv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM4FVPROC</name></type> <name>glad_glUniform4fv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBEGINTRANSFORMFEEDBACKPROC</name></type> <name>glad_glBeginTransformFeedback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI1IVPROC</name></type> <name>glad_glVertexAttribI1iv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLISSAMPLERPROC</name></type> <name>glad_glIsSampler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXP3UIPROC</name></type> <name>glad_glVertexP3ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBDIVISORPROC</name></type> <name>glad_glVertexAttribDivisor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOMPRESSEDTEXIMAGE1DPROC</name></type> <name>glad_glCompressedTexImage1D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOPYTEXSUBIMAGE1DPROC</name></type> <name>glad_glCopyTexSubImage1D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC</name></type> <name>glad_glDrawRangeElementsBaseVertex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCHECKFRAMEBUFFERSTATUSPROC</name></type> <name>glad_glCheckFramebufferStatus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLENDCONDITIONALRENDERPROC</name></type> <name>glad_glEndConditionalRender</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXP3UIVPROC</name></type> <name>glad_glVertexP3uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDATTRIBLOCATIONPROC</name></type> <name>glad_glBindAttribLocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORMMATRIX4X2FVPROC</name></type> <name>glad_glUniformMatrix4x2fv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB1DVPROC</name></type> <name>glad_glVertexAttrib1dv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDRAWRANGEELEMENTSPROC</name></type> <name>glad_glDrawRangeElements</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETQUERYOBJECTUIVPROC</name></type> <name>glad_glGetQueryObjectuiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDBUFFERBASEPROC</name></type> <name>glad_glBindBufferBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBUFFERSUBDATAPROC</name></type> <name>glad_glBufferSubData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4IVPROC</name></type> <name>glad_glVertexAttrib4iv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLMAPBUFFERRANGEPROC</name></type> <name>glad_glMapBufferRange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLFRAMEBUFFERTEXTUREPROC</name></type> <name>glad_glFramebufferTexture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLMULTIDRAWARRAYSPROC</name></type> <name>glad_glMultiDrawArrays</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXP4UIVPROC</name></type> <name>glad_glVertexP4uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI2IVPROC</name></type> <name>glad_glVertexAttribI2iv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDISABLEIPROC</name></type> <name>glad_glDisablei</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSHADERSOURCEPROC</name></type> <name>glad_glShaderSource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDELETERENDERBUFFERSPROC</name></type> <name>glad_glDeleteRenderbuffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI3UIVPROC</name></type> <name>glad_glVertexAttribI3uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETSYNCIVPROC</name></type> <name>glad_glGetSynciv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXCOORDP2UIVPROC</name></type> <name>glad_glTexCoordP2uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBEGINQUERYPROC</name></type> <name>glad_glBeginQuery</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORMMATRIX4FVPROC</name></type> <name>glad_glUniformMatrix4fv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDBUFFERPROC</name></type> <name>glad_glBindBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORMMATRIX2FVPROC</name></type> <name>glad_glUniformMatrix2fv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORMMATRIX2X4FVPROC</name></type> <name>glad_glUniformMatrix2x4fv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBUFFERDATAPROC</name></type> <name>glad_glBufferData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETTEXPARAMETERIIVPROC</name></type> <name>glad_glGetTexParameterIiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXCOORDP1UIPROC</name></type> <name>glad_glTexCoordP1ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETERRORPROC</name></type> <name>glad_glGetError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBP2UIPROC</name></type> <name>glad_glVertexAttribP2ui</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETFLOATVPROC</name></type> <name>glad_glGetFloatv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXSUBIMAGE1DPROC</name></type> <name>glad_glTexSubImage1D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB2FVPROC</name></type> <name>glad_glVertexAttrib2fv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETTEXLEVELPARAMETERFVPROC</name></type> <name>glad_glGetTexLevelParameterfv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI1IPROC</name></type> <name>glad_glVertexAttribI1i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBP3UIVPROC</name></type> <name>glad_glVertexAttribP3uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSECONDARYCOLORP3UIVPROC</name></type> <name>glad_glSecondaryColorP3uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETINTEGERVPROC</name></type> <name>glad_glGetIntegerv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETBUFFERPOINTERVPROC</name></type> <name>glad_glGetBufferPointerv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLFRAMEBUFFERTEXTURE3DPROC</name></type> <name>glad_glFramebufferTexture3D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLISQUERYPROC</name></type> <name>glad_glIsQuery</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4SVPROC</name></type> <name>glad_glVertexAttrib4sv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXIMAGE2DPROC</name></type> <name>glad_glTexImage2D</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSTENCILMASKPROC</name></type> <name>glad_glStencilMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSAMPLERPARAMETERFVPROC</name></type> <name>glad_glSamplerParameterfv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLISTEXTUREPROC</name></type> <name>glad_glIsTexture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNIFORM1FVPROC</name></type> <name>glad_glUniform1fv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4NUBVPROC</name></type> <name>glad_glVertexAttrib4Nubv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXPARAMETERFVPROC</name></type> <name>glad_glTexParameterfv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETSAMPLERPARAMETERIVPROC</name></type> <name>glad_glGetSamplerParameteriv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOPYBUFFERSUBDATAPROC</name></type> <name>glad_glCopyBufferSubData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBI1UIVPROC</name></type> <name>glad_glVertexAttribI1uiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB2DPROC</name></type> <name>glad_glVertexAttrib2d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB2FPROC</name></type> <name>glad_glVertexAttrib2f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB3DVPROC</name></type> <name>glad_glVertexAttrib3dv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETQUERYOBJECTUI64VPROC</name></type> <name>glad_glGetQueryObjectui64v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDEPTHMASKPROC</name></type> <name>glad_glDepthMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB2SPROC</name></type> <name>glad_glVertexAttrib2s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXIMAGE3DMULTISAMPLEPROC</name></type> <name>glad_glTexImage3DMultisample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETUNIFORMBLOCKINDEXPROC</name></type> <name>glad_glGetUniformBlockIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXIMAGE2DMULTISAMPLEPROC</name></type> <name>glad_glTexImage2DMultisample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETACTIVEUNIFORMPROC</name></type> <name>glad_glGetActiveUniform</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLFRONTFACEPROC</name></type> <name>glad_glFrontFace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_texture_compression</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_texture_swizzle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ATI_fragment_shader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_EXT_texture_sRGB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_explicit_attrib_location</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_ES3_compatibility</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_EXT_blend_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_EXT_framebuffer_sRGB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_EXT_index_array_formats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_vertex_shader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_vertex_attrib_binding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_vertex_program</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_EXT_texture_compression_s3tc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_EXT_debug_marker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_EXT_texture_swizzle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_texture_multisample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_texture_rg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_texture_float</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_compressed_texture_pixel_storage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_framebuffer_sRGB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_vertex_array_object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_depth_clamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_fragment_shader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ATI_vertex_array_object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_vertex_buffer_object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_fragment_program</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_EXT_framebuffer_multisample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_framebuffer_object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_draw_buffers_blend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_EXT_vertex_shader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_EXT_blend_func_separate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_texture_non_power_of_two</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_EXT_texture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_buffer_storage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_explicit_uniform_location</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_EXT_framebuffer_object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_EXT_framebuffer_multisample_blit_scaled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_AMD_debug_output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_depth_buffer_float</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_multisample</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_compatibility</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_depth_texture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_sample_locations</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_ES2_compatibility</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_AMD_query_buffer_object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_EXT_framebuffer_blit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_EXT_vertex_array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_draw_buffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_EXT_blend_equation_separate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ATI_element_array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_debug_output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GLAD_GL_ARB_uniform_buffer_object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDEBUGMESSAGEENABLEAMDPROC</name></type> <name>glad_glDebugMessageEnableAMD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDEBUGMESSAGEINSERTAMDPROC</name></type> <name>glad_glDebugMessageInsertAMD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDEBUGMESSAGECALLBACKAMDPROC</name></type> <name>glad_glDebugMessageCallbackAMD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETDEBUGMESSAGELOGAMDPROC</name></type> <name>glad_glGetDebugMessageLogAMD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLRELEASESHADERCOMPILERPROC</name></type> <name>glad_glReleaseShaderCompiler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSHADERBINARYPROC</name></type> <name>glad_glShaderBinary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETSHADERPRECISIONFORMATPROC</name></type> <name>glad_glGetShaderPrecisionFormat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDEPTHRANGEFPROC</name></type> <name>glad_glDepthRangef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCLEARDEPTHFPROC</name></type> <name>glad_glClearDepthf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBUFFERSTORAGEPROC</name></type> <name>glad_glBufferStorage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDEBUGMESSAGECONTROLARBPROC</name></type> <name>glad_glDebugMessageControlARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDEBUGMESSAGEINSERTARBPROC</name></type> <name>glad_glDebugMessageInsertARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDEBUGMESSAGECALLBACKARBPROC</name></type> <name>glad_glDebugMessageCallbackARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETDEBUGMESSAGELOGARBPROC</name></type> <name>glad_glGetDebugMessageLogARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDRAWBUFFERSARBPROC</name></type> <name>glad_glDrawBuffersARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBLENDEQUATIONIARBPROC</name></type> <name>glad_glBlendEquationiARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBLENDEQUATIONSEPARATEIARBPROC</name></type> <name>glad_glBlendEquationSeparateiARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBLENDFUNCIARBPROC</name></type> <name>glad_glBlendFunciARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBLENDFUNCSEPARATEIARBPROC</name></type> <name>glad_glBlendFuncSeparateiARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPROGRAMSTRINGARBPROC</name></type> <name>glad_glProgramStringARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDPROGRAMARBPROC</name></type> <name>glad_glBindProgramARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDELETEPROGRAMSARBPROC</name></type> <name>glad_glDeleteProgramsARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGENPROGRAMSARBPROC</name></type> <name>glad_glGenProgramsARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPROGRAMENVPARAMETER4DARBPROC</name></type> <name>glad_glProgramEnvParameter4dARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPROGRAMENVPARAMETER4DVARBPROC</name></type> <name>glad_glProgramEnvParameter4dvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPROGRAMENVPARAMETER4FARBPROC</name></type> <name>glad_glProgramEnvParameter4fARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPROGRAMENVPARAMETER4FVARBPROC</name></type> <name>glad_glProgramEnvParameter4fvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPROGRAMLOCALPARAMETER4DARBPROC</name></type> <name>glad_glProgramLocalParameter4dARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPROGRAMLOCALPARAMETER4DVARBPROC</name></type> <name>glad_glProgramLocalParameter4dvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPROGRAMLOCALPARAMETER4FARBPROC</name></type> <name>glad_glProgramLocalParameter4fARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPROGRAMLOCALPARAMETER4FVARBPROC</name></type> <name>glad_glProgramLocalParameter4fvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETPROGRAMENVPARAMETERDVARBPROC</name></type> <name>glad_glGetProgramEnvParameterdvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETPROGRAMENVPARAMETERFVARBPROC</name></type> <name>glad_glGetProgramEnvParameterfvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC</name></type> <name>glad_glGetProgramLocalParameterdvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC</name></type> <name>glad_glGetProgramLocalParameterfvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETPROGRAMIVARBPROC</name></type> <name>glad_glGetProgramivARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETPROGRAMSTRINGARBPROC</name></type> <name>glad_glGetProgramStringARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLISPROGRAMARBPROC</name></type> <name>glad_glIsProgramARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSAMPLECOVERAGEARBPROC</name></type> <name>glad_glSampleCoverageARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC</name></type> <name>glad_glFramebufferSampleLocationsfvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC</name></type> <name>glad_glNamedFramebufferSampleLocationsfvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLEVALUATEDEPTHVALUESARBPROC</name></type> <name>glad_glEvaluateDepthValuesARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOMPRESSEDTEXIMAGE3DARBPROC</name></type> <name>glad_glCompressedTexImage3DARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOMPRESSEDTEXIMAGE2DARBPROC</name></type> <name>glad_glCompressedTexImage2DARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOMPRESSEDTEXIMAGE1DARBPROC</name></type> <name>glad_glCompressedTexImage1DARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC</name></type> <name>glad_glCompressedTexSubImage3DARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC</name></type> <name>glad_glCompressedTexSubImage2DARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC</name></type> <name>glad_glCompressedTexSubImage1DARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETCOMPRESSEDTEXIMAGEARBPROC</name></type> <name>glad_glGetCompressedTexImageARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDVERTEXBUFFERPROC</name></type> <name>glad_glBindVertexBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBFORMATPROC</name></type> <name>glad_glVertexAttribFormat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBIFORMATPROC</name></type> <name>glad_glVertexAttribIFormat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBLFORMATPROC</name></type> <name>glad_glVertexAttribLFormat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBBINDINGPROC</name></type> <name>glad_glVertexAttribBinding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXBINDINGDIVISORPROC</name></type> <name>glad_glVertexBindingDivisor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDBUFFERARBPROC</name></type> <name>glad_glBindBufferARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDELETEBUFFERSARBPROC</name></type> <name>glad_glDeleteBuffersARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGENBUFFERSARBPROC</name></type> <name>glad_glGenBuffersARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLISBUFFERARBPROC</name></type> <name>glad_glIsBufferARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBUFFERDATAARBPROC</name></type> <name>glad_glBufferDataARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBUFFERSUBDATAARBPROC</name></type> <name>glad_glBufferSubDataARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETBUFFERSUBDATAARBPROC</name></type> <name>glad_glGetBufferSubDataARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLMAPBUFFERARBPROC</name></type> <name>glad_glMapBufferARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUNMAPBUFFERARBPROC</name></type> <name>glad_glUnmapBufferARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETBUFFERPARAMETERIVARBPROC</name></type> <name>glad_glGetBufferParameterivARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETBUFFERPOINTERVARBPROC</name></type> <name>glad_glGetBufferPointervARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB1DARBPROC</name></type> <name>glad_glVertexAttrib1dARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB1DVARBPROC</name></type> <name>glad_glVertexAttrib1dvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB1FARBPROC</name></type> <name>glad_glVertexAttrib1fARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB1FVARBPROC</name></type> <name>glad_glVertexAttrib1fvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB1SARBPROC</name></type> <name>glad_glVertexAttrib1sARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB1SVARBPROC</name></type> <name>glad_glVertexAttrib1svARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB2DARBPROC</name></type> <name>glad_glVertexAttrib2dARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB2DVARBPROC</name></type> <name>glad_glVertexAttrib2dvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB2FARBPROC</name></type> <name>glad_glVertexAttrib2fARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB2FVARBPROC</name></type> <name>glad_glVertexAttrib2fvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB2SARBPROC</name></type> <name>glad_glVertexAttrib2sARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB2SVARBPROC</name></type> <name>glad_glVertexAttrib2svARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB3DARBPROC</name></type> <name>glad_glVertexAttrib3dARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB3DVARBPROC</name></type> <name>glad_glVertexAttrib3dvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB3FARBPROC</name></type> <name>glad_glVertexAttrib3fARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB3FVARBPROC</name></type> <name>glad_glVertexAttrib3fvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB3SARBPROC</name></type> <name>glad_glVertexAttrib3sARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB3SVARBPROC</name></type> <name>glad_glVertexAttrib3svARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4NBVARBPROC</name></type> <name>glad_glVertexAttrib4NbvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4NIVARBPROC</name></type> <name>glad_glVertexAttrib4NivARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4NSVARBPROC</name></type> <name>glad_glVertexAttrib4NsvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4NUBARBPROC</name></type> <name>glad_glVertexAttrib4NubARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4NUBVARBPROC</name></type> <name>glad_glVertexAttrib4NubvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4NUIVARBPROC</name></type> <name>glad_glVertexAttrib4NuivARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4NUSVARBPROC</name></type> <name>glad_glVertexAttrib4NusvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4BVARBPROC</name></type> <name>glad_glVertexAttrib4bvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4DARBPROC</name></type> <name>glad_glVertexAttrib4dARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4DVARBPROC</name></type> <name>glad_glVertexAttrib4dvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4FARBPROC</name></type> <name>glad_glVertexAttrib4fARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4FVARBPROC</name></type> <name>glad_glVertexAttrib4fvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4IVARBPROC</name></type> <name>glad_glVertexAttrib4ivARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4SARBPROC</name></type> <name>glad_glVertexAttrib4sARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4SVARBPROC</name></type> <name>glad_glVertexAttrib4svARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4UBVARBPROC</name></type> <name>glad_glVertexAttrib4ubvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4UIVARBPROC</name></type> <name>glad_glVertexAttrib4uivARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIB4USVARBPROC</name></type> <name>glad_glVertexAttrib4usvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXATTRIBPOINTERARBPROC</name></type> <name>glad_glVertexAttribPointerARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLENABLEVERTEXATTRIBARRAYARBPROC</name></type> <name>glad_glEnableVertexAttribArrayARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDISABLEVERTEXATTRIBARRAYARBPROC</name></type> <name>glad_glDisableVertexAttribArrayARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETVERTEXATTRIBDVARBPROC</name></type> <name>glad_glGetVertexAttribdvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETVERTEXATTRIBFVARBPROC</name></type> <name>glad_glGetVertexAttribfvARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETVERTEXATTRIBIVARBPROC</name></type> <name>glad_glGetVertexAttribivARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETVERTEXATTRIBPOINTERVARBPROC</name></type> <name>glad_glGetVertexAttribPointervARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDATTRIBLOCATIONARBPROC</name></type> <name>glad_glBindAttribLocationARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETACTIVEATTRIBARBPROC</name></type> <name>glad_glGetActiveAttribARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETATTRIBLOCATIONARBPROC</name></type> <name>glad_glGetAttribLocationARB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLELEMENTPOINTERATIPROC</name></type> <name>glad_glElementPointerATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDRAWELEMENTARRAYATIPROC</name></type> <name>glad_glDrawElementArrayATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDRAWRANGEELEMENTARRAYATIPROC</name></type> <name>glad_glDrawRangeElementArrayATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGENFRAGMENTSHADERSATIPROC</name></type> <name>glad_glGenFragmentShadersATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDFRAGMENTSHADERATIPROC</name></type> <name>glad_glBindFragmentShaderATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDELETEFRAGMENTSHADERATIPROC</name></type> <name>glad_glDeleteFragmentShaderATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBEGINFRAGMENTSHADERATIPROC</name></type> <name>glad_glBeginFragmentShaderATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLENDFRAGMENTSHADERATIPROC</name></type> <name>glad_glEndFragmentShaderATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPASSTEXCOORDATIPROC</name></type> <name>glad_glPassTexCoordATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSAMPLEMAPATIPROC</name></type> <name>glad_glSampleMapATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOLORFRAGMENTOP1ATIPROC</name></type> <name>glad_glColorFragmentOp1ATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOLORFRAGMENTOP2ATIPROC</name></type> <name>glad_glColorFragmentOp2ATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOLORFRAGMENTOP3ATIPROC</name></type> <name>glad_glColorFragmentOp3ATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLALPHAFRAGMENTOP1ATIPROC</name></type> <name>glad_glAlphaFragmentOp1ATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLALPHAFRAGMENTOP2ATIPROC</name></type> <name>glad_glAlphaFragmentOp2ATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLALPHAFRAGMENTOP3ATIPROC</name></type> <name>glad_glAlphaFragmentOp3ATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSETFRAGMENTSHADERCONSTANTATIPROC</name></type> <name>glad_glSetFragmentShaderConstantATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLNEWOBJECTBUFFERATIPROC</name></type> <name>glad_glNewObjectBufferATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLISOBJECTBUFFERATIPROC</name></type> <name>glad_glIsObjectBufferATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLUPDATEOBJECTBUFFERATIPROC</name></type> <name>glad_glUpdateObjectBufferATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETOBJECTBUFFERFVATIPROC</name></type> <name>glad_glGetObjectBufferfvATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETOBJECTBUFFERIVATIPROC</name></type> <name>glad_glGetObjectBufferivATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLFREEOBJECTBUFFERATIPROC</name></type> <name>glad_glFreeObjectBufferATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLARRAYOBJECTATIPROC</name></type> <name>glad_glArrayObjectATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETARRAYOBJECTFVATIPROC</name></type> <name>glad_glGetArrayObjectfvATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETARRAYOBJECTIVATIPROC</name></type> <name>glad_glGetArrayObjectivATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVARIANTARRAYOBJECTATIPROC</name></type> <name>glad_glVariantArrayObjectATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETVARIANTARRAYOBJECTFVATIPROC</name></type> <name>glad_glGetVariantArrayObjectfvATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETVARIANTARRAYOBJECTIVATIPROC</name></type> <name>glad_glGetVariantArrayObjectivATI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBLENDCOLOREXTPROC</name></type> <name>glad_glBlendColorEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBLENDEQUATIONSEPARATEEXTPROC</name></type> <name>glad_glBlendEquationSeparateEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBLENDFUNCSEPARATEEXTPROC</name></type> <name>glad_glBlendFuncSeparateEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLINSERTEVENTMARKEREXTPROC</name></type> <name>glad_glInsertEventMarkerEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPUSHGROUPMARKEREXTPROC</name></type> <name>glad_glPushGroupMarkerEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLPOPGROUPMARKEREXTPROC</name></type> <name>glad_glPopGroupMarkerEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBLITFRAMEBUFFEREXTPROC</name></type> <name>glad_glBlitFramebufferEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC</name></type> <name>glad_glRenderbufferStorageMultisampleEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLISRENDERBUFFEREXTPROC</name></type> <name>glad_glIsRenderbufferEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDRENDERBUFFEREXTPROC</name></type> <name>glad_glBindRenderbufferEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDELETERENDERBUFFERSEXTPROC</name></type> <name>glad_glDeleteRenderbuffersEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGENRENDERBUFFERSEXTPROC</name></type> <name>glad_glGenRenderbuffersEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLRENDERBUFFERSTORAGEEXTPROC</name></type> <name>glad_glRenderbufferStorageEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC</name></type> <name>glad_glGetRenderbufferParameterivEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLISFRAMEBUFFEREXTPROC</name></type> <name>glad_glIsFramebufferEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDFRAMEBUFFEREXTPROC</name></type> <name>glad_glBindFramebufferEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDELETEFRAMEBUFFERSEXTPROC</name></type> <name>glad_glDeleteFramebuffersEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGENFRAMEBUFFERSEXTPROC</name></type> <name>glad_glGenFramebuffersEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC</name></type> <name>glad_glCheckFramebufferStatusEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLFRAMEBUFFERTEXTURE1DEXTPROC</name></type> <name>glad_glFramebufferTexture1DEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLFRAMEBUFFERTEXTURE2DEXTPROC</name></type> <name>glad_glFramebufferTexture2DEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLFRAMEBUFFERTEXTURE3DEXTPROC</name></type> <name>glad_glFramebufferTexture3DEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC</name></type> <name>glad_glFramebufferRenderbufferEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC</name></type> <name>glad_glGetFramebufferAttachmentParameterivEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGENERATEMIPMAPEXTPROC</name></type> <name>glad_glGenerateMipmapEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLARRAYELEMENTEXTPROC</name></type> <name>glad_glArrayElementEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLCOLORPOINTEREXTPROC</name></type> <name>glad_glColorPointerEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDRAWARRAYSEXTPROC</name></type> <name>glad_glDrawArraysEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLEDGEFLAGPOINTEREXTPROC</name></type> <name>glad_glEdgeFlagPointerEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETPOINTERVEXTPROC</name></type> <name>glad_glGetPointervEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLINDEXPOINTEREXTPROC</name></type> <name>glad_glIndexPointerEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLNORMALPOINTEREXTPROC</name></type> <name>glad_glNormalPointerEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLTEXCOORDPOINTEREXTPROC</name></type> <name>glad_glTexCoordPointerEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVERTEXPOINTEREXTPROC</name></type> <name>glad_glVertexPointerEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBEGINVERTEXSHADEREXTPROC</name></type> <name>glad_glBeginVertexShaderEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLENDVERTEXSHADEREXTPROC</name></type> <name>glad_glEndVertexShaderEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDVERTEXSHADEREXTPROC</name></type> <name>glad_glBindVertexShaderEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGENVERTEXSHADERSEXTPROC</name></type> <name>glad_glGenVertexShadersEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDELETEVERTEXSHADEREXTPROC</name></type> <name>glad_glDeleteVertexShaderEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSHADEROP1EXTPROC</name></type> <name>glad_glShaderOp1EXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSHADEROP2EXTPROC</name></type> <name>glad_glShaderOp2EXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSHADEROP3EXTPROC</name></type> <name>glad_glShaderOp3EXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSWIZZLEEXTPROC</name></type> <name>glad_glSwizzleEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLWRITEMASKEXTPROC</name></type> <name>glad_glWriteMaskEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLINSERTCOMPONENTEXTPROC</name></type> <name>glad_glInsertComponentEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLEXTRACTCOMPONENTEXTPROC</name></type> <name>glad_glExtractComponentEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGENSYMBOLSEXTPROC</name></type> <name>glad_glGenSymbolsEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSETINVARIANTEXTPROC</name></type> <name>glad_glSetInvariantEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLSETLOCALCONSTANTEXTPROC</name></type> <name>glad_glSetLocalConstantEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVARIANTBVEXTPROC</name></type> <name>glad_glVariantbvEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVARIANTSVEXTPROC</name></type> <name>glad_glVariantsvEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVARIANTIVEXTPROC</name></type> <name>glad_glVariantivEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVARIANTFVEXTPROC</name></type> <name>glad_glVariantfvEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVARIANTDVEXTPROC</name></type> <name>glad_glVariantdvEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVARIANTUBVEXTPROC</name></type> <name>glad_glVariantubvEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVARIANTUSVEXTPROC</name></type> <name>glad_glVariantusvEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVARIANTUIVEXTPROC</name></type> <name>glad_glVariantuivEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLVARIANTPOINTEREXTPROC</name></type> <name>glad_glVariantPointerEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLENABLEVARIANTCLIENTSTATEEXTPROC</name></type> <name>glad_glEnableVariantClientStateEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC</name></type> <name>glad_glDisableVariantClientStateEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDLIGHTPARAMETEREXTPROC</name></type> <name>glad_glBindLightParameterEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDMATERIALPARAMETEREXTPROC</name></type> <name>glad_glBindMaterialParameterEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDTEXGENPARAMETEREXTPROC</name></type> <name>glad_glBindTexGenParameterEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDTEXTUREUNITPARAMETEREXTPROC</name></type> <name>glad_glBindTextureUnitParameterEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLBINDPARAMETEREXTPROC</name></type> <name>glad_glBindParameterEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLISVARIANTENABLEDEXTPROC</name></type> <name>glad_glIsVariantEnabledEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETVARIANTBOOLEANVEXTPROC</name></type> <name>glad_glGetVariantBooleanvEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETVARIANTINTEGERVEXTPROC</name></type> <name>glad_glGetVariantIntegervEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETVARIANTFLOATVEXTPROC</name></type> <name>glad_glGetVariantFloatvEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETVARIANTPOINTERVEXTPROC</name></type> <name>glad_glGetVariantPointervEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETINVARIANTBOOLEANVEXTPROC</name></type> <name>glad_glGetInvariantBooleanvEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETINVARIANTINTEGERVEXTPROC</name></type> <name>glad_glGetInvariantIntegervEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETINVARIANTFLOATVEXTPROC</name></type> <name>glad_glGetInvariantFloatvEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC</name></type> <name>glad_glGetLocalConstantBooleanvEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETLOCALCONSTANTINTEGERVEXTPROC</name></type> <name>glad_glGetLocalConstantIntegervEXT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFNGLGETLOCALCONSTANTFLOATVEXTPROC</name></type> <name>glad_glGetLocalConstantFloatvEXT</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_VERSION_1_0</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_1_0</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glCullFace</name> <operator>=</operator> <operator>(</operator><name>PFNGLCULLFACEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCullFace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glFrontFace</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRONTFACEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFrontFace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glHint</name> <operator>=</operator> <operator>(</operator><name>PFNGLHINTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glHint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glLineWidth</name> <operator>=</operator> <operator>(</operator><name>PFNGLLINEWIDTHPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glLineWidth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glPointSize</name> <operator>=</operator> <operator>(</operator><name>PFNGLPOINTSIZEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPointSize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glPolygonMode</name> <operator>=</operator> <operator>(</operator><name>PFNGLPOLYGONMODEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPolygonMode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glScissor</name> <operator>=</operator> <operator>(</operator><name>PFNGLSCISSORPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glScissor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexParameterf</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXPARAMETERFPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexParameterf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexParameterfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXPARAMETERFVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexParameterfv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexParameteri</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXPARAMETERIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexParameteri"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexParameteriv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXPARAMETERIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexParameteriv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexImage1D</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXIMAGE1DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexImage1D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexImage2D</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXIMAGE2DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexImage2D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDrawBuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWBUFFERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawBuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glClear</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLEARPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClear"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glClearColor</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLEARCOLORPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClearColor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glClearStencil</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLEARSTENCILPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClearStencil"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glClearDepth</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLEARDEPTHPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClearDepth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glStencilMask</name> <operator>=</operator> <operator>(</operator><name>PFNGLSTENCILMASKPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glStencilMask"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glColorMask</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLORMASKPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColorMask"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDepthMask</name> <operator>=</operator> <operator>(</operator><name>PFNGLDEPTHMASKPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDepthMask"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDisable</name> <operator>=</operator> <operator>(</operator><name>PFNGLDISABLEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDisable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glEnable</name> <operator>=</operator> <operator>(</operator><name>PFNGLENABLEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEnable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glFinish</name> <operator>=</operator> <operator>(</operator><name>PFNGLFINISHPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFinish"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glFlush</name> <operator>=</operator> <operator>(</operator><name>PFNGLFLUSHPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFlush"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBlendFunc</name> <operator>=</operator> <operator>(</operator><name>PFNGLBLENDFUNCPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBlendFunc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glLogicOp</name> <operator>=</operator> <operator>(</operator><name>PFNGLLOGICOPPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glLogicOp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glStencilFunc</name> <operator>=</operator> <operator>(</operator><name>PFNGLSTENCILFUNCPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glStencilFunc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glStencilOp</name> <operator>=</operator> <operator>(</operator><name>PFNGLSTENCILOPPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glStencilOp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDepthFunc</name> <operator>=</operator> <operator>(</operator><name>PFNGLDEPTHFUNCPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDepthFunc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glPixelStoref</name> <operator>=</operator> <operator>(</operator><name>PFNGLPIXELSTOREFPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPixelStoref"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glPixelStorei</name> <operator>=</operator> <operator>(</operator><name>PFNGLPIXELSTOREIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPixelStorei"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glReadBuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLREADBUFFERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glReadBuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glReadPixels</name> <operator>=</operator> <operator>(</operator><name>PFNGLREADPIXELSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glReadPixels"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetBooleanv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETBOOLEANVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetBooleanv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetDoublev</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETDOUBLEVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetDoublev"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetError</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETERRORPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetError"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetFloatv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETFLOATVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetFloatv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetIntegerv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETINTEGERVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetIntegerv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetString</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSTRINGPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetString"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetTexImage</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETTEXIMAGEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetTexImage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetTexParameterfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETTEXPARAMETERFVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetTexParameterfv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetTexParameteriv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETTEXPARAMETERIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetTexParameteriv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetTexLevelParameterfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETTEXLEVELPARAMETERFVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetTexLevelParameterfv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetTexLevelParameteriv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETTEXLEVELPARAMETERIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetTexLevelParameteriv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glIsEnabled</name> <operator>=</operator> <operator>(</operator><name>PFNGLISENABLEDPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsEnabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDepthRange</name> <operator>=</operator> <operator>(</operator><name>PFNGLDEPTHRANGEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDepthRange"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glViewport</name> <operator>=</operator> <operator>(</operator><name>PFNGLVIEWPORTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glViewport"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_VERSION_1_1</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_1_1</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glDrawArrays</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWARRAYSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawArrays"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDrawElements</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWELEMENTSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawElements"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glPolygonOffset</name> <operator>=</operator> <operator>(</operator><name>PFNGLPOLYGONOFFSETPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPolygonOffset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glCopyTexImage1D</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOPYTEXIMAGE1DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCopyTexImage1D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glCopyTexImage2D</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOPYTEXIMAGE2DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCopyTexImage2D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glCopyTexSubImage1D</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOPYTEXSUBIMAGE1DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCopyTexSubImage1D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glCopyTexSubImage2D</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOPYTEXSUBIMAGE2DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCopyTexSubImage2D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexSubImage1D</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXSUBIMAGE1DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexSubImage1D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexSubImage2D</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXSUBIMAGE2DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexSubImage2D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindTexture</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDTEXTUREPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindTexture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDeleteTextures</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETETEXTURESPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteTextures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGenTextures</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENTEXTURESPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenTextures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glIsTexture</name> <operator>=</operator> <operator>(</operator><name>PFNGLISTEXTUREPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsTexture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_VERSION_1_2</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_1_2</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glDrawRangeElements</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWRANGEELEMENTSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawRangeElements"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexImage3D</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXIMAGE3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexImage3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexSubImage3D</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXSUBIMAGE3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexSubImage3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glCopyTexSubImage3D</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOPYTEXSUBIMAGE3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCopyTexSubImage3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_VERSION_1_3</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_1_3</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glActiveTexture</name> <operator>=</operator> <operator>(</operator><name>PFNGLACTIVETEXTUREPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glActiveTexture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glSampleCoverage</name> <operator>=</operator> <operator>(</operator><name>PFNGLSAMPLECOVERAGEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSampleCoverage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glCompressedTexImage3D</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOMPRESSEDTEXIMAGE3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCompressedTexImage3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glCompressedTexImage2D</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOMPRESSEDTEXIMAGE2DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCompressedTexImage2D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glCompressedTexImage1D</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOMPRESSEDTEXIMAGE1DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCompressedTexImage1D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glCompressedTexSubImage3D</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCompressedTexSubImage3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glCompressedTexSubImage2D</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCompressedTexSubImage2D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glCompressedTexSubImage1D</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCompressedTexSubImage1D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetCompressedTexImage</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETCOMPRESSEDTEXIMAGEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetCompressedTexImage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_VERSION_1_4</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_1_4</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glBlendFuncSeparate</name> <operator>=</operator> <operator>(</operator><name>PFNGLBLENDFUNCSEPARATEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBlendFuncSeparate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glMultiDrawArrays</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTIDRAWARRAYSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiDrawArrays"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glMultiDrawElements</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTIDRAWELEMENTSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiDrawElements"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glPointParameterf</name> <operator>=</operator> <operator>(</operator><name>PFNGLPOINTPARAMETERFPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPointParameterf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glPointParameterfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLPOINTPARAMETERFVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPointParameterfv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glPointParameteri</name> <operator>=</operator> <operator>(</operator><name>PFNGLPOINTPARAMETERIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPointParameteri"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glPointParameteriv</name> <operator>=</operator> <operator>(</operator><name>PFNGLPOINTPARAMETERIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPointParameteriv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBlendColor</name> <operator>=</operator> <operator>(</operator><name>PFNGLBLENDCOLORPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBlendColor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBlendEquation</name> <operator>=</operator> <operator>(</operator><name>PFNGLBLENDEQUATIONPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBlendEquation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_VERSION_1_5</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_1_5</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glGenQueries</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENQUERIESPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenQueries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDeleteQueries</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETEQUERIESPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteQueries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glIsQuery</name> <operator>=</operator> <operator>(</operator><name>PFNGLISQUERYPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsQuery"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBeginQuery</name> <operator>=</operator> <operator>(</operator><name>PFNGLBEGINQUERYPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBeginQuery"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glEndQuery</name> <operator>=</operator> <operator>(</operator><name>PFNGLENDQUERYPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEndQuery"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetQueryiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETQUERYIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetQueryiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetQueryObjectiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETQUERYOBJECTIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetQueryObjectiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetQueryObjectuiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETQUERYOBJECTUIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetQueryObjectuiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindBuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDBUFFERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindBuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDeleteBuffers</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETEBUFFERSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteBuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGenBuffers</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENBUFFERSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenBuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glIsBuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLISBUFFERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsBuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBufferData</name> <operator>=</operator> <operator>(</operator><name>PFNGLBUFFERDATAPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBufferData"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBufferSubData</name> <operator>=</operator> <operator>(</operator><name>PFNGLBUFFERSUBDATAPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBufferSubData"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetBufferSubData</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETBUFFERSUBDATAPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetBufferSubData"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glMapBuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLMAPBUFFERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMapBuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUnmapBuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNMAPBUFFERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUnmapBuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetBufferParameteriv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETBUFFERPARAMETERIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetBufferParameteriv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetBufferPointerv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETBUFFERPOINTERVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetBufferPointerv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_VERSION_2_0</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_2_0</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glBlendEquationSeparate</name> <operator>=</operator> <operator>(</operator><name>PFNGLBLENDEQUATIONSEPARATEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBlendEquationSeparate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDrawBuffers</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWBUFFERSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawBuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glStencilOpSeparate</name> <operator>=</operator> <operator>(</operator><name>PFNGLSTENCILOPSEPARATEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glStencilOpSeparate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glStencilFuncSeparate</name> <operator>=</operator> <operator>(</operator><name>PFNGLSTENCILFUNCSEPARATEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glStencilFuncSeparate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glStencilMaskSeparate</name> <operator>=</operator> <operator>(</operator><name>PFNGLSTENCILMASKSEPARATEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glStencilMaskSeparate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glAttachShader</name> <operator>=</operator> <operator>(</operator><name>PFNGLATTACHSHADERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glAttachShader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindAttribLocation</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDATTRIBLOCATIONPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindAttribLocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glCompileShader</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOMPILESHADERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCompileShader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glCreateProgram</name> <operator>=</operator> <operator>(</operator><name>PFNGLCREATEPROGRAMPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCreateProgram"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glCreateShader</name> <operator>=</operator> <operator>(</operator><name>PFNGLCREATESHADERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCreateShader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDeleteProgram</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETEPROGRAMPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteProgram"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDeleteShader</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETESHADERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteShader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDetachShader</name> <operator>=</operator> <operator>(</operator><name>PFNGLDETACHSHADERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDetachShader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDisableVertexAttribArray</name> <operator>=</operator> <operator>(</operator><name>PFNGLDISABLEVERTEXATTRIBARRAYPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDisableVertexAttribArray"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glEnableVertexAttribArray</name> <operator>=</operator> <operator>(</operator><name>PFNGLENABLEVERTEXATTRIBARRAYPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEnableVertexAttribArray"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetActiveAttrib</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETACTIVEATTRIBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetActiveAttrib"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetActiveUniform</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETACTIVEUNIFORMPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetActiveUniform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetAttachedShaders</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETATTACHEDSHADERSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetAttachedShaders"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetAttribLocation</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETATTRIBLOCATIONPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetAttribLocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetProgramiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETPROGRAMIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetProgramiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetProgramInfoLog</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETPROGRAMINFOLOGPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetProgramInfoLog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetShaderiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSHADERIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetShaderiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetShaderInfoLog</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSHADERINFOLOGPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetShaderInfoLog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetShaderSource</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSHADERSOURCEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetShaderSource"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetUniformLocation</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETUNIFORMLOCATIONPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetUniformLocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetUniformfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETUNIFORMFVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetUniformfv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetUniformiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETUNIFORMIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetUniformiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetVertexAttribdv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVERTEXATTRIBDVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVertexAttribdv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetVertexAttribfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVERTEXATTRIBFVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVertexAttribfv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetVertexAttribiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVERTEXATTRIBIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVertexAttribiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetVertexAttribPointerv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVERTEXATTRIBPOINTERVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVertexAttribPointerv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glIsProgram</name> <operator>=</operator> <operator>(</operator><name>PFNGLISPROGRAMPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsProgram"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glIsShader</name> <operator>=</operator> <operator>(</operator><name>PFNGLISSHADERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsShader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glLinkProgram</name> <operator>=</operator> <operator>(</operator><name>PFNGLLINKPROGRAMPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glLinkProgram"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glShaderSource</name> <operator>=</operator> <operator>(</operator><name>PFNGLSHADERSOURCEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glShaderSource"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUseProgram</name> <operator>=</operator> <operator>(</operator><name>PFNGLUSEPROGRAMPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUseProgram"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform1f</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM1FPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform1f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform2f</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM2FPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform2f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform3f</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM3FPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform3f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform4f</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM4FPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform4f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform1i</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM1IPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform1i"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform2i</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM2IPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform2i"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform3i</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM3IPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform3i"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform4i</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM4IPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform4i"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform1fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM1FVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform1fv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform2fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM2FVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform2fv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform3fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM3FVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform3fv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform4fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM4FVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform4fv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform1iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM1IVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform1iv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform2iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM2IVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform2iv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform3iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM3IVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform3iv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform4iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM4IVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform4iv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniformMatrix2fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORMMATRIX2FVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniformMatrix2fv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniformMatrix3fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORMMATRIX3FVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniformMatrix3fv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniformMatrix4fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORMMATRIX4FVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniformMatrix4fv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glValidateProgram</name> <operator>=</operator> <operator>(</operator><name>PFNGLVALIDATEPROGRAMPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glValidateProgram"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib1d</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib1dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1DVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1dv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib1f</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1FPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib1fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1FVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1fv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib1s</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1SPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib1sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1SVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1sv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib2d</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib2dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2DVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2dv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib2f</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2FPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib2fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2FVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2fv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib2s</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2SPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib2sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2SVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2sv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib3d</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib3dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3DVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3dv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib3f</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3FPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib3fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3FVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3fv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib3s</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3SPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib3sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3SVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3sv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4Nbv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NBVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4Nbv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4Niv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4Niv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4Nsv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NSVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4Nsv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4Nub</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NUBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4Nub"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4Nubv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NUBVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4Nubv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4Nuiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NUIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4Nuiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4Nusv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NUSVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4Nusv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4bv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4BVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4bv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4d</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4dv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4DVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4dv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4f</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4FPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4FVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4fv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4IVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4iv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4s</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4SPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4SVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4sv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4ubv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4UBVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4ubv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4usv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4USVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4usv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribPointer</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBPOINTERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribPointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_VERSION_2_1</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_2_1</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glUniformMatrix2x3fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORMMATRIX2X3FVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniformMatrix2x3fv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniformMatrix3x2fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORMMATRIX3X2FVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniformMatrix3x2fv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniformMatrix2x4fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORMMATRIX2X4FVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniformMatrix2x4fv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniformMatrix4x2fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORMMATRIX4X2FVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniformMatrix4x2fv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniformMatrix3x4fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORMMATRIX3X4FVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniformMatrix3x4fv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniformMatrix4x3fv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORMMATRIX4X3FVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniformMatrix4x3fv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_VERSION_3_0</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_3_0</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glColorMaski</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLORMASKIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColorMaski"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetBooleani_v</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETBOOLEANI_VPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetBooleani_v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetIntegeri_v</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETINTEGERI_VPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetIntegeri_v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glEnablei</name> <operator>=</operator> <operator>(</operator><name>PFNGLENABLEIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEnablei"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDisablei</name> <operator>=</operator> <operator>(</operator><name>PFNGLDISABLEIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDisablei"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glIsEnabledi</name> <operator>=</operator> <operator>(</operator><name>PFNGLISENABLEDIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsEnabledi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBeginTransformFeedback</name> <operator>=</operator> <operator>(</operator><name>PFNGLBEGINTRANSFORMFEEDBACKPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBeginTransformFeedback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glEndTransformFeedback</name> <operator>=</operator> <operator>(</operator><name>PFNGLENDTRANSFORMFEEDBACKPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEndTransformFeedback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindBufferRange</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDBUFFERRANGEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindBufferRange"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindBufferBase</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDBUFFERBASEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindBufferBase"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTransformFeedbackVaryings</name> <operator>=</operator> <operator>(</operator><name>PFNGLTRANSFORMFEEDBACKVARYINGSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTransformFeedbackVaryings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetTransformFeedbackVarying</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETTRANSFORMFEEDBACKVARYINGPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetTransformFeedbackVarying"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glClampColor</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLAMPCOLORPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClampColor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBeginConditionalRender</name> <operator>=</operator> <operator>(</operator><name>PFNGLBEGINCONDITIONALRENDERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBeginConditionalRender"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glEndConditionalRender</name> <operator>=</operator> <operator>(</operator><name>PFNGLENDCONDITIONALRENDERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEndConditionalRender"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribIPointer</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBIPOINTERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribIPointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetVertexAttribIiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVERTEXATTRIBIIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVertexAttribIiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetVertexAttribIuiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVERTEXATTRIBIUIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVertexAttribIuiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribI1i</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI1IPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI1i"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribI2i</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI2IPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI2i"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribI3i</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI3IPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI3i"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribI4i</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI4IPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI4i"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribI1ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI1UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI1ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribI2ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI2UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI2ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribI3ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI3UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI3ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribI4ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI4UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI4ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribI1iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI1IVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI1iv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribI2iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI2IVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI2iv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribI3iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI3IVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI3iv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribI4iv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI4IVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI4iv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribI1uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI1UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI1uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribI2uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI2UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI2uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribI3uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI3UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI3uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribI4uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI4UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI4uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribI4bv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI4BVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI4bv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribI4sv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI4SVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI4sv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribI4ubv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI4UBVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI4ubv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribI4usv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBI4USVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribI4usv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetUniformuiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETUNIFORMUIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetUniformuiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindFragDataLocation</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDFRAGDATALOCATIONPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindFragDataLocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetFragDataLocation</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETFRAGDATALOCATIONPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetFragDataLocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform1ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM1UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform1ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform2ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM2UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform2ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform3ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM3UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform3ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform4ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM4UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform4ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform1uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM1UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform1uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform2uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM2UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform2uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform3uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM3UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform3uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniform4uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORM4UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniform4uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexParameterIiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXPARAMETERIIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexParameterIiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexParameterIuiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXPARAMETERIUIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexParameterIuiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetTexParameterIiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETTEXPARAMETERIIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetTexParameterIiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetTexParameterIuiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETTEXPARAMETERIUIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetTexParameterIuiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glClearBufferiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLEARBUFFERIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClearBufferiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glClearBufferuiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLEARBUFFERUIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClearBufferuiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glClearBufferfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLEARBUFFERFVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClearBufferfv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glClearBufferfi</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLEARBUFFERFIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClearBufferfi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetStringi</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSTRINGIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetStringi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glIsRenderbuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLISRENDERBUFFERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsRenderbuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindRenderbuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDRENDERBUFFERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindRenderbuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDeleteRenderbuffers</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETERENDERBUFFERSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteRenderbuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGenRenderbuffers</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENRENDERBUFFERSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenRenderbuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glRenderbufferStorage</name> <operator>=</operator> <operator>(</operator><name>PFNGLRENDERBUFFERSTORAGEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRenderbufferStorage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetRenderbufferParameteriv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETRENDERBUFFERPARAMETERIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetRenderbufferParameteriv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glIsFramebuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLISFRAMEBUFFERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsFramebuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindFramebuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDFRAMEBUFFERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindFramebuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDeleteFramebuffers</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETEFRAMEBUFFERSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteFramebuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGenFramebuffers</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENFRAMEBUFFERSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenFramebuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glCheckFramebufferStatus</name> <operator>=</operator> <operator>(</operator><name>PFNGLCHECKFRAMEBUFFERSTATUSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCheckFramebufferStatus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glFramebufferTexture1D</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRAMEBUFFERTEXTURE1DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFramebufferTexture1D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glFramebufferTexture2D</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRAMEBUFFERTEXTURE2DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFramebufferTexture2D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glFramebufferTexture3D</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRAMEBUFFERTEXTURE3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFramebufferTexture3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glFramebufferRenderbuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRAMEBUFFERRENDERBUFFERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFramebufferRenderbuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetFramebufferAttachmentParameteriv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetFramebufferAttachmentParameteriv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGenerateMipmap</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENERATEMIPMAPPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenerateMipmap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBlitFramebuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLBLITFRAMEBUFFERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBlitFramebuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glRenderbufferStorageMultisample</name> <operator>=</operator> <operator>(</operator><name>PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRenderbufferStorageMultisample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glFramebufferTextureLayer</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRAMEBUFFERTEXTURELAYERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFramebufferTextureLayer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glMapBufferRange</name> <operator>=</operator> <operator>(</operator><name>PFNGLMAPBUFFERRANGEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMapBufferRange"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glFlushMappedBufferRange</name> <operator>=</operator> <operator>(</operator><name>PFNGLFLUSHMAPPEDBUFFERRANGEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFlushMappedBufferRange"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindVertexArray</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDVERTEXARRAYPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindVertexArray"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDeleteVertexArrays</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETEVERTEXARRAYSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteVertexArrays"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGenVertexArrays</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENVERTEXARRAYSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenVertexArrays"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glIsVertexArray</name> <operator>=</operator> <operator>(</operator><name>PFNGLISVERTEXARRAYPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsVertexArray"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_VERSION_3_1</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_3_1</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glDrawArraysInstanced</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWARRAYSINSTANCEDPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawArraysInstanced"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDrawElementsInstanced</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWELEMENTSINSTANCEDPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawElementsInstanced"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexBuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXBUFFERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexBuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glPrimitiveRestartIndex</name> <operator>=</operator> <operator>(</operator><name>PFNGLPRIMITIVERESTARTINDEXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPrimitiveRestartIndex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glCopyBufferSubData</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOPYBUFFERSUBDATAPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCopyBufferSubData"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetUniformIndices</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETUNIFORMINDICESPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetUniformIndices"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetActiveUniformsiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETACTIVEUNIFORMSIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetActiveUniformsiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetActiveUniformName</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETACTIVEUNIFORMNAMEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetActiveUniformName"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetUniformBlockIndex</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETUNIFORMBLOCKINDEXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetUniformBlockIndex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetActiveUniformBlockiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETACTIVEUNIFORMBLOCKIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetActiveUniformBlockiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetActiveUniformBlockName</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetActiveUniformBlockName"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniformBlockBinding</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORMBLOCKBINDINGPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniformBlockBinding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindBufferRange</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDBUFFERRANGEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindBufferRange"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindBufferBase</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDBUFFERBASEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindBufferBase"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetIntegeri_v</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETINTEGERI_VPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetIntegeri_v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_VERSION_3_2</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_3_2</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glDrawElementsBaseVertex</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWELEMENTSBASEVERTEXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawElementsBaseVertex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDrawRangeElementsBaseVertex</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawRangeElementsBaseVertex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDrawElementsInstancedBaseVertex</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawElementsInstancedBaseVertex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glMultiDrawElementsBaseVertex</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiDrawElementsBaseVertex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glProvokingVertex</name> <operator>=</operator> <operator>(</operator><name>PFNGLPROVOKINGVERTEXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glProvokingVertex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glFenceSync</name> <operator>=</operator> <operator>(</operator><name>PFNGLFENCESYNCPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFenceSync"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glIsSync</name> <operator>=</operator> <operator>(</operator><name>PFNGLISSYNCPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsSync"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDeleteSync</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETESYNCPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteSync"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glClientWaitSync</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLIENTWAITSYNCPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClientWaitSync"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glWaitSync</name> <operator>=</operator> <operator>(</operator><name>PFNGLWAITSYNCPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glWaitSync"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetInteger64v</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETINTEGER64VPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetInteger64v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetSynciv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSYNCIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetSynciv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetInteger64i_v</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETINTEGER64I_VPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetInteger64i_v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetBufferParameteri64v</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETBUFFERPARAMETERI64VPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetBufferParameteri64v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glFramebufferTexture</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRAMEBUFFERTEXTUREPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFramebufferTexture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexImage2DMultisample</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXIMAGE2DMULTISAMPLEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexImage2DMultisample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexImage3DMultisample</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXIMAGE3DMULTISAMPLEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexImage3DMultisample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetMultisamplefv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETMULTISAMPLEFVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetMultisamplefv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glSampleMaski</name> <operator>=</operator> <operator>(</operator><name>PFNGLSAMPLEMASKIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSampleMaski"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_VERSION_3_3</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_VERSION_3_3</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glBindFragDataLocationIndexed</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDFRAGDATALOCATIONINDEXEDPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindFragDataLocationIndexed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetFragDataIndex</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETFRAGDATAINDEXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetFragDataIndex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGenSamplers</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENSAMPLERSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenSamplers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDeleteSamplers</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETESAMPLERSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteSamplers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glIsSampler</name> <operator>=</operator> <operator>(</operator><name>PFNGLISSAMPLERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsSampler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindSampler</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDSAMPLERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindSampler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glSamplerParameteri</name> <operator>=</operator> <operator>(</operator><name>PFNGLSAMPLERPARAMETERIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSamplerParameteri"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glSamplerParameteriv</name> <operator>=</operator> <operator>(</operator><name>PFNGLSAMPLERPARAMETERIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSamplerParameteriv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glSamplerParameterf</name> <operator>=</operator> <operator>(</operator><name>PFNGLSAMPLERPARAMETERFPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSamplerParameterf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glSamplerParameterfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLSAMPLERPARAMETERFVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSamplerParameterfv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glSamplerParameterIiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLSAMPLERPARAMETERIIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSamplerParameterIiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glSamplerParameterIuiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLSAMPLERPARAMETERIUIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSamplerParameterIuiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetSamplerParameteriv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSAMPLERPARAMETERIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetSamplerParameteriv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetSamplerParameterIiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSAMPLERPARAMETERIIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetSamplerParameterIiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetSamplerParameterfv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSAMPLERPARAMETERFVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetSamplerParameterfv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetSamplerParameterIuiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSAMPLERPARAMETERIUIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetSamplerParameterIuiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glQueryCounter</name> <operator>=</operator> <operator>(</operator><name>PFNGLQUERYCOUNTERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glQueryCounter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetQueryObjecti64v</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETQUERYOBJECTI64VPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetQueryObjecti64v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetQueryObjectui64v</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETQUERYOBJECTUI64VPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetQueryObjectui64v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribDivisor</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBDIVISORPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribDivisor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribP1ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBP1UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribP1ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribP1uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBP1UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribP1uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribP2ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBP2UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribP2ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribP2uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBP2UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribP2uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribP3ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBP3UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribP3ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribP3uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBP3UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribP3uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribP4ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBP4UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribP4ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribP4uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBP4UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribP4uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexP2ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXP2UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexP2ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexP2uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXP2UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexP2uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexP3ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXP3UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexP3ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexP3uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXP3UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexP3uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexP4ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXP4UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexP4ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexP4uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXP4UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexP4uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexCoordP1ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORDP1UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoordP1ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexCoordP1uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORDP1UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoordP1uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexCoordP2ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORDP2UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoordP2ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexCoordP2uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORDP2UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoordP2uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexCoordP3ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORDP3UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoordP3ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexCoordP3uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORDP3UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoordP3uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexCoordP4ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORDP4UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoordP4ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexCoordP4uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORDP4UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoordP4uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glMultiTexCoordP1ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORDP1UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoordP1ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glMultiTexCoordP1uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORDP1UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoordP1uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glMultiTexCoordP2ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORDP2UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoordP2ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glMultiTexCoordP2uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORDP2UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoordP2uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glMultiTexCoordP3ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORDP3UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoordP3ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glMultiTexCoordP3uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORDP3UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoordP3uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glMultiTexCoordP4ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORDP4UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoordP4ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glMultiTexCoordP4uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLMULTITEXCOORDP4UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMultiTexCoordP4uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glNormalP3ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLNORMALP3UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glNormalP3ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glNormalP3uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLNORMALP3UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glNormalP3uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glColorP3ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLORP3UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColorP3ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glColorP3uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLORP3UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColorP3uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glColorP4ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLORP4UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColorP4ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glColorP4uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLORP4UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColorP4uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glSecondaryColorP3ui</name> <operator>=</operator> <operator>(</operator><name>PFNGLSECONDARYCOLORP3UIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSecondaryColorP3ui"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glSecondaryColorP3uiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLSECONDARYCOLORP3UIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSecondaryColorP3uiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_AMD_debug_output</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_AMD_debug_output</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glDebugMessageEnableAMD</name> <operator>=</operator> <operator>(</operator><name>PFNGLDEBUGMESSAGEENABLEAMDPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDebugMessageEnableAMD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDebugMessageInsertAMD</name> <operator>=</operator> <operator>(</operator><name>PFNGLDEBUGMESSAGEINSERTAMDPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDebugMessageInsertAMD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDebugMessageCallbackAMD</name> <operator>=</operator> <operator>(</operator><name>PFNGLDEBUGMESSAGECALLBACKAMDPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDebugMessageCallbackAMD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetDebugMessageLogAMD</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETDEBUGMESSAGELOGAMDPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetDebugMessageLogAMD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_ARB_ES2_compatibility</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_ARB_ES2_compatibility</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glReleaseShaderCompiler</name> <operator>=</operator> <operator>(</operator><name>PFNGLRELEASESHADERCOMPILERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glReleaseShaderCompiler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glShaderBinary</name> <operator>=</operator> <operator>(</operator><name>PFNGLSHADERBINARYPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glShaderBinary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetShaderPrecisionFormat</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSHADERPRECISIONFORMATPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetShaderPrecisionFormat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDepthRangef</name> <operator>=</operator> <operator>(</operator><name>PFNGLDEPTHRANGEFPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDepthRangef"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glClearDepthf</name> <operator>=</operator> <operator>(</operator><name>PFNGLCLEARDEPTHFPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glClearDepthf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_ARB_buffer_storage</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_ARB_buffer_storage</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glBufferStorage</name> <operator>=</operator> <operator>(</operator><name>PFNGLBUFFERSTORAGEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBufferStorage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_ARB_debug_output</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_ARB_debug_output</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glDebugMessageControlARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLDEBUGMESSAGECONTROLARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDebugMessageControlARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDebugMessageInsertARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLDEBUGMESSAGEINSERTARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDebugMessageInsertARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDebugMessageCallbackARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLDEBUGMESSAGECALLBACKARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDebugMessageCallbackARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetDebugMessageLogARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETDEBUGMESSAGELOGARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetDebugMessageLogARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_ARB_draw_buffers</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_ARB_draw_buffers</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glDrawBuffersARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWBUFFERSARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawBuffersARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_ARB_draw_buffers_blend</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_ARB_draw_buffers_blend</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glBlendEquationiARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLBLENDEQUATIONIARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBlendEquationiARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBlendEquationSeparateiARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLBLENDEQUATIONSEPARATEIARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBlendEquationSeparateiARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBlendFunciARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLBLENDFUNCIARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBlendFunciARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBlendFuncSeparateiARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLBLENDFUNCSEPARATEIARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBlendFuncSeparateiARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_ARB_fragment_program</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_ARB_fragment_program</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glProgramStringARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLPROGRAMSTRINGARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glProgramStringARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindProgramARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDPROGRAMARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindProgramARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDeleteProgramsARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETEPROGRAMSARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteProgramsARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGenProgramsARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENPROGRAMSARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenProgramsARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glProgramEnvParameter4dARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLPROGRAMENVPARAMETER4DARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glProgramEnvParameter4dARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glProgramEnvParameter4dvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLPROGRAMENVPARAMETER4DVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glProgramEnvParameter4dvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glProgramEnvParameter4fARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLPROGRAMENVPARAMETER4FARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glProgramEnvParameter4fARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glProgramEnvParameter4fvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLPROGRAMENVPARAMETER4FVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glProgramEnvParameter4fvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glProgramLocalParameter4dARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLPROGRAMLOCALPARAMETER4DARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glProgramLocalParameter4dARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glProgramLocalParameter4dvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLPROGRAMLOCALPARAMETER4DVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glProgramLocalParameter4dvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glProgramLocalParameter4fARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLPROGRAMLOCALPARAMETER4FARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glProgramLocalParameter4fARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glProgramLocalParameter4fvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLPROGRAMLOCALPARAMETER4FVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glProgramLocalParameter4fvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetProgramEnvParameterdvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETPROGRAMENVPARAMETERDVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetProgramEnvParameterdvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetProgramEnvParameterfvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETPROGRAMENVPARAMETERFVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetProgramEnvParameterfvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetProgramLocalParameterdvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetProgramLocalParameterdvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetProgramLocalParameterfvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetProgramLocalParameterfvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetProgramivARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETPROGRAMIVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetProgramivARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetProgramStringARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETPROGRAMSTRINGARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetProgramStringARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glIsProgramARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLISPROGRAMARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsProgramARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_ARB_framebuffer_object</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_ARB_framebuffer_object</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glIsRenderbuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLISRENDERBUFFERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsRenderbuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindRenderbuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDRENDERBUFFERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindRenderbuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDeleteRenderbuffers</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETERENDERBUFFERSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteRenderbuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGenRenderbuffers</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENRENDERBUFFERSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenRenderbuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glRenderbufferStorage</name> <operator>=</operator> <operator>(</operator><name>PFNGLRENDERBUFFERSTORAGEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRenderbufferStorage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetRenderbufferParameteriv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETRENDERBUFFERPARAMETERIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetRenderbufferParameteriv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glIsFramebuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLISFRAMEBUFFERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsFramebuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindFramebuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDFRAMEBUFFERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindFramebuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDeleteFramebuffers</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETEFRAMEBUFFERSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteFramebuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGenFramebuffers</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENFRAMEBUFFERSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenFramebuffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glCheckFramebufferStatus</name> <operator>=</operator> <operator>(</operator><name>PFNGLCHECKFRAMEBUFFERSTATUSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCheckFramebufferStatus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glFramebufferTexture1D</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRAMEBUFFERTEXTURE1DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFramebufferTexture1D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glFramebufferTexture2D</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRAMEBUFFERTEXTURE2DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFramebufferTexture2D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glFramebufferTexture3D</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRAMEBUFFERTEXTURE3DPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFramebufferTexture3D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glFramebufferRenderbuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRAMEBUFFERRENDERBUFFERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFramebufferRenderbuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetFramebufferAttachmentParameteriv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetFramebufferAttachmentParameteriv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGenerateMipmap</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENERATEMIPMAPPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenerateMipmap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBlitFramebuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLBLITFRAMEBUFFERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBlitFramebuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glRenderbufferStorageMultisample</name> <operator>=</operator> <operator>(</operator><name>PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRenderbufferStorageMultisample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glFramebufferTextureLayer</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRAMEBUFFERTEXTURELAYERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFramebufferTextureLayer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_ARB_multisample</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_ARB_multisample</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glSampleCoverageARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLSAMPLECOVERAGEARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSampleCoverageARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_ARB_sample_locations</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_ARB_sample_locations</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glFramebufferSampleLocationsfvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFramebufferSampleLocationsfvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glNamedFramebufferSampleLocationsfvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glNamedFramebufferSampleLocationsfvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glEvaluateDepthValuesARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLEVALUATEDEPTHVALUESARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEvaluateDepthValuesARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_ARB_texture_compression</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_ARB_texture_compression</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glCompressedTexImage3DARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOMPRESSEDTEXIMAGE3DARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCompressedTexImage3DARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glCompressedTexImage2DARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOMPRESSEDTEXIMAGE2DARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCompressedTexImage2DARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glCompressedTexImage1DARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOMPRESSEDTEXIMAGE1DARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCompressedTexImage1DARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glCompressedTexSubImage3DARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCompressedTexSubImage3DARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glCompressedTexSubImage2DARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCompressedTexSubImage2DARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glCompressedTexSubImage1DARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCompressedTexSubImage1DARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetCompressedTexImageARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETCOMPRESSEDTEXIMAGEARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetCompressedTexImageARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_ARB_texture_multisample</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_ARB_texture_multisample</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glTexImage2DMultisample</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXIMAGE2DMULTISAMPLEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexImage2DMultisample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexImage3DMultisample</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXIMAGE3DMULTISAMPLEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexImage3DMultisample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetMultisamplefv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETMULTISAMPLEFVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetMultisamplefv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glSampleMaski</name> <operator>=</operator> <operator>(</operator><name>PFNGLSAMPLEMASKIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSampleMaski"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_ARB_uniform_buffer_object</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_ARB_uniform_buffer_object</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glGetUniformIndices</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETUNIFORMINDICESPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetUniformIndices"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetActiveUniformsiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETACTIVEUNIFORMSIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetActiveUniformsiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetActiveUniformName</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETACTIVEUNIFORMNAMEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetActiveUniformName"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetUniformBlockIndex</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETUNIFORMBLOCKINDEXPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetUniformBlockIndex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetActiveUniformBlockiv</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETACTIVEUNIFORMBLOCKIVPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetActiveUniformBlockiv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetActiveUniformBlockName</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetActiveUniformBlockName"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUniformBlockBinding</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNIFORMBLOCKBINDINGPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUniformBlockBinding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindBufferRange</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDBUFFERRANGEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindBufferRange"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindBufferBase</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDBUFFERBASEPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindBufferBase"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetIntegeri_v</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETINTEGERI_VPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetIntegeri_v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_ARB_vertex_array_object</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_ARB_vertex_array_object</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glBindVertexArray</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDVERTEXARRAYPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindVertexArray"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDeleteVertexArrays</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETEVERTEXARRAYSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteVertexArrays"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGenVertexArrays</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENVERTEXARRAYSPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenVertexArrays"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glIsVertexArray</name> <operator>=</operator> <operator>(</operator><name>PFNGLISVERTEXARRAYPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsVertexArray"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_ARB_vertex_attrib_binding</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_ARB_vertex_attrib_binding</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glBindVertexBuffer</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDVERTEXBUFFERPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindVertexBuffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribFormat</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBFORMATPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribFormat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribIFormat</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBIFORMATPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribIFormat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribLFormat</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBLFORMATPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribLFormat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribBinding</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBBINDINGPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribBinding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexBindingDivisor</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXBINDINGDIVISORPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexBindingDivisor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_ARB_vertex_buffer_object</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_ARB_vertex_buffer_object</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glBindBufferARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDBUFFERARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindBufferARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDeleteBuffersARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETEBUFFERSARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteBuffersARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGenBuffersARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENBUFFERSARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenBuffersARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glIsBufferARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLISBUFFERARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsBufferARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBufferDataARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLBUFFERDATAARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBufferDataARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBufferSubDataARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLBUFFERSUBDATAARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBufferSubDataARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetBufferSubDataARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETBUFFERSUBDATAARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetBufferSubDataARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glMapBufferARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLMAPBUFFERARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glMapBufferARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUnmapBufferARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLUNMAPBUFFERARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUnmapBufferARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetBufferParameterivARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETBUFFERPARAMETERIVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetBufferParameterivARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetBufferPointervARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETBUFFERPOINTERVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetBufferPointervARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_ARB_vertex_program</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_ARB_vertex_program</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib1dARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1DARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1dARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib1dvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1DVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1dvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib1fARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1FARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1fARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib1fvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1FVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1fvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib1sARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1SARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1sARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib1svARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1SVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1svARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib2dARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2DARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2dARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib2dvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2DVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2dvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib2fARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2FARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2fARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib2fvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2FVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2fvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib2sARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2SARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2sARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib2svARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2SVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2svARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib3dARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3DARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3dARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib3dvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3DVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3dvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib3fARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3FARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3fARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib3fvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3FVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3fvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib3sARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3SARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3sARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib3svARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3SVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3svARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4NbvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NBVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4NbvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4NivARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NIVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4NivARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4NsvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NSVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4NsvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4NubARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NUBARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4NubARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4NubvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NUBVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4NubvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4NuivARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NUIVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4NuivARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4NusvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NUSVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4NusvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4bvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4BVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4bvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4dARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4DARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4dARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4dvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4DVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4dvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4fARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4FARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4fARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4fvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4FVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4fvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4ivARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4IVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4ivARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4sARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4SARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4sARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4svARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4SVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4svARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4ubvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4UBVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4ubvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4uivARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4UIVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4uivARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4usvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4USVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4usvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribPointerARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBPOINTERARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribPointerARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glEnableVertexAttribArrayARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLENABLEVERTEXATTRIBARRAYARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEnableVertexAttribArrayARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDisableVertexAttribArrayARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLDISABLEVERTEXATTRIBARRAYARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDisableVertexAttribArrayARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glProgramStringARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLPROGRAMSTRINGARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glProgramStringARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindProgramARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDPROGRAMARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindProgramARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDeleteProgramsARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETEPROGRAMSARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteProgramsARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGenProgramsARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENPROGRAMSARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenProgramsARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glProgramEnvParameter4dARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLPROGRAMENVPARAMETER4DARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glProgramEnvParameter4dARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glProgramEnvParameter4dvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLPROGRAMENVPARAMETER4DVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glProgramEnvParameter4dvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glProgramEnvParameter4fARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLPROGRAMENVPARAMETER4FARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glProgramEnvParameter4fARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glProgramEnvParameter4fvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLPROGRAMENVPARAMETER4FVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glProgramEnvParameter4fvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glProgramLocalParameter4dARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLPROGRAMLOCALPARAMETER4DARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glProgramLocalParameter4dARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glProgramLocalParameter4dvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLPROGRAMLOCALPARAMETER4DVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glProgramLocalParameter4dvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glProgramLocalParameter4fARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLPROGRAMLOCALPARAMETER4FARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glProgramLocalParameter4fARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glProgramLocalParameter4fvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLPROGRAMLOCALPARAMETER4FVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glProgramLocalParameter4fvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetProgramEnvParameterdvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETPROGRAMENVPARAMETERDVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetProgramEnvParameterdvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetProgramEnvParameterfvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETPROGRAMENVPARAMETERFVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetProgramEnvParameterfvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetProgramLocalParameterdvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetProgramLocalParameterdvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetProgramLocalParameterfvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetProgramLocalParameterfvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetProgramivARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETPROGRAMIVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetProgramivARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetProgramStringARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETPROGRAMSTRINGARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetProgramStringARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetVertexAttribdvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVERTEXATTRIBDVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVertexAttribdvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetVertexAttribfvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVERTEXATTRIBFVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVertexAttribfvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetVertexAttribivARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVERTEXATTRIBIVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVertexAttribivARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetVertexAttribPointervARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVERTEXATTRIBPOINTERVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVertexAttribPointervARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glIsProgramARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLISPROGRAMARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsProgramARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_ARB_vertex_shader</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_ARB_vertex_shader</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib1fARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1FARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1fARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib1sARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1SARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1sARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib1dARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1DARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1dARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib2fARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2FARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2fARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib2sARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2SARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2sARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib2dARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2DARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2dARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib3fARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3FARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3fARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib3sARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3SARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3sARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib3dARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3DARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3dARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4fARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4FARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4fARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4sARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4SARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4sARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4dARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4DARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4dARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4NubARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NUBARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4NubARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib1fvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1FVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1fvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib1svARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1SVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1svARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib1dvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB1DVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib1dvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib2fvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2FVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2fvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib2svARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2SVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2svARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib2dvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB2DVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib2dvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib3fvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3FVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3fvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib3svARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3SVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3svARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib3dvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB3DVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib3dvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4fvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4FVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4fvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4svARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4SVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4svARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4dvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4DVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4dvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4ivARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4IVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4ivARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4bvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4BVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4bvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4ubvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4UBVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4ubvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4usvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4USVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4usvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4uivARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4UIVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4uivARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4NbvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NBVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4NbvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4NsvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NSVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4NsvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4NivARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NIVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4NivARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4NubvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NUBVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4NubvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4NusvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NUSVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4NusvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttrib4NuivARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIB4NUIVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttrib4NuivARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexAttribPointerARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXATTRIBPOINTERARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexAttribPointerARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glEnableVertexAttribArrayARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLENABLEVERTEXATTRIBARRAYARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEnableVertexAttribArrayARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDisableVertexAttribArrayARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLDISABLEVERTEXATTRIBARRAYARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDisableVertexAttribArrayARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindAttribLocationARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDATTRIBLOCATIONARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindAttribLocationARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetActiveAttribARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETACTIVEATTRIBARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetActiveAttribARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetAttribLocationARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETATTRIBLOCATIONARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetAttribLocationARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetVertexAttribdvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVERTEXATTRIBDVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVertexAttribdvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetVertexAttribfvARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVERTEXATTRIBFVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVertexAttribfvARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetVertexAttribivARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVERTEXATTRIBIVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVertexAttribivARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetVertexAttribPointervARB</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVERTEXATTRIBPOINTERVARBPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVertexAttribPointervARB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_ATI_element_array</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_ATI_element_array</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glElementPointerATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLELEMENTPOINTERATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glElementPointerATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDrawElementArrayATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWELEMENTARRAYATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawElementArrayATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDrawRangeElementArrayATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWRANGEELEMENTARRAYATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawRangeElementArrayATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_ATI_fragment_shader</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_ATI_fragment_shader</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glGenFragmentShadersATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENFRAGMENTSHADERSATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenFragmentShadersATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindFragmentShaderATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDFRAGMENTSHADERATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindFragmentShaderATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDeleteFragmentShaderATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETEFRAGMENTSHADERATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteFragmentShaderATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBeginFragmentShaderATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLBEGINFRAGMENTSHADERATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBeginFragmentShaderATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glEndFragmentShaderATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLENDFRAGMENTSHADERATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEndFragmentShaderATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glPassTexCoordATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLPASSTEXCOORDATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPassTexCoordATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glSampleMapATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLSAMPLEMAPATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSampleMapATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glColorFragmentOp1ATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLORFRAGMENTOP1ATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColorFragmentOp1ATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glColorFragmentOp2ATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLORFRAGMENTOP2ATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColorFragmentOp2ATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glColorFragmentOp3ATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLORFRAGMENTOP3ATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColorFragmentOp3ATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glAlphaFragmentOp1ATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLALPHAFRAGMENTOP1ATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glAlphaFragmentOp1ATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glAlphaFragmentOp2ATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLALPHAFRAGMENTOP2ATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glAlphaFragmentOp2ATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glAlphaFragmentOp3ATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLALPHAFRAGMENTOP3ATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glAlphaFragmentOp3ATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glSetFragmentShaderConstantATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLSETFRAGMENTSHADERCONSTANTATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSetFragmentShaderConstantATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_ATI_vertex_array_object</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_ATI_vertex_array_object</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glNewObjectBufferATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLNEWOBJECTBUFFERATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glNewObjectBufferATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glIsObjectBufferATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLISOBJECTBUFFERATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsObjectBufferATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glUpdateObjectBufferATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLUPDATEOBJECTBUFFERATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glUpdateObjectBufferATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetObjectBufferfvATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETOBJECTBUFFERFVATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetObjectBufferfvATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetObjectBufferivATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETOBJECTBUFFERIVATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetObjectBufferivATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glFreeObjectBufferATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLFREEOBJECTBUFFERATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFreeObjectBufferATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glArrayObjectATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLARRAYOBJECTATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glArrayObjectATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetArrayObjectfvATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETARRAYOBJECTFVATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetArrayObjectfvATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetArrayObjectivATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETARRAYOBJECTIVATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetArrayObjectivATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVariantArrayObjectATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLVARIANTARRAYOBJECTATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVariantArrayObjectATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetVariantArrayObjectfvATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVARIANTARRAYOBJECTFVATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVariantArrayObjectfvATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetVariantArrayObjectivATI</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVARIANTARRAYOBJECTIVATIPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVariantArrayObjectivATI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_EXT_blend_color</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_EXT_blend_color</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glBlendColorEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLBLENDCOLOREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBlendColorEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_EXT_blend_equation_separate</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_EXT_blend_equation_separate</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glBlendEquationSeparateEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLBLENDEQUATIONSEPARATEEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBlendEquationSeparateEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_EXT_blend_func_separate</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_EXT_blend_func_separate</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glBlendFuncSeparateEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLBLENDFUNCSEPARATEEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBlendFuncSeparateEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_EXT_debug_marker</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_EXT_debug_marker</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glInsertEventMarkerEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLINSERTEVENTMARKEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glInsertEventMarkerEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glPushGroupMarkerEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLPUSHGROUPMARKEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPushGroupMarkerEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glPopGroupMarkerEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLPOPGROUPMARKEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glPopGroupMarkerEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_EXT_framebuffer_blit</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_EXT_framebuffer_blit</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glBlitFramebufferEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLBLITFRAMEBUFFEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBlitFramebufferEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_EXT_framebuffer_multisample</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_EXT_framebuffer_multisample</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glRenderbufferStorageMultisampleEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRenderbufferStorageMultisampleEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_EXT_framebuffer_object</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_EXT_framebuffer_object</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glIsRenderbufferEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLISRENDERBUFFEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsRenderbufferEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindRenderbufferEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDRENDERBUFFEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindRenderbufferEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDeleteRenderbuffersEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETERENDERBUFFERSEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteRenderbuffersEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGenRenderbuffersEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENRENDERBUFFERSEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenRenderbuffersEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glRenderbufferStorageEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLRENDERBUFFERSTORAGEEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glRenderbufferStorageEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetRenderbufferParameterivEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetRenderbufferParameterivEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glIsFramebufferEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLISFRAMEBUFFEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsFramebufferEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindFramebufferEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDFRAMEBUFFEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindFramebufferEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDeleteFramebuffersEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETEFRAMEBUFFERSEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteFramebuffersEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGenFramebuffersEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENFRAMEBUFFERSEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenFramebuffersEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glCheckFramebufferStatusEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glCheckFramebufferStatusEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glFramebufferTexture1DEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRAMEBUFFERTEXTURE1DEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFramebufferTexture1DEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glFramebufferTexture2DEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRAMEBUFFERTEXTURE2DEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFramebufferTexture2DEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glFramebufferTexture3DEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRAMEBUFFERTEXTURE3DEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFramebufferTexture3DEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glFramebufferRenderbufferEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glFramebufferRenderbufferEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetFramebufferAttachmentParameterivEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetFramebufferAttachmentParameterivEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGenerateMipmapEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENERATEMIPMAPEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenerateMipmapEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_EXT_vertex_array</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_EXT_vertex_array</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glArrayElementEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLARRAYELEMENTEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glArrayElementEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glColorPointerEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLCOLORPOINTEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glColorPointerEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDrawArraysEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLDRAWARRAYSEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDrawArraysEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glEdgeFlagPointerEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLEDGEFLAGPOINTEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEdgeFlagPointerEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetPointervEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETPOINTERVEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetPointervEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glIndexPointerEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLINDEXPOINTEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIndexPointerEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glNormalPointerEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLNORMALPOINTEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glNormalPointerEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glTexCoordPointerEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLTEXCOORDPOINTEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glTexCoordPointerEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVertexPointerEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLVERTEXPOINTEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVertexPointerEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>load_GL_EXT_vertex_shader</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>GLAD_GL_EXT_vertex_shader</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>glad_glBeginVertexShaderEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLBEGINVERTEXSHADEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBeginVertexShaderEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glEndVertexShaderEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLENDVERTEXSHADEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEndVertexShaderEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindVertexShaderEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDVERTEXSHADEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindVertexShaderEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGenVertexShadersEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENVERTEXSHADERSEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenVertexShadersEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDeleteVertexShaderEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETEVERTEXSHADEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDeleteVertexShaderEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glShaderOp1EXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLSHADEROP1EXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glShaderOp1EXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glShaderOp2EXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLSHADEROP2EXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glShaderOp2EXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glShaderOp3EXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLSHADEROP3EXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glShaderOp3EXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glSwizzleEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLSWIZZLEEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSwizzleEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glWriteMaskEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLWRITEMASKEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glWriteMaskEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glInsertComponentEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLINSERTCOMPONENTEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glInsertComponentEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glExtractComponentEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLEXTRACTCOMPONENTEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glExtractComponentEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGenSymbolsEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENSYMBOLSEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGenSymbolsEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glSetInvariantEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLSETINVARIANTEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSetInvariantEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glSetLocalConstantEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLSETLOCALCONSTANTEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glSetLocalConstantEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVariantbvEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLVARIANTBVEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVariantbvEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVariantsvEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLVARIANTSVEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVariantsvEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVariantivEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLVARIANTIVEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVariantivEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVariantfvEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLVARIANTFVEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVariantfvEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVariantdvEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLVARIANTDVEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVariantdvEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVariantubvEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLVARIANTUBVEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVariantubvEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVariantusvEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLVARIANTUSVEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVariantusvEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVariantuivEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLVARIANTUIVEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVariantuivEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glVariantPointerEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLVARIANTPOINTEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glVariantPointerEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glEnableVariantClientStateEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLENABLEVARIANTCLIENTSTATEEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glEnableVariantClientStateEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glDisableVariantClientStateEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glDisableVariantClientStateEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindLightParameterEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDLIGHTPARAMETEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindLightParameterEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindMaterialParameterEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDMATERIALPARAMETEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindMaterialParameterEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindTexGenParameterEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDTEXGENPARAMETEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindTexGenParameterEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindTextureUnitParameterEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDTEXTUREUNITPARAMETEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindTextureUnitParameterEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glBindParameterEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDPARAMETEREXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glBindParameterEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glIsVariantEnabledEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLISVARIANTENABLEDEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glIsVariantEnabledEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetVariantBooleanvEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVARIANTBOOLEANVEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVariantBooleanvEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetVariantIntegervEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVARIANTINTEGERVEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVariantIntegervEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetVariantFloatvEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVARIANTFLOATVEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVariantFloatvEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetVariantPointervEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETVARIANTPOINTERVEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetVariantPointervEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetInvariantBooleanvEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETINVARIANTBOOLEANVEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetInvariantBooleanvEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetInvariantIntegervEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETINVARIANTINTEGERVEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetInvariantIntegervEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetInvariantFloatvEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETINVARIANTFLOATVEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetInvariantFloatvEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetLocalConstantBooleanvEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetLocalConstantBooleanvEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetLocalConstantIntegervEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETLOCALCONSTANTINTEGERVEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetLocalConstantIntegervEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glad_glGetLocalConstantFloatvEXT</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETLOCALCONSTANTFLOATVEXTPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetLocalConstantFloatvEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>find_extensionsGL</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_exts</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>GLAD_GL_AMD_debug_output</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_AMD_debug_output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_AMD_query_buffer_object</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_AMD_query_buffer_object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_ES2_compatibility</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_ES2_compatibility"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_ES3_compatibility</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_ES3_compatibility"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_buffer_storage</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_buffer_storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_compatibility</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_compatibility"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_compressed_texture_pixel_storage</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_compressed_texture_pixel_storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_debug_output</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_debug_output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_depth_buffer_float</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_depth_buffer_float"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_depth_clamp</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_depth_clamp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_depth_texture</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_depth_texture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_draw_buffers</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_draw_buffers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_draw_buffers_blend</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_draw_buffers_blend"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_explicit_attrib_location</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_explicit_attrib_location"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_explicit_uniform_location</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_explicit_uniform_location"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_fragment_program</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_fragment_program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_fragment_shader</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_fragment_shader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_framebuffer_object</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_framebuffer_object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_framebuffer_sRGB</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_framebuffer_sRGB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_multisample</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_multisample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_sample_locations</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_sample_locations"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_texture_compression</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_texture_compression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_texture_float</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_texture_float"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_texture_multisample</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_texture_multisample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_texture_non_power_of_two</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_texture_non_power_of_two"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_texture_rg</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_texture_rg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_texture_swizzle</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_texture_swizzle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_uniform_buffer_object</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_uniform_buffer_object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_vertex_array_object</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_vertex_array_object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_vertex_attrib_binding</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_vertex_attrib_binding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_vertex_buffer_object</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_vertex_buffer_object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_vertex_program</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_vertex_program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ARB_vertex_shader</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ARB_vertex_shader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ATI_element_array</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ATI_element_array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ATI_fragment_shader</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ATI_fragment_shader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_ATI_vertex_array_object</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_ATI_vertex_array_object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_EXT_blend_color</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_EXT_blend_color"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_EXT_blend_equation_separate</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_EXT_blend_equation_separate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_EXT_blend_func_separate</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_EXT_blend_func_separate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_EXT_debug_marker</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_EXT_debug_marker"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_EXT_framebuffer_blit</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_EXT_framebuffer_blit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_EXT_framebuffer_multisample</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_EXT_framebuffer_multisample"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_EXT_framebuffer_multisample_blit_scaled</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_EXT_framebuffer_multisample_blit_scaled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_EXT_framebuffer_object</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_EXT_framebuffer_object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_EXT_framebuffer_sRGB</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_EXT_framebuffer_sRGB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_EXT_index_array_formats</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_EXT_index_array_formats"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_EXT_texture</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_EXT_texture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_EXT_texture_compression_s3tc</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_EXT_texture_compression_s3tc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_EXT_texture_sRGB</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_EXT_texture_sRGB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_EXT_texture_swizzle</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_EXT_texture_swizzle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_EXT_vertex_array</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_EXT_vertex_array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_EXT_vertex_shader</name> <operator>=</operator> <call><name>has_ext</name><argument_list>(<argument><expr><literal type="string">"GL_EXT_vertex_shader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free_exts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>find_coreGL</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>





<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>prefixes</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"OpenGL ES-CM "</literal></expr>,
<expr><literal type="string">"OpenGL ES-CL "</literal></expr>,
<expr><literal type="string">"OpenGL ES "</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <call><name>glGetString</name><argument_list>(<argument><expr><name>GL_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>version</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>prefixes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>prefixes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>prefixes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>version</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>sscanf_s</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><literal type="string">"%d.%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>major</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><literal type="string">"%d.%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>major</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>GLVersion</name><operator>.</operator><name>major</name></name> <operator>=</operator> <name>major</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>GLVersion</name><operator>.</operator><name>minor</name></name> <operator>=</operator> <name>minor</name></expr>;</expr_stmt>
<expr_stmt><expr><name>max_loaded_major</name> <operator>=</operator> <name>major</name></expr>;</expr_stmt> <expr_stmt><expr><name>max_loaded_minor</name> <operator>=</operator> <name>minor</name></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_VERSION_1_0</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_VERSION_1_1</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_VERSION_1_2</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_VERSION_1_3</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">3</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_VERSION_1_4</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_VERSION_1_5</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">5</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_VERSION_2_0</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_VERSION_2_1</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_VERSION_3_0</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_VERSION_3_1</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_VERSION_3_2</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>GLAD_GL_VERSION_3_3</name> <operator>=</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">3</literal><operator>)</operator> <operator>||</operator> <name>major</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>GLVersion</name><operator>.</operator><name>major</name></name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>||</operator> <operator>(</operator><name><name>GLVersion</name><operator>.</operator><name>major</name></name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>GLVersion</name><operator>.</operator><name>minor</name></name> <operator>&gt;=</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>max_loaded_major</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>max_loaded_minor</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>gladLoadGLLoader</name><parameter_list>(<parameter><decl><type><name>GLADloadproc</name></type> <name>load</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>GLVersion</name><operator>.</operator><name>major</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>GLVersion</name><operator>.</operator><name>minor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>glGetString</name> <operator>=</operator> <operator>(</operator><name>PFNGLGETSTRINGPROC</name><operator>)</operator><call><name>load</name><argument_list>(<argument><expr><literal type="string">"glGetString"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>glGetString</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>glGetString</name><argument_list>(<argument><expr><name>GL_VERSION</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>find_coreGL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_VERSION_1_0</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_VERSION_1_1</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_VERSION_1_2</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_VERSION_1_3</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_VERSION_1_4</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_VERSION_1_5</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_VERSION_2_0</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_VERSION_2_1</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_VERSION_3_0</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_VERSION_3_1</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_VERSION_3_2</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_VERSION_3_3</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_extensionsGL</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>load_GL_AMD_debug_output</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_ARB_ES2_compatibility</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_ARB_buffer_storage</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_ARB_debug_output</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_ARB_draw_buffers</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_ARB_draw_buffers_blend</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_ARB_fragment_program</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_ARB_framebuffer_object</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_ARB_multisample</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_ARB_sample_locations</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_ARB_texture_compression</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_ARB_texture_multisample</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_ARB_uniform_buffer_object</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_ARB_vertex_array_object</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_ARB_vertex_attrib_binding</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_ARB_vertex_buffer_object</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_ARB_vertex_program</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_ARB_vertex_shader</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_ATI_element_array</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_ATI_fragment_shader</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_ATI_vertex_array_object</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_EXT_blend_color</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_EXT_blend_equation_separate</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_EXT_blend_func_separate</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_EXT_debug_marker</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_EXT_framebuffer_blit</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_EXT_framebuffer_multisample</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_EXT_framebuffer_object</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_EXT_vertex_array</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_GL_EXT_vertex_shader</name><argument_list>(<argument><expr><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>GLVersion</name><operator>.</operator><name>major</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>GLVersion</name><operator>.</operator><name>minor</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
