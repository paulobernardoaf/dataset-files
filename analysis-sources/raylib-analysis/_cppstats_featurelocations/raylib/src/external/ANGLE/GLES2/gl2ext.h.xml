<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\ANGLE\GLES2\gl2ext.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__gl2ext_h_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__gl2ext_h_</name></cpp:macro></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APIENTRYP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APIENTRYP</name></cpp:macro> <cpp:value>GL_APIENTRY*</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_compressed_ETC1_RGB8_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ETC1_RGB8_OES</name></cpp:macro> <cpp:value>0x8D64</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_compressed_paletted_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE4_RGB8_OES</name></cpp:macro> <cpp:value>0x8B90</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE4_RGBA8_OES</name></cpp:macro> <cpp:value>0x8B91</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE4_R5_G6_B5_OES</name></cpp:macro> <cpp:value>0x8B92</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE4_RGBA4_OES</name></cpp:macro> <cpp:value>0x8B93</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE4_RGB5_A1_OES</name></cpp:macro> <cpp:value>0x8B94</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE8_RGB8_OES</name></cpp:macro> <cpp:value>0x8B95</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE8_RGBA8_OES</name></cpp:macro> <cpp:value>0x8B96</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE8_R5_G6_B5_OES</name></cpp:macro> <cpp:value>0x8B97</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE8_RGBA4_OES</name></cpp:macro> <cpp:value>0x8B98</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PALETTE8_RGB5_A1_OES</name></cpp:macro> <cpp:value>0x8B99</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_depth24</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT24_OES</name></cpp:macro> <cpp:value>0x81A6</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_depth32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT32_OES</name></cpp:macro> <cpp:value>0x81A7</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_EGL_image</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>GLeglImageOES</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_EGL_image_external</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_EXTERNAL_OES</name></cpp:macro> <cpp:value>0x8D65</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_EXTERNAL_OES</name></cpp:macro> <cpp:value>0x8D66</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_EXTERNAL_OES</name></cpp:macro> <cpp:value>0x8D67</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES</name></cpp:macro> <cpp:value>0x8D68</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_element_index_uint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT</name></cpp:macro> <cpp:value>0x1405</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_get_program_binary</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_BINARY_LENGTH_OES</name></cpp:macro> <cpp:value>0x8741</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_PROGRAM_BINARY_FORMATS_OES</name></cpp:macro> <cpp:value>0x87FE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_BINARY_FORMATS_OES</name></cpp:macro> <cpp:value>0x87FF</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_mapbuffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WRITE_ONLY_OES</name></cpp:macro> <cpp:value>0x88B9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_ACCESS_OES</name></cpp:macro> <cpp:value>0x88BB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAPPED_OES</name></cpp:macro> <cpp:value>0x88BC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAP_POINTER_OES</name></cpp:macro> <cpp:value>0x88BD</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_packed_depth_stencil</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_STENCIL_OES</name></cpp:macro> <cpp:value>0x84F9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_24_8_OES</name></cpp:macro> <cpp:value>0x84FA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH24_STENCIL8_OES</name></cpp:macro> <cpp:value>0x88F0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_required_internalformat</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA8_OES</name></cpp:macro> <cpp:value>0x803C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT16_OES</name></cpp:macro> <cpp:value>0x81A5</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE4_ALPHA4_OES</name></cpp:macro> <cpp:value>0x8043</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE8_ALPHA8_OES</name></cpp:macro> <cpp:value>0x8045</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE8_OES</name></cpp:macro> <cpp:value>0x8040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA4_OES</name></cpp:macro> <cpp:value>0x8056</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB5_A1_OES</name></cpp:macro> <cpp:value>0x8057</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB565_OES</name></cpp:macro> <cpp:value>0x8D62</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_rgb8_rgba8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8_OES</name></cpp:macro> <cpp:value>0x8051</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8_OES</name></cpp:macro> <cpp:value>0x8058</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_standard_derivatives</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES</name></cpp:macro> <cpp:value>0x8B8B</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_stencil1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX1_OES</name></cpp:macro> <cpp:value>0x8D46</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_stencil4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX4_OES</name></cpp:macro> <cpp:value>0x8D47</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_surfaceless_context</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_UNDEFINED_OES</name></cpp:macro> <cpp:value>0x8219</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_texture_3D</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_WRAP_R_OES</name></cpp:macro> <cpp:value>0x8072</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_3D_OES</name></cpp:macro> <cpp:value>0x806F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_3D_OES</name></cpp:macro> <cpp:value>0x806A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_3D_TEXTURE_SIZE_OES</name></cpp:macro> <cpp:value>0x8073</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_3D_OES</name></cpp:macro> <cpp:value>0x8B5F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES</name></cpp:macro> <cpp:value>0x8CD4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_texture_half_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HALF_FLOAT_OES</name></cpp:macro> <cpp:value>0x8D61</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_vertex_array_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_BINDING_OES</name></cpp:macro> <cpp:value>0x85B5</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_vertex_type_10_10_10_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_10_10_10_2_OES</name></cpp:macro> <cpp:value>0x8DF6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_10_10_10_2_OES</name></cpp:macro> <cpp:value>0x8DF7</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_KHR_debug</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>GLDEBUGPROC</name>)<parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>,<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>,<parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>,<parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,<parameter><decl><type><name>GLvoid</name> <modifier>*</modifier></type><name>userParam</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_OUTPUT_SYNCHRONOUS</name></cpp:macro> <cpp:value>0x8242</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH</name></cpp:macro> <cpp:value>0x8243</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CALLBACK_FUNCTION</name></cpp:macro> <cpp:value>0x8244</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_CALLBACK_USER_PARAM</name></cpp:macro> <cpp:value>0x8245</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_API</name></cpp:macro> <cpp:value>0x8246</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_WINDOW_SYSTEM</name></cpp:macro> <cpp:value>0x8247</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_SHADER_COMPILER</name></cpp:macro> <cpp:value>0x8248</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_THIRD_PARTY</name></cpp:macro> <cpp:value>0x8249</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_APPLICATION</name></cpp:macro> <cpp:value>0x824A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SOURCE_OTHER</name></cpp:macro> <cpp:value>0x824B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_ERROR</name></cpp:macro> <cpp:value>0x824C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR</name></cpp:macro> <cpp:value>0x824D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR</name></cpp:macro> <cpp:value>0x824E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_PORTABILITY</name></cpp:macro> <cpp:value>0x824F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_PERFORMANCE</name></cpp:macro> <cpp:value>0x8250</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_OTHER</name></cpp:macro> <cpp:value>0x8251</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_MARKER</name></cpp:macro> <cpp:value>0x8268</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_PUSH_GROUP</name></cpp:macro> <cpp:value>0x8269</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_TYPE_POP_GROUP</name></cpp:macro> <cpp:value>0x826A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_NOTIFICATION</name></cpp:macro> <cpp:value>0x826B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEBUG_GROUP_STACK_DEPTH</name></cpp:macro> <cpp:value>0x826C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_GROUP_STACK_DEPTH</name></cpp:macro> <cpp:value>0x826D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER</name></cpp:macro> <cpp:value>0x82E0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER</name></cpp:macro> <cpp:value>0x82E1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM</name></cpp:macro> <cpp:value>0x82E2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY</name></cpp:macro> <cpp:value>0x82E3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER</name></cpp:macro> <cpp:value>0x82E6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_LABEL_LENGTH</name></cpp:macro> <cpp:value>0x82E8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEBUG_MESSAGE_LENGTH</name></cpp:macro> <cpp:value>0x9143</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DEBUG_LOGGED_MESSAGES</name></cpp:macro> <cpp:value>0x9144</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_LOGGED_MESSAGES</name></cpp:macro> <cpp:value>0x9145</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_HIGH</name></cpp:macro> <cpp:value>0x9146</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_MEDIUM</name></cpp:macro> <cpp:value>0x9147</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_SEVERITY_LOW</name></cpp:macro> <cpp:value>0x9148</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEBUG_OUTPUT</name></cpp:macro> <cpp:value>0x92E0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_FLAG_DEBUG_BIT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STACK_OVERFLOW</name></cpp:macro> <cpp:value>0x0503</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STACK_UNDERFLOW</name></cpp:macro> <cpp:value>0x0504</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_KHR_texture_compression_astc_ldr</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_4x4_KHR</name></cpp:macro> <cpp:value>0x93B0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_5x4_KHR</name></cpp:macro> <cpp:value>0x93B1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_5x5_KHR</name></cpp:macro> <cpp:value>0x93B2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_6x5_KHR</name></cpp:macro> <cpp:value>0x93B3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_6x6_KHR</name></cpp:macro> <cpp:value>0x93B4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_8x5_KHR</name></cpp:macro> <cpp:value>0x93B5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_8x6_KHR</name></cpp:macro> <cpp:value>0x93B6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_8x8_KHR</name></cpp:macro> <cpp:value>0x93B7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_10x5_KHR</name></cpp:macro> <cpp:value>0x93B8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_10x6_KHR</name></cpp:macro> <cpp:value>0x93B9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_10x8_KHR</name></cpp:macro> <cpp:value>0x93BA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_10x10_KHR</name></cpp:macro> <cpp:value>0x93BB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_12x10_KHR</name></cpp:macro> <cpp:value>0x93BC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_12x12_KHR</name></cpp:macro> <cpp:value>0x93BD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR</name></cpp:macro> <cpp:value>0x93D0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR</name></cpp:macro> <cpp:value>0x93D1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR</name></cpp:macro> <cpp:value>0x93D2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR</name></cpp:macro> <cpp:value>0x93D3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR</name></cpp:macro> <cpp:value>0x93D4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR</name></cpp:macro> <cpp:value>0x93D5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR</name></cpp:macro> <cpp:value>0x93D6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR</name></cpp:macro> <cpp:value>0x93D7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR</name></cpp:macro> <cpp:value>0x93D8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR</name></cpp:macro> <cpp:value>0x93D9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR</name></cpp:macro> <cpp:value>0x93DA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR</name></cpp:macro> <cpp:value>0x93DB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR</name></cpp:macro> <cpp:value>0x93DC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR</name></cpp:macro> <cpp:value>0x93DD</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_compressed_3DC_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_3DC_X_AMD</name></cpp:macro> <cpp:value>0x87F9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_3DC_XY_AMD</name></cpp:macro> <cpp:value>0x87FA</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_compressed_ATC_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATC_RGB_AMD</name></cpp:macro> <cpp:value>0x8C92</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATC_RGBA_EXPLICIT_ALPHA_AMD</name></cpp:macro> <cpp:value>0x8C93</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD</name></cpp:macro> <cpp:value>0x87EE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_performance_monitor</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COUNTER_TYPE_AMD</name></cpp:macro> <cpp:value>0x8BC0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COUNTER_RANGE_AMD</name></cpp:macro> <cpp:value>0x8BC1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT64_AMD</name></cpp:macro> <cpp:value>0x8BC2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERCENTAGE_AMD</name></cpp:macro> <cpp:value>0x8BC3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFMON_RESULT_AVAILABLE_AMD</name></cpp:macro> <cpp:value>0x8BC4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFMON_RESULT_SIZE_AMD</name></cpp:macro> <cpp:value>0x8BC5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFMON_RESULT_AMD</name></cpp:macro> <cpp:value>0x8BC6</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_program_binary_Z400</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_Z400_BINARY_AMD</name></cpp:macro> <cpp:value>0x8740</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ANGLE_depth_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT</name></cpp:macro> <cpp:value>0x1902</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_STENCIL_OES</name></cpp:macro> <cpp:value>0x84F9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT</name></cpp:macro> <cpp:value>0x1403</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT</name></cpp:macro> <cpp:value>0x1405</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_24_8_OES</name></cpp:macro> <cpp:value>0x84FA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT16</name></cpp:macro> <cpp:value>0x81A5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT32_OES</name></cpp:macro> <cpp:value>0x81A7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH24_STENCIL8_OES</name></cpp:macro> <cpp:value>0x88F0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ANGLE_framebuffer_blit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER_ANGLE</name></cpp:macro> <cpp:value>0x8CA8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER_ANGLE</name></cpp:macro> <cpp:value>0x8CA9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER_BINDING_ANGLE</name></cpp:macro> <cpp:value>0x8CA6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER_BINDING_ANGLE</name></cpp:macro> <cpp:value>0x8CAA</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ANGLE_framebuffer_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_SAMPLES_ANGLE</name></cpp:macro> <cpp:value>0x8CAB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE</name></cpp:macro> <cpp:value>0x8D56</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SAMPLES_ANGLE</name></cpp:macro> <cpp:value>0x8D57</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ANGLE_instanced_arrays</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE</name></cpp:macro> <cpp:value>0x88FE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ANGLE_pack_reverse_row_order</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_REVERSE_ROW_ORDER_ANGLE</name></cpp:macro> <cpp:value>0x93A4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ANGLE_program_binary</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_BINARY_ANGLE</name></cpp:macro> <cpp:value>0x93A6</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ANGLE_texture_compression_dxt3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE</name></cpp:macro> <cpp:value>0x83F2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ANGLE_texture_compression_dxt5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE</name></cpp:macro> <cpp:value>0x83F3</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ANGLE_texture_usage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_USAGE_ANGLE</name></cpp:macro> <cpp:value>0x93A2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_ANGLE</name></cpp:macro> <cpp:value>0x93A3</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ANGLE_translated_shader_source</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE</name></cpp:macro> <cpp:value>0x93A0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_framebuffer_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_SAMPLES_APPLE</name></cpp:macro> <cpp:value>0x8CAB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE</name></cpp:macro> <cpp:value>0x8D56</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SAMPLES_APPLE</name></cpp:macro> <cpp:value>0x8D57</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER_APPLE</name></cpp:macro> <cpp:value>0x8CA8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER_APPLE</name></cpp:macro> <cpp:value>0x8CA9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER_BINDING_APPLE</name></cpp:macro> <cpp:value>0x8CA6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER_BINDING_APPLE</name></cpp:macro> <cpp:value>0x8CAA</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_rgb_422</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_422_APPLE</name></cpp:macro> <cpp:value>0x8A1F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_8_8_APPLE</name></cpp:macro> <cpp:value>0x85BA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_8_8_REV_APPLE</name></cpp:macro> <cpp:value>0x85BB</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_sync</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__gl3_h_</name></expr></argument>)</argument_list></call></expr></cpp:if>







<typedef>typedef <type><name>khronos_int64_t</name></type> <name>GLint64</name>;</typedef>
<typedef>typedef <type><name>khronos_uint64_t</name></type> <name>GLuint64</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>__GLsync</name></name> <modifier>*</modifier></type><name>GLsync</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_OBJECT_APPLE</name></cpp:macro> <cpp:value>0x8A53</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SERVER_WAIT_TIMEOUT_APPLE</name></cpp:macro> <cpp:value>0x9111</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_TYPE_APPLE</name></cpp:macro> <cpp:value>0x9112</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_CONDITION_APPLE</name></cpp:macro> <cpp:value>0x9113</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_STATUS_APPLE</name></cpp:macro> <cpp:value>0x9114</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_FLAGS_APPLE</name></cpp:macro> <cpp:value>0x9115</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_FENCE_APPLE</name></cpp:macro> <cpp:value>0x9116</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE</name></cpp:macro> <cpp:value>0x9117</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNALED_APPLE</name></cpp:macro> <cpp:value>0x9118</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNALED_APPLE</name></cpp:macro> <cpp:value>0x9119</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALREADY_SIGNALED_APPLE</name></cpp:macro> <cpp:value>0x911A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TIMEOUT_EXPIRED_APPLE</name></cpp:macro> <cpp:value>0x911B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONDITION_SATISFIED_APPLE</name></cpp:macro> <cpp:value>0x911C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WAIT_FAILED_APPLE</name></cpp:macro> <cpp:value>0x911D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_FLUSH_COMMANDS_BIT_APPLE</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TIMEOUT_IGNORED_APPLE</name></cpp:macro> <cpp:value>0xFFFFFFFFFFFFFFFFull</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_texture_format_BGRA8888</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGRA_EXT</name></cpp:macro> <cpp:value>0x80E1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_texture_max_level</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_LEVEL_APPLE</name></cpp:macro> <cpp:value>0x813D</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARM_mali_program_binary</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MALI_PROGRAM_BINARY_ARM</name></cpp:macro> <cpp:value>0x8F61</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARM_mali_shader_binary</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MALI_SHADER_BINARY_ARM</name></cpp:macro> <cpp:value>0x8F60</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_blend_minmax</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_EXT</name></cpp:macro> <cpp:value>0x8007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_EXT</name></cpp:macro> <cpp:value>0x8008</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_color_buffer_half_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16F_EXT</name></cpp:macro> <cpp:value>0x881A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16F_EXT</name></cpp:macro> <cpp:value>0x881B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16F_EXT</name></cpp:macro> <cpp:value>0x822F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16F_EXT</name></cpp:macro> <cpp:value>0x822D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT</name></cpp:macro> <cpp:value>0x8211</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_NORMALIZED_EXT</name></cpp:macro> <cpp:value>0x8C17</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_debug_label</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_PIPELINE_OBJECT_EXT</name></cpp:macro> <cpp:value>0x8A4F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_OBJECT_EXT</name></cpp:macro> <cpp:value>0x8B40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_OBJECT_EXT</name></cpp:macro> <cpp:value>0x8B48</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_OBJECT_EXT</name></cpp:macro> <cpp:value>0x9151</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_OBJECT_EXT</name></cpp:macro> <cpp:value>0x9153</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_OBJECT_EXT</name></cpp:macro> <cpp:value>0x9154</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_discard_framebuffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_EXT</name></cpp:macro> <cpp:value>0x1800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_EXT</name></cpp:macro> <cpp:value>0x1801</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_EXT</name></cpp:macro> <cpp:value>0x1802</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_map_buffer_range</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_READ_BIT_EXT</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_WRITE_BIT_EXT</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_INVALIDATE_RANGE_BIT_EXT</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_INVALIDATE_BUFFER_BIT_EXT</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_FLUSH_EXPLICIT_BIT_EXT</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_UNSYNCHRONIZED_BIT_EXT</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_multisampled_render_to_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT</name></cpp:macro> <cpp:value>0x8D6C</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_SAMPLES_EXT</name></cpp:macro> <cpp:value>0x8CAB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT</name></cpp:macro> <cpp:value>0x8D56</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SAMPLES_EXT</name></cpp:macro> <cpp:value>0x8D57</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_multiview_draw_buffers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT_EXT</name></cpp:macro> <cpp:value>0x90F0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTIVIEW_EXT</name></cpp:macro> <cpp:value>0x90F1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER_EXT</name></cpp:macro> <cpp:value>0x0C01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_BUFFER_EXT</name></cpp:macro> <cpp:value>0x0C02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_MULTIVIEW_BUFFERS_EXT</name></cpp:macro> <cpp:value>0x90F2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_occlusion_query_boolean</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ANY_SAMPLES_PASSED_EXT</name></cpp:macro> <cpp:value>0x8C2F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT</name></cpp:macro> <cpp:value>0x8D6A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_QUERY_EXT</name></cpp:macro> <cpp:value>0x8865</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_RESULT_EXT</name></cpp:macro> <cpp:value>0x8866</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_RESULT_AVAILABLE_EXT</name></cpp:macro> <cpp:value>0x8867</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_read_format_bgra</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGRA_EXT</name></cpp:macro> <cpp:value>0x80E1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT</name></cpp:macro> <cpp:value>0x8365</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT</name></cpp:macro> <cpp:value>0x8366</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_robustness</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GUILTY_CONTEXT_RESET_EXT</name></cpp:macro> <cpp:value>0x8253</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INNOCENT_CONTEXT_RESET_EXT</name></cpp:macro> <cpp:value>0x8254</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNKNOWN_CONTEXT_RESET_EXT</name></cpp:macro> <cpp:value>0x8255</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONTEXT_ROBUST_ACCESS_EXT</name></cpp:macro> <cpp:value>0x90F3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RESET_NOTIFICATION_STRATEGY_EXT</name></cpp:macro> <cpp:value>0x8256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOSE_CONTEXT_ON_RESET_EXT</name></cpp:macro> <cpp:value>0x8252</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NO_RESET_NOTIFICATION_EXT</name></cpp:macro> <cpp:value>0x8261</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_separate_shader_objects</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER_BIT_EXT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SHADER_BIT_EXT</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALL_SHADER_BITS_EXT</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_SEPARABLE_EXT</name></cpp:macro> <cpp:value>0x8258</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_PROGRAM_EXT</name></cpp:macro> <cpp:value>0x8259</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_PIPELINE_BINDING_EXT</name></cpp:macro> <cpp:value>0x825A</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_shader_framebuffer_fetch</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT</name></cpp:macro> <cpp:value>0x8A52</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_shadow_samplers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPARE_MODE_EXT</name></cpp:macro> <cpp:value>0x884C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPARE_FUNC_EXT</name></cpp:macro> <cpp:value>0x884D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPARE_REF_TO_TEXTURE_EXT</name></cpp:macro> <cpp:value>0x884E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_SHADOW_EXT</name></cpp:macro> <cpp:value>0x8B62</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_sRGB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB_EXT</name></cpp:macro> <cpp:value>0x8C40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB_ALPHA_EXT</name></cpp:macro> <cpp:value>0x8C42</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB8_ALPHA8_EXT</name></cpp:macro> <cpp:value>0x8C43</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT</name></cpp:macro> <cpp:value>0x8210</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_compression_dxt1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB_S3TC_DXT1_EXT</name></cpp:macro> <cpp:value>0x83F0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_S3TC_DXT1_EXT</name></cpp:macro> <cpp:value>0x83F1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_filter_anisotropic</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_ANISOTROPY_EXT</name></cpp:macro> <cpp:value>0x84FE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT</name></cpp:macro> <cpp:value>0x84FF</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_format_BGRA8888</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGRA_EXT</name></cpp:macro> <cpp:value>0x80E1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_rg</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED_EXT</name></cpp:macro> <cpp:value>0x1903</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG_EXT</name></cpp:macro> <cpp:value>0x8227</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R8_EXT</name></cpp:macro> <cpp:value>0x8229</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG8_EXT</name></cpp:macro> <cpp:value>0x822B</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_storage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_IMMUTABLE_FORMAT_EXT</name></cpp:macro> <cpp:value>0x912F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA8_EXT</name></cpp:macro> <cpp:value>0x803C</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE8_EXT</name></cpp:macro> <cpp:value>0x8040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE8_ALPHA8_EXT</name></cpp:macro> <cpp:value>0x8045</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA32F_EXT</name></cpp:macro> <cpp:value>0x8814</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB32F_EXT</name></cpp:macro> <cpp:value>0x8815</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA32F_EXT</name></cpp:macro> <cpp:value>0x8816</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE32F_EXT</name></cpp:macro> <cpp:value>0x8818</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA32F_EXT</name></cpp:macro> <cpp:value>0x8819</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA16F_EXT</name></cpp:macro> <cpp:value>0x881C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE16F_EXT</name></cpp:macro> <cpp:value>0x881E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA16F_EXT</name></cpp:macro> <cpp:value>0x881F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB10_A2_EXT</name></cpp:macro> <cpp:value>0x8059</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB10_EXT</name></cpp:macro> <cpp:value>0x8052</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGRA8_EXT</name></cpp:macro> <cpp:value>0x93A1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R8_EXT</name></cpp:macro> <cpp:value>0x8229</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG8_EXT</name></cpp:macro> <cpp:value>0x822B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R32F_EXT</name></cpp:macro> <cpp:value>0x822E</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG32F_EXT</name></cpp:macro> <cpp:value>0x8230</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16F_EXT</name></cpp:macro> <cpp:value>0x822D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16F_EXT</name></cpp:macro> <cpp:value>0x822F</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_type_2_10_10_10_REV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_2_10_10_10_REV_EXT</name></cpp:macro> <cpp:value>0x8368</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_unpack_subimage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_ROW_LENGTH_EXT</name></cpp:macro> <cpp:value>0x0CF2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SKIP_ROWS_EXT</name></cpp:macro> <cpp:value>0x0CF3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SKIP_PIXELS_EXT</name></cpp:macro> <cpp:value>0x0CF4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_DMP_shader_binary</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_BINARY_DMP</name></cpp:macro> <cpp:value>0x9250</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_FJ_shader_binary_GCCSO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GCCSO_SHADER_BINARY_F</name></cpp:macro> <cpp:value>0x9260</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_IMG_program_binary</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGX_PROGRAM_BINARY_IMG</name></cpp:macro> <cpp:value>0x9130</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_IMG_read_format</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BGRA_IMG</name></cpp:macro> <cpp:value>0x80E1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG</name></cpp:macro> <cpp:value>0x8365</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_IMG_shader_binary</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SGX_BINARY_IMG</name></cpp:macro> <cpp:value>0x8C0A</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_IMG_texture_compression_pvrtc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG</name></cpp:macro> <cpp:value>0x8C00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG</name></cpp:macro> <cpp:value>0x8C01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG</name></cpp:macro> <cpp:value>0x8C02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG</name></cpp:macro> <cpp:value>0x8C03</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_IMG_texture_compression_pvrtc2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG</name></cpp:macro> <cpp:value>0x9137</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG</name></cpp:macro> <cpp:value>0x9138</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_IMG_multisampled_render_to_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_SAMPLES_IMG</name></cpp:macro> <cpp:value>0x9133</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG</name></cpp:macro> <cpp:value>0x9134</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SAMPLES_IMG</name></cpp:macro> <cpp:value>0x9135</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SAMPLES_IMG</name></cpp:macro> <cpp:value>0x9136</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_coverage_sample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COVERAGE_COMPONENT_NV</name></cpp:macro> <cpp:value>0x8ED0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COVERAGE_COMPONENT4_NV</name></cpp:macro> <cpp:value>0x8ED1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COVERAGE_ATTACHMENT_NV</name></cpp:macro> <cpp:value>0x8ED2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COVERAGE_BUFFERS_NV</name></cpp:macro> <cpp:value>0x8ED3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COVERAGE_SAMPLES_NV</name></cpp:macro> <cpp:value>0x8ED4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COVERAGE_ALL_FRAGMENTS_NV</name></cpp:macro> <cpp:value>0x8ED5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COVERAGE_EDGE_FRAGMENTS_NV</name></cpp:macro> <cpp:value>0x8ED6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COVERAGE_AUTOMATIC_NV</name></cpp:macro> <cpp:value>0x8ED7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COVERAGE_BUFFER_BIT_NV</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_depth_nonlinear</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT16_NONLINEAR_NV</name></cpp:macro> <cpp:value>0x8E2C</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_draw_buffers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DRAW_BUFFERS_NV</name></cpp:macro> <cpp:value>0x8824</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER0_NV</name></cpp:macro> <cpp:value>0x8825</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER1_NV</name></cpp:macro> <cpp:value>0x8826</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER2_NV</name></cpp:macro> <cpp:value>0x8827</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER3_NV</name></cpp:macro> <cpp:value>0x8828</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER4_NV</name></cpp:macro> <cpp:value>0x8829</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER5_NV</name></cpp:macro> <cpp:value>0x882A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER6_NV</name></cpp:macro> <cpp:value>0x882B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER7_NV</name></cpp:macro> <cpp:value>0x882C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER8_NV</name></cpp:macro> <cpp:value>0x882D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER9_NV</name></cpp:macro> <cpp:value>0x882E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER10_NV</name></cpp:macro> <cpp:value>0x882F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER11_NV</name></cpp:macro> <cpp:value>0x8830</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER12_NV</name></cpp:macro> <cpp:value>0x8831</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER13_NV</name></cpp:macro> <cpp:value>0x8832</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER14_NV</name></cpp:macro> <cpp:value>0x8833</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER15_NV</name></cpp:macro> <cpp:value>0x8834</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT0_NV</name></cpp:macro> <cpp:value>0x8CE0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT1_NV</name></cpp:macro> <cpp:value>0x8CE1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT2_NV</name></cpp:macro> <cpp:value>0x8CE2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT3_NV</name></cpp:macro> <cpp:value>0x8CE3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT4_NV</name></cpp:macro> <cpp:value>0x8CE4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT5_NV</name></cpp:macro> <cpp:value>0x8CE5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT6_NV</name></cpp:macro> <cpp:value>0x8CE6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT7_NV</name></cpp:macro> <cpp:value>0x8CE7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT8_NV</name></cpp:macro> <cpp:value>0x8CE8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT9_NV</name></cpp:macro> <cpp:value>0x8CE9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT10_NV</name></cpp:macro> <cpp:value>0x8CEA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT11_NV</name></cpp:macro> <cpp:value>0x8CEB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT12_NV</name></cpp:macro> <cpp:value>0x8CEC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT13_NV</name></cpp:macro> <cpp:value>0x8CED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT14_NV</name></cpp:macro> <cpp:value>0x8CEE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT15_NV</name></cpp:macro> <cpp:value>0x8CEF</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_draw_buffers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DRAW_BUFFERS_EXT</name></cpp:macro> <cpp:value>0x8824</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER0_EXT</name></cpp:macro> <cpp:value>0x8825</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER1_EXT</name></cpp:macro> <cpp:value>0x8826</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER2_EXT</name></cpp:macro> <cpp:value>0x8827</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER3_EXT</name></cpp:macro> <cpp:value>0x8828</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER4_EXT</name></cpp:macro> <cpp:value>0x8829</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER5_EXT</name></cpp:macro> <cpp:value>0x882A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER6_EXT</name></cpp:macro> <cpp:value>0x882B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER7_EXT</name></cpp:macro> <cpp:value>0x882C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER8_EXT</name></cpp:macro> <cpp:value>0x882D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER9_EXT</name></cpp:macro> <cpp:value>0x882E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER10_EXT</name></cpp:macro> <cpp:value>0x882F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER11_EXT</name></cpp:macro> <cpp:value>0x8830</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER12_EXT</name></cpp:macro> <cpp:value>0x8831</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER13_EXT</name></cpp:macro> <cpp:value>0x8832</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER14_EXT</name></cpp:macro> <cpp:value>0x8833</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER15_EXT</name></cpp:macro> <cpp:value>0x8834</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT0_EXT</name></cpp:macro> <cpp:value>0x8CE0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT1_EXT</name></cpp:macro> <cpp:value>0x8CE1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT2_EXT</name></cpp:macro> <cpp:value>0x8CE2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT3_EXT</name></cpp:macro> <cpp:value>0x8CE3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT4_EXT</name></cpp:macro> <cpp:value>0x8CE4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT5_EXT</name></cpp:macro> <cpp:value>0x8CE5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT6_EXT</name></cpp:macro> <cpp:value>0x8CE6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT7_EXT</name></cpp:macro> <cpp:value>0x8CE7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT8_EXT</name></cpp:macro> <cpp:value>0x8CE8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT9_EXT</name></cpp:macro> <cpp:value>0x8CE9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT10_EXT</name></cpp:macro> <cpp:value>0x8CEA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT11_EXT</name></cpp:macro> <cpp:value>0x8CEB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT12_EXT</name></cpp:macro> <cpp:value>0x8CEC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT13_EXT</name></cpp:macro> <cpp:value>0x8CED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT14_EXT</name></cpp:macro> <cpp:value>0x8CEE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT15_EXT</name></cpp:macro> <cpp:value>0x8CEF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COLOR_ATTACHMENTS_EXT</name></cpp:macro> <cpp:value>0x8CDF</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_fbo_color_attachments</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COLOR_ATTACHMENTS_NV</name></cpp:macro> <cpp:value>0x8CDF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_fence</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALL_COMPLETED_NV</name></cpp:macro> <cpp:value>0x84F2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FENCE_STATUS_NV</name></cpp:macro> <cpp:value>0x84F3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FENCE_CONDITION_NV</name></cpp:macro> <cpp:value>0x84F4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_framebuffer_blit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER_NV</name></cpp:macro> <cpp:value>0x8CA8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER_NV</name></cpp:macro> <cpp:value>0x8CA9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER_BINDING_NV</name></cpp:macro> <cpp:value>0x8CA6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER_BINDING_NV</name></cpp:macro> <cpp:value>0x8CAA</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_framebuffer_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_SAMPLES_NV</name></cpp:macro> <cpp:value>0x8CAB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV</name></cpp:macro> <cpp:value>0x8D56</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SAMPLES_NV</name></cpp:macro> <cpp:value>0x8D57</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_instanced_arrays</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV</name></cpp:macro> <cpp:value>0x88FE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_read_buffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_BUFFER_NV</name></cpp:macro> <cpp:value>0x0C02</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_shadow_samplers_array</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_ARRAY_SHADOW_NV</name></cpp:macro> <cpp:value>0x8DC4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_shadow_samplers_cube</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_CUBE_SHADOW_NV</name></cpp:macro> <cpp:value>0x8DC5</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_sRGB_formats</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE_NV</name></cpp:macro> <cpp:value>0x8C46</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE_ALPHA_NV</name></cpp:macro> <cpp:value>0x8C44</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB8_NV</name></cpp:macro> <cpp:value>0x8C41</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE8_NV</name></cpp:macro> <cpp:value>0x8C47</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SLUMINANCE8_ALPHA8_NV</name></cpp:macro> <cpp:value>0x8C45</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_S3TC_DXT1_NV</name></cpp:macro> <cpp:value>0x8C4C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV</name></cpp:macro> <cpp:value>0x8C4D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV</name></cpp:macro> <cpp:value>0x8C4E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV</name></cpp:macro> <cpp:value>0x8C4F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ETC1_SRGB8_NV</name></cpp:macro> <cpp:value>0x88EE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texture_border_clamp</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BORDER_COLOR_NV</name></cpp:macro> <cpp:value>0x1004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_TO_BORDER_NV</name></cpp:macro> <cpp:value>0x812D</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_QCOM_alpha_test</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_TEST_QCOM</name></cpp:macro> <cpp:value>0x0BC0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_TEST_FUNC_QCOM</name></cpp:macro> <cpp:value>0x0BC1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_TEST_REF_QCOM</name></cpp:macro> <cpp:value>0x0BC2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_QCOM_binning_control</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BINNING_CONTROL_HINT_QCOM</name></cpp:macro> <cpp:value>0x8FB0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CPU_OPTIMIZED_QCOM</name></cpp:macro> <cpp:value>0x8FB1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GPU_OPTIMIZED_QCOM</name></cpp:macro> <cpp:value>0x8FB2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM</name></cpp:macro> <cpp:value>0x8FB3</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_QCOM_extended_get</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_WIDTH_QCOM</name></cpp:macro> <cpp:value>0x8BD2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_HEIGHT_QCOM</name></cpp:macro> <cpp:value>0x8BD3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_DEPTH_QCOM</name></cpp:macro> <cpp:value>0x8BD4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_INTERNAL_FORMAT_QCOM</name></cpp:macro> <cpp:value>0x8BD5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_FORMAT_QCOM</name></cpp:macro> <cpp:value>0x8BD6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_TYPE_QCOM</name></cpp:macro> <cpp:value>0x8BD7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_IMAGE_VALID_QCOM</name></cpp:macro> <cpp:value>0x8BD8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_NUM_LEVELS_QCOM</name></cpp:macro> <cpp:value>0x8BD9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_TARGET_QCOM</name></cpp:macro> <cpp:value>0x8BDA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_OBJECT_VALID_QCOM</name></cpp:macro> <cpp:value>0x8BDB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATE_RESTORE</name></cpp:macro> <cpp:value>0x8BDC</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_QCOM_perfmon_global_mode</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PERFMON_GLOBAL_MODE_QCOM</name></cpp:macro> <cpp:value>0x8FA0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_QCOM_writeonly_rendering</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WRITEONLY_RENDERING_QCOM</name></cpp:macro> <cpp:value>0x8823</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_QCOM_tiled_rendering</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_BUFFER_BIT0_QCOM</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_BUFFER_BIT1_QCOM</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_BUFFER_BIT2_QCOM</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_BUFFER_BIT3_QCOM</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_BUFFER_BIT4_QCOM</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_BUFFER_BIT5_QCOM</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_BUFFER_BIT6_QCOM</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_BUFFER_BIT7_QCOM</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_BUFFER_BIT0_QCOM</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_BUFFER_BIT1_QCOM</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_BUFFER_BIT2_QCOM</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_BUFFER_BIT3_QCOM</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_BUFFER_BIT4_QCOM</name></cpp:macro> <cpp:value>0x00001000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_BUFFER_BIT5_QCOM</name></cpp:macro> <cpp:value>0x00002000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_BUFFER_BIT6_QCOM</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_BUFFER_BIT7_QCOM</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BUFFER_BIT0_QCOM</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BUFFER_BIT1_QCOM</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BUFFER_BIT2_QCOM</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BUFFER_BIT3_QCOM</name></cpp:macro> <cpp:value>0x00080000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BUFFER_BIT4_QCOM</name></cpp:macro> <cpp:value>0x00100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BUFFER_BIT5_QCOM</name></cpp:macro> <cpp:value>0x00200000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BUFFER_BIT6_QCOM</name></cpp:macro> <cpp:value>0x00400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BUFFER_BIT7_QCOM</name></cpp:macro> <cpp:value>0x00800000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_BUFFER_BIT0_QCOM</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_BUFFER_BIT1_QCOM</name></cpp:macro> <cpp:value>0x02000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_BUFFER_BIT2_QCOM</name></cpp:macro> <cpp:value>0x04000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_BUFFER_BIT3_QCOM</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_BUFFER_BIT4_QCOM</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_BUFFER_BIT5_QCOM</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_BUFFER_BIT6_QCOM</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MULTISAMPLE_BUFFER_BIT7_QCOM</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VIV_shader_binary</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_BINARY_VIV</name></cpp:macro> <cpp:value>0x8FC4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_compressed_ETC1_RGB8_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_compressed_ETC1_RGB8_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_compressed_paletted_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_compressed_paletted_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_depth24</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_depth24</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_depth32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_depth32</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_depth_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_depth_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_EGL_image</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_EGL_image</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glEGLImageTargetTexture2DOES</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLeglImageOES</name></type> <name>image</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glEGLImageTargetRenderbufferStorageOES</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLeglImageOES</name></type> <name>image</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLEGLIMAGETARGETTEXTURE2DOESPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLeglImageOES</name></type> <name>image</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLeglImageOES</name></type> <name>image</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_EGL_image_external</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_EGL_image_external</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_element_index_uint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_element_index_uint</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_fbo_render_mipmap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_fbo_render_mipmap</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_fragment_precision_high</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_fragment_precision_high</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_get_program_binary</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_get_program_binary</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetProgramBinaryOES</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLenum</name> <modifier>*</modifier></type><name>binaryFormat</name></decl></parameter>, <parameter><decl><type><name>GLvoid</name> <modifier>*</modifier></type><name>binary</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glProgramBinaryOES</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>binaryFormat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name> <modifier>*</modifier></type><name>binary</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETPROGRAMBINARYOESPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLenum</name> <modifier>*</modifier></type><name>binaryFormat</name></decl></parameter>, <parameter><decl><type><name>GLvoid</name> <modifier>*</modifier></type><name>binary</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPROGRAMBINARYOESPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>binaryFormat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name> <modifier>*</modifier></type><name>binary</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_mapbuffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_mapbuffer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name><modifier>*</modifier> <name>GL_APIENTRY</name></type> <name>glMapBufferOES</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>access</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLboolean</name> <name>GL_APIENTRY</name></type> <name>glUnmapBufferOES</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetBufferPointervOES</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLvoid</name><modifier>*</modifier><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<name>GL_APIENTRYP</name> <name>PFNGLMAPBUFFEROESPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>access</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLUNMAPBUFFEROESPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETBUFFERPOINTERVOESPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLvoid</name><modifier>*</modifier><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_packed_depth_stencil</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_packed_depth_stencil</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_required_internalformat</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_required_internalformat</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_rgb8_rgba8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_rgb8_rgba8</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_standard_derivatives</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_standard_derivatives</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_stencil1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_stencil1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_stencil4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_stencil4</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_surfaceless_context</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_surfaceless_context</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_texture_3D</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_texture_3D</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glTexImage3DOES</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glTexSubImage3DOES</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glCopyTexSubImage3DOES</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glCompressedTexImage3DOES</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glCompressedTexSubImage3DOES</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glFramebufferTexture3DOES</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>textarget</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLTEXIMAGE3DOESPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLTEXSUBIMAGE3DOESPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLCOPYTEXSUBIMAGE3DOESPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXIMAGE3DOESPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTURE3DOES</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>textarget</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_texture_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_texture_float</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_texture_float_linear</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_texture_float_linear</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_texture_half_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_texture_half_float</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_texture_half_float_linear</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_texture_half_float_linear</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_texture_npot</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_texture_npot</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_vertex_array_object</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_vertex_array_object</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBindVertexArrayOES</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>array</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDeleteVertexArraysOES</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type><name>arrays</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGenVertexArraysOES</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>arrays</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLboolean</name> <name>GL_APIENTRY</name></type> <name>glIsVertexArrayOES</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>array</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLBINDVERTEXARRAYOESPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>array</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLDELETEVERTEXARRAYSOESPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type><name>arrays</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGENVERTEXARRAYSOESPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>arrays</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLISVERTEXARRAYOESPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>array</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_vertex_half_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_vertex_half_float</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_OES_vertex_type_10_10_10_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OES_vertex_type_10_10_10_2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_KHR_debug</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_KHR_debug</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDebugMessageControl</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type><name>ids</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDebugMessageInsert</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDebugMessageCallback</name> <parameter_list>(<parameter><decl><type><name>GLDEBUGPROC</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>userParam</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLuint</name> <name>GL_APIENTRY</name></type> <name>glGetDebugMessageLog</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>GLenum</name> <modifier>*</modifier></type><name>sources</name></decl></parameter>, <parameter><decl><type><name>GLenum</name> <modifier>*</modifier></type><name>types</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>ids</name></decl></parameter>, <parameter><decl><type><name>GLenum</name> <modifier>*</modifier></type><name>severities</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>lengths</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>messageLog</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glPushDebugGroup</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glPopDebugGroup</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glObjectLabel</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>identifier</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetObjectLabel</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>identifier</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glObjectPtrLabel</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetObjectPtrLabel</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetPointerv</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLDEBUGMESSAGECONTROLPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type><name>ids</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLDEBUGMESSAGEINSERTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>severity</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLDEBUGMESSAGECALLBACKPROC</name>) <parameter_list>(<parameter><decl><type><name>GLDEBUGPROC</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>userParam</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETDEBUGMESSAGELOGPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>GLenum</name> <modifier>*</modifier></type><name>sources</name></decl></parameter>, <parameter><decl><type><name>GLenum</name> <modifier>*</modifier></type><name>types</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>ids</name></decl></parameter>, <parameter><decl><type><name>GLenum</name> <modifier>*</modifier></type><name>severities</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>lengths</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>messageLog</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPUSHDEBUGGROUPPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPOPDEBUGGROUPPROC</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLOBJECTLABELPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>identifier</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETOBJECTLABELPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>identifier</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLOBJECTPTRLABELPROC</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETOBJECTPTRLABELPROC</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETPOINTERVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_KHR_texture_compression_astc_ldr</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_KHR_texture_compression_astc_ldr</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_compressed_3DC_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_compressed_3DC_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_compressed_ATC_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_compressed_ATC_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_performance_monitor</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_performance_monitor</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetPerfMonitorGroupsAMD</name> <parameter_list>(<parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>numGroups</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>groupsSize</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>groups</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetPerfMonitorCountersAMD</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>numCounters</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>maxActiveCounters</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>counterSize</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>counters</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetPerfMonitorGroupStringAMD</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>groupString</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetPerfMonitorCounterStringAMD</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>counter</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>counterString</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetPerfMonitorCounterInfoAMD</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>counter</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLvoid</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGenPerfMonitorsAMD</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>monitors</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDeletePerfMonitorsAMD</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>monitors</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glSelectPerfMonitorCountersAMD</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>enable</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>numCounters</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>countersList</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBeginPerfMonitorAMD</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glEndPerfMonitorAMD</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetPerfMonitorCounterDataAMD</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>bytesWritten</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETPERFMONITORGROUPSAMDPROC</name>) <parameter_list>(<parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>numGroups</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>groupsSize</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>groups</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETPERFMONITORCOUNTERSAMDPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>numCounters</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>maxActiveCounters</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>counterSize</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>counters</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETPERFMONITORGROUPSTRINGAMDPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>groupString</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>counter</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>counterString</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETPERFMONITORCOUNTERINFOAMDPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>counter</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLvoid</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGENPERFMONITORSAMDPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>monitors</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLDELETEPERFMONITORSAMDPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>monitors</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLSELECTPERFMONITORCOUNTERSAMDPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>enable</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>numCounters</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>countersList</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLBEGINPERFMONITORAMDPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLENDPERFMONITORAMDPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETPERFMONITORCOUNTERDATAAMDPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>monitor</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>bytesWritten</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_AMD_program_binary_Z400</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_AMD_program_binary_Z400</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ANGLE_depth_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ANGLE_depth_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ANGLE_framebuffer_blit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ANGLE_framebuffer_blit</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBlitFramebufferANGLE</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>srcX0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcY0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcX1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcY1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstX0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstY0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstX1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstY1</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>filter</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLBLITFRAMEBUFFERANGLEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>srcX0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcY0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcX1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcY1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstX0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstY0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstX1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstY1</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>filter</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ANGLE_framebuffer_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ANGLE_framebuffer_multisample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glRenderbufferStorageMultisampleANGLE</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ANGLE_instanced_arrays</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ANGLE_instanced_arrays</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDrawArraysInstancedANGLE</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>primcount</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDrawElementsInstancedANGLE</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>indices</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>primcount</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glVertexAttribDivisorANGLE</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>divisor</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLDRAWARRAYSINSTANCEDANGLEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>primcount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLDRAWELEMENTSINSTANCEDANGLEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>indices</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>primcount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLVERTEXATTRIBDIVISORANGLEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>divisor</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ANGLE_pack_reverse_row_order</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ANGLE_pack_reverse_row_order</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ANGLE_program_binary</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ANGLE_program_binary</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ANGLE_texture_compression_dxt3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ANGLE_texture_compression_dxt3</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ANGLE_texture_compression_dxt5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ANGLE_texture_compression_dxt5</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ANGLE_texture_usage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ANGLE_texture_usage</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ANGLE_translated_shader_source</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ANGLE_translated_shader_source</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetTranslatedShaderSourceANGLE</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_copy_texture_levels</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_copy_texture_levels</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glCopyTextureLevelsAPPLE</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>destinationTexture</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>sourceTexture</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>sourceBaseLevel</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>sourceLevelCount</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLCOPYTEXTURELEVELSAPPLEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>destinationTexture</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>sourceTexture</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>sourceBaseLevel</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>sourceLevelCount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_framebuffer_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_framebuffer_multisample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glRenderbufferStorageMultisampleAPPLE</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glResolveMultisampleFramebufferAPPLE</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_rgb_422</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_rgb_422</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_sync</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_sync</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>GLsync</name> <name>GL_APIENTRY</name></type> <name>glFenceSyncAPPLE</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>condition</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLboolean</name> <name>GL_APIENTRY</name></type> <name>glIsSyncAPPLE</name> <parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDeleteSyncAPPLE</name> <parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLenum</name> <name>GL_APIENTRY</name></type> <name>glClientWaitSyncAPPLE</name> <parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>GLuint64</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glWaitSyncAPPLE</name> <parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>GLuint64</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetInteger64vAPPLE</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint64</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetSyncivAPPLE</name> <parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>values</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>GLsync</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLFENCESYNCAPPLEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>condition</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLISSYNCAPPLEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLDELETESYNCAPPLEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>GLenum</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLCLIENTWAITSYNCAPPLEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>GLuint64</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLWAITSYNCAPPLEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>GLuint64</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETINTEGER64VAPPLEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint64</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETSYNCIVAPPLEPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>values</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_texture_format_BGRA8888</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_texture_format_BGRA8888</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_APPLE_texture_max_level</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_APPLE_texture_max_level</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARM_mali_program_binary</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARM_mali_program_binary</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARM_mali_shader_binary</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARM_mali_shader_binary</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ARM_rgba8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARM_rgba8</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_blend_minmax</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_blend_minmax</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_color_buffer_half_float</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_color_buffer_half_float</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_debug_label</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_debug_label</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glLabelObjectEXT</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>object</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetObjectLabelEXT</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>object</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLLABELOBJECTEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>object</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETOBJECTLABELEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>object</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_debug_marker</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_debug_marker</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glInsertEventMarkerEXT</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>marker</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glPushGroupMarkerEXT</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>marker</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glPopGroupMarkerEXT</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLINSERTEVENTMARKEREXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>marker</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPUSHGROUPMARKEREXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>marker</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPOPGROUPMARKEREXTPROC</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_discard_framebuffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_discard_framebuffer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDiscardFramebufferEXT</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>numAttachments</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name> <modifier>*</modifier></type><name>attachments</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLDISCARDFRAMEBUFFEREXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>numAttachments</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name> <modifier>*</modifier></type><name>attachments</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_map_buffer_range</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_map_buffer_range</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name><modifier>*</modifier> <name>GL_APIENTRY</name></type> <name>glMapBufferRangeEXT</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>access</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glFlushMappedBufferRangeEXT</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name><modifier>*</modifier></type> (<name>GL_APIENTRYP</name> <name>PFNGLMAPBUFFERRANGEEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>access</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_multisampled_render_to_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_multisampled_render_to_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glRenderbufferStorageMultisampleEXT</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glFramebufferTexture2DMultisampleEXT</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>textarget</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>samples</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_multiview_draw_buffers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_multiview_draw_buffers</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glReadBufferIndexedEXT</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDrawBuffersIndexedEXT</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name> <modifier>*</modifier></type><name>location</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type><name>indices</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetIntegeri_vEXT</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLREADBUFFERINDEXEDEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLDRAWBUFFERSINDEXEDEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name> <modifier>*</modifier></type><name>location</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type><name>indices</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETINTEGERI_VEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_multi_draw_arrays</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_multi_draw_arrays</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glMultiDrawArraysEXT</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glMultiDrawElementsEXT</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLMULTIDRAWARRAYSEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>count</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>primcount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLMULTIDRAWELEMENTSEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLsizei</name> <modifier>*</modifier></type><name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier> <modifier>*</modifier></type><name>indices</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>primcount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_occlusion_query_boolean</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_occlusion_query_boolean</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGenQueriesEXT</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>ids</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDeleteQueriesEXT</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type><name>ids</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLboolean</name> <name>GL_APIENTRY</name></type> <name>glIsQueryEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBeginQueryEXT</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glEndQueryEXT</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetQueryivEXT</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetQueryObjectuivEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGENQUERIESEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>ids</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLDELETEQUERIESEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type><name>ids</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLISQUERYEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLBEGINQUERYEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLENDQUERYEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETQUERYIVEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETQUERYOBJECTUIVEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_read_format_bgra</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_read_format_bgra</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_robustness</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_robustness</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>GLenum</name> <name>GL_APIENTRY</name></type> <name>glGetGraphicsResetStatusEXT</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glReadnPixelsEXT</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetnUniformfvEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetnUniformivEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>GLenum</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETGRAPHICSRESETSTATUSEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLREADNPIXELSEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETNUNIFORMFVEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETNUNIFORMIVEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_separate_shader_objects</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_separate_shader_objects</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUseProgramStagesEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>pipeline</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>stages</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glActiveShaderProgramEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>pipeline</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLuint</name> <name>GL_APIENTRY</name></type> <name>glCreateShaderProgramvEXT</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>strings</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBindProgramPipelineEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>pipeline</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDeleteProgramPipelinesEXT</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type><name>pipelines</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGenProgramPipelinesEXT</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>pipelines</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLboolean</name> <name>GL_APIENTRY</name></type> <name>glIsProgramPipelineEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>pipeline</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glProgramParameteriEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetProgramPipelineivEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>pipeline</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glProgramUniform1iEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glProgramUniform2iEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glProgramUniform3iEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glProgramUniform4iEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glProgramUniform1fEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glProgramUniform2fEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glProgramUniform3fEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glProgramUniform4fEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glProgramUniform1ivEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glProgramUniform2ivEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glProgramUniform3ivEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glProgramUniform4ivEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glProgramUniform1fvEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glProgramUniform2fvEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glProgramUniform3fvEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glProgramUniform4fvEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glProgramUniformMatrix2fvEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glProgramUniformMatrix3fvEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glProgramUniformMatrix4fvEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glValidateProgramPipelineEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>pipeline</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetProgramPipelineInfoLogEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>pipeline</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>infoLog</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLUSEPROGRAMSTAGESEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>pipeline</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>stages</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLACTIVESHADERPROGRAMEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>pipeline</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>GLuint</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLCREATESHADERPROGRAMVEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier><modifier>*</modifier></type><name>strings</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLBINDPROGRAMPIPELINEEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>pipeline</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLDELETEPROGRAMPIPELINESEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type><name>pipelines</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGENPROGRAMPIPELINESEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>pipelines</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLISPROGRAMPIPELINEEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>pipeline</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPROGRAMPARAMETERIEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETPROGRAMPIPELINEIVEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>pipeline</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1IEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2IEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3IEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4IEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1FEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2FEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3FEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4FEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1IVEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2IVEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3IVEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4IVEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM1FVEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM2FVEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM3FVEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPROGRAMUNIFORM4FVEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLVALIDATEPROGRAMPIPELINEEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>pipeline</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>pipeline</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>infoLog</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_shader_framebuffer_fetch</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_shader_framebuffer_fetch</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_shader_texture_lod</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_shader_texture_lod</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_shadow_samplers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_shadow_samplers</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_sRGB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_sRGB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_compression_dxt1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_compression_dxt1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_filter_anisotropic</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_filter_anisotropic</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_format_BGRA8888</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_format_BGRA8888</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_rg</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_rg</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_storage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_storage</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glTexStorage1DEXT</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>levels</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glTexStorage2DEXT</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>levels</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glTexStorage3DEXT</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>levels</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glTextureStorage1DEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>levels</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glTextureStorage2DEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>levels</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glTextureStorage3DEXT</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>levels</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLTEXSTORAGE1DEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>levels</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLTEXSTORAGE2DEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>levels</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLTEXSTORAGE3DEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>levels</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLTEXTURESTORAGE1DEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>levels</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLTEXTURESTORAGE2DEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>levels</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLTEXTURESTORAGE3DEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>levels</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_texture_type_2_10_10_10_REV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_texture_type_2_10_10_10_REV</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_unpack_subimage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_unpack_subimage</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_DMP_shader_binary</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DMP_shader_binary</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_FJ_shader_binary_GCCSO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FJ_shader_binary_GCCSO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_IMG_program_binary</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMG_program_binary</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_IMG_read_format</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMG_read_format</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_IMG_shader_binary</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMG_shader_binary</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_IMG_texture_compression_pvrtc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMG_texture_compression_pvrtc</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_IMG_texture_compression_pvrtc2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMG_texture_compression_pvrtc2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_IMG_multisampled_render_to_texture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMG_multisampled_render_to_texture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glRenderbufferStorageMultisampleIMG</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glFramebufferTexture2DMultisampleIMG</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name></type></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>textarget</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>samples</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_coverage_sample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_coverage_sample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glCoverageMaskNV</name> <parameter_list>(<parameter><decl><type><name>GLboolean</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glCoverageOperationNV</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>operation</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLCOVERAGEMASKNVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLboolean</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLCOVERAGEOPERATIONNVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>operation</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_depth_nonlinear</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_depth_nonlinear</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_draw_buffers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_draw_buffers</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDrawBuffersNV</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name> <modifier>*</modifier></type><name>bufs</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLDRAWBUFFERSNVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name> <modifier>*</modifier></type><name>bufs</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_EXT_draw_buffers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXT_draw_buffers</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDrawBuffersEXT</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name> <modifier>*</modifier></type><name>bufs</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLDRAWBUFFERSEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name> <modifier>*</modifier></type><name>bufs</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_draw_instanced</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_draw_instanced</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDrawArraysInstancedNV</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>primcount</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDrawElementsInstancedNV</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name> <modifier>*</modifier></type><name>indices</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>primcount</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNDRAWARRAYSINSTANCEDNVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>primcount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNDRAWELEMENTSINSTANCEDNVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name> <modifier>*</modifier></type><name>indices</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>primcount</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_fbo_color_attachments</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_fbo_color_attachments</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_fence</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_fence</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDeleteFencesNV</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGenFencesNV</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLboolean</name> <name>GL_APIENTRY</name></type> <name>glIsFenceNV</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLboolean</name> <name>GL_APIENTRY</name></type> <name>glTestFenceNV</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetFenceivNV</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glFinishFenceNV</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glSetFenceNV</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type></decl></parameter>, <parameter><decl><type><name>GLenum</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLDELETEFENCESNVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name> <modifier>*</modifier></type><name>fences</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGENFENCESNVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>fences</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLISFENCENVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>fence</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLTESTFENCENVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>fence</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETFENCEIVNVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>fence</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLFINISHFENCENVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>fence</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLSETFENCENVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>fence</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>condition</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_framebuffer_blit</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_framebuffer_blit</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBlitFramebufferNV</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>srcX0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcY0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcX1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcY1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstX0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstY0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstX1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstY1</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>filter</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNBLITFRAMEBUFFERNVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>srcX0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcY0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcX1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcY1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstX0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstY0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstX1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstY1</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>filter</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_framebuffer_multisample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_framebuffer_multisample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glRenderbufferStorageMultisampleNV</name> <parameter_list>( <parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNRENDERBUFFERSTORAGEMULTISAMPLENVPROC</name>) <parameter_list>( <parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_generate_mipmap_sRGB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_generate_mipmap_sRGB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_instanced_arrays</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_instanced_arrays</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glVertexAttribDivisorNV</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>divisor</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNVERTEXATTRIBDIVISORNVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>divisor</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_read_buffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_read_buffer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glReadBufferNV</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLREADBUFFERNVPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_read_buffer_front</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_read_buffer_front</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_read_depth</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_read_depth</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_read_depth_stencil</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_read_depth_stencil</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_read_stencil</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_read_stencil</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_shadow_samplers_array</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_shadow_samplers_array</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_shadow_samplers_cube</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_shadow_samplers_cube</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_sRGB_formats</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_sRGB_formats</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texture_border_clamp</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_texture_border_clamp</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texture_compression_s3tc_update</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_texture_compression_s3tc_update</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_NV_texture_npot_2D_mipmap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NV_texture_npot_2D_mipmap</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_QCOM_alpha_test</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QCOM_alpha_test</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glAlphaFuncQCOM</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>GLclampf</name></type> <name>ref</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLALPHAFUNCQCOMPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>GLclampf</name></type> <name>ref</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_QCOM_binning_control</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QCOM_binning_control</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_QCOM_driver_control</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QCOM_driver_control</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetDriverControlsQCOM</name> <parameter_list>(<parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>driverControls</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetDriverControlStringQCOM</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>driverControl</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>driverControlString</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glEnableDriverControlQCOM</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>driverControl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDisableDriverControlQCOM</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>driverControl</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETDRIVERCONTROLSQCOMPROC</name>) <parameter_list>(<parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>driverControls</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLGETDRIVERCONTROLSTRINGQCOMPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>driverControl</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>driverControlString</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLENABLEDRIVERCONTROLQCOMPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>driverControl</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLDISABLEDRIVERCONTROLQCOMPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>driverControl</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_QCOM_extended_get</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QCOM_extended_get</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glExtGetTexturesQCOM</name> <parameter_list>(<parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>textures</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>maxTextures</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>numTextures</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glExtGetBuffersQCOM</name> <parameter_list>(<parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>buffers</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>maxBuffers</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>numBuffers</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glExtGetRenderbuffersQCOM</name> <parameter_list>(<parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>renderbuffers</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>maxRenderbuffers</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>numRenderbuffers</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glExtGetFramebuffersQCOM</name> <parameter_list>(<parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>framebuffers</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>maxFramebuffers</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>numFramebuffers</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glExtGetTexLevelParameterivQCOM</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>face</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glExtTexObjectStateOverrideiQCOM</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glExtGetTexSubImageQCOM</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLvoid</name> <modifier>*</modifier></type><name>texels</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glExtGetBufferPointervQCOM</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLvoid</name> <modifier>*</modifier><modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLEXTGETTEXTURESQCOMPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>textures</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>maxTextures</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>numTextures</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLEXTGETBUFFERSQCOMPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>buffers</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>maxBuffers</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>numBuffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLEXTGETRENDERBUFFERSQCOMPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>renderbuffers</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>maxRenderbuffers</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>numRenderbuffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLEXTGETFRAMEBUFFERSQCOMPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>framebuffers</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>maxFramebuffers</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>numFramebuffers</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>face</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLEXTGETTEXSUBIMAGEQCOMPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLvoid</name> <modifier>*</modifier></type><name>texels</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLEXTGETBUFFERPOINTERVQCOMPROC</name>) <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLvoid</name> <modifier>*</modifier><modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_QCOM_extended_get2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QCOM_extended_get2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glExtGetShadersQCOM</name> <parameter_list>(<parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>shaders</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>maxShaders</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>numShaders</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glExtGetProgramsQCOM</name> <parameter_list>(<parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>programs</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>maxPrograms</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>numPrograms</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLboolean</name> <name>GL_APIENTRY</name></type> <name>glExtIsProgramBinaryQCOM</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glExtGetProgramBinarySourceQCOM</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>shadertype</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLEXTGETSHADERSQCOMPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>shaders</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>maxShaders</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>numShaders</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLEXTGETPROGRAMSQCOMPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name> <modifier>*</modifier></type><name>programs</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>maxPrograms</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>numPrograms</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>GLboolean</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLEXTISPROGRAMBINARYQCOMPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>shadertype</name></decl></parameter>, <parameter><decl><type><name>GLchar</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>GLint</name> <modifier>*</modifier></type><name>length</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_QCOM_perfmon_global_mode</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QCOM_perfmon_global_mode</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_QCOM_writeonly_rendering</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QCOM_writeonly_rendering</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_QCOM_tiled_rendering</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QCOM_tiled_rendering</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GL_GLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glStartTilingQCOM</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>preserveMask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glEndTilingQCOM</name> <parameter_list>(<parameter><decl><type><name>GLbitfield</name></type> <name>preserveMask</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLSTARTTILINGQCOMPROC</name>) <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>preserveMask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>GL_APIENTRYP</name> <name>PFNGLENDTILINGQCOMPROC</name>) <parameter_list>(<parameter><decl><type><name>GLbitfield</name></type> <name>preserveMask</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_VIV_shader_binary</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIV_shader_binary</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
