<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\ANGLE\GLES3\gl3.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__gl3_h_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__gl3_h_</name></cpp:macro></cpp:define>





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GLES3/gl3platform.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






























<typedef>typedef <type><name>void</name></type> <name>GLvoid</name>;</typedef>
<typedef>typedef <type><name>char</name></type> <name>GLchar</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>GLenum</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>GLboolean</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>GLbitfield</name>;</typedef>
<typedef>typedef <type><name>khronos_int8_t</name></type> <name>GLbyte</name>;</typedef>
<typedef>typedef <type><name>short</name></type> <name>GLshort</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>GLint</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>GLsizei</name>;</typedef>
<typedef>typedef <type><name>khronos_uint8_t</name></type> <name>GLubyte</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>GLushort</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>GLuint</name>;</typedef>
<typedef>typedef <type><name>khronos_float_t</name></type> <name>GLfloat</name>;</typedef>
<typedef>typedef <type><name>khronos_float_t</name></type> <name>GLclampf</name>;</typedef>
<typedef>typedef <type><name>khronos_int32_t</name></type> <name>GLfixed</name>;</typedef>
<typedef>typedef <type><name>khronos_intptr_t</name></type> <name>GLintptr</name>;</typedef>
<typedef>typedef <type><name>khronos_ssize_t</name></type> <name>GLsizeiptr</name>;</typedef>



<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>GLhalf</name>;</typedef>
<typedef>typedef <type><name>khronos_int64_t</name></type> <name>GLint64</name>;</typedef>
<typedef>typedef <type><name>khronos_uint64_t</name></type> <name>GLuint64</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>__GLsync</name></name> <modifier>*</modifier></type><name>GLsync</name>;</typedef>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ES_VERSION_3_0</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ES_VERSION_2_0</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_BUFFER_BIT</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POINTS</name></cpp:macro> <cpp:value>0x0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINES</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_LOOP</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_STRIP</name></cpp:macro> <cpp:value>0x0003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLES</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLE_STRIP</name></cpp:macro> <cpp:value>0x0005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRIANGLE_FAN</name></cpp:macro> <cpp:value>0x0006</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ZERO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC_COLOR</name></cpp:macro> <cpp:value>0x0300</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_SRC_COLOR</name></cpp:macro> <cpp:value>0x0301</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC_ALPHA</name></cpp:macro> <cpp:value>0x0302</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_SRC_ALPHA</name></cpp:macro> <cpp:value>0x0303</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DST_ALPHA</name></cpp:macro> <cpp:value>0x0304</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_DST_ALPHA</name></cpp:macro> <cpp:value>0x0305</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DST_COLOR</name></cpp:macro> <cpp:value>0x0306</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_DST_COLOR</name></cpp:macro> <cpp:value>0x0307</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRC_ALPHA_SATURATE</name></cpp:macro> <cpp:value>0x0308</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FUNC_ADD</name></cpp:macro> <cpp:value>0x8006</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_EQUATION</name></cpp:macro> <cpp:value>0x8009</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_EQUATION_RGB</name></cpp:macro> <cpp:value>0x8009</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_EQUATION_ALPHA</name></cpp:macro> <cpp:value>0x883D</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FUNC_SUBTRACT</name></cpp:macro> <cpp:value>0x800A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FUNC_REVERSE_SUBTRACT</name></cpp:macro> <cpp:value>0x800B</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_DST_RGB</name></cpp:macro> <cpp:value>0x80C8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_SRC_RGB</name></cpp:macro> <cpp:value>0x80C9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_DST_ALPHA</name></cpp:macro> <cpp:value>0x80CA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_SRC_ALPHA</name></cpp:macro> <cpp:value>0x80CB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_COLOR</name></cpp:macro> <cpp:value>0x8001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_CONSTANT_COLOR</name></cpp:macro> <cpp:value>0x8002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONSTANT_ALPHA</name></cpp:macro> <cpp:value>0x8003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ONE_MINUS_CONSTANT_ALPHA</name></cpp:macro> <cpp:value>0x8004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND_COLOR</name></cpp:macro> <cpp:value>0x8005</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_BUFFER</name></cpp:macro> <cpp:value>0x8892</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_BUFFER</name></cpp:macro> <cpp:value>0x8893</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8894</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ELEMENT_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8895</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_DRAW</name></cpp:macro> <cpp:value>0x88E0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_DRAW</name></cpp:macro> <cpp:value>0x88E4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_DRAW</name></cpp:macro> <cpp:value>0x88E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x8764</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_USAGE</name></cpp:macro> <cpp:value>0x8765</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_VERTEX_ATTRIB</name></cpp:macro> <cpp:value>0x8626</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRONT</name></cpp:macro> <cpp:value>0x0404</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BACK</name></cpp:macro> <cpp:value>0x0405</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRONT_AND_BACK</name></cpp:macro> <cpp:value>0x0408</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D</name></cpp:macro> <cpp:value>0x0DE1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CULL_FACE</name></cpp:macro> <cpp:value>0x0B44</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLEND</name></cpp:macro> <cpp:value>0x0BE2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DITHER</name></cpp:macro> <cpp:value>0x0BD0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_TEST</name></cpp:macro> <cpp:value>0x0B90</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_TEST</name></cpp:macro> <cpp:value>0x0B71</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCISSOR_TEST</name></cpp:macro> <cpp:value>0x0C11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_FILL</name></cpp:macro> <cpp:value>0x8037</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_ALPHA_TO_COVERAGE</name></cpp:macro> <cpp:value>0x809E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE</name></cpp:macro> <cpp:value>0x80A0</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NO_ERROR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_ENUM</name></cpp:macro> <cpp:value>0x0500</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_VALUE</name></cpp:macro> <cpp:value>0x0501</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_OPERATION</name></cpp:macro> <cpp:value>0x0502</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OUT_OF_MEMORY</name></cpp:macro> <cpp:value>0x0505</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CW</name></cpp:macro> <cpp:value>0x0900</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CCW</name></cpp:macro> <cpp:value>0x0901</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINE_WIDTH</name></cpp:macro> <cpp:value>0x0B21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALIASED_POINT_SIZE_RANGE</name></cpp:macro> <cpp:value>0x846D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALIASED_LINE_WIDTH_RANGE</name></cpp:macro> <cpp:value>0x846E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CULL_FACE_MODE</name></cpp:macro> <cpp:value>0x0B45</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRONT_FACE</name></cpp:macro> <cpp:value>0x0B46</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_RANGE</name></cpp:macro> <cpp:value>0x0B70</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_WRITEMASK</name></cpp:macro> <cpp:value>0x0B72</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_CLEAR_VALUE</name></cpp:macro> <cpp:value>0x0B73</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_FUNC</name></cpp:macro> <cpp:value>0x0B74</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_CLEAR_VALUE</name></cpp:macro> <cpp:value>0x0B91</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_FUNC</name></cpp:macro> <cpp:value>0x0B92</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_FAIL</name></cpp:macro> <cpp:value>0x0B94</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_PASS_DEPTH_FAIL</name></cpp:macro> <cpp:value>0x0B95</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_PASS_DEPTH_PASS</name></cpp:macro> <cpp:value>0x0B96</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_REF</name></cpp:macro> <cpp:value>0x0B97</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_VALUE_MASK</name></cpp:macro> <cpp:value>0x0B93</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_WRITEMASK</name></cpp:macro> <cpp:value>0x0B98</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_FUNC</name></cpp:macro> <cpp:value>0x8800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_FAIL</name></cpp:macro> <cpp:value>0x8801</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_PASS_DEPTH_FAIL</name></cpp:macro> <cpp:value>0x8802</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_PASS_DEPTH_PASS</name></cpp:macro> <cpp:value>0x8803</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_REF</name></cpp:macro> <cpp:value>0x8CA3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_VALUE_MASK</name></cpp:macro> <cpp:value>0x8CA4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BACK_WRITEMASK</name></cpp:macro> <cpp:value>0x8CA5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VIEWPORT</name></cpp:macro> <cpp:value>0x0BA2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SCISSOR_BOX</name></cpp:macro> <cpp:value>0x0C10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_CLEAR_VALUE</name></cpp:macro> <cpp:value>0x0C22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_WRITEMASK</name></cpp:macro> <cpp:value>0x0C23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_ALIGNMENT</name></cpp:macro> <cpp:value>0x0CF5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_ALIGNMENT</name></cpp:macro> <cpp:value>0x0D05</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_SIZE</name></cpp:macro> <cpp:value>0x0D33</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VIEWPORT_DIMS</name></cpp:macro> <cpp:value>0x0D3A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SUBPIXEL_BITS</name></cpp:macro> <cpp:value>0x0D50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED_BITS</name></cpp:macro> <cpp:value>0x0D52</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREEN_BITS</name></cpp:macro> <cpp:value>0x0D53</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLUE_BITS</name></cpp:macro> <cpp:value>0x0D54</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA_BITS</name></cpp:macro> <cpp:value>0x0D55</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_BITS</name></cpp:macro> <cpp:value>0x0D56</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_BITS</name></cpp:macro> <cpp:value>0x0D57</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_UNITS</name></cpp:macro> <cpp:value>0x2A00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_POLYGON_OFFSET_FACTOR</name></cpp:macro> <cpp:value>0x8038</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_2D</name></cpp:macro> <cpp:value>0x8069</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_BUFFERS</name></cpp:macro> <cpp:value>0x80A8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLES</name></cpp:macro> <cpp:value>0x80A9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE_VALUE</name></cpp:macro> <cpp:value>0x80AA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLE_COVERAGE_INVERT</name></cpp:macro> <cpp:value>0x80AB</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_COMPRESSED_TEXTURE_FORMATS</name></cpp:macro> <cpp:value>0x86A2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_TEXTURE_FORMATS</name></cpp:macro> <cpp:value>0x86A3</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DONT_CARE</name></cpp:macro> <cpp:value>0x1100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FASTEST</name></cpp:macro> <cpp:value>0x1101</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NICEST</name></cpp:macro> <cpp:value>0x1102</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GENERATE_MIPMAP_HINT</name></cpp:macro> <cpp:value>0x8192</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BYTE</name></cpp:macro> <cpp:value>0x1400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_BYTE</name></cpp:macro> <cpp:value>0x1401</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHORT</name></cpp:macro> <cpp:value>0x1402</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT</name></cpp:macro> <cpp:value>0x1403</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT</name></cpp:macro> <cpp:value>0x1404</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT</name></cpp:macro> <cpp:value>0x1405</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT</name></cpp:macro> <cpp:value>0x1406</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FIXED</name></cpp:macro> <cpp:value>0x140C</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT</name></cpp:macro> <cpp:value>0x1902</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALPHA</name></cpp:macro> <cpp:value>0x1906</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB</name></cpp:macro> <cpp:value>0x1907</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA</name></cpp:macro> <cpp:value>0x1908</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE</name></cpp:macro> <cpp:value>0x1909</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA</name></cpp:macro> <cpp:value>0x190A</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_4_4_4_4</name></cpp:macro> <cpp:value>0x8033</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_5_5_5_1</name></cpp:macro> <cpp:value>0x8034</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_5_6_5</name></cpp:macro> <cpp:value>0x8363</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SHADER</name></cpp:macro> <cpp:value>0x8B30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_SHADER</name></cpp:macro> <cpp:value>0x8B31</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_ATTRIBS</name></cpp:macro> <cpp:value>0x8869</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_UNIFORM_VECTORS</name></cpp:macro> <cpp:value>0x8DFB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VARYING_VECTORS</name></cpp:macro> <cpp:value>0x8DFC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8B4D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8B4C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_IMAGE_UNITS</name></cpp:macro> <cpp:value>0x8872</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_UNIFORM_VECTORS</name></cpp:macro> <cpp:value>0x8DFD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_TYPE</name></cpp:macro> <cpp:value>0x8B4F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DELETE_STATUS</name></cpp:macro> <cpp:value>0x8B80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINK_STATUS</name></cpp:macro> <cpp:value>0x8B82</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VALIDATE_STATUS</name></cpp:macro> <cpp:value>0x8B83</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ATTACHED_SHADERS</name></cpp:macro> <cpp:value>0x8B85</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_UNIFORMS</name></cpp:macro> <cpp:value>0x8B86</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_UNIFORM_MAX_LENGTH</name></cpp:macro> <cpp:value>0x8B87</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_ATTRIBUTES</name></cpp:macro> <cpp:value>0x8B89</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_ATTRIBUTE_MAX_LENGTH</name></cpp:macro> <cpp:value>0x8B8A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADING_LANGUAGE_VERSION</name></cpp:macro> <cpp:value>0x8B8C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_PROGRAM</name></cpp:macro> <cpp:value>0x8B8D</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEVER</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LESS</name></cpp:macro> <cpp:value>0x0201</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EQUAL</name></cpp:macro> <cpp:value>0x0202</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LEQUAL</name></cpp:macro> <cpp:value>0x0203</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREATER</name></cpp:macro> <cpp:value>0x0204</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NOTEQUAL</name></cpp:macro> <cpp:value>0x0205</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GEQUAL</name></cpp:macro> <cpp:value>0x0206</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALWAYS</name></cpp:macro> <cpp:value>0x0207</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_KEEP</name></cpp:macro> <cpp:value>0x1E00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPLACE</name></cpp:macro> <cpp:value>0x1E01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INCR</name></cpp:macro> <cpp:value>0x1E02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DECR</name></cpp:macro> <cpp:value>0x1E03</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVERT</name></cpp:macro> <cpp:value>0x150A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INCR_WRAP</name></cpp:macro> <cpp:value>0x8507</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DECR_WRAP</name></cpp:macro> <cpp:value>0x8508</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VENDOR</name></cpp:macro> <cpp:value>0x1F00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERER</name></cpp:macro> <cpp:value>0x1F01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERSION</name></cpp:macro> <cpp:value>0x1F02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_EXTENSIONS</name></cpp:macro> <cpp:value>0x1F03</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEAREST</name></cpp:macro> <cpp:value>0x2600</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR</name></cpp:macro> <cpp:value>0x2601</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEAREST_MIPMAP_NEAREST</name></cpp:macro> <cpp:value>0x2700</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_MIPMAP_NEAREST</name></cpp:macro> <cpp:value>0x2701</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NEAREST_MIPMAP_LINEAR</name></cpp:macro> <cpp:value>0x2702</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LINEAR_MIPMAP_LINEAR</name></cpp:macro> <cpp:value>0x2703</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAG_FILTER</name></cpp:macro> <cpp:value>0x2800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MIN_FILTER</name></cpp:macro> <cpp:value>0x2801</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_WRAP_S</name></cpp:macro> <cpp:value>0x2802</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_WRAP_T</name></cpp:macro> <cpp:value>0x2803</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE</name></cpp:macro> <cpp:value>0x1702</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP</name></cpp:macro> <cpp:value>0x8513</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_CUBE_MAP</name></cpp:macro> <cpp:value>0x8514</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_X</name></cpp:macro> <cpp:value>0x8515</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_X</name></cpp:macro> <cpp:value>0x8516</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_Y</name></cpp:macro> <cpp:value>0x8517</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_Y</name></cpp:macro> <cpp:value>0x8518</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_POSITIVE_Z</name></cpp:macro> <cpp:value>0x8519</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_CUBE_MAP_NEGATIVE_Z</name></cpp:macro> <cpp:value>0x851A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_CUBE_MAP_TEXTURE_SIZE</name></cpp:macro> <cpp:value>0x851C</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE0</name></cpp:macro> <cpp:value>0x84C0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE1</name></cpp:macro> <cpp:value>0x84C1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE2</name></cpp:macro> <cpp:value>0x84C2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE3</name></cpp:macro> <cpp:value>0x84C3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE4</name></cpp:macro> <cpp:value>0x84C4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE5</name></cpp:macro> <cpp:value>0x84C5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE6</name></cpp:macro> <cpp:value>0x84C6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE7</name></cpp:macro> <cpp:value>0x84C7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE8</name></cpp:macro> <cpp:value>0x84C8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE9</name></cpp:macro> <cpp:value>0x84C9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE10</name></cpp:macro> <cpp:value>0x84CA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE11</name></cpp:macro> <cpp:value>0x84CB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE12</name></cpp:macro> <cpp:value>0x84CC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE13</name></cpp:macro> <cpp:value>0x84CD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE14</name></cpp:macro> <cpp:value>0x84CE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE15</name></cpp:macro> <cpp:value>0x84CF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE16</name></cpp:macro> <cpp:value>0x84D0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE17</name></cpp:macro> <cpp:value>0x84D1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE18</name></cpp:macro> <cpp:value>0x84D2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE19</name></cpp:macro> <cpp:value>0x84D3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE20</name></cpp:macro> <cpp:value>0x84D4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE21</name></cpp:macro> <cpp:value>0x84D5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE22</name></cpp:macro> <cpp:value>0x84D6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE23</name></cpp:macro> <cpp:value>0x84D7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE24</name></cpp:macro> <cpp:value>0x84D8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE25</name></cpp:macro> <cpp:value>0x84D9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE26</name></cpp:macro> <cpp:value>0x84DA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE27</name></cpp:macro> <cpp:value>0x84DB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE28</name></cpp:macro> <cpp:value>0x84DC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE29</name></cpp:macro> <cpp:value>0x84DD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE30</name></cpp:macro> <cpp:value>0x84DE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE31</name></cpp:macro> <cpp:value>0x84DF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_TEXTURE</name></cpp:macro> <cpp:value>0x84E0</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_REPEAT</name></cpp:macro> <cpp:value>0x2901</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CLAMP_TO_EDGE</name></cpp:macro> <cpp:value>0x812F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIRRORED_REPEAT</name></cpp:macro> <cpp:value>0x8370</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC2</name></cpp:macro> <cpp:value>0x8B50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC3</name></cpp:macro> <cpp:value>0x8B51</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_VEC4</name></cpp:macro> <cpp:value>0x8B52</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_VEC2</name></cpp:macro> <cpp:value>0x8B53</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_VEC3</name></cpp:macro> <cpp:value>0x8B54</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_VEC4</name></cpp:macro> <cpp:value>0x8B55</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL</name></cpp:macro> <cpp:value>0x8B56</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL_VEC2</name></cpp:macro> <cpp:value>0x8B57</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL_VEC3</name></cpp:macro> <cpp:value>0x8B58</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BOOL_VEC4</name></cpp:macro> <cpp:value>0x8B59</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT2</name></cpp:macro> <cpp:value>0x8B5A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT3</name></cpp:macro> <cpp:value>0x8B5B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT4</name></cpp:macro> <cpp:value>0x8B5C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D</name></cpp:macro> <cpp:value>0x8B5E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_CUBE</name></cpp:macro> <cpp:value>0x8B60</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_ENABLED</name></cpp:macro> <cpp:value>0x8622</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_SIZE</name></cpp:macro> <cpp:value>0x8623</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x8624</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_TYPE</name></cpp:macro> <cpp:value>0x8625</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_NORMALIZED</name></cpp:macro> <cpp:value>0x886A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_POINTER</name></cpp:macro> <cpp:value>0x8645</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x889F</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMPLEMENTATION_COLOR_READ_TYPE</name></cpp:macro> <cpp:value>0x8B9A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_IMPLEMENTATION_COLOR_READ_FORMAT</name></cpp:macro> <cpp:value>0x8B9B</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPILE_STATUS</name></cpp:macro> <cpp:value>0x8B81</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INFO_LOG_LENGTH</name></cpp:macro> <cpp:value>0x8B84</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_SOURCE_LENGTH</name></cpp:macro> <cpp:value>0x8B88</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_COMPILER</name></cpp:macro> <cpp:value>0x8DFA</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADER_BINARY_FORMATS</name></cpp:macro> <cpp:value>0x8DF8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_SHADER_BINARY_FORMATS</name></cpp:macro> <cpp:value>0x8DF9</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOW_FLOAT</name></cpp:macro> <cpp:value>0x8DF0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MEDIUM_FLOAT</name></cpp:macro> <cpp:value>0x8DF1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HIGH_FLOAT</name></cpp:macro> <cpp:value>0x8DF2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LOW_INT</name></cpp:macro> <cpp:value>0x8DF3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MEDIUM_INT</name></cpp:macro> <cpp:value>0x8DF4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HIGH_INT</name></cpp:macro> <cpp:value>0x8DF5</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER</name></cpp:macro> <cpp:value>0x8D40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER</name></cpp:macro> <cpp:value>0x8D41</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA4</name></cpp:macro> <cpp:value>0x8056</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB5_A1</name></cpp:macro> <cpp:value>0x8057</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB565</name></cpp:macro> <cpp:value>0x8D62</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT16</name></cpp:macro> <cpp:value>0x81A5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_INDEX8</name></cpp:macro> <cpp:value>0x8D48</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_WIDTH</name></cpp:macro> <cpp:value>0x8D42</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_HEIGHT</name></cpp:macro> <cpp:value>0x8D43</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_INTERNAL_FORMAT</name></cpp:macro> <cpp:value>0x8D44</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_RED_SIZE</name></cpp:macro> <cpp:value>0x8D50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_GREEN_SIZE</name></cpp:macro> <cpp:value>0x8D51</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_BLUE_SIZE</name></cpp:macro> <cpp:value>0x8D52</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_ALPHA_SIZE</name></cpp:macro> <cpp:value>0x8D53</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_DEPTH_SIZE</name></cpp:macro> <cpp:value>0x8D54</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_STENCIL_SIZE</name></cpp:macro> <cpp:value>0x8D55</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE</name></cpp:macro> <cpp:value>0x8CD0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME</name></cpp:macro> <cpp:value>0x8CD1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL</name></cpp:macro> <cpp:value>0x8CD2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE</name></cpp:macro> <cpp:value>0x8CD3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT0</name></cpp:macro> <cpp:value>0x8CE0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_ATTACHMENT</name></cpp:macro> <cpp:value>0x8D00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL_ATTACHMENT</name></cpp:macro> <cpp:value>0x8D20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_COMPLETE</name></cpp:macro> <cpp:value>0x8CD5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT</name></cpp:macro> <cpp:value>0x8CD6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT</name></cpp:macro> <cpp:value>0x8CD7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS</name></cpp:macro> <cpp:value>0x8CD9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_UNSUPPORTED</name></cpp:macro> <cpp:value>0x8CDD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_BINDING</name></cpp:macro> <cpp:value>0x8CA6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_BINDING</name></cpp:macro> <cpp:value>0x8CA7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_RENDERBUFFER_SIZE</name></cpp:macro> <cpp:value>0x84E8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_FRAMEBUFFER_OPERATION</name></cpp:macro> <cpp:value>0x0506</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_BUFFER</name></cpp:macro> <cpp:value>0x0C02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_ROW_LENGTH</name></cpp:macro> <cpp:value>0x0CF2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SKIP_ROWS</name></cpp:macro> <cpp:value>0x0CF3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SKIP_PIXELS</name></cpp:macro> <cpp:value>0x0CF4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_ROW_LENGTH</name></cpp:macro> <cpp:value>0x0D02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_SKIP_ROWS</name></cpp:macro> <cpp:value>0x0D03</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PACK_SKIP_PIXELS</name></cpp:macro> <cpp:value>0x0D04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR</name></cpp:macro> <cpp:value>0x1800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH</name></cpp:macro> <cpp:value>0x1801</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STENCIL</name></cpp:macro> <cpp:value>0x1802</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED</name></cpp:macro> <cpp:value>0x1903</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8</name></cpp:macro> <cpp:value>0x8051</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8</name></cpp:macro> <cpp:value>0x8058</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB10_A2</name></cpp:macro> <cpp:value>0x8059</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_3D</name></cpp:macro> <cpp:value>0x806A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_SKIP_IMAGES</name></cpp:macro> <cpp:value>0x806D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNPACK_IMAGE_HEIGHT</name></cpp:macro> <cpp:value>0x806E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_3D</name></cpp:macro> <cpp:value>0x806F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_WRAP_R</name></cpp:macro> <cpp:value>0x8072</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_3D_TEXTURE_SIZE</name></cpp:macro> <cpp:value>0x8073</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_2_10_10_10_REV</name></cpp:macro> <cpp:value>0x8368</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ELEMENTS_VERTICES</name></cpp:macro> <cpp:value>0x80E8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ELEMENTS_INDICES</name></cpp:macro> <cpp:value>0x80E9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MIN_LOD</name></cpp:macro> <cpp:value>0x813A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_LOD</name></cpp:macro> <cpp:value>0x813B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BASE_LEVEL</name></cpp:macro> <cpp:value>0x813C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_LEVEL</name></cpp:macro> <cpp:value>0x813D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN</name></cpp:macro> <cpp:value>0x8007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX</name></cpp:macro> <cpp:value>0x8008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT24</name></cpp:macro> <cpp:value>0x81A6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_LOD_BIAS</name></cpp:macro> <cpp:value>0x84FD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPARE_MODE</name></cpp:macro> <cpp:value>0x884C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_COMPARE_FUNC</name></cpp:macro> <cpp:value>0x884D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CURRENT_QUERY</name></cpp:macro> <cpp:value>0x8865</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_RESULT</name></cpp:macro> <cpp:value>0x8866</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_QUERY_RESULT_AVAILABLE</name></cpp:macro> <cpp:value>0x8867</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAPPED</name></cpp:macro> <cpp:value>0x88BC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAP_POINTER</name></cpp:macro> <cpp:value>0x88BD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_READ</name></cpp:macro> <cpp:value>0x88E1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STREAM_COPY</name></cpp:macro> <cpp:value>0x88E2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_READ</name></cpp:macro> <cpp:value>0x88E5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_STATIC_COPY</name></cpp:macro> <cpp:value>0x88E6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_READ</name></cpp:macro> <cpp:value>0x88E9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DYNAMIC_COPY</name></cpp:macro> <cpp:value>0x88EA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_DRAW_BUFFERS</name></cpp:macro> <cpp:value>0x8824</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER0</name></cpp:macro> <cpp:value>0x8825</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER1</name></cpp:macro> <cpp:value>0x8826</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER2</name></cpp:macro> <cpp:value>0x8827</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER3</name></cpp:macro> <cpp:value>0x8828</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER4</name></cpp:macro> <cpp:value>0x8829</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER5</name></cpp:macro> <cpp:value>0x882A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER6</name></cpp:macro> <cpp:value>0x882B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER7</name></cpp:macro> <cpp:value>0x882C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER8</name></cpp:macro> <cpp:value>0x882D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER9</name></cpp:macro> <cpp:value>0x882E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER10</name></cpp:macro> <cpp:value>0x882F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER11</name></cpp:macro> <cpp:value>0x8830</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER12</name></cpp:macro> <cpp:value>0x8831</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER13</name></cpp:macro> <cpp:value>0x8832</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER14</name></cpp:macro> <cpp:value>0x8833</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_BUFFER15</name></cpp:macro> <cpp:value>0x8834</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8B49</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8B4A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_3D</name></cpp:macro> <cpp:value>0x8B5F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_SHADOW</name></cpp:macro> <cpp:value>0x8B62</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAGMENT_SHADER_DERIVATIVE_HINT</name></cpp:macro> <cpp:value>0x8B8B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_PACK_BUFFER</name></cpp:macro> <cpp:value>0x88EB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_UNPACK_BUFFER</name></cpp:macro> <cpp:value>0x88EC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_PACK_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x88ED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PIXEL_UNPACK_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x88EF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT2x3</name></cpp:macro> <cpp:value>0x8B65</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT2x4</name></cpp:macro> <cpp:value>0x8B66</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT3x2</name></cpp:macro> <cpp:value>0x8B67</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT3x4</name></cpp:macro> <cpp:value>0x8B68</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT4x2</name></cpp:macro> <cpp:value>0x8B69</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_MAT4x3</name></cpp:macro> <cpp:value>0x8B6A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB</name></cpp:macro> <cpp:value>0x8C40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB8</name></cpp:macro> <cpp:value>0x8C41</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SRGB8_ALPHA8</name></cpp:macro> <cpp:value>0x8C43</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPARE_REF_TO_TEXTURE</name></cpp:macro> <cpp:value>0x884E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAJOR_VERSION</name></cpp:macro> <cpp:value>0x821B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MINOR_VERSION</name></cpp:macro> <cpp:value>0x821C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_EXTENSIONS</name></cpp:macro> <cpp:value>0x821D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA32F</name></cpp:macro> <cpp:value>0x8814</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB32F</name></cpp:macro> <cpp:value>0x8815</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16F</name></cpp:macro> <cpp:value>0x881A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16F</name></cpp:macro> <cpp:value>0x881B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_INTEGER</name></cpp:macro> <cpp:value>0x88FD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ARRAY_TEXTURE_LAYERS</name></cpp:macro> <cpp:value>0x88FF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MIN_PROGRAM_TEXEL_OFFSET</name></cpp:macro> <cpp:value>0x8904</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_PROGRAM_TEXEL_OFFSET</name></cpp:macro> <cpp:value>0x8905</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VARYING_COMPONENTS</name></cpp:macro> <cpp:value>0x8B4B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_2D_ARRAY</name></cpp:macro> <cpp:value>0x8C1A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_BINDING_2D_ARRAY</name></cpp:macro> <cpp:value>0x8C1D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R11F_G11F_B10F</name></cpp:macro> <cpp:value>0x8C3A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_10F_11F_11F_REV</name></cpp:macro> <cpp:value>0x8C3B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB9_E5</name></cpp:macro> <cpp:value>0x8C3D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_5_9_9_9_REV</name></cpp:macro> <cpp:value>0x8C3E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH</name></cpp:macro> <cpp:value>0x8C76</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_MODE</name></cpp:macro> <cpp:value>0x8C7F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS</name></cpp:macro> <cpp:value>0x8C80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_VARYINGS</name></cpp:macro> <cpp:value>0x8C83</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_START</name></cpp:macro> <cpp:value>0x8C84</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x8C85</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN</name></cpp:macro> <cpp:value>0x8C88</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RASTERIZER_DISCARD</name></cpp:macro> <cpp:value>0x8C89</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS</name></cpp:macro> <cpp:value>0x8C8A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS</name></cpp:macro> <cpp:value>0x8C8B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INTERLEAVED_ATTRIBS</name></cpp:macro> <cpp:value>0x8C8C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SEPARATE_ATTRIBS</name></cpp:macro> <cpp:value>0x8C8D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER</name></cpp:macro> <cpp:value>0x8C8E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8C8F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA32UI</name></cpp:macro> <cpp:value>0x8D70</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB32UI</name></cpp:macro> <cpp:value>0x8D71</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16UI</name></cpp:macro> <cpp:value>0x8D76</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16UI</name></cpp:macro> <cpp:value>0x8D77</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8UI</name></cpp:macro> <cpp:value>0x8D7C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8UI</name></cpp:macro> <cpp:value>0x8D7D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA32I</name></cpp:macro> <cpp:value>0x8D82</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB32I</name></cpp:macro> <cpp:value>0x8D83</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA16I</name></cpp:macro> <cpp:value>0x8D88</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB16I</name></cpp:macro> <cpp:value>0x8D89</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8I</name></cpp:macro> <cpp:value>0x8D8E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8I</name></cpp:macro> <cpp:value>0x8D8F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RED_INTEGER</name></cpp:macro> <cpp:value>0x8D94</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB_INTEGER</name></cpp:macro> <cpp:value>0x8D98</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA_INTEGER</name></cpp:macro> <cpp:value>0x8D99</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_ARRAY</name></cpp:macro> <cpp:value>0x8DC1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_2D_ARRAY_SHADOW</name></cpp:macro> <cpp:value>0x8DC4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_CUBE_SHADOW</name></cpp:macro> <cpp:value>0x8DC5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC2</name></cpp:macro> <cpp:value>0x8DC6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC3</name></cpp:macro> <cpp:value>0x8DC7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_VEC4</name></cpp:macro> <cpp:value>0x8DC8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D</name></cpp:macro> <cpp:value>0x8DCA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_3D</name></cpp:macro> <cpp:value>0x8DCB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_CUBE</name></cpp:macro> <cpp:value>0x8DCC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_SAMPLER_2D_ARRAY</name></cpp:macro> <cpp:value>0x8DCF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D</name></cpp:macro> <cpp:value>0x8DD2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_3D</name></cpp:macro> <cpp:value>0x8DD3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_CUBE</name></cpp:macro> <cpp:value>0x8DD4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_SAMPLER_2D_ARRAY</name></cpp:macro> <cpp:value>0x8DD7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_ACCESS_FLAGS</name></cpp:macro> <cpp:value>0x911F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAP_LENGTH</name></cpp:macro> <cpp:value>0x9120</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BUFFER_MAP_OFFSET</name></cpp:macro> <cpp:value>0x9121</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_COMPONENT32F</name></cpp:macro> <cpp:value>0x8CAC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH32F_STENCIL8</name></cpp:macro> <cpp:value>0x8CAD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FLOAT_32_UNSIGNED_INT_24_8_REV</name></cpp:macro> <cpp:value>0x8DAD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING</name></cpp:macro> <cpp:value>0x8210</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE</name></cpp:macro> <cpp:value>0x8211</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE</name></cpp:macro> <cpp:value>0x8212</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE</name></cpp:macro> <cpp:value>0x8213</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE</name></cpp:macro> <cpp:value>0x8214</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE</name></cpp:macro> <cpp:value>0x8215</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE</name></cpp:macro> <cpp:value>0x8216</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE</name></cpp:macro> <cpp:value>0x8217</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_DEFAULT</name></cpp:macro> <cpp:value>0x8218</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_UNDEFINED</name></cpp:macro> <cpp:value>0x8219</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_STENCIL_ATTACHMENT</name></cpp:macro> <cpp:value>0x821A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH_STENCIL</name></cpp:macro> <cpp:value>0x84F9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_INT_24_8</name></cpp:macro> <cpp:value>0x84FA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DEPTH24_STENCIL8</name></cpp:macro> <cpp:value>0x88F0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_NORMALIZED</name></cpp:macro> <cpp:value>0x8C17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER_BINDING</name></cpp:macro> <cpp:value>GL_FRAMEBUFFER_BINDING</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER</name></cpp:macro> <cpp:value>0x8CA8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER</name></cpp:macro> <cpp:value>0x8CA9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER_BINDING</name></cpp:macro> <cpp:value>0x8CAA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RENDERBUFFER_SAMPLES</name></cpp:macro> <cpp:value>0x8CAB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER</name></cpp:macro> <cpp:value>0x8CD4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COLOR_ATTACHMENTS</name></cpp:macro> <cpp:value>0x8CDF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT1</name></cpp:macro> <cpp:value>0x8CE1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT2</name></cpp:macro> <cpp:value>0x8CE2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT3</name></cpp:macro> <cpp:value>0x8CE3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT4</name></cpp:macro> <cpp:value>0x8CE4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT5</name></cpp:macro> <cpp:value>0x8CE5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT6</name></cpp:macro> <cpp:value>0x8CE6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT7</name></cpp:macro> <cpp:value>0x8CE7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT8</name></cpp:macro> <cpp:value>0x8CE8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT9</name></cpp:macro> <cpp:value>0x8CE9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT10</name></cpp:macro> <cpp:value>0x8CEA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT11</name></cpp:macro> <cpp:value>0x8CEB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT12</name></cpp:macro> <cpp:value>0x8CEC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT13</name></cpp:macro> <cpp:value>0x8CED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT14</name></cpp:macro> <cpp:value>0x8CEE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COLOR_ATTACHMENT15</name></cpp:macro> <cpp:value>0x8CEF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE</name></cpp:macro> <cpp:value>0x8D56</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SAMPLES</name></cpp:macro> <cpp:value>0x8D57</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_HALF_FLOAT</name></cpp:macro> <cpp:value>0x140B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_READ_BIT</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_WRITE_BIT</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_INVALIDATE_RANGE_BIT</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_INVALIDATE_BUFFER_BIT</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_FLUSH_EXPLICIT_BIT</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAP_UNSYNCHRONIZED_BIT</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG</name></cpp:macro> <cpp:value>0x8227</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG_INTEGER</name></cpp:macro> <cpp:value>0x8228</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R8</name></cpp:macro> <cpp:value>0x8229</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG8</name></cpp:macro> <cpp:value>0x822B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16F</name></cpp:macro> <cpp:value>0x822D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R32F</name></cpp:macro> <cpp:value>0x822E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16F</name></cpp:macro> <cpp:value>0x822F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG32F</name></cpp:macro> <cpp:value>0x8230</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R8I</name></cpp:macro> <cpp:value>0x8231</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R8UI</name></cpp:macro> <cpp:value>0x8232</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16I</name></cpp:macro> <cpp:value>0x8233</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R16UI</name></cpp:macro> <cpp:value>0x8234</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R32I</name></cpp:macro> <cpp:value>0x8235</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R32UI</name></cpp:macro> <cpp:value>0x8236</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG8I</name></cpp:macro> <cpp:value>0x8237</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG8UI</name></cpp:macro> <cpp:value>0x8238</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16I</name></cpp:macro> <cpp:value>0x8239</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG16UI</name></cpp:macro> <cpp:value>0x823A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG32I</name></cpp:macro> <cpp:value>0x823B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG32UI</name></cpp:macro> <cpp:value>0x823C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ARRAY_BINDING</name></cpp:macro> <cpp:value>0x85B5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_R8_SNORM</name></cpp:macro> <cpp:value>0x8F94</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RG8_SNORM</name></cpp:macro> <cpp:value>0x8F95</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB8_SNORM</name></cpp:macro> <cpp:value>0x8F96</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGBA8_SNORM</name></cpp:macro> <cpp:value>0x8F97</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNED_NORMALIZED</name></cpp:macro> <cpp:value>0x8F9C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PRIMITIVE_RESTART_FIXED_INDEX</name></cpp:macro> <cpp:value>0x8D69</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COPY_READ_BUFFER</name></cpp:macro> <cpp:value>0x8F36</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COPY_WRITE_BUFFER</name></cpp:macro> <cpp:value>0x8F37</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COPY_READ_BUFFER_BINDING</name></cpp:macro> <cpp:value>GL_COPY_READ_BUFFER</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COPY_WRITE_BUFFER_BINDING</name></cpp:macro> <cpp:value>GL_COPY_WRITE_BUFFER</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER</name></cpp:macro> <cpp:value>0x8A11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_BINDING</name></cpp:macro> <cpp:value>0x8A28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_START</name></cpp:macro> <cpp:value>0x8A29</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_SIZE</name></cpp:macro> <cpp:value>0x8A2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A2B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A2D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A2E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_UNIFORM_BUFFER_BINDINGS</name></cpp:macro> <cpp:value>0x8A2F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_UNIFORM_BLOCK_SIZE</name></cpp:macro> <cpp:value>0x8A30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8A31</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS</name></cpp:macro> <cpp:value>0x8A33</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT</name></cpp:macro> <cpp:value>0x8A34</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH</name></cpp:macro> <cpp:value>0x8A35</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ACTIVE_UNIFORM_BLOCKS</name></cpp:macro> <cpp:value>0x8A36</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_TYPE</name></cpp:macro> <cpp:value>0x8A37</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_SIZE</name></cpp:macro> <cpp:value>0x8A38</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_NAME_LENGTH</name></cpp:macro> <cpp:value>0x8A39</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_INDEX</name></cpp:macro> <cpp:value>0x8A3A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_OFFSET</name></cpp:macro> <cpp:value>0x8A3B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_ARRAY_STRIDE</name></cpp:macro> <cpp:value>0x8A3C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_MATRIX_STRIDE</name></cpp:macro> <cpp:value>0x8A3D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_IS_ROW_MAJOR</name></cpp:macro> <cpp:value>0x8A3E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_BINDING</name></cpp:macro> <cpp:value>0x8A3F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_DATA_SIZE</name></cpp:macro> <cpp:value>0x8A40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_NAME_LENGTH</name></cpp:macro> <cpp:value>0x8A41</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS</name></cpp:macro> <cpp:value>0x8A42</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES</name></cpp:macro> <cpp:value>0x8A43</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER</name></cpp:macro> <cpp:value>0x8A44</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER</name></cpp:macro> <cpp:value>0x8A46</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INVALID_INDEX</name></cpp:macro> <cpp:value>0xFFFFFFFFu</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_VERTEX_OUTPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x9122</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_FRAGMENT_INPUT_COMPONENTS</name></cpp:macro> <cpp:value>0x9125</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_SERVER_WAIT_TIMEOUT</name></cpp:macro> <cpp:value>0x9111</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_OBJECT_TYPE</name></cpp:macro> <cpp:value>0x9112</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_CONDITION</name></cpp:macro> <cpp:value>0x9113</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_STATUS</name></cpp:macro> <cpp:value>0x9114</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_FLAGS</name></cpp:macro> <cpp:value>0x9115</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_FENCE</name></cpp:macro> <cpp:value>0x9116</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_GPU_COMMANDS_COMPLETE</name></cpp:macro> <cpp:value>0x9117</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNALED</name></cpp:macro> <cpp:value>0x9118</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SIGNALED</name></cpp:macro> <cpp:value>0x9119</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ALREADY_SIGNALED</name></cpp:macro> <cpp:value>0x911A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TIMEOUT_EXPIRED</name></cpp:macro> <cpp:value>0x911B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_CONDITION_SATISFIED</name></cpp:macro> <cpp:value>0x911C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_WAIT_FAILED</name></cpp:macro> <cpp:value>0x911D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SYNC_FLUSH_COMMANDS_BIT</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TIMEOUT_IGNORED</name></cpp:macro> <cpp:value>0xFFFFFFFFFFFFFFFFull</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_VERTEX_ATTRIB_ARRAY_DIVISOR</name></cpp:macro> <cpp:value>0x88FE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ANY_SAMPLES_PASSED</name></cpp:macro> <cpp:value>0x8C2F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ANY_SAMPLES_PASSED_CONSERVATIVE</name></cpp:macro> <cpp:value>0x8D6A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SAMPLER_BINDING</name></cpp:macro> <cpp:value>0x8919</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_RGB10_A2UI</name></cpp:macro> <cpp:value>0x906F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_R</name></cpp:macro> <cpp:value>0x8E42</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_G</name></cpp:macro> <cpp:value>0x8E43</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_B</name></cpp:macro> <cpp:value>0x8E44</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_SWIZZLE_A</name></cpp:macro> <cpp:value>0x8E45</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_GREEN</name></cpp:macro> <cpp:value>0x1904</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_BLUE</name></cpp:macro> <cpp:value>0x1905</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_INT_2_10_10_10_REV</name></cpp:macro> <cpp:value>0x8D9F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK</name></cpp:macro> <cpp:value>0x8E22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_PAUSED</name></cpp:macro> <cpp:value>0x8E23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_ACTIVE</name></cpp:macro> <cpp:value>0x8E24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TRANSFORM_FEEDBACK_BINDING</name></cpp:macro> <cpp:value>0x8E25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_BINARY_RETRIEVABLE_HINT</name></cpp:macro> <cpp:value>0x8257</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_BINARY_LENGTH</name></cpp:macro> <cpp:value>0x8741</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_PROGRAM_BINARY_FORMATS</name></cpp:macro> <cpp:value>0x87FE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_PROGRAM_BINARY_FORMATS</name></cpp:macro> <cpp:value>0x87FF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_R11_EAC</name></cpp:macro> <cpp:value>0x9270</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_R11_EAC</name></cpp:macro> <cpp:value>0x9271</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RG11_EAC</name></cpp:macro> <cpp:value>0x9272</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SIGNED_RG11_EAC</name></cpp:macro> <cpp:value>0x9273</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB8_ETC2</name></cpp:macro> <cpp:value>0x9274</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ETC2</name></cpp:macro> <cpp:value>0x9275</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2</name></cpp:macro> <cpp:value>0x9276</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2</name></cpp:macro> <cpp:value>0x9277</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA8_ETC2_EAC</name></cpp:macro> <cpp:value>0x9278</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC</name></cpp:macro> <cpp:value>0x9279</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_IMMUTABLE_FORMAT</name></cpp:macro> <cpp:value>0x912F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_ELEMENT_INDEX</name></cpp:macro> <cpp:value>0x8D6B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_NUM_SAMPLE_COUNTS</name></cpp:macro> <cpp:value>0x9380</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_IMMUTABLE_LEVELS</name></cpp:macro> <cpp:value>0x82DF</cpp:value></cpp:define>







<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glActiveTexture</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>texture</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glAttachShader</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBindAttribLocation</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBindBuffer</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBindFramebuffer</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>framebuffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBindRenderbuffer</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>renderbuffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBindTexture</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBlendColor</name> <parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>blue</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBlendEquation</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBlendEquationSeparate</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>modeRGB</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>modeAlpha</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBlendFunc</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>sfactor</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>dfactor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBlendFuncSeparate</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>srcRGB</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>dstRGB</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>srcAlpha</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>dstAlpha</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBufferData</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>usage</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBufferSubData</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLenum</name> <name>GL_APIENTRY</name></type> <name>glCheckFramebufferStatus</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glClear</name> <parameter_list>(<parameter><decl><type><name>GLbitfield</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glClearColor</name> <parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>blue</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glClearDepthf</name> <parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>depth</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glClearStencil</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glColorMask</name> <parameter_list>(<parameter><decl><type><name>GLboolean</name></type> <name>red</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>green</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>blue</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glCompileShader</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glCompressedTexImage2D</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glCompressedTexSubImage2D</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glCopyTexImage2D</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glCopyTexSubImage2D</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLuint</name> <name>GL_APIENTRY</name></type> <name>glCreateProgram</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLuint</name> <name>GL_APIENTRY</name></type> <name>glCreateShader</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glCullFace</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDeleteBuffers</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>buffers</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDeleteFramebuffers</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>framebuffers</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDeleteProgram</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDeleteRenderbuffers</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>renderbuffers</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDeleteShader</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDeleteTextures</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>textures</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDepthFunc</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>func</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDepthMask</name> <parameter_list>(<parameter><decl><type><name>GLboolean</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDepthRangef</name> <parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDetachShader</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDisable</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>cap</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDisableVertexAttribArray</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDrawArrays</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDrawElements</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>indices</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glEnable</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>cap</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glEnableVertexAttribArray</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glFinish</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glFlush</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glFramebufferRenderbuffer</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>renderbuffertarget</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>renderbuffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glFramebufferTexture2D</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>textarget</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glFrontFace</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGenBuffers</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>buffers</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGenerateMipmap</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGenFramebuffers</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>framebuffers</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGenRenderbuffers</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>renderbuffers</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGenTextures</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>textures</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetActiveAttrib</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetActiveUniform</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetAttachedShaders</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>maxcount</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>shaders</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLint</name> <name>GL_APIENTRY</name></type> <name>glGetAttribLocation</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetBooleanv</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetBufferParameteriv</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLenum</name> <name>GL_APIENTRY</name></type> <name>glGetError</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetFloatv</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetFramebufferAttachmentParameteriv</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetIntegerv</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetProgramiv</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetProgramInfoLog</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type> <name>infolog</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetRenderbufferParameteriv</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetShaderiv</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetShaderInfoLog</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type> <name>infolog</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetShaderPrecisionFormat</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>shadertype</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>precisiontype</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>precision</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetShaderSource</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier> <name>GL_APIENTRY</name></type> <name>glGetString</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetTexParameterfv</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetTexParameteriv</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetUniformfv</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetUniformiv</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLint</name> <name>GL_APIENTRY</name></type> <name>glGetUniformLocation</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetVertexAttribfv</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetVertexAttribiv</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetVertexAttribPointerv</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLvoid</name><modifier>*</modifier><modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glHint</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLboolean</name> <name>GL_APIENTRY</name></type> <name>glIsBuffer</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLboolean</name> <name>GL_APIENTRY</name></type> <name>glIsEnabled</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>cap</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLboolean</name> <name>GL_APIENTRY</name></type> <name>glIsFramebuffer</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>framebuffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLboolean</name> <name>GL_APIENTRY</name></type> <name>glIsProgram</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLboolean</name> <name>GL_APIENTRY</name></type> <name>glIsRenderbuffer</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>renderbuffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLboolean</name> <name>GL_APIENTRY</name></type> <name>glIsShader</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLboolean</name> <name>GL_APIENTRY</name></type> <name>glIsTexture</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glLineWidth</name> <parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>width</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glLinkProgram</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glPixelStorei</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glPolygonOffset</name> <parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>factor</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>units</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glReadPixels</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLvoid</name><modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glReleaseShaderCompiler</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glRenderbufferStorage</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glSampleCoverage</name> <parameter_list>(<parameter><decl><type><name>GLfloat</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>invert</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glScissor</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glShaderBinary</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>shaders</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>binaryformat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>binary</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glShaderSource</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier> <specifier>const</specifier><modifier>*</modifier></type> <name>string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glStencilFunc</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>ref</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glStencilFuncSeparate</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>face</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>ref</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glStencilMask</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glStencilMaskSeparate</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>face</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glStencilOp</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>fail</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>zfail</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>zpass</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glStencilOpSeparate</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>face</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>fail</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>zfail</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>zpass</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glTexImage2D</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glTexParameterf</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glTexParameterfv</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glTexParameteri</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glTexParameteriv</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glTexSubImage2D</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform1f</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform1fv</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform1i</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform1iv</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform2f</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform2fv</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform2i</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform2iv</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform3f</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform3fv</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform3i</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform3iv</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform4f</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform4fv</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform4i</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform4iv</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniformMatrix2fv</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniformMatrix3fv</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniformMatrix4fv</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUseProgram</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glValidateProgram</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glVertexAttrib1f</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>indx</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glVertexAttrib1fv</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>indx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>values</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glVertexAttrib2f</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>indx</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glVertexAttrib2fv</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>indx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>values</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glVertexAttrib3f</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>indx</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glVertexAttrib3fv</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>indx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>values</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glVertexAttrib4f</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>indx</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glVertexAttrib4fv</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>indx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>values</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glVertexAttribPointer</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>indx</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>normalized</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glViewport</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glReadBuffer</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDrawRangeElements</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>indices</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glTexImage3D</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glTexSubImage3D</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>pixels</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glCopyTexSubImage3D</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glCompressedTexImage3D</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glCompressedTexSubImage3D</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>xoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>yoffset</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>zoffset</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGenQueries</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>ids</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDeleteQueries</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>ids</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLboolean</name> <name>GL_APIENTRY</name></type> <name>glIsQuery</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBeginQuery</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glEndQuery</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetQueryiv</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetQueryObjectuiv</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLboolean</name> <name>GL_APIENTRY</name></type> <name>glUnmapBuffer</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetBufferPointerv</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLvoid</name><modifier>*</modifier><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDrawBuffers</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name><modifier>*</modifier></type> <name>bufs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniformMatrix2x3fv</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniformMatrix3x2fv</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniformMatrix2x4fv</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniformMatrix4x2fv</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniformMatrix3x4fv</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniformMatrix4x3fv</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLboolean</name></type> <name>transpose</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBlitFramebuffer</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>srcX0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcY0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcX1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>srcY1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstX0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstY0</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstX1</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>dstY1</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>filter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glRenderbufferStorageMultisample</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glFramebufferTextureLayer</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>layer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLvoid</name><modifier>*</modifier> <name>GL_APIENTRY</name></type> <name>glMapBufferRange</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>access</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glFlushMappedBufferRange</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBindVertexArray</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>array</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDeleteVertexArrays</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>arrays</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGenVertexArrays</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>arrays</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLboolean</name> <name>GL_APIENTRY</name></type> <name>glIsVertexArray</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>array</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetIntegeri_v</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBeginTransformFeedback</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>primitiveMode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glEndTransformFeedback</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBindBufferRange</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBindBufferBase</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glTransformFeedbackVaryings</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier> <specifier>const</specifier><modifier>*</modifier></type> <name>varyings</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>bufferMode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetTransformFeedbackVarying</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glVertexAttribIPointer</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>pointer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetVertexAttribIiv</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetVertexAttribIuiv</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glVertexAttribI4i</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glVertexAttribI4ui</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glVertexAttribI4iv</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glVertexAttribI4uiv</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetUniformuiv</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLint</name> <name>GL_APIENTRY</name></type> <name>glGetFragDataLocation</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform1ui</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v0</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform2ui</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v1</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform3ui</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform4ui</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>v3</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform1uiv</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform2uiv</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform3uiv</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniform4uiv</name> <parameter_list>(<parameter><decl><type><name>GLint</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glClearBufferiv</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>drawbuffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glClearBufferuiv</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>drawbuffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glClearBufferfv</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>drawbuffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glClearBufferfi</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>drawbuffer</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>stencil</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <specifier>const</specifier> <name>GLubyte</name><modifier>*</modifier> <name>GL_APIENTRY</name></type> <name>glGetStringi</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glCopyBufferSubData</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>readTarget</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>writeTarget</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>readOffset</name></decl></parameter>, <parameter><decl><type><name>GLintptr</name></type> <name>writeOffset</name></decl></parameter>, <parameter><decl><type><name>GLsizeiptr</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetUniformIndices</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>uniformCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier> <specifier>const</specifier><modifier>*</modifier></type> <name>uniformNames</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>uniformIndices</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetActiveUniformsiv</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>uniformCount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>uniformIndices</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLuint</name> <name>GL_APIENTRY</name></type> <name>glGetUniformBlockIndex</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLchar</name><modifier>*</modifier></type> <name>uniformBlockName</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetActiveUniformBlockiv</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>uniformBlockIndex</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetActiveUniformBlockName</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>uniformBlockIndex</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLchar</name><modifier>*</modifier></type> <name>uniformBlockName</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glUniformBlockBinding</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>uniformBlockIndex</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>uniformBlockBinding</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDrawArraysInstanced</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>instanceCount</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDrawElementsInstanced</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>indices</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>instanceCount</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLsync</name> <name>GL_APIENTRY</name></type> <name>glFenceSync</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>condition</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLboolean</name> <name>GL_APIENTRY</name></type> <name>glIsSync</name> <parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDeleteSync</name> <parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLenum</name> <name>GL_APIENTRY</name></type> <name>glClientWaitSync</name> <parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>GLuint64</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glWaitSync</name> <parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>GLbitfield</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>GLuint64</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetInteger64v</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint64</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetSynciv</name> <parameter_list>(<parameter><decl><type><name>GLsync</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>values</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetInteger64i_v</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLint64</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetBufferParameteri64v</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint64</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGenSamplers</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>samplers</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDeleteSamplers</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>samplers</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLboolean</name> <name>GL_APIENTRY</name></type> <name>glIsSampler</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBindSampler</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>unit</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glSamplerParameteri</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glSamplerParameteriv</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLint</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glSamplerParameterf</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glSamplerParameterfv</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLfloat</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetSamplerParameteriv</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetSamplerParameterfv</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLfloat</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glVertexAttribDivisor</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>divisor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glBindTransformFeedback</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glDeleteTransformFeedbacks</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLuint</name><modifier>*</modifier></type> <name>ids</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGenTransformFeedbacks</name> <parameter_list>(<parameter><decl><type><name>GLsizei</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>GLuint</name><modifier>*</modifier></type> <name>ids</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>GLboolean</name> <name>GL_APIENTRY</name></type> <name>glIsTransformFeedback</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glPauseTransformFeedback</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glResumeTransformFeedback</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetProgramBinary</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name><modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>GLenum</name><modifier>*</modifier></type> <name>binaryFormat</name></decl></parameter>, <parameter><decl><type><name>GLvoid</name><modifier>*</modifier></type> <name>binary</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glProgramBinary</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>binaryFormat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLvoid</name><modifier>*</modifier></type> <name>binary</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glProgramParameteri</name> <parameter_list>(<parameter><decl><type><name>GLuint</name></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glInvalidateFramebuffer</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>numAttachments</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name><modifier>*</modifier></type> <name>attachments</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glInvalidateSubFramebuffer</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>numAttachments</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GLenum</name><modifier>*</modifier></type> <name>attachments</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glTexStorage2D</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>levels</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glTexStorage3D</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>levels</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>depth</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>GL_APICALL</name> <name>void</name> <name>GL_APIENTRY</name></type> <name>glGetInternalformativ</name> <parameter_list>(<parameter><decl><type><name>GLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>internalformat</name></decl></parameter>, <parameter><decl><type><name>GLenum</name></type> <name>pname</name></decl></parameter>, <parameter><decl><type><name>GLsizei</name></type> <name>bufSize</name></decl></parameter>, <parameter><decl><type><name>GLint</name><modifier>*</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
