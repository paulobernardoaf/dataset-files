<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\ANGLE\EGL\eglplatform.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__eglplatform_h_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__eglplatform_h_</name></cpp:macro></cpp:define>


































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;KHR/khrplatform.h&gt;</cpp:file></cpp:include>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGLAPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGLAPI</name></cpp:macro> <cpp:value>KHRONOS_APICALL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGLAPIENTRY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGLAPIENTRY</name></cpp:macro> <cpp:value>KHRONOS_APIENTRY</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGLAPIENTRYP</name></cpp:macro> <cpp:value>EGLAPIENTRY*</cpp:value></cpp:define>













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__VC32__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SCITECH_SNAP__</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32_LEAN_AND_MEAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>PVOID</name>;</typedef> 
<typedef>typedef <type><name>PVOID</name></type> <name>HANDLE</name>;</typedef> 
<typedef>typedef <type><name>HANDLE</name></type> <name>HWND</name>;</typedef> 
<typedef>typedef <type><name>HANDLE</name></type> <name>HDC</name>;</typedef> 
<typedef>typedef <type><name>HANDLE</name></type> <name>HBITMAP</name>;</typedef> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Windows.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<typedef>typedef <type><name>HDC</name></type> <name>EGLNativeDisplayType</name>;</typedef>
<typedef>typedef <type><name>HBITMAP</name></type> <name>EGLNativePixmapType</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WINAPI_FAMILY</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>WINAPI_FAMILY</name> <operator>==</operator> <name>WINAPI_FAMILY_DESKTOP_APP</name><operator>)</operator></expr></cpp:if> 
<typedef>typedef <type><name>HWND</name></type> <name>EGLNativeWindowType</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inspectable.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>IInspectable</name><modifier>*</modifier></type> <name>EGLNativeWindowType</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WINSCW__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SYMBIAN32__</name></expr></argument>)</argument_list></call></expr></cpp:elif> 

<typedef>typedef <type><name>int</name></type> <name>EGLNativeDisplayType</name>;</typedef>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>EGLNativeWindowType</name>;</typedef>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>EGLNativePixmapType</name>;</typedef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;android/native_window.h&gt;</cpp:file></cpp:include>

<struct_decl>struct <name>egl_native_pixmap_t</name>;</struct_decl>

<typedef>typedef <type><name><name>struct</name> <name>ANativeWindow</name></name><modifier>*</modifier></type> <name>EGLNativeWindowType</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>egl_native_pixmap_t</name></name><modifier>*</modifier></type> <name>EGLNativePixmapType</name>;</typedef>
<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>EGLNativeDisplayType</name>;</typedef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__unix__</name></expr></argument>)</argument_list></call></expr></cpp:elif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xutil.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>Display</name> <modifier>*</modifier></type><name>EGLNativeDisplayType</name>;</typedef>
<typedef>typedef <type><name>Pixmap</name></type> <name>EGLNativePixmapType</name>;</typedef>
<typedef>typedef <type><name>Window</name></type> <name>EGLNativeWindowType</name>;</typedef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE_CPP__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE_CC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MACOS_CLASSIC__</name></expr></argument>)</argument_list></call> <operator>)</operator></expr></cpp:elif>



<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>EGLNativeDisplayType</name>;</typedef>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>EGLNativePixmapType</name>;</typedef>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>EGLNativeWindowType</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Platform not recognized"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><name>EGLNativeDisplayType</name></type> <name>NativeDisplayType</name>;</typedef>
<typedef>typedef <type><name>EGLNativePixmapType</name></type> <name>NativePixmapType</name>;</typedef>
<typedef>typedef <type><name>EGLNativeWindowType</name></type> <name>NativeWindowType</name>;</typedef>









<typedef>typedef <type><name>khronos_int32_t</name></type> <name>EGLint</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
