<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\ANGLE\EGL\eglext.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__eglext_h_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__eglext_h_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;EGL/eglplatform.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_EGLEXT_VERSION</name></cpp:macro> <cpp:value>20140610</cpp:value></cpp:define>










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_cl_event</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_cl_event</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CL_EVENT_HANDLE_KHR</name></cpp:macro> <cpp:value>0x309C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SYNC_CL_EVENT_KHR</name></cpp:macro> <cpp:value>0x30FE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SYNC_CL_EVENT_COMPLETE_KHR</name></cpp:macro> <cpp:value>0x30FF</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_cl_event2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_cl_event2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>EGLSyncKHR</name>;</typedef>
<typedef>typedef <type><name>intptr_t</name></type> <name>EGLAttribKHR</name>;</typedef>
<typedef>typedef <function_decl><type><name>EGLSyncKHR</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLCREATESYNC64KHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLAttribKHR</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLSyncKHR</name> <name>EGLAPIENTRY</name></type> <name>eglCreateSync64KHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLAttribKHR</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_client_get_all_proc_addresses</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_client_get_all_proc_addresses</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_config_attribs</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_config_attribs</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONFORMANT_KHR</name></cpp:macro> <cpp:value>0x3042</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_VG_COLORSPACE_LINEAR_BIT_KHR</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_VG_ALPHA_FORMAT_PRE_BIT_KHR</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_create_context</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_create_context</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_MAJOR_VERSION_KHR</name></cpp:macro> <cpp:value>0x3098</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_MINOR_VERSION_KHR</name></cpp:macro> <cpp:value>0x30FB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_FLAGS_KHR</name></cpp:macro> <cpp:value>0x30FC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR</name></cpp:macro> <cpp:value>0x30FD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR</name></cpp:macro> <cpp:value>0x31BD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NO_RESET_NOTIFICATION_KHR</name></cpp:macro> <cpp:value>0x31BE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_LOSE_CONTEXT_ON_RESET_KHR</name></cpp:macro> <cpp:value>0x31BF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_OPENGL_ROBUST_ACCESS_BIT_KHR</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT_KHR</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT_KHR</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_OPENGL_ES3_BIT_KHR</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_fence_sync</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_fence_sync</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KHRONOS_SUPPORT_INT64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SYNC_PRIOR_COMMANDS_COMPLETE_KHR</name></cpp:macro> <cpp:value>0x30F0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SYNC_CONDITION_KHR</name></cpp:macro> <cpp:value>0x30F8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SYNC_FENCE_KHR</name></cpp:macro> <cpp:value>0x30F9</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_get_all_proc_addresses</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_get_all_proc_addresses</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_gl_colorspace</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_gl_colorspace</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_GL_COLORSPACE_KHR</name></cpp:macro> <cpp:value>0x309D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_GL_COLORSPACE_SRGB_KHR</name></cpp:macro> <cpp:value>0x3089</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_GL_COLORSPACE_LINEAR_KHR</name></cpp:macro> <cpp:value>0x308A</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_gl_renderbuffer_image</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_gl_renderbuffer_image</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_GL_RENDERBUFFER_KHR</name></cpp:macro> <cpp:value>0x30B9</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_gl_texture_2D_image</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_gl_texture_2D_image</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_GL_TEXTURE_2D_KHR</name></cpp:macro> <cpp:value>0x30B1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_GL_TEXTURE_LEVEL_KHR</name></cpp:macro> <cpp:value>0x30BC</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_gl_texture_3D_image</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_gl_texture_3D_image</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_GL_TEXTURE_3D_KHR</name></cpp:macro> <cpp:value>0x30B2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_GL_TEXTURE_ZOFFSET_KHR</name></cpp:macro> <cpp:value>0x30BD</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_gl_texture_cubemap_image</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_gl_texture_cubemap_image</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X_KHR</name></cpp:macro> <cpp:value>0x30B3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X_KHR</name></cpp:macro> <cpp:value>0x30B4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y_KHR</name></cpp:macro> <cpp:value>0x30B5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_KHR</name></cpp:macro> <cpp:value>0x30B6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z_KHR</name></cpp:macro> <cpp:value>0x30B7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_KHR</name></cpp:macro> <cpp:value>0x30B8</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_image</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_image</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>EGLImageKHR</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NATIVE_PIXMAP_KHR</name></cpp:macro> <cpp:value>0x30B0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NO_IMAGE_KHR</name></cpp:macro> <cpp:value>((EGLImageKHR)0)</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>EGLImageKHR</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLCREATEIMAGEKHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLContext</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>EGLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>EGLClientBuffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLDESTROYIMAGEKHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLImageKHR</name></type> <name>image</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLImageKHR</name> <name>EGLAPIENTRY</name></type> <name>eglCreateImageKHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLContext</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>EGLenum</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>EGLClientBuffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglDestroyImageKHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLImageKHR</name></type> <name>image</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_image_base</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_image_base</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_IMAGE_PRESERVED_KHR</name></cpp:macro> <cpp:value>0x30D2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_image_pixmap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_image_pixmap</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_lock_surface</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_lock_surface</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_READ_SURFACE_BIT_KHR</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_WRITE_SURFACE_BIT_KHR</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_LOCK_SURFACE_BIT_KHR</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_OPTIMAL_FORMAT_BIT_KHR</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_MATCH_FORMAT_KHR</name></cpp:macro> <cpp:value>0x3043</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_FORMAT_RGB_565_EXACT_KHR</name></cpp:macro> <cpp:value>0x30C0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_FORMAT_RGB_565_KHR</name></cpp:macro> <cpp:value>0x30C1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_FORMAT_RGBA_8888_EXACT_KHR</name></cpp:macro> <cpp:value>0x30C2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_FORMAT_RGBA_8888_KHR</name></cpp:macro> <cpp:value>0x30C3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_MAP_PRESERVE_PIXELS_KHR</name></cpp:macro> <cpp:value>0x30C4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_LOCK_USAGE_HINT_KHR</name></cpp:macro> <cpp:value>0x30C5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BITMAP_POINTER_KHR</name></cpp:macro> <cpp:value>0x30C6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BITMAP_PITCH_KHR</name></cpp:macro> <cpp:value>0x30C7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BITMAP_ORIGIN_KHR</name></cpp:macro> <cpp:value>0x30C8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BITMAP_PIXEL_RED_OFFSET_KHR</name></cpp:macro> <cpp:value>0x30C9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR</name></cpp:macro> <cpp:value>0x30CA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR</name></cpp:macro> <cpp:value>0x30CB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR</name></cpp:macro> <cpp:value>0x30CC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR</name></cpp:macro> <cpp:value>0x30CD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_LOWER_LEFT_KHR</name></cpp:macro> <cpp:value>0x30CE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_UPPER_LEFT_KHR</name></cpp:macro> <cpp:value>0x30CF</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLLOCKSURFACEKHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLUNLOCKSURFACEKHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSurface</name></type> <name>surface</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglLockSurfaceKHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglUnlockSurfaceKHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSurface</name></type> <name>surface</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_lock_surface2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_lock_surface2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BITMAP_PIXEL_SIZE_KHR</name></cpp:macro> <cpp:value>0x3110</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_lock_surface3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_lock_surface3</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLQUERYSURFACE64KHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>EGLAttribKHR</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglQuerySurface64KHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>EGLAttribKHR</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_platform_android</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_platform_android</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_ANDROID_KHR</name></cpp:macro> <cpp:value>0x3141</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_platform_gbm</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_platform_gbm</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_GBM_KHR</name></cpp:macro> <cpp:value>0x31D7</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_platform_wayland</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_platform_wayland</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_WAYLAND_KHR</name></cpp:macro> <cpp:value>0x31D8</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_platform_x11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_platform_x11</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_X11_KHR</name></cpp:macro> <cpp:value>0x31D5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_X11_SCREEN_KHR</name></cpp:macro> <cpp:value>0x31D6</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_reusable_sync</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_reusable_sync</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <type><name>khronos_utime_nanoseconds_t</name></type> <name>EGLTimeKHR</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KHRONOS_SUPPORT_INT64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SYNC_STATUS_KHR</name></cpp:macro> <cpp:value>0x30F1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SIGNALED_KHR</name></cpp:macro> <cpp:value>0x30F2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_UNSIGNALED_KHR</name></cpp:macro> <cpp:value>0x30F3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_TIMEOUT_EXPIRED_KHR</name></cpp:macro> <cpp:value>0x30F5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONDITION_SATISFIED_KHR</name></cpp:macro> <cpp:value>0x30F6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SYNC_TYPE_KHR</name></cpp:macro> <cpp:value>0x30F7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SYNC_REUSABLE_KHR</name></cpp:macro> <cpp:value>0x30FA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SYNC_FLUSH_COMMANDS_BIT_KHR</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_FOREVER_KHR</name></cpp:macro> <cpp:value>0xFFFFFFFFFFFFFFFFull</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NO_SYNC_KHR</name></cpp:macro> <cpp:value>((EGLSyncKHR)0)</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>EGLSyncKHR</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLCREATESYNCKHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLDESTROYSYNCKHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSyncKHR</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLint</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLCLIENTWAITSYNCKHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSyncKHR</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>EGLTimeKHR</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLSIGNALSYNCKHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSyncKHR</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>EGLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLGETSYNCATTRIBKHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSyncKHR</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>EGLint</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLSyncKHR</name> <name>EGLAPIENTRY</name></type> <name>eglCreateSyncKHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglDestroySyncKHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSyncKHR</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLint</name> <name>EGLAPIENTRY</name></type> <name>eglClientWaitSyncKHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSyncKHR</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>EGLTimeKHR</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglSignalSyncKHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSyncKHR</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>EGLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglGetSyncAttribKHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSyncKHR</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>EGLint</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_stream</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_stream</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>EGLStreamKHR</name>;</typedef>
<typedef>typedef <type><name>khronos_uint64_t</name></type> <name>EGLuint64KHR</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KHRONOS_SUPPORT_INT64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NO_STREAM_KHR</name></cpp:macro> <cpp:value>((EGLStreamKHR)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONSUMER_LATENCY_USEC_KHR</name></cpp:macro> <cpp:value>0x3210</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PRODUCER_FRAME_KHR</name></cpp:macro> <cpp:value>0x3212</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONSUMER_FRAME_KHR</name></cpp:macro> <cpp:value>0x3213</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_STREAM_STATE_KHR</name></cpp:macro> <cpp:value>0x3214</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_STREAM_STATE_CREATED_KHR</name></cpp:macro> <cpp:value>0x3215</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_STREAM_STATE_CONNECTING_KHR</name></cpp:macro> <cpp:value>0x3216</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_STREAM_STATE_EMPTY_KHR</name></cpp:macro> <cpp:value>0x3217</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR</name></cpp:macro> <cpp:value>0x3218</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_STREAM_STATE_OLD_FRAME_AVAILABLE_KHR</name></cpp:macro> <cpp:value>0x3219</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_STREAM_STATE_DISCONNECTED_KHR</name></cpp:macro> <cpp:value>0x321A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BAD_STREAM_KHR</name></cpp:macro> <cpp:value>0x321B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BAD_STATE_KHR</name></cpp:macro> <cpp:value>0x321C</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>EGLStreamKHR</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLCREATESTREAMKHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLDESTROYSTREAMKHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLStreamKHR</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLSTREAMATTRIBKHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLStreamKHR</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>EGLenum</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLQUERYSTREAMKHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLStreamKHR</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>EGLenum</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>EGLint</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLQUERYSTREAMU64KHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLStreamKHR</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>EGLenum</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>EGLuint64KHR</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLStreamKHR</name> <name>EGLAPIENTRY</name></type> <name>eglCreateStreamKHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglDestroyStreamKHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLStreamKHR</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglStreamAttribKHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLStreamKHR</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>EGLenum</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglQueryStreamKHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLStreamKHR</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>EGLenum</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>EGLint</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglQueryStreamu64KHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLStreamKHR</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>EGLenum</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>EGLuint64KHR</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_stream_consumer_gltexture</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_stream_consumer_gltexture</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_stream</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR</name></cpp:macro> <cpp:value>0x321E</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALKHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLStreamKHR</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLSTREAMCONSUMERACQUIREKHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLStreamKHR</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLSTREAMCONSUMERRELEASEKHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLStreamKHR</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglStreamConsumerGLTextureExternalKHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLStreamKHR</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglStreamConsumerAcquireKHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLStreamKHR</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglStreamConsumerReleaseKHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLStreamKHR</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_stream_cross_process_fd</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_stream_cross_process_fd</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <type><name>int</name></type> <name>EGLNativeFileDescriptorKHR</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_stream</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NO_FILE_DESCRIPTOR_KHR</name></cpp:macro> <cpp:value>((EGLNativeFileDescriptorKHR)(-1))</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>EGLNativeFileDescriptorKHR</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLGETSTREAMFILEDESCRIPTORKHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLStreamKHR</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLStreamKHR</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLCREATESTREAMFROMFILEDESCRIPTORKHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLNativeFileDescriptorKHR</name></type> <name>file_descriptor</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLNativeFileDescriptorKHR</name> <name>EGLAPIENTRY</name></type> <name>eglGetStreamFileDescriptorKHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLStreamKHR</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLStreamKHR</name> <name>EGLAPIENTRY</name></type> <name>eglCreateStreamFromFileDescriptorKHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLNativeFileDescriptorKHR</name></type> <name>file_descriptor</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_stream_fifo</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_stream_fifo</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_stream</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_STREAM_FIFO_LENGTH_KHR</name></cpp:macro> <cpp:value>0x31FC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_STREAM_TIME_NOW_KHR</name></cpp:macro> <cpp:value>0x31FD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_STREAM_TIME_CONSUMER_KHR</name></cpp:macro> <cpp:value>0x31FE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_STREAM_TIME_PRODUCER_KHR</name></cpp:macro> <cpp:value>0x31FF</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLQUERYSTREAMTIMEKHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLStreamKHR</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>EGLenum</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>EGLTimeKHR</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglQueryStreamTimeKHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLStreamKHR</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>EGLenum</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>EGLTimeKHR</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_stream_producer_aldatalocator</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_stream_producer_aldatalocator</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_stream</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_stream_producer_eglsurface</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_stream_producer_eglsurface</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_stream</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_STREAM_BIT_KHR</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>EGLSurface</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLCREATESTREAMPRODUCERSURFACEKHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLConfig</name></type> <name>config</name></decl></parameter>, <parameter><decl><type><name>EGLStreamKHR</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLSurface</name> <name>EGLAPIENTRY</name></type> <name>eglCreateStreamProducerSurfaceKHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLConfig</name></type> <name>config</name></decl></parameter>, <parameter><decl><type><name>EGLStreamKHR</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_surfaceless_context</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_surfaceless_context</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_vg_parent_image</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_vg_parent_image</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_VG_PARENT_IMAGE_KHR</name></cpp:macro> <cpp:value>0x30BA</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_KHR_wait_sync</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_KHR_wait_sync</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>EGLint</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLWAITSYNCKHRPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSyncKHR</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLint</name> <name>EGLAPIENTRY</name></type> <name>eglWaitSyncKHR</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSyncKHR</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_ANDROID_blob_cache</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ANDROID_blob_cache</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <type><name>khronos_ssize_t</name></type> <name>EGLsizeiANDROID</name>;</typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>EGLSetBlobFuncANDROID</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>EGLsizeiANDROID</name></type> <name>keySize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>EGLsizeiANDROID</name></type> <name>valueSize</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLsizeiANDROID</name></type> (<modifier>*</modifier><name>EGLGetBlobFuncANDROID</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>EGLsizeiANDROID</name></type> <name>keySize</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>EGLsizeiANDROID</name></type> <name>valueSize</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLSETBLOBCACHEFUNCSANDROIDPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSetBlobFuncANDROID</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><name>EGLGetBlobFuncANDROID</name></type> <name>get</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>void</name> <name>EGLAPIENTRY</name></type> <name>eglSetBlobCacheFuncsANDROID</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSetBlobFuncANDROID</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><name>EGLGetBlobFuncANDROID</name></type> <name>get</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_ANDROID_framebuffer_target</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ANDROID_framebuffer_target</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_FRAMEBUFFER_TARGET_ANDROID</name></cpp:macro> <cpp:value>0x3147</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_ANDROID_image_native_buffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ANDROID_image_native_buffer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NATIVE_BUFFER_ANDROID</name></cpp:macro> <cpp:value>0x3140</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_ANDROID_native_fence_sync</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ANDROID_native_fence_sync</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SYNC_NATIVE_FENCE_ANDROID</name></cpp:macro> <cpp:value>0x3144</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SYNC_NATIVE_FENCE_FD_ANDROID</name></cpp:macro> <cpp:value>0x3145</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SYNC_NATIVE_FENCE_SIGNALED_ANDROID</name></cpp:macro> <cpp:value>0x3146</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NO_NATIVE_FENCE_FD_ANDROID</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>EGLint</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLDUPNATIVEFENCEFDANDROIDPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSyncKHR</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLint</name> <name>EGLAPIENTRY</name></type> <name>eglDupNativeFenceFDANDROID</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSyncKHR</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_ANDROID_recordable</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ANDROID_recordable</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_RECORDABLE_ANDROID</name></cpp:macro> <cpp:value>0x3142</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_ANGLE_d3d_share_handle_client_buffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ANGLE_d3d_share_handle_client_buffer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE</name></cpp:macro> <cpp:value>0x3200</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_ANGLE_window_fixed_size</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ANGLE_window_fixed_size</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_FIXED_SIZE_ANGLE</name></cpp:macro> <cpp:value>0x3201</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_ANGLE_query_surface_pointer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ANGLE_query_surface_pointer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLQUERYSURFACEPOINTERANGLEPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglQuerySurfacePointerANGLE</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_ANGLE_software_display</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ANGLE_software_display</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SOFTWARE_DISPLAY_ANGLE</name></cpp:macro> <cpp:value>((EGLNativeDisplayType)-1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_ANGLE_direct3d_display</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ANGLE_direct3d_display</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_D3D11_ELSE_D3D9_DISPLAY_ANGLE</name></cpp:macro> <cpp:value>((EGLNativeDisplayType)-2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_D3D11_ONLY_DISPLAY_ANGLE</name></cpp:macro> <cpp:value>((EGLNativeDisplayType)-3)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_ANGLE_surface_d3d_texture_2d_share_handle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ANGLE_surface_d3d_texture_2d_share_handle</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_ANGLE_surface_d3d_render_to_back_buffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ANGLE_surface_d3d_render_to_back_buffer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ANGLE_DISPLAY_ALLOW_RENDER_TO_BACK_BUFFER</name></cpp:macro> <cpp:value>0x320B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ANGLE_SURFACE_RENDER_TO_BACK_BUFFER</name></cpp:macro> <cpp:value>0x320C</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_ANGLE_platform_angle</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ANGLE_platform_angle</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_ANGLE_ANGLE</name></cpp:macro> <cpp:value>0x3202</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_ANGLE_TYPE_ANGLE</name></cpp:macro> <cpp:value>0x3203</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_ANGLE_MAX_VERSION_MAJOR_ANGLE</name></cpp:macro> <cpp:value>0x3204</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_ANGLE_MAX_VERSION_MINOR_ANGLE</name></cpp:macro> <cpp:value>0x3205</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_ANGLE_TYPE_DEFAULT_ANGLE</name></cpp:macro> <cpp:value>0x3206</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_ANGLE_platform_angle_d3d</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ANGLE_platform_angle_d3d</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_ANGLE_TYPE_D3D9_ANGLE</name></cpp:macro> <cpp:value>0x3207</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE</name></cpp:macro> <cpp:value>0x3208</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_ANGLE_DEVICE_TYPE_ANGLE</name></cpp:macro> <cpp:value>0x3209</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_ANGLE_DEVICE_TYPE_HARDWARE_ANGLE</name></cpp:macro> <cpp:value>0x320A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_ANGLE_DEVICE_TYPE_WARP_ANGLE</name></cpp:macro> <cpp:value>0x320B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_ANGLE_DEVICE_TYPE_REFERENCE_ANGLE</name></cpp:macro> <cpp:value>0x320C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_ANGLE_ENABLE_AUTOMATIC_TRIM_ANGLE</name></cpp:macro> <cpp:value>0x320F</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_ANGLE_platform_angle_opengl</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ANGLE_platform_angle_opengl</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_ANGLE_TYPE_OPENGL_ANGLE</name></cpp:macro> <cpp:value>0x320D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_ANGLE_TYPE_OPENGLES_ANGLE</name></cpp:macro> <cpp:value>0x320E</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_ANGLE_device_d3d</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ANGLE_device_d3d</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_D3D9_DEVICE_ANGLE</name></cpp:macro> <cpp:value>0x33A0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_D3D11_DEVICE_ANGLE</name></cpp:macro> <cpp:value>0x33A1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_ARM_pixmap_multisample_discard</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ARM_pixmap_multisample_discard</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_DISCARD_SAMPLES_ARM</name></cpp:macro> <cpp:value>0x3286</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EXT_buffer_age</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_EXT_buffer_age</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BUFFER_AGE_EXT</name></cpp:macro> <cpp:value>0x313D</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EXT_client_extensions</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_EXT_client_extensions</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EXT_create_context_robustness</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_EXT_create_context_robustness</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_OPENGL_ROBUST_ACCESS_EXT</name></cpp:macro> <cpp:value>0x30BF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT</name></cpp:macro> <cpp:value>0x3138</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NO_RESET_NOTIFICATION_EXT</name></cpp:macro> <cpp:value>0x31BE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_LOSE_CONTEXT_ON_RESET_EXT</name></cpp:macro> <cpp:value>0x31BF</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EXT_device_base</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_EXT_device_base</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>EGLDeviceEXT</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NO_DEVICE_EXT</name></cpp:macro> <cpp:value>((EGLDeviceEXT)(0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_BAD_DEVICE_EXT</name></cpp:macro> <cpp:value>0x322B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_DEVICE_EXT</name></cpp:macro> <cpp:value>0x322C</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLQUERYDEVICEATTRIBEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDeviceEXT</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>EGLAttrib</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<name>EGLAPIENTRYP</name> <name>PFNEGLQUERYDEVICESTRINGEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDeviceEXT</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLQUERYDEVICESEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLint</name></type> <name>max_devices</name></decl></parameter>, <parameter><decl><type><name>EGLDeviceEXT</name> <modifier>*</modifier></type><name>devices</name></decl></parameter>, <parameter><decl><type><name>EGLint</name> <modifier>*</modifier></type><name>num_devices</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLQUERYDISPLAYATTRIBEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>EGLAttrib</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglQueryDeviceAttribEXT</name> <parameter_list>(<parameter><decl><type><name>EGLDeviceEXT</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>EGLAttrib</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>EGLAPIENTRY</name></type> <name>eglQueryDeviceStringEXT</name> <parameter_list>(<parameter><decl><type><name>EGLDeviceEXT</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglQueryDevicesEXT</name> <parameter_list>(<parameter><decl><type><name>EGLint</name></type> <name>max_devices</name></decl></parameter>, <parameter><decl><type><name>EGLDeviceEXT</name> <modifier>*</modifier></type><name>devices</name></decl></parameter>, <parameter><decl><type><name>EGLint</name> <modifier>*</modifier></type><name>num_devices</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglQueryDisplayAttribEXT</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>EGLAttrib</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EXT_device_query</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_EXT_device_query</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EXT_image_dma_buf_import</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_EXT_image_dma_buf_import</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_LINUX_DMA_BUF_EXT</name></cpp:macro> <cpp:value>0x3270</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_LINUX_DRM_FOURCC_EXT</name></cpp:macro> <cpp:value>0x3271</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_DMA_BUF_PLANE0_FD_EXT</name></cpp:macro> <cpp:value>0x3272</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_DMA_BUF_PLANE0_OFFSET_EXT</name></cpp:macro> <cpp:value>0x3273</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_DMA_BUF_PLANE0_PITCH_EXT</name></cpp:macro> <cpp:value>0x3274</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_DMA_BUF_PLANE1_FD_EXT</name></cpp:macro> <cpp:value>0x3275</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_DMA_BUF_PLANE1_OFFSET_EXT</name></cpp:macro> <cpp:value>0x3276</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_DMA_BUF_PLANE1_PITCH_EXT</name></cpp:macro> <cpp:value>0x3277</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_DMA_BUF_PLANE2_FD_EXT</name></cpp:macro> <cpp:value>0x3278</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_DMA_BUF_PLANE2_OFFSET_EXT</name></cpp:macro> <cpp:value>0x3279</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_DMA_BUF_PLANE2_PITCH_EXT</name></cpp:macro> <cpp:value>0x327A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_YUV_COLOR_SPACE_HINT_EXT</name></cpp:macro> <cpp:value>0x327B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SAMPLE_RANGE_HINT_EXT</name></cpp:macro> <cpp:value>0x327C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_YUV_CHROMA_HORIZONTAL_SITING_HINT_EXT</name></cpp:macro> <cpp:value>0x327D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_YUV_CHROMA_VERTICAL_SITING_HINT_EXT</name></cpp:macro> <cpp:value>0x327E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ITU_REC601_EXT</name></cpp:macro> <cpp:value>0x327F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ITU_REC709_EXT</name></cpp:macro> <cpp:value>0x3280</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ITU_REC2020_EXT</name></cpp:macro> <cpp:value>0x3281</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_YUV_FULL_RANGE_EXT</name></cpp:macro> <cpp:value>0x3282</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_YUV_NARROW_RANGE_EXT</name></cpp:macro> <cpp:value>0x3283</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_YUV_CHROMA_SITING_0_EXT</name></cpp:macro> <cpp:value>0x3284</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_YUV_CHROMA_SITING_0_5_EXT</name></cpp:macro> <cpp:value>0x3285</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EXT_multiview_window</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_EXT_multiview_window</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_MULTIVIEW_VIEW_COUNT_EXT</name></cpp:macro> <cpp:value>0x3134</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EXT_platform_base</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_EXT_platform_base</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>EGLDisplay</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLGETPLATFORMDISPLAYEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLenum</name></type> <name>platform</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>native_display</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLSurface</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLCREATEPLATFORMWINDOWSURFACEEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLConfig</name></type> <name>config</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>native_window</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLSurface</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLCREATEPLATFORMPIXMAPSURFACEEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLConfig</name></type> <name>config</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>native_pixmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLDisplay</name> <name>EGLAPIENTRY</name></type> <name>eglGetPlatformDisplayEXT</name> <parameter_list>(<parameter><decl><type><name>EGLenum</name></type> <name>platform</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>native_display</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLSurface</name> <name>EGLAPIENTRY</name></type> <name>eglCreatePlatformWindowSurfaceEXT</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLConfig</name></type> <name>config</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>native_window</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLSurface</name> <name>EGLAPIENTRY</name></type> <name>eglCreatePlatformPixmapSurfaceEXT</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLConfig</name></type> <name>config</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>native_pixmap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EXT_platform_device</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_EXT_platform_device</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_DEVICE_EXT</name></cpp:macro> <cpp:value>0x313F</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EXT_platform_wayland</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_EXT_platform_wayland</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_WAYLAND_EXT</name></cpp:macro> <cpp:value>0x31D8</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EXT_platform_x11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_EXT_platform_x11</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_X11_EXT</name></cpp:macro> <cpp:value>0x31D5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_X11_SCREEN_EXT</name></cpp:macro> <cpp:value>0x31D6</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EXT_protected_surface</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_EXT_protected_surface</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PROTECTED_CONTENT_EXT</name></cpp:macro> <cpp:value>0x32C0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EXT_swap_buffers_with_damage</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_EXT_swap_buffers_with_damage</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLSWAPBUFFERSWITHDAMAGEEXTPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>EGLint</name> <modifier>*</modifier></type><name>rects</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>n_rects</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglSwapBuffersWithDamageEXT</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>EGLint</name> <modifier>*</modifier></type><name>rects</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>n_rects</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_HI_clientpixmap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_HI_clientpixmap</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<struct>struct <name>EGLClientPixmapHI</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EGLint</name></type> <name>iWidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EGLint</name></type> <name>iHeight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EGLint</name></type> <name>iStride</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CLIENT_PIXMAP_POINTER_HI</name></cpp:macro> <cpp:value>0x8F74</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>EGLSurface</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLCREATEPIXMAPSURFACEHIPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLConfig</name></type> <name>config</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>EGLClientPixmapHI</name></name> <modifier>*</modifier></type><name>pixmap</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLSurface</name> <name>EGLAPIENTRY</name></type> <name>eglCreatePixmapSurfaceHI</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLConfig</name></type> <name>config</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>EGLClientPixmapHI</name></name> <modifier>*</modifier></type><name>pixmap</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_HI_colorformats</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_HI_colorformats</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_COLOR_FORMAT_HI</name></cpp:macro> <cpp:value>0x8F70</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_COLOR_RGB_HI</name></cpp:macro> <cpp:value>0x8F71</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_COLOR_RGBA_HI</name></cpp:macro> <cpp:value>0x8F72</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_COLOR_ARGB_HI</name></cpp:macro> <cpp:value>0x8F73</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_IMG_context_priority</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_IMG_context_priority</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_PRIORITY_LEVEL_IMG</name></cpp:macro> <cpp:value>0x3100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_PRIORITY_HIGH_IMG</name></cpp:macro> <cpp:value>0x3101</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_PRIORITY_MEDIUM_IMG</name></cpp:macro> <cpp:value>0x3102</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONTEXT_PRIORITY_LOW_IMG</name></cpp:macro> <cpp:value>0x3103</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_MESA_drm_image</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_MESA_drm_image</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_DRM_BUFFER_FORMAT_MESA</name></cpp:macro> <cpp:value>0x31D0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_DRM_BUFFER_USE_MESA</name></cpp:macro> <cpp:value>0x31D1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_DRM_BUFFER_FORMAT_ARGB32_MESA</name></cpp:macro> <cpp:value>0x31D2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_DRM_BUFFER_MESA</name></cpp:macro> <cpp:value>0x31D3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_DRM_BUFFER_STRIDE_MESA</name></cpp:macro> <cpp:value>0x31D4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_DRM_BUFFER_USE_SCANOUT_MESA</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_DRM_BUFFER_USE_SHARE_MESA</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>EGLImageKHR</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLCREATEDRMIMAGEMESAPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLEXPORTDRMIMAGEMESAPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLImageKHR</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>EGLint</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>EGLint</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>EGLint</name> <modifier>*</modifier></type><name>stride</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLImageKHR</name> <name>EGLAPIENTRY</name></type> <name>eglCreateDRMImageMESA</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglExportDRMImageMESA</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLImageKHR</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>EGLint</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>EGLint</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>EGLint</name> <modifier>*</modifier></type><name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_MESA_platform_gbm</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_MESA_platform_gbm</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_PLATFORM_GBM_MESA</name></cpp:macro> <cpp:value>0x31D7</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_NOK_swap_region</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NOK_swap_region</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLSWAPBUFFERSREGIONNOKPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>numRects</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>rects</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglSwapBuffersRegionNOK</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>numRects</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>rects</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_NOK_swap_region2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NOK_swap_region2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLSWAPBUFFERSREGION2NOKPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>numRects</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>rects</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglSwapBuffersRegion2NOK</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>numRects</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>rects</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_NOK_texture_from_pixmap</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NOK_texture_from_pixmap</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_Y_INVERTED_NOK</name></cpp:macro> <cpp:value>0x307F</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_NV_3dvision_surface</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NV_3dvision_surface</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_AUTO_STEREO_NV</name></cpp:macro> <cpp:value>0x3136</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_NV_coverage_sample</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NV_coverage_sample</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_COVERAGE_BUFFERS_NV</name></cpp:macro> <cpp:value>0x30E0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_COVERAGE_SAMPLES_NV</name></cpp:macro> <cpp:value>0x30E1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_NV_coverage_sample_resolve</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NV_coverage_sample_resolve</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_COVERAGE_SAMPLE_RESOLVE_NV</name></cpp:macro> <cpp:value>0x3131</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_COVERAGE_SAMPLE_RESOLVE_DEFAULT_NV</name></cpp:macro> <cpp:value>0x3132</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_COVERAGE_SAMPLE_RESOLVE_NONE_NV</name></cpp:macro> <cpp:value>0x3133</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_NV_depth_nonlinear</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NV_depth_nonlinear</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_DEPTH_ENCODING_NV</name></cpp:macro> <cpp:value>0x30E2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_DEPTH_ENCODING_NONE_NV</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_DEPTH_ENCODING_NONLINEAR_NV</name></cpp:macro> <cpp:value>0x30E3</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_NV_native_query</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NV_native_query</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLQUERYNATIVEDISPLAYNVPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLNativeDisplayType</name> <modifier>*</modifier></type><name>display_id</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLQUERYNATIVEWINDOWNVPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSurface</name></type> <name>surf</name></decl></parameter>, <parameter><decl><type><name>EGLNativeWindowType</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLQUERYNATIVEPIXMAPNVPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSurface</name></type> <name>surf</name></decl></parameter>, <parameter><decl><type><name>EGLNativePixmapType</name> <modifier>*</modifier></type><name>pixmap</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglQueryNativeDisplayNV</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLNativeDisplayType</name> <modifier>*</modifier></type><name>display_id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglQueryNativeWindowNV</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSurface</name></type> <name>surf</name></decl></parameter>, <parameter><decl><type><name>EGLNativeWindowType</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglQueryNativePixmapNV</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSurface</name></type> <name>surf</name></decl></parameter>, <parameter><decl><type><name>EGLNativePixmapType</name> <modifier>*</modifier></type><name>pixmap</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_NV_post_convert_rounding</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NV_post_convert_rounding</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_NV_post_sub_buffer</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NV_post_sub_buffer</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_POST_SUB_BUFFER_SUPPORTED_NV</name></cpp:macro> <cpp:value>0x30BE</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLPOSTSUBBUFFERNVPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglPostSubBufferNV</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLSurface</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_NV_stream_sync</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NV_stream_sync</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SYNC_NEW_FRAME_NV</name></cpp:macro> <cpp:value>0x321F</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>EGLSyncKHR</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLCREATESTREAMSYNCNVPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLStreamKHR</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>EGLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLSyncKHR</name> <name>EGLAPIENTRY</name></type> <name>eglCreateStreamSyncNV</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLStreamKHR</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>EGLenum</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_NV_sync</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NV_sync</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>EGLSyncNV</name>;</typedef>
<typedef>typedef <type><name>khronos_utime_nanoseconds_t</name></type> <name>EGLTimeNV</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KHRONOS_SUPPORT_INT64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SYNC_PRIOR_COMMANDS_COMPLETE_NV</name></cpp:macro> <cpp:value>0x30E6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SYNC_STATUS_NV</name></cpp:macro> <cpp:value>0x30E7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SIGNALED_NV</name></cpp:macro> <cpp:value>0x30E8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_UNSIGNALED_NV</name></cpp:macro> <cpp:value>0x30E9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SYNC_FLUSH_COMMANDS_BIT_NV</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_FOREVER_NV</name></cpp:macro> <cpp:value>0xFFFFFFFFFFFFFFFFull</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_ALREADY_SIGNALED_NV</name></cpp:macro> <cpp:value>0x30EA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_TIMEOUT_EXPIRED_NV</name></cpp:macro> <cpp:value>0x30EB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_CONDITION_SATISFIED_NV</name></cpp:macro> <cpp:value>0x30EC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SYNC_TYPE_NV</name></cpp:macro> <cpp:value>0x30ED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SYNC_CONDITION_NV</name></cpp:macro> <cpp:value>0x30EE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_SYNC_FENCE_NV</name></cpp:macro> <cpp:value>0x30EF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NO_SYNC_NV</name></cpp:macro> <cpp:value>((EGLSyncNV)0)</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>EGLSyncNV</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLCREATEFENCESYNCNVPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLenum</name></type> <name>condition</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLDESTROYSYNCNVPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLSyncNV</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLFENCENVPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLSyncNV</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLint</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLCLIENTWAITSYNCNVPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLSyncNV</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>EGLTimeNV</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLSIGNALSYNCNVPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLSyncNV</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>EGLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLBoolean</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLGETSYNCATTRIBNVPROC</name>) <parameter_list>(<parameter><decl><type><name>EGLSyncNV</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>EGLint</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLSyncNV</name> <name>EGLAPIENTRY</name></type> <name>eglCreateFenceSyncNV</name> <parameter_list>(<parameter><decl><type><name>EGLDisplay</name></type> <name>dpy</name></decl></parameter>, <parameter><decl><type><name>EGLenum</name></type> <name>condition</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EGLint</name> <modifier>*</modifier></type><name>attrib_list</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglDestroySyncNV</name> <parameter_list>(<parameter><decl><type><name>EGLSyncNV</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglFenceNV</name> <parameter_list>(<parameter><decl><type><name>EGLSyncNV</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLint</name> <name>EGLAPIENTRY</name></type> <name>eglClientWaitSyncNV</name> <parameter_list>(<parameter><decl><type><name>EGLSyncNV</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>EGLTimeNV</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglSignalSyncNV</name> <parameter_list>(<parameter><decl><type><name>EGLSyncNV</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>EGLenum</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLBoolean</name> <name>EGLAPIENTRY</name></type> <name>eglGetSyncAttribNV</name> <parameter_list>(<parameter><decl><type><name>EGLSyncNV</name></type> <name>sync</name></decl></parameter>, <parameter><decl><type><name>EGLint</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>EGLint</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EGL_NV_system_time</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EGL_NV_system_time</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<typedef>typedef <type><name>khronos_utime_nanoseconds_t</name></type> <name>EGLuint64NV</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KHRONOS_SUPPORT_INT64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <function_decl><type><name>EGLuint64NV</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLGETSYSTEMTIMEFREQUENCYNVPROC</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>EGLuint64NV</name></type> (<name>EGLAPIENTRYP</name> <name>PFNEGLGETSYSTEMTIMENVPROC</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EGL_EGLEXT_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>EGLAPI</name> <name>EGLuint64NV</name> <name>EGLAPIENTRY</name></type> <name>eglGetSystemTimeFrequencyNV</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>EGLAPI</name> <name>EGLuint64NV</name> <name>EGLAPIENTRY</name></type> <name>eglGetSystemTimeNV</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
