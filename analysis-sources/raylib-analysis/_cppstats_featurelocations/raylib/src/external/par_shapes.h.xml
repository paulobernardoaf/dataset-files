<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\external\par_shapes.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PAR_SHAPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAR_SHAPES_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAR_SHAPES_T</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>par_shapes_mesh_s</name> <block>{
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>points</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>npoints</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>triangles</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ntriangles</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>normals</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>tcoords</name></decl>;</decl_stmt> 
}</block></struct></type> <name>par_shapes_mesh</name>;</typedef>

<function_decl><type><name>void</name></type> <name>par_shapes_free_mesh</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_cylinder</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stacks</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_torus</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stacks</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_parametric_sphere</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stacks</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_subdivided_sphere</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nsubdivisions</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_klein_bottle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stacks</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_trefoil_knot</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stacks</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_hemisphere</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stacks</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_plane</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stacks</name></decl></parameter>)</parameter_list>;</function_decl>



<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>par_shapes_fn</name>)<parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<function_decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_parametric</name><parameter_list>(<parameter><decl><type><name>par_shapes_fn</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>stacks</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userdata</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_icosahedron</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_dodecahedron</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_octahedron</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_tetrahedron</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_cube</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_disk</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>,
<parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>normal</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_empty</name><parameter_list>()</parameter_list>;</function_decl>




<function_decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_rock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nsubdivisions</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_lsystem</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>program</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>maxdepth</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>par_shapes_export</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name> <specifier>const</specifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>objfile</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>par_shapes_compute_aabb</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name> <specifier>const</specifier><modifier>*</modifier></type> <name>mesh</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>aabb</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_clone</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name> <specifier>const</specifier><modifier>*</modifier></type> <name>mesh</name></decl></parameter>,
<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>par_shapes_merge</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>par_shapes_mesh</name> <specifier>const</specifier><modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>par_shapes_translate</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>par_shapes_rotate</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radians</name></decl></parameter>, <parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>axis</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>par_shapes_scale</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>par_shapes_merge_and_free</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>par_shapes_invert</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startface</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nfaces</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>par_shapes_remove_degenerate</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>minarea</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>par_shapes_unweld</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>mesh</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>create_indices</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_weld</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name> <specifier>const</specifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>epsilon</name></decl></parameter>,
<parameter><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>mapping</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>par_shapes_compute_normals</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PAR_PI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAR_PI</name></cpp:macro> <cpp:value>(3.14159265359)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAR_MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a &gt; b ? b : a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAR_MAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a &gt; b ? a : b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAR_CLAMP</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>lo</name></type></parameter>, <parameter><type><name>hi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PAR_MAX(lo, PAR_MIN(hi, v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAR_SWAP</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ T tmp = B; B = A; A = tmp; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAR_SQR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) * (a))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PAR_MALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAR_MALLOC</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((T*) malloc(N * sizeof(T)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAR_CALLOC</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((T*) calloc(N * sizeof(T), 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAR_REALLOC</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>BUF</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((T*) realloc(BUF, sizeof(T) * (N)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAR_FREE</name><parameter_list>(<parameter><type><name>BUF</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(BUF)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PAR_SHAPES_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__sphere</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>uv</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xyz</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__hemisphere</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>uv</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xyz</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__plane</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>uv</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xyz</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__klein</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>uv</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xyz</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__cylinder</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>uv</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xyz</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__torus</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>uv</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xyz</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__trefoil</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>uv</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xyz</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<struct_decl>struct <name>osn_context</name>;</struct_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>par__simplex_noise</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>osn_context</name></name><modifier>*</modifier><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>par__simplex_noise_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>osn_context</name></name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>par__simplex_noise2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>osn_context</name></name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__copy3</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>par_shapes__dot3</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__transform3</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>y</name></decl></parameter>,
<parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>px</name> <init>= <expr><call><name>par_shapes__dot3</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>py</name> <init>= <expr><call><name>par_shapes__dot3</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>pz</name> <init>= <expr><call><name>par_shapes__dot3</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>px</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>py</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>pz</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__cross3</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__mix3</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>t</name> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>t</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>t</name> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>t</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>t</name> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>t</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__scale3</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__normalize3</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>lsqr</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lsqr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>par_shapes__scale3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal> <operator>/</operator> <name>lsqr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__subtract3</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-=</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__add3</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>par_shapes__sqrdist3</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>dx</name> <init>= <expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dy</name> <init>= <expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dz</name> <init>= <expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>dx</name> <operator>*</operator> <name>dx</name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>dy</name> <operator>+</operator> <name>dz</name> <operator>*</operator> <name>dz</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__compute_welded_normals</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>normals</name></name> <operator>=</operator> <call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>npoints</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>weldmap</name> <init>= <expr><call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>welded</name> <init>= <expr><call><name>par_shapes_weld</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0.01</literal></expr></argument>, <argument><expr><name>weldmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>par_shapes_compute_normals</name><argument_list>(<argument><expr><name>welded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>pdst</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>normals</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>pdst</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>weldmap</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>pnormal</name> <init>= <expr><name><name>welded</name><operator>-&gt;</operator><name>normals</name></name> <operator>+</operator> <name>d</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pdst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pnormal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pnormal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pdst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>pnormal</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name>weldmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes_free_mesh</name><argument_list>(<argument><expr><name>welded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_cylinder</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stacks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>slices</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name>stacks</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>par_shapes_create_parametric</name><argument_list>(<argument><expr><name>par_shapes__cylinder</name></expr></argument>, <argument><expr><name>slices</name></expr></argument>,
<argument><expr><name>stacks</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_parametric_sphere</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stacks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>slices</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name>stacks</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>m</name> <init>= <expr><call><name>par_shapes_create_parametric</name><argument_list>(<argument><expr><name>par_shapes__sphere</name></expr></argument>,
<argument><expr><name>slices</name></expr></argument>, <argument><expr><name>stacks</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>par_shapes_remove_degenerate</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0.0001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>m</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_hemisphere</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stacks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>slices</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name>stacks</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>m</name> <init>= <expr><call><name>par_shapes_create_parametric</name><argument_list>(<argument><expr><name>par_shapes__hemisphere</name></expr></argument>,
<argument><expr><name>slices</name></expr></argument>, <argument><expr><name>stacks</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>par_shapes_remove_degenerate</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0.0001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>m</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_torus</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stacks</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>slices</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name>stacks</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>radius</name> <operator>&lt;=</operator> <literal type="number">1.0</literal> <operator>&amp;&amp;</operator> <literal type="string">"Use smaller radius to avoid self-intersection."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>radius</name> <operator>&gt;=</operator> <literal type="number">0.1</literal> <operator>&amp;&amp;</operator> <literal type="string">"Use larger radius to avoid self-intersection."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>userdata</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>radius</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>par_shapes_create_parametric</name><argument_list>(<argument><expr><name>par_shapes__torus</name></expr></argument>, <argument><expr><name>slices</name></expr></argument>,
<argument><expr><name>stacks</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_klein_bottle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stacks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>slices</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name>stacks</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>mesh</name> <init>= <expr><call><name>par_shapes_create_parametric</name><argument_list>(
<argument><expr><name>par_shapes__klein</name></expr></argument>, <argument><expr><name>slices</name></expr></argument>, <argument><expr><name>stacks</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>face</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>stack</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>stack</name> <operator>&lt;</operator> <name>stacks</name></expr>;</condition> <incr><expr><name>stack</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>slice</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>slice</name> <operator>&lt;</operator> <name>slices</name></expr>;</condition> <incr><expr><name>slice</name><operator>++</operator></expr><operator>,</operator> <expr><name>face</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>stack</name> <operator>&lt;</operator> <literal type="number">27</literal> <operator>*</operator> <name>stacks</name> <operator>/</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>par_shapes_invert</name><argument_list>(<argument><expr><name>mesh</name></expr></argument>, <argument><expr><name>face</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>par_shapes__compute_welded_normals</name><argument_list>(<argument><expr><name>mesh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>mesh</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_trefoil_knot</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stacks</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>slices</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name>stacks</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>radius</name> <operator>&lt;=</operator> <literal type="number">3.0</literal> <operator>&amp;&amp;</operator> <literal type="string">"Use smaller radius to avoid self-intersection."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>radius</name> <operator>&gt;=</operator> <literal type="number">0.5</literal> <operator>&amp;&amp;</operator> <literal type="string">"Use larger radius to avoid self-intersection."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>userdata</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>radius</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>par_shapes_create_parametric</name><argument_list>(<argument><expr><name>par_shapes__trefoil</name></expr></argument>, <argument><expr><name>slices</name></expr></argument>,
<argument><expr><name>stacks</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_plane</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stacks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>slices</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>stacks</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>par_shapes_create_parametric</name><argument_list>(<argument><expr><name>par_shapes__plane</name></expr></argument>, <argument><expr><name>slices</name></expr></argument>,
<argument><expr><name>stacks</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_parametric</name><parameter_list>(<parameter><decl><type><name>par_shapes_fn</name></type> <name>fn</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stacks</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>mesh</name> <init>= <expr><call><name>PAR_CALLOC</name><argument_list>(<argument><expr><name>par_shapes_mesh</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name> <operator>=</operator> <operator>(</operator><name>slices</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>stacks</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name> <operator>=</operator> <call><name>PAR_CALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>uv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>xyz</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>points</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>stack</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>stack</name> <operator>&lt;</operator> <name>stacks</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>stack</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>uv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>stack</name> <operator>/</operator> <name>stacks</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>slice</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>slice</name> <operator>&lt;</operator> <name>slices</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>slice</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>uv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>slice</name> <operator>/</operator> <name>slices</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fn</name><argument_list>(<argument><expr><name>uv</name></expr></argument>, <argument><expr><name>xyz</name></expr></argument>, <argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>points</name><operator>++</operator> <operator>=</operator> <name><name>xyz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>points</name><operator>++</operator> <operator>=</operator> <name><name>xyz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>points</name><operator>++</operator> <operator>=</operator> <name><name>xyz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>tcoords</name></name> <operator>=</operator> <call><name>PAR_CALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>uvs</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>tcoords</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>stack</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>stack</name> <operator>&lt;</operator> <name>stacks</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>stack</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>uv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>stack</name> <operator>/</operator> <name>stacks</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>slice</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>slice</name> <operator>&lt;</operator> <name>slices</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>slice</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>uv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>slice</name> <operator>/</operator> <name>slices</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>uvs</name><operator>++</operator> <operator>=</operator> <name><name>uv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>uvs</name><operator>++</operator> <operator>=</operator> <name><name>uv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>slices</name> <operator>*</operator> <name>stacks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name> <operator>=</operator> <call><name>PAR_CALLOC</name><argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>face</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>stack</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>stack</name> <operator>&lt;</operator> <name>stacks</name></expr>;</condition> <incr><expr><name>stack</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>slice</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>slice</name> <operator>&lt;</operator> <name>slices</name></expr>;</condition> <incr><expr><name>slice</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><name>slice</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>face</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>+</operator> <name>slice</name> <operator>+</operator> <name>slices</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>face</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>+</operator> <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>face</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>+</operator> <name>slice</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>face</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>+</operator> <name>slice</name> <operator>+</operator> <name>slices</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>face</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>+</operator> <name>next</name> <operator>+</operator> <name>slices</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>face</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>+</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>v</name> <operator>+=</operator> <name>slices</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>par_shapes__compute_welded_normals</name><argument_list>(<argument><expr><name>mesh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>mesh</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>par_shapes_free_mesh</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>mesh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>normals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>tcoords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name>mesh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>par_shapes_export</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name> <specifier>const</specifier><modifier>*</modifier></type> <name>mesh</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>objfile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"wt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>points</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tcoords</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>tcoords</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>norms</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>normals</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name> <specifier>const</specifier><modifier>*</modifier></type> <name>indices</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tcoords</name> <operator>&amp;&amp;</operator> <name>norms</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>nvert</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>nvert</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>nvert</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objfile</name></expr></argument>, <argument><expr><literal type="string">"v %f %f %f\n"</literal></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objfile</name></expr></argument>, <argument><expr><literal type="string">"vt %f %f\n"</literal></expr></argument>, <argument><expr><name><name>tcoords</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tcoords</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objfile</name></expr></argument>, <argument><expr><literal type="string">"vn %f %f %f\n"</literal></expr></argument>, <argument><expr><name><name>norms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>norms</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>norms</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>points</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>norms</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tcoords</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>nface</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>nface</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name></expr>;</condition> <incr><expr><name>nface</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>*</operator><name>indices</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>*</operator><name>indices</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>*</operator><name>indices</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objfile</name></expr></argument>, <argument><expr><literal type="string">"f %d/%d/%d %d/%d/%d %d/%d/%d\n"</literal></expr></argument>,
<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>norms</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>nvert</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>nvert</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>nvert</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objfile</name></expr></argument>, <argument><expr><literal type="string">"v %f %f %f\n"</literal></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objfile</name></expr></argument>, <argument><expr><literal type="string">"vn %f %f %f\n"</literal></expr></argument>, <argument><expr><name><name>norms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>norms</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>norms</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>points</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>norms</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>nface</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>nface</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name></expr>;</condition> <incr><expr><name>nface</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>*</operator><name>indices</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>*</operator><name>indices</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>*</operator><name>indices</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objfile</name></expr></argument>, <argument><expr><literal type="string">"f %d//%d %d//%d %d//%d\n"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tcoords</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>nvert</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>nvert</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>nvert</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objfile</name></expr></argument>, <argument><expr><literal type="string">"v %f %f %f\n"</literal></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objfile</name></expr></argument>, <argument><expr><literal type="string">"vt %f %f\n"</literal></expr></argument>, <argument><expr><name><name>tcoords</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tcoords</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>points</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tcoords</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>nface</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>nface</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name></expr>;</condition> <incr><expr><name>nface</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>*</operator><name>indices</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>*</operator><name>indices</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>*</operator><name>indices</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objfile</name></expr></argument>, <argument><expr><literal type="string">"f %d/%d %d/%d %d/%d\n"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>nvert</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>nvert</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>nvert</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objfile</name></expr></argument>, <argument><expr><literal type="string">"v %f %f %f\n"</literal></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>points</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>nface</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>nface</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name></expr>;</condition> <incr><expr><name>nface</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>*</operator><name>indices</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>*</operator><name>indices</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>*</operator><name>indices</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objfile</name></expr></argument>, <argument><expr><literal type="string">"f %d %d %d\n"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>objfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__sphere</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>uv</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xyz</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>phi</name> <init>= <expr><name><name>uv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>PAR_PI</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>theta</name> <init>= <expr><name><name>uv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>PAR_PI</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>xyz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>phi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xyz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>phi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xyz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>phi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__hemisphere</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>uv</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xyz</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>phi</name> <init>= <expr><name><name>uv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>PAR_PI</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>theta</name> <init>= <expr><name><name>uv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>PAR_PI</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>xyz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>phi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xyz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>phi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xyz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>phi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__plane</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>uv</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xyz</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>xyz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>uv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xyz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>uv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xyz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__klein</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>uv</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xyz</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>u</name> <init>= <expr><name><name>uv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>PAR_PI</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><name><name>uv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>PAR_PI</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>u</name> <operator>=</operator> <name>u</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>u</name> <operator>&lt;</operator> <name>PAR_PI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>xyz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>*</operator>
<call><name>cosf</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xyz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">8</literal> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>xyz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>*</operator>
<call><name>cosf</name><argument_list>(<argument><expr><name>v</name> <operator>+</operator> <name>PAR_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xyz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">8</literal> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>xyz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__cylinder</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>uv</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xyz</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>theta</name> <init>= <expr><name><name>uv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>PAR_PI</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>xyz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xyz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xyz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>uv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__torus</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>uv</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xyz</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>major</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>minor</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator> <name>userdata</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>theta</name> <init>= <expr><name><name>uv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>PAR_PI</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>phi</name> <init>= <expr><name><name>uv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>PAR_PI</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>beta</name> <init>= <expr><name>major</name> <operator>+</operator> <name>minor</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>phi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>xyz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>beta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xyz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>beta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xyz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>phi</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>minor</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__trefoil</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>uv</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>xyz</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>minor</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator> <name>userdata</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>a</name> <init>= <expr><literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>b</name> <init>= <expr><literal type="number">0.3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>c</name> <init>= <expr><literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>d</name> <init>= <expr><name>minor</name> <operator>*</operator> <literal type="number">0.1f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>u</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>uv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <name>PAR_PI</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>v</name> <init>= <expr><name><name>uv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>PAR_PI</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>r</name> <init>= <expr><name>a</name> <operator>+</operator> <name>b</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">1.5f</literal> <operator>*</operator> <name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>x</name> <init>= <expr><name>r</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>y</name> <init>= <expr><name>r</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>z</name> <init>= <expr><name>c</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><literal type="number">1.5f</literal> <operator>*</operator> <name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<operator>-</operator><literal type="number">1.5f</literal> <operator>*</operator> <name>b</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><literal type="number">1.5f</literal> <operator>*</operator> <name>u</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>a</name> <operator>+</operator> <name>b</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">1.5f</literal> <operator>*</operator> <name>u</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<operator>-</operator><literal type="number">1.5f</literal> <operator>*</operator> <name>b</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><literal type="number">1.5f</literal> <operator>*</operator> <name>u</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>a</name> <operator>+</operator> <name>b</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">1.5f</literal> <operator>*</operator> <name>u</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.5f</literal> <operator>*</operator> <name>c</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">1.5f</literal> <operator>*</operator> <name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__normalize3</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>qvn</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><operator>-</operator><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>par_shapes__normalize3</name><argument_list>(<argument><expr><name>qvn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>ww</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>par_shapes__cross3</name><argument_list>(<argument><expr><name>ww</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>qvn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xyz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>d</name> <operator>*</operator> <operator>(</operator><name><name>qvn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>ww</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xyz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name> <operator>+</operator> <name>d</name> <operator>*</operator> <operator>(</operator><name><name>qvn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>ww</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xyz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>+</operator> <name>d</name> <operator>*</operator> <name><name>ww</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>par_shapes_merge</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>par_shapes_mesh</name> <specifier>const</specifier><modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name></type> <name>offset</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>npoints</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>npoints</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>npoints</name></name> <operator>+</operator> <name><name>src</name><operator>-&gt;</operator><name>npoints</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vecsize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>points</name></name> <operator>=</operator> <call><name>PAR_REALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>points</name></name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>npoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>dst</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>points</name></name></expr></argument>, <argument><expr><name>vecsize</name> <operator>*</operator> <name><name>src</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>npoints</name></name> <operator>=</operator> <name>npoints</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>normals</name></name> <operator>||</operator> <name><name>dst</name><operator>-&gt;</operator><name>normals</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>normals</name></name> <operator>=</operator> <call><name>PAR_REALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>normals</name></name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>npoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>normals</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>normals</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>normals</name></name></expr></argument>,
<argument><expr><name>vecsize</name> <operator>*</operator> <name><name>src</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>tcoords</name></name> <operator>||</operator> <name><name>dst</name><operator>-&gt;</operator><name>tcoords</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>uvsize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>tcoords</name></name> <operator>=</operator> <call><name>PAR_REALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>tcoords</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>npoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>tcoords</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>tcoords</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>tcoords</name></name></expr></argument>,
<argument><expr><name>uvsize</name> <operator>*</operator> <name><name>src</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ntriangles</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>+</operator> <name><name>src</name><operator>-&gt;</operator><name>ntriangles</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>triangles</name></name> <operator>=</operator> <call><name>PAR_REALLOC</name><argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>triangles</name></name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>ntriangles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>ptriangles</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>triangles</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>dst</name><operator>-&gt;</operator><name>ntriangles</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name> <specifier>const</specifier><modifier>*</modifier></type> <name>striangles</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>triangles</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>src</name><operator>-&gt;</operator><name>ntriangles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptriangles</name><operator>++</operator> <operator>=</operator> <name>offset</name> <operator>+</operator> <operator>*</operator><name>striangles</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptriangles</name><operator>++</operator> <operator>=</operator> <name>offset</name> <operator>+</operator> <operator>*</operator><name>striangles</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptriangles</name><operator>++</operator> <operator>=</operator> <name>offset</name> <operator>+</operator> <operator>*</operator><name>striangles</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>=</operator> <name>ntriangles</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_disk</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>,
<parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>normal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>mesh</name> <init>= <expr><call><name>PAR_CALLOC</name><argument_list>(<argument><expr><name>par_shapes_mesh</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name> <operator>=</operator> <name>slices</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name> <operator>=</operator> <call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>points</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>points</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>points</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>points</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slices</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>theta</name> <init>= <expr><name>i</name> <operator>*</operator> <name>PAR_PI</name> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name>slices</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>points</name><operator>++</operator> <operator>=</operator> <name>radius</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>points</name><operator>++</operator> <operator>=</operator> <name>radius</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>points</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>float</name></type> <name><name>nnormal</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><name><name>normal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>normal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>normal</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>par_shapes__normalize3</name><argument_list>(<argument><expr><name>nnormal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>normals</name></name> <operator>=</operator> <call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>norms</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>normals</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>norms</name><operator>++</operator> <operator>=</operator> <name><name>nnormal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>norms</name><operator>++</operator> <operator>=</operator> <name><name>nnormal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>norms</name><operator>++</operator> <operator>=</operator> <name><name>nnormal</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>=</operator> <name>slices</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name> <operator>=</operator> <call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>triangles</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slices</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>triangles</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>triangles</name><operator>++</operator> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>triangles</name><operator>++</operator> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>slices</name></expr>;</expr_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>float</name></type> <name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>axis</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>par_shapes__cross3</name><argument_list>(<argument><expr><name>axis</name></expr></argument>, <argument><expr><name>nnormal</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__normalize3</name><argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes_rotate</name><argument_list>(<argument><expr><name>mesh</name></expr></argument>, <argument><expr><call><name>acos</name><argument_list>(<argument><expr><name><name>nnormal</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes_translate</name><argument_list>(<argument><expr><name>mesh</name></expr></argument>, <argument><expr><name><name>center</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>center</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>center</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>mesh</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_empty</name><parameter_list>()</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>PAR_CALLOC</name><argument_list>(<argument><expr><name>par_shapes_mesh</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>par_shapes_translate</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>points</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>points</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>points</name><operator>++</operator> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>points</name><operator>++</operator> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>points</name><operator>++</operator> <operator>+=</operator> <name>z</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>par_shapes_rotate</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>mesh</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radians</name></decl></parameter>, <parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>axis</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><call><name>sinf</name><argument_list>(<argument><expr><name>radians</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>c</name> <init>= <expr><call><name>cosf</name><argument_list>(<argument><expr><name>radians</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name><name>axis</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><name><name>axis</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><name><name>axis</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>xy</name> <init>= <expr><name>x</name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>yz</name> <init>= <expr><name>y</name> <operator>*</operator> <name>z</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>zx</name> <init>= <expr><name>z</name> <operator>*</operator> <name>x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>oneMinusC</name> <init>= <expr><literal type="number">1.0f</literal> <operator>-</operator> <name>c</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>col0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x</name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>*</operator> <name>oneMinusC</name><operator>)</operator> <operator>+</operator> <name>c</name><operator>)</operator></expr>,
<expr><operator>(</operator><operator>(</operator><name>xy</name> <operator>*</operator> <name>oneMinusC</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>z</name> <operator>*</operator> <name>s</name><operator>)</operator><operator>)</operator></expr>, <expr><operator>(</operator><operator>(</operator><name>zx</name> <operator>*</operator> <name>oneMinusC</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>y</name> <operator>*</operator> <name>s</name><operator>)</operator><operator>)</operator></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>col1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><operator>(</operator><operator>(</operator><name>xy</name> <operator>*</operator> <name>oneMinusC</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>z</name> <operator>*</operator> <name>s</name><operator>)</operator><operator>)</operator></expr>,
<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>y</name> <operator>*</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name>oneMinusC</name><operator>)</operator> <operator>+</operator> <name>c</name><operator>)</operator></expr>, <expr><operator>(</operator><operator>(</operator><name>yz</name> <operator>*</operator> <name>oneMinusC</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name> <operator>*</operator> <name>s</name><operator>)</operator><operator>)</operator></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>col2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><operator>(</operator><operator>(</operator><name>zx</name> <operator>*</operator> <name>oneMinusC</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>*</operator> <name>s</name><operator>)</operator><operator>)</operator></expr>,
<expr><operator>(</operator><operator>(</operator><name>yz</name> <operator>*</operator> <name>oneMinusC</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>x</name> <operator>*</operator> <name>s</name><operator>)</operator><operator>)</operator></expr>, <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>z</name> <operator>*</operator> <name>z</name><operator>)</operator> <operator>*</operator> <name>oneMinusC</name><operator>)</operator> <operator>+</operator> <name>c</name><operator>)</operator></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name><name>col0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>col1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>col2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><name><name>col0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>col1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>col2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><name><name>col0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>col1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>col2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>mesh</name><operator>-&gt;</operator><name>normals</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name><name>col0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>col1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>col2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><name><name>col0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>col1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>col2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><name><name>col0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>col1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>col2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>par_shapes_scale</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>points</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>points</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>points</name><operator>++</operator> <operator>*=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>points</name><operator>++</operator> <operator>*=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>points</name><operator>++</operator> <operator>*=</operator> <name>z</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>par_shapes_merge_and_free</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>par_shapes_merge</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes_free_mesh</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>par_shapes_compute_aabb</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name> <specifier>const</specifier><modifier>*</modifier></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>aabb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>points</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>points</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>aabb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>aabb</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aabb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>aabb</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aabb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>aabb</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>points</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>points</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>aabb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>PAR_MIN</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aabb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aabb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>PAR_MIN</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aabb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aabb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>PAR_MIN</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aabb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aabb</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>PAR_MAX</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aabb</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aabb</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>PAR_MAX</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aabb</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aabb</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>PAR_MAX</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aabb</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>par_shapes_invert</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>face</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nfaces</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>nfaces</name> <operator>=</operator> <ternary><condition><expr><name>nfaces</name></expr> ?</condition><then> <expr><name>nfaces</name></expr> </then><else>: <expr><name><name>m</name><operator>-&gt;</operator><name>ntriangles</name></name></expr></else></ternary></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>tri</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>triangles</name></name> <operator>+</operator> <name>face</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfaces</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>PAR_SWAP</name><argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>, <argument><expr><name><name>tri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tri</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_icosahedron</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>verts</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">1.000</literal></expr>,
<expr><literal type="number">0.894</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">0.447</literal></expr>,
<expr><literal type="number">0.276</literal></expr>, <expr><literal type="number">0.851</literal></expr>, <expr><literal type="number">0.447</literal></expr>,
<expr><operator>-</operator><literal type="number">0.724</literal></expr>, <expr><literal type="number">0.526</literal></expr>, <expr><literal type="number">0.447</literal></expr>,
<expr><operator>-</operator><literal type="number">0.724</literal></expr>, <expr><operator>-</operator><literal type="number">0.526</literal></expr>, <expr><literal type="number">0.447</literal></expr>,
<expr><literal type="number">0.276</literal></expr>, <expr><operator>-</operator><literal type="number">0.851</literal></expr>, <expr><literal type="number">0.447</literal></expr>,
<expr><literal type="number">0.724</literal></expr>, <expr><literal type="number">0.526</literal></expr>, <expr><operator>-</operator><literal type="number">0.447</literal></expr>,
<expr><operator>-</operator><literal type="number">0.276</literal></expr>, <expr><literal type="number">0.851</literal></expr>, <expr><operator>-</operator><literal type="number">0.447</literal></expr>,
<expr><operator>-</operator><literal type="number">0.894</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><operator>-</operator><literal type="number">0.447</literal></expr>,
<expr><operator>-</operator><literal type="number">0.276</literal></expr>, <expr><operator>-</operator><literal type="number">0.851</literal></expr>, <expr><operator>-</operator><literal type="number">0.447</literal></expr>,
<expr><literal type="number">0.724</literal></expr>, <expr><operator>-</operator><literal type="number">0.526</literal></expr>, <expr><operator>-</operator><literal type="number">0.447</literal></expr>,
<expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><operator>-</operator><literal type="number">1.000</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PAR_SHAPES_T</name></type> <name><name>faces</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">7</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">11</literal></expr>,
<expr><literal type="number">8</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">11</literal></expr>,
<expr><literal type="number">9</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">11</literal></expr>,
<expr><literal type="number">10</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">11</literal></expr>,
<expr><literal type="number">6</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,
<expr><literal type="number">6</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">7</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">8</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,
<expr><literal type="number">9</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">10</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">5</literal></expr>,
<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">3</literal></expr>,
<expr><literal type="number">8</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">5</literal></expr>,
<expr><literal type="number">10</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>mesh</name> <init>= <expr><call><name>PAR_CALLOC</name><argument_list>(<argument><expr><name>par_shapes_mesh</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>verts</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>verts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name> <operator>=</operator> <call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>verts</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name></expr></argument>, <argument><expr><name>verts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>verts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>faces</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>faces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name> <operator>=</operator> <call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>faces</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name></expr></argument>, <argument><expr><name>faces</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>faces</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>mesh</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_dodecahedron</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>verts</name><index>[<expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0.607</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">0.795</literal></expr>,
<expr><literal type="number">0.188</literal></expr>, <expr><literal type="number">0.577</literal></expr>, <expr><literal type="number">0.795</literal></expr>,
<expr><operator>-</operator><literal type="number">0.491</literal></expr>, <expr><literal type="number">0.357</literal></expr>, <expr><literal type="number">0.795</literal></expr>,
<expr><operator>-</operator><literal type="number">0.491</literal></expr>, <expr><operator>-</operator><literal type="number">0.357</literal></expr>, <expr><literal type="number">0.795</literal></expr>,
<expr><literal type="number">0.188</literal></expr>, <expr><operator>-</operator><literal type="number">0.577</literal></expr>, <expr><literal type="number">0.795</literal></expr>,
<expr><literal type="number">0.982</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">0.188</literal></expr>,
<expr><literal type="number">0.304</literal></expr>, <expr><literal type="number">0.934</literal></expr>, <expr><literal type="number">0.188</literal></expr>,
<expr><operator>-</operator><literal type="number">0.795</literal></expr>, <expr><literal type="number">0.577</literal></expr>, <expr><literal type="number">0.188</literal></expr>,
<expr><operator>-</operator><literal type="number">0.795</literal></expr>, <expr><operator>-</operator><literal type="number">0.577</literal></expr>, <expr><literal type="number">0.188</literal></expr>,
<expr><literal type="number">0.304</literal></expr>, <expr><operator>-</operator><literal type="number">0.934</literal></expr>, <expr><literal type="number">0.188</literal></expr>,
<expr><literal type="number">0.795</literal></expr>, <expr><literal type="number">0.577</literal></expr>, <expr><operator>-</operator><literal type="number">0.188</literal></expr>,
<expr><operator>-</operator><literal type="number">0.304</literal></expr>, <expr><literal type="number">0.934</literal></expr>, <expr><operator>-</operator><literal type="number">0.188</literal></expr>,
<expr><operator>-</operator><literal type="number">0.982</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><operator>-</operator><literal type="number">0.188</literal></expr>,
<expr><operator>-</operator><literal type="number">0.304</literal></expr>, <expr><operator>-</operator><literal type="number">0.934</literal></expr>, <expr><operator>-</operator><literal type="number">0.188</literal></expr>,
<expr><literal type="number">0.795</literal></expr>, <expr><operator>-</operator><literal type="number">0.577</literal></expr>, <expr><operator>-</operator><literal type="number">0.188</literal></expr>,
<expr><literal type="number">0.491</literal></expr>, <expr><literal type="number">0.357</literal></expr>, <expr><operator>-</operator><literal type="number">0.795</literal></expr>,
<expr><operator>-</operator><literal type="number">0.188</literal></expr>, <expr><literal type="number">0.577</literal></expr>, <expr><operator>-</operator><literal type="number">0.795</literal></expr>,
<expr><operator>-</operator><literal type="number">0.607</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><operator>-</operator><literal type="number">0.795</literal></expr>,
<expr><operator>-</operator><literal type="number">0.188</literal></expr>, <expr><operator>-</operator><literal type="number">0.577</literal></expr>, <expr><operator>-</operator><literal type="number">0.795</literal></expr>,
<expr><literal type="number">0.491</literal></expr>, <expr><operator>-</operator><literal type="number">0.357</literal></expr>, <expr><operator>-</operator><literal type="number">0.795</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PAR_SHAPES_T</name></type> <name><name>pentagons</name><index>[<expr><literal type="number">12</literal> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">5</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">6</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">7</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">8</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,
<expr><literal type="number">9</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">15</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">10</literal></expr>,
<expr><literal type="number">16</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">11</literal></expr>,
<expr><literal type="number">17</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">12</literal></expr>,
<expr><literal type="number">18</literal></expr>,<expr><literal type="number">19</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">13</literal></expr>,
<expr><literal type="number">19</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">14</literal></expr>,
<expr><literal type="number">19</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">15</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>npentagons</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>pentagons</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pentagons</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>mesh</name> <init>= <expr><call><name>PAR_CALLOC</name><argument_list>(<argument><expr><name>par_shapes_mesh</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ncorners</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>verts</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>verts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name> <operator>=</operator> <name>ncorners</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name> <operator>=</operator> <call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name></expr></argument>, <argument><expr><name>verts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>verts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name> <specifier>const</specifier><modifier>*</modifier></type> <name>pentagon</name> <init>= <expr><name>pentagons</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>=</operator> <name>npentagons</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name> <operator>=</operator> <call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>tris</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>npentagons</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>pentagon</name> <operator>+=</operator> <literal type="number">5</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tris</name><operator>++</operator> <operator>=</operator> <name><name>pentagon</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tris</name><operator>++</operator> <operator>=</operator> <name><name>pentagon</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tris</name><operator>++</operator> <operator>=</operator> <name><name>pentagon</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tris</name><operator>++</operator> <operator>=</operator> <name><name>pentagon</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tris</name><operator>++</operator> <operator>=</operator> <name><name>pentagon</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tris</name><operator>++</operator> <operator>=</operator> <name><name>pentagon</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tris</name><operator>++</operator> <operator>=</operator> <name><name>pentagon</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tris</name><operator>++</operator> <operator>=</operator> <name><name>pentagon</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tris</name><operator>++</operator> <operator>=</operator> <name><name>pentagon</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>mesh</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_octahedron</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>verts</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">1.000</literal></expr>,
<expr><literal type="number">1.000</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">0.000</literal></expr>,
<expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">1.000</literal></expr>, <expr><literal type="number">0.000</literal></expr>,
<expr><operator>-</operator><literal type="number">1.000</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">0.000</literal></expr>,
<expr><literal type="number">0.000</literal></expr>, <expr><operator>-</operator><literal type="number">1.000</literal></expr>, <expr><literal type="number">0.000</literal></expr>,
<expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">0.000</literal></expr>, <expr><operator>-</operator><literal type="number">1.000</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PAR_SHAPES_T</name></type> <name><name>triangles</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">5</literal></expr>,
<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">5</literal></expr>,
<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">5</literal></expr>,
<expr><literal type="number">1</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ntris</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>triangles</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>triangles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>mesh</name> <init>= <expr><call><name>PAR_CALLOC</name><argument_list>(<argument><expr><name>par_shapes_mesh</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ncorners</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>verts</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>verts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name> <operator>=</operator> <name>ncorners</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name> <operator>=</operator> <call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name></expr></argument>, <argument><expr><name>verts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>verts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name> <specifier>const</specifier><modifier>*</modifier></type> <name>triangle</name> <init>= <expr><name>triangles</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>=</operator> <name>ntris</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name> <operator>=</operator> <call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>tris</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>ntris</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tris</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>triangle</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tris</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>triangle</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tris</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>triangle</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>mesh</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_tetrahedron</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>verts</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0.000</literal></expr>, <expr><literal type="number">1.333</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0.943</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><operator>-</operator><literal type="number">0.471</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.816</literal></expr>,
<expr><operator>-</operator><literal type="number">0.471</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0.816</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PAR_SHAPES_T</name></type> <name><name>triangles</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ntris</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>triangles</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>triangles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>mesh</name> <init>= <expr><call><name>PAR_CALLOC</name><argument_list>(<argument><expr><name>par_shapes_mesh</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ncorners</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>verts</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>verts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name> <operator>=</operator> <name>ncorners</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name> <operator>=</operator> <call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name></expr></argument>, <argument><expr><name>verts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>verts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name> <specifier>const</specifier><modifier>*</modifier></type> <name>triangle</name> <init>= <expr><name>triangles</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>=</operator> <name>ntris</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name> <operator>=</operator> <call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>tris</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>ntris</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tris</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>triangle</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tris</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>triangle</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tris</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>triangle</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>mesh</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_cube</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>verts</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PAR_SHAPES_T</name></type> <name><name>quads</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">7</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>, 
<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>, 
<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">7</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nquads</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>quads</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>quads</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>mesh</name> <init>= <expr><call><name>PAR_CALLOC</name><argument_list>(<argument><expr><name>par_shapes_mesh</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ncorners</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>verts</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>verts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name> <operator>=</operator> <name>ncorners</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name> <operator>=</operator> <call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name></expr></argument>, <argument><expr><name>verts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>verts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name> <specifier>const</specifier><modifier>*</modifier></type> <name>quad</name> <init>= <expr><name>quads</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>=</operator> <name>nquads</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name> <operator>=</operator> <call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>tris</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>nquads</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>quad</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tris</name><operator>++</operator> <operator>=</operator> <name><name>quad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tris</name><operator>++</operator> <operator>=</operator> <name><name>quad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tris</name><operator>++</operator> <operator>=</operator> <name><name>quad</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tris</name><operator>++</operator> <operator>=</operator> <name><name>quad</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tris</name><operator>++</operator> <operator>=</operator> <name><name>quad</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tris</name><operator>++</operator> <operator>=</operator> <name><name>quad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>mesh</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>arg</name></decl>;</decl_stmt>
}</block></struct></type> <name>par_shapes__command</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>weight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ncommands</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>par_shapes__command</name><modifier>*</modifier></type> <name>commands</name></decl>;</decl_stmt>
}</block></struct></type> <name>par_shapes__rule</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>position</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>scale</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>orientation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>par_shapes__rule</name><modifier>*</modifier></type> <name>rule</name></decl>;</decl_stmt>
}</block></struct></type> <name>par_shapes__stackframe</name>;</typedef>

<function><type><specifier>static</specifier> <name>par_shapes__rule</name><modifier>*</modifier></type> <name>par_shapes__pick_rule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>,
<parameter><decl><type><name>par_shapes__rule</name><modifier>*</modifier></type> <name>rules</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nrules</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>par_shapes__rule</name><modifier>*</modifier></type> <name>rule</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nrules</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rule</name> <operator>=</operator> <name>rules</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>rule</name><operator>-&gt;</operator><name>weight</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>float</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>/</operator> <name>RAND_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nrules</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rule</name> <operator>=</operator> <name>rules</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rule</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>rule</name><operator>-&gt;</operator><name>weight</name></name> <operator>/</operator> <name>total</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <name>r</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>rule</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>rule</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes__create_turtle</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>xaxis</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>yaxis</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>zaxis</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>turtle</name> <init>= <expr><call><name>PAR_CALLOC</name><argument_list>(<argument><expr><name>par_shapes_mesh</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>turtle</name><operator>-&gt;</operator><name>npoints</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>turtle</name><operator>-&gt;</operator><name>points</name></name> <operator>=</operator> <call><name>PAR_CALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>turtle</name><operator>-&gt;</operator><name>npoints</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__copy3</name><argument_list>(<argument><expr><name><name>turtle</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>xaxis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__copy3</name><argument_list>(<argument><expr><name><name>turtle</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>yaxis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__copy3</name><argument_list>(<argument><expr><name><name>turtle</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>zaxis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>turtle</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes__apply_turtle</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>mesh</name></decl></parameter>,
<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>turtle</name></decl></parameter>, <parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>m</name> <init>= <expr><call><name>par_shapes_clone</name><argument_list>(<argument><expr><name>mesh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>pt</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name><name>scale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*=</operator> <name><name>scale</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__transform3</name><argument_list>(<argument><expr><name>pt</name></expr></argument>,
<argument><expr><name><name>turtle</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name><name>turtle</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name><name>turtle</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>m</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__connect</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>scene</name></decl></parameter>,
<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>cylinder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>stacks</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>npoints</name> <init>= <expr><operator>(</operator><name>slices</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>stacks</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>scene</name><operator>-&gt;</operator><name>npoints</name></name> <operator>&gt;=</operator> <name>npoints</name> <operator>&amp;&amp;</operator> <literal type="string">"Cannot connect to empty scene."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>npoints</name> <operator>=</operator> <name><name>scene</name><operator>-&gt;</operator><name>npoints</name></name> <operator>+</operator> <operator>(</operator><name>slices</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>points</name> <init>= <expr><call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>npoints</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>points</name></expr></argument>, <argument><expr><name><name>scene</name><operator>-&gt;</operator><name>points</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>scene</name><operator>-&gt;</operator><name>npoints</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>newpts</name> <init>= <expr><name>points</name> <operator>+</operator> <name><name>scene</name><operator>-&gt;</operator><name>npoints</name></name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newpts</name></expr></argument>, <argument><expr><name><name>cylinder</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <operator>(</operator><name>slices</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>slices</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name><name>scene</name><operator>-&gt;</operator><name>points</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scene</name><operator>-&gt;</operator><name>points</name></name> <operator>=</operator> <name>points</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>ntriangles</name> <init>= <expr><name><name>scene</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>slices</name> <operator>*</operator> <name>stacks</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>triangles</name> <init>= <expr><call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>, <argument><expr><name>ntriangles</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>triangles</name></expr></argument>, <argument><expr><name><name>scene</name><operator>-&gt;</operator><name>triangles</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>scene</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>scene</name><operator>-&gt;</operator><name>npoints</name></name> <operator>-</operator> <operator>(</operator><name>slices</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>face</name> <init>= <expr><name>triangles</name> <operator>+</operator> <name><name>scene</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>stack</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>stack</name> <operator>&lt;</operator> <name>stacks</name></expr>;</condition> <incr><expr><name>stack</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>slice</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>slice</name> <operator>&lt;</operator> <name>slices</name></expr>;</condition> <incr><expr><name>slice</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><name>slice</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>face</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>+</operator> <name>slice</name> <operator>+</operator> <name>slices</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>face</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>+</operator> <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>face</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>+</operator> <name>slice</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>face</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>+</operator> <name>slice</name> <operator>+</operator> <name>slices</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>face</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>+</operator> <name>next</name> <operator>+</operator> <name>slices</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>face</name><operator>++</operator> <operator>=</operator> <name>v</name> <operator>+</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>v</name> <operator>+=</operator> <name>slices</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name><name>scene</name><operator>-&gt;</operator><name>triangles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scene</name><operator>-&gt;</operator><name>triangles</name></name> <operator>=</operator> <name>triangles</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scene</name><operator>-&gt;</operator><name>npoints</name></name> <operator>=</operator> <name>npoints</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scene</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>=</operator> <name>ntriangles</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_lsystem</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>maxdepth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>program</name></decl>;</decl_stmt>
<expr_stmt><expr><name>program</name> <operator>=</operator> <call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>strtok</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nrules</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ncommands</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>strtok</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"rule"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nrules</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ncommands</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<decl_stmt><decl><type><name>par_shapes__rule</name><modifier>*</modifier></type> <name>rules</name> <init>= <expr><call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>par_shapes__rule</name></expr></argument>, <argument><expr><name>nrules</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>par_shapes__command</name><modifier>*</modifier></type> <name>commands</name> <init>= <expr><call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>par_shapes__command</name></expr></argument>, <argument><expr><name>ncommands</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>par_shapes__rule</name><modifier>*</modifier></type> <name>current_rule</name> <init>= <expr><operator>&amp;</operator><name><name>rules</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>par_shapes__command</name><modifier>*</modifier></type> <name>current_command</name> <init>= <expr><operator>&amp;</operator><name><name>commands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>current_rule</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"entry"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_rule</name><operator>-&gt;</operator><name>weight</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_rule</name><operator>-&gt;</operator><name>ncommands</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_rule</name><operator>-&gt;</operator><name>commands</name></name> <operator>=</operator> <name>current_command</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>strtok</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"rule"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>current_rule</name><operator>++</operator></expr>;</expr_stmt>


<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>dot</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dot</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>current_rule</name><operator>-&gt;</operator><name>weight</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>dot</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>current_rule</name><operator>-&gt;</operator><name>weight</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>current_rule</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_rule</name><operator>-&gt;</operator><name>ncommands</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_rule</name><operator>-&gt;</operator><name>commands</name></name> <operator>=</operator> <name>current_command</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>current_rule</name><operator>-&gt;</operator><name>ncommands</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_command</name><operator>-&gt;</operator><name>cmd</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>current_command</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>current_command</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEST_PARSE</name></expr></argument>)</argument_list></call></expr></cpp:if>










<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>scene</name> <init>= <expr><call><name>PAR_CALLOC</name><argument_list>(<argument><expr><name>par_shapes_mesh</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>tube</name> <init>= <expr><call><name>par_shapes_create_cylinder</name><argument_list>(<argument><expr><name>slices</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>turtle</name> <init>= <expr><call><name>par_shapes__create_turtle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name><name>tube</name><operator>-&gt;</operator><name>normals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name><name>tube</name><operator>-&gt;</operator><name>tcoords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tube</name><operator>-&gt;</operator><name>normals</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tube</name><operator>-&gt;</operator><name>tcoords</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>xaxis</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>yaxis</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>zaxis</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>units</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>par_shapes__stackframe</name><modifier>*</modifier></type> <name>stack</name> <init>=
<expr><call><name>PAR_CALLOC</name><argument_list>(<argument><expr><name>par_shapes__stackframe</name></expr></argument>, <argument><expr><name>maxdepth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stackptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>stack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>orientation</name> <operator>=</operator> <name>turtle</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rule</name> <operator>=</operator> <operator>&amp;</operator><name><name>rules</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__copy3</name><argument_list>(<argument><expr><name><name>stack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scale</name></expr></argument>, <argument><expr><name>units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>stackptr</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>par_shapes__stackframe</name><modifier>*</modifier></type> <name>frame</name> <init>= <expr><operator>&amp;</operator><name><name>stack</name><index>[<expr><name>stackptr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>par_shapes__rule</name><modifier>*</modifier></type> <name>rule</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>rule</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>turtle</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>orientation</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>position</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>position</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>scale</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>scale</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pc</name></name> <operator>&gt;=</operator> <name><name>rule</name><operator>-&gt;</operator><name>ncommands</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>par_shapes_free_mesh</name><argument_list>(<argument><expr><name>turtle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stackptr</name><operator>--</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>par_shapes__command</name><modifier>*</modifier></type> <name>cmd</name> <init>= <expr><name><name>rule</name><operator>-&gt;</operator><name>commands</name></name> <operator>+</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>pc</name></name><operator>++</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DUMP_TRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>float</name></type> <name>value</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><literal type="string">"shape"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>m</name> <init>= <expr><call><name>par_shapes__apply_turtle</name><argument_list>(<argument><expr><name>tube</name></expr></argument>, <argument><expr><name>turtle</name></expr></argument>,
<argument><expr><name>position</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><literal type="string">"connect"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>par_shapes__connect</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>slices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>par_shapes_merge</name><argument_list>(<argument><expr><name>scene</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>par_shapes_free_mesh</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><literal type="string">"call"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>stackptr</name> <operator>&lt;</operator> <name>maxdepth</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rule</name> <operator>=</operator> <call><name>par_shapes__pick_rule</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>rules</name></expr></argument>, <argument><expr><name>nrules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>frame</name> <operator>=</operator> <operator>&amp;</operator><name><name>stack</name><index>[<expr><operator>++</operator><name>stackptr</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>rule</name></name> <operator>=</operator> <name>rule</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>orientation</name></name> <operator>=</operator> <call><name>par_shapes_clone</name><argument_list>(<argument><expr><name>turtle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__copy3</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__copy3</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>position</name></name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>atof</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><literal type="string">"rx"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>par_shapes_rotate</name><argument_list>(<argument><expr><name>turtle</name></expr></argument>, <argument><expr><name>value</name> <operator>*</operator> <name>PAR_PI</name> <operator>/</operator> <literal type="number">180.0</literal></expr></argument>, <argument><expr><name>xaxis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><literal type="string">"ry"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>par_shapes_rotate</name><argument_list>(<argument><expr><name>turtle</name></expr></argument>, <argument><expr><name>value</name> <operator>*</operator> <name>PAR_PI</name> <operator>/</operator> <literal type="number">180.0</literal></expr></argument>, <argument><expr><name>yaxis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><literal type="string">"rz"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>par_shapes_rotate</name><argument_list>(<argument><expr><name>turtle</name></expr></argument>, <argument><expr><name>value</name> <operator>*</operator> <name>PAR_PI</name> <operator>/</operator> <literal type="number">180.0</literal></expr></argument>, <argument><expr><name>zaxis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><literal type="string">"tx"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name><name>vec</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>value</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><call><name>par_shapes__dot3</name><argument_list>(<argument><expr><name><name>turtle</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>par_shapes__dot3</name><argument_list>(<argument><expr><name><name>turtle</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>,
<macro><name>par_shapes__dot3</name><argument_list>(<argument>turtle-&gt;points + <literal type="number">6</literal></argument>, <argument>vec</argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>par_shapes__add3</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><literal type="string">"ty"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name><name>vec</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>value</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><call><name>par_shapes__dot3</name><argument_list>(<argument><expr><name><name>turtle</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>par_shapes__dot3</name><argument_list>(<argument><expr><name><name>turtle</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>,
<macro><name>par_shapes__dot3</name><argument_list>(<argument>turtle-&gt;points + <literal type="number">6</literal></argument>, <argument>vec</argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>par_shapes__add3</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><literal type="string">"tz"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name><name>vec</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>value</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><call><name>par_shapes__dot3</name><argument_list>(<argument><expr><name><name>turtle</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>par_shapes__dot3</name><argument_list>(<argument><expr><name><name>turtle</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>,
<macro><name>par_shapes__dot3</name><argument_list>(<argument>turtle-&gt;points + <literal type="number">6</literal></argument>, <argument>vec</argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>par_shapes__add3</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><literal type="string">"sx"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><literal type="string">"sy"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>scale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><literal type="string">"sz"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>scale</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><literal type="string">"sa"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scale</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name>rules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>scene</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>par_shapes_unweld</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>mesh</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>create_indices</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>npoints</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>points</name> <init>= <expr><call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>npoints</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>dst</name> <init>= <expr><name>points</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name> <specifier>const</specifier><modifier>*</modifier></type> <name>index</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>npoints</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>src</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><operator>*</operator><name>index</name><operator>++</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name> <operator>=</operator> <name>points</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name> <operator>=</operator> <name>npoints</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>create_indices</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>tris</name> <init>= <expr><call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>index</name> <init>= <expr><name>tris</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>*</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>index</name><operator>++</operator> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name> <operator>=</operator> <name>tris</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>par_shapes_compute_normals</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>normals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>normals</name></name> <operator>=</operator> <call><name>PAR_CALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>npoints</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name> <specifier>const</specifier><modifier>*</modifier></type> <name>triangle</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>triangles</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>next</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>prev</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>f</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>ntriangles</name></name></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr><operator>,</operator> <expr><name>triangle</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>pa</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>triangle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>pb</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>triangle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>pc</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>triangle</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>par_shapes__copy3</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__subtract3</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>pa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__copy3</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__subtract3</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>pa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__cross3</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__add3</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>normals</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>triangle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__copy3</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__subtract3</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__copy3</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>pa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__subtract3</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__cross3</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__add3</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>normals</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>triangle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__copy3</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>pa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__subtract3</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__copy3</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__subtract3</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__cross3</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__add3</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>normals</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>triangle</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>normal</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>normals</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>normal</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>par_shapes__normalize3</name><argument_list>(<argument><expr><name>normal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__subdivide</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>mesh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name> <operator>==</operator> <name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <literal type="string">"Must be unwelded."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ntriangles</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>npoints</name> <init>= <expr><name>ntriangles</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>points</name> <init>= <expr><call><name>PAR_CALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>npoints</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>dpoint</name> <init>= <expr><name>points</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>spoint</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr><operator>,</operator> <expr><name>spoint</name> <operator>+=</operator> <literal type="number">9</literal></expr><operator>,</operator> <expr><name>dpoint</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>a</name> <init>= <expr><name>spoint</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>b</name> <init>= <expr><name>spoint</name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>c</name> <init>= <expr><name>spoint</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>p0</name> <init>= <expr><name>dpoint</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>p1</name> <init>= <expr><name>dpoint</name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>p2</name> <init>= <expr><name>dpoint</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>par_shapes__mix3</name><argument_list>(<argument><expr><name>dpoint</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__mix3</name><argument_list>(<argument><expr><name>dpoint</name> <operator>+=</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__mix3</name><argument_list>(<argument><expr><name>dpoint</name> <operator>+=</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__add3</name><argument_list>(<argument><expr><name>dpoint</name> <operator>+=</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__add3</name><argument_list>(<argument><expr><name>dpoint</name> <operator>+=</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>p0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__add3</name><argument_list>(<argument><expr><name>dpoint</name> <operator>+=</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__add3</name><argument_list>(<argument><expr><name>dpoint</name> <operator>+=</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>p0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__add3</name><argument_list>(<argument><expr><name>dpoint</name> <operator>+=</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__add3</name><argument_list>(<argument><expr><name>dpoint</name> <operator>+=</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__add3</name><argument_list>(<argument><expr><name>dpoint</name> <operator>+=</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__add3</name><argument_list>(<argument><expr><name>dpoint</name> <operator>+=</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__add3</name><argument_list>(<argument><expr><name>dpoint</name> <operator>+=</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name> <operator>=</operator> <name>points</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name> <operator>=</operator> <name>npoints</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>=</operator> <name>ntriangles</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_subdivided_sphere</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nsubd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>mesh</name> <init>= <expr><call><name>par_shapes_create_icosahedron</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>par_shapes_unweld</name><argument_list>(<argument><expr><name>mesh</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>nsubd</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>par_shapes__subdivide</name><argument_list>(<argument><expr><name>mesh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>par_shapes__normalize3</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name> <operator>=</operator> <call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>*</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
<decl_stmt><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><name>mesh</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mesh</name> <operator>=</operator> <call><name>par_shapes_weld</name><argument_list>(<argument><expr><name>mesh</name></expr></argument>, <argument><expr><literal type="number">0.01</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes_free_mesh</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes_compute_normals</name><argument_list>(<argument><expr><name>mesh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>mesh</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_create_rock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>mesh</name> <init>= <expr><call><name>par_shapes_create_subdivided_sphere</name><argument_list>(<argument><expr><name>subd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>osn_context</name></name><modifier>*</modifier></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>par__simplex_noise</name><argument_list>(<argument><expr><name>seed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>pt</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><literal type="number">0.25</literal></expr></init></decl>, <decl><type ref="prev"/><name>f</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>n</name> <init>= <expr><name>a</name> <operator>*</operator> <call><name>par__simplex_noise2</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>f</name> <operator>*</operator> <name><name>pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>f</name> <operator>*</operator> <name><name>pt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> <operator>*=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>a</name> <operator>*</operator> <call><name>par__simplex_noise2</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>f</name> <operator>*</operator> <name><name>pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>f</name> <operator>*</operator> <name><name>pt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <literal type="number">1</literal> <operator>+</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><call><name>pow</name><argument_list>(<argument><expr><operator>-</operator><name><name>pt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>par__simplex_noise_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes_compute_normals</name><argument_list>(<argument><expr><name>mesh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>mesh</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_clone</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name> <specifier>const</specifier><modifier>*</modifier></type> <name>mesh</name></decl></parameter>,
<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>clone</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clone</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>clone</name> <operator>=</operator> <call><name>PAR_CALLOC</name><argument_list>(<argument><expr><name>par_shapes_mesh</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>clone</name><operator>-&gt;</operator><name>npoints</name></name> <operator>=</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clone</name><operator>-&gt;</operator><name>points</name></name> <operator>=</operator> <call><name>PAR_REALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>clone</name><operator>-&gt;</operator><name>points</name></name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name><name>clone</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>clone</name><operator>-&gt;</operator><name>points</name></name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>clone</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clone</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>=</operator> <name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clone</name><operator>-&gt;</operator><name>triangles</name></name> <operator>=</operator> <call><name>PAR_REALLOC</name><argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>, <argument><expr><name><name>clone</name><operator>-&gt;</operator><name>triangles</name></name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator>
<name><name>clone</name><operator>-&gt;</operator><name>ntriangles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>clone</name><operator>-&gt;</operator><name>triangles</name></name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>clone</name><operator>-&gt;</operator><name>ntriangles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mesh</name><operator>-&gt;</operator><name>normals</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>clone</name><operator>-&gt;</operator><name>normals</name></name> <operator>=</operator> <call><name>PAR_REALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>clone</name><operator>-&gt;</operator><name>normals</name></name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name><name>clone</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>clone</name><operator>-&gt;</operator><name>normals</name></name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>normals</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>clone</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mesh</name><operator>-&gt;</operator><name>tcoords</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>clone</name><operator>-&gt;</operator><name>tcoords</name></name> <operator>=</operator> <call><name>PAR_REALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>clone</name><operator>-&gt;</operator><name>tcoords</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>clone</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>clone</name><operator>-&gt;</operator><name>tcoords</name></name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>tcoords</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>clone</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>clone</name></expr>;</return>
</block_content>}</block></function>

<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>points</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gridsize</name></decl>;</decl_stmt>
}</block> <decl><name>par_shapes__sort_context</name></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>par_shapes__cmp1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>arg0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>g</name> <init>= <expr><name><name>par_shapes__sort_context</name><operator>.</operator><name>gridsize</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>PAR_SHAPES_T</name></type> <name>d0</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>PAR_SHAPES_T</name><operator>*</operator><operator>)</operator> <name>arg0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>p0</name> <init>= <expr><name><name>par_shapes__sort_context</name><operator>.</operator><name>points</name></name> <operator>+</operator> <name>d0</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i0</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>p0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j0</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>p0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k0</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>p0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index0</name> <init>= <expr><name>i0</name> <operator>+</operator> <name>g</name> <operator>*</operator> <name>j0</name> <operator>+</operator> <name>g</name> <operator>*</operator> <name>g</name> <operator>*</operator> <name>k0</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>PAR_SHAPES_T</name></type> <name>d1</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>PAR_SHAPES_T</name><operator>*</operator><operator>)</operator> <name>arg1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>p1</name> <init>= <expr><name><name>par_shapes__sort_context</name><operator>.</operator><name>points</name></name> <operator>+</operator> <name>d1</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>p1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j1</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>p1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k1</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>p1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index1</name> <init>= <expr><name>i1</name> <operator>+</operator> <name>g</name> <operator>*</operator> <name>j1</name> <operator>+</operator> <name>g</name> <operator>*</operator> <name>g</name> <operator>*</operator> <name>k1</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>index0</name> <operator>&lt;</operator> <name>index1</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>index0</name> <operator>&gt;</operator> <name>index1</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__sort_points</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>mesh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gridsize</name></decl></parameter>,
<parameter><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>sortmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>sortmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>par_shapes__sort_context</name><operator>.</operator><name>gridsize</name></name> <operator>=</operator> <name>gridsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par_shapes__sort_context</name><operator>.</operator><name>points</name></name> <operator>=</operator> <name><name>mesh</name><operator>-&gt;</operator><name>points</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>sortmap</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>par_shapes__cmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>newpts</name> <init>= <expr><call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>invmap</name> <init>= <expr><call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>dstpt</name> <init>= <expr><name>newpts</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>invmap</name><index>[<expr><name><name>sortmap</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>srcpt</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>sortmap</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>dstpt</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>srcpt</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dstpt</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>srcpt</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dstpt</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>srcpt</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name> <operator>=</operator> <name>newpts</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>newinds</name> <init>= <expr><call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>dstind</name> <init>= <expr><name>newinds</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name> <specifier>const</specifier><modifier>*</modifier></type> <name>srcind</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>*</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dstind</name><operator>++</operator> <operator>=</operator> <name><name>invmap</name><index>[<expr><operator>*</operator><name>srcind</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name> <operator>=</operator> <name>newinds</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>sortmap</name></expr></argument>, <argument><expr><name>invmap</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name>invmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>par_shapes__weld_points</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>mesh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gridsize</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>epsilon</name></decl></parameter>, <parameter><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>weldmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>bins</name> <init>= <expr><call><name>PAR_CALLOC</name><argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>,
<argument><expr><name>gridsize</name> <operator>*</operator> <name>gridsize</name> <operator>*</operator> <name>gridsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_binindex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>pt</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>pt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>pt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>this_binindex</name> <init>= <expr><name>i</name> <operator>+</operator> <name>gridsize</name> <operator>*</operator> <name>j</name> <operator>+</operator> <name>gridsize</name> <operator>*</operator> <name>gridsize</name> <operator>*</operator> <name>k</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>this_binindex</name> <operator>!=</operator> <name>prev_binindex</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bins</name><index>[<expr><name>this_binindex</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>prev_binindex</name> <operator>=</operator> <name>this_binindex</name></expr>;</expr_stmt>
</block_content>}</block></for>



<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>pt</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nremoved</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>pt</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>weldmap</name><index>[<expr><name>p</name></expr>]</index></name> <operator>!=</operator> <name>p</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>int</name></type> <name><name>nearby</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nbins</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>minp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>maxp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>minp</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>pt</name><index>[<expr><name>c</name></expr>]</index></name> <operator>-</operator> <name>epsilon</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>maxp</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>pt</name><index>[<expr><name>c</name></expr>]</index></name> <operator>+</operator> <name>epsilon</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>minp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>maxp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>minp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>maxp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>minp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name><name>maxp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>binindex</name> <init>= <expr><name>i</name> <operator>+</operator> <name>gridsize</name> <operator>*</operator> <name>j</name> <operator>+</operator> <name>gridsize</name> <operator>*</operator> <name>gridsize</name> <operator>*</operator> <name>k</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name></type> <name>binvalue</name> <init>= <expr><operator>*</operator><operator>(</operator><name>bins</name> <operator>+</operator> <name>binindex</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>binvalue</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nbins</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>nearby</name><index>[<expr><name>nbins</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>binindex</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name>nbins</name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>binindex</name> <init>= <expr><name><name>nearby</name><index>[<expr><name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name></type> <name>binvalue</name> <init>= <expr><operator>*</operator><operator>(</operator><name>bins</name> <operator>+</operator> <name>binindex</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name></type> <name>nindex</name> <init>= <expr><name>binvalue</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>nindex</name> <operator>!=</operator> <name>p</name> <operator>&amp;&amp;</operator> <name><name>weldmap</name><index>[<expr><name>nindex</name></expr>]</index></name> <operator>==</operator> <name>nindex</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>thatpt</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <name>nindex</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dist2</name> <init>= <expr><call><name>par_shapes__sqrdist3</name><argument_list>(<argument><expr><name>thatpt</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dist2</name> <operator>&lt;</operator> <name>epsilon</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>weldmap</name><index>[<expr><name>nindex</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nremoved</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>++</operator><name>nindex</name> <operator>&gt;=</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>nextpt</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <name>nindex</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>nextpt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>nextpt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>nextpt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nextbinindex</name> <init>= <expr><name>i</name> <operator>+</operator> <name>gridsize</name> <operator>*</operator> <name>j</name> <operator>+</operator> <name>gridsize</name> <operator>*</operator> <name>gridsize</name> <operator>*</operator> <name>k</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nextbinindex</name> <operator>!=</operator> <name>binindex</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name>bins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>npoints</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name> <operator>-</operator> <name>nremoved</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>newpts</name> <init>= <expr><call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>npoints</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>dst</name> <init>= <expr><name>newpts</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>condensed_map</name> <init>= <expr><call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>cmap</name> <init>= <expr><name>condensed_map</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>src</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ci</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>src</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>weldmap</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cmap</name><operator>++</operator> <operator>=</operator> <name>ci</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cmap</name><operator>++</operator> <operator>=</operator> <name><name>condensed_map</name><index>[<expr><name><name>weldmap</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ci</name> <operator>==</operator> <name>npoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>weldmap</name></expr></argument>, <argument><expr><name>condensed_map</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name>condensed_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name> <operator>=</operator> <name>newpts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name> <operator>=</operator> <name>npoints</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>PAR_SHAPES_T</name> <specifier>const</specifier><modifier>*</modifier></type> <name>tsrc</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>tdst</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ntriangles</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>tsrc</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name></type> <name>a</name> <init>= <expr><name><name>weldmap</name><index>[<expr><name><name>tsrc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name></type> <name>b</name> <init>= <expr><name><name>weldmap</name><index>[<expr><name><name>tsrc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name></type> <name>c</name> <init>= <expr><name><name>weldmap</name><index>[<expr><name><name>tsrc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>b</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>!=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>!=</operator> <name>c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tdst</name><operator>++</operator> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tdst</name><operator>++</operator> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tdst</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ntriangles</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>=</operator> <name>ntriangles</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>par_shapes_weld</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name> <specifier>const</specifier><modifier>*</modifier></type> <name>mesh</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>epsilon</name></decl></parameter>,
<parameter><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>weldmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>clone</name> <init>= <expr><call><name>par_shapes_clone</name><argument_list>(<argument><expr><name>mesh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>aabb</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gridsize</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>maxcell</name> <init>= <expr><name>gridsize</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>par_shapes_compute_aabb</name><argument_list>(<argument><expr><name>clone</name></expr></argument>, <argument><expr><name>aabb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>scale</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name><name>aabb</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name><name>aabb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>?</operator> <literal type="number">1.0f</literal> <operator>:</operator> <name>maxcell</name> <operator>/</operator> <operator>(</operator><name><name>aabb</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>aabb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>,
<expr><name><name>aabb</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <name><name>aabb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>?</operator> <literal type="number">1.0f</literal> <operator>:</operator> <name>maxcell</name> <operator>/</operator> <operator>(</operator><name><name>aabb</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>aabb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>,
<expr><name><name>aabb</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <name><name>aabb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>?</operator> <literal type="number">1.0f</literal> <operator>:</operator> <name>maxcell</name> <operator>/</operator> <operator>(</operator><name><name>aabb</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>aabb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>par_shapes_translate</name><argument_list>(<argument><expr><name>clone</name></expr></argument>, <argument><expr><operator>-</operator><name><name>aabb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><name><name>aabb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><name><name>aabb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes_scale</name><argument_list>(<argument><expr><name>clone</name></expr></argument>, <argument><expr><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>scale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>scale</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>sortmap</name> <init>= <expr><call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>par_shapes__sort_points</name><argument_list>(<argument><expr><name>clone</name></expr></argument>, <argument><expr><name>gridsize</name></expr></argument>, <argument><expr><name>sortmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>owner</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>weldmap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>owner</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>weldmap</name> <operator>=</operator> <call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>weldmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>par_shapes__weld_points</name><argument_list>(<argument><expr><name>clone</name></expr></argument>, <argument><expr><name>gridsize</name></expr></argument>, <argument><expr><name>epsilon</name></expr></argument>, <argument><expr><name>weldmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>owner</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name>weldmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>newmap</name> <init>= <expr><call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>newmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>weldmap</name><index>[<expr><name><name>sortmap</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>weldmap</name></expr></argument>, <argument><expr><name>newmap</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>mesh</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name>newmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name>sortmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes_scale</name><argument_list>(<argument><expr><name>clone</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name><name>scale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name><name>scale</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes_translate</name><argument_list>(<argument><expr><name>clone</name></expr></argument>, <argument><expr><name><name>aabb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aabb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aabb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>clone</name></expr>;</return>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRETCH_CONSTANT_2D</name></cpp:macro> <cpp:value>(-0.211324865405187)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQUISH_CONSTANT_2D</name></cpp:macro> <cpp:value>(0.366025403784439)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRETCH_CONSTANT_3D</name></cpp:macro> <cpp:value>(-1.0 / 6.0)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQUISH_CONSTANT_3D</name></cpp:macro> <cpp:value>(1.0 / 3.0)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRETCH_CONSTANT_4D</name></cpp:macro> <cpp:value>(-0.138196601125011)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQUISH_CONSTANT_4D</name></cpp:macro> <cpp:value>(0.309016994374947)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORM_CONSTANT_2D</name></cpp:macro> <cpp:value>(47.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORM_CONSTANT_3D</name></cpp:macro> <cpp:value>(103.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORM_CONSTANT_4D</name></cpp:macro> <cpp:value>(30.0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_SEED</name></cpp:macro> <cpp:value>(0LL)</cpp:value></cpp:define>

<struct>struct <name>osn_context</name> <block>{
<decl_stmt><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>perm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>permGradIndex3D</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAYSIZE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof((x)) / sizeof((x)[0]))</cpp:value></cpp:define>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>gradients2D</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>







<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>signed</name> <name>char</name></type> <name><name>gradients3D</name><index>[]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>,
<expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>,
<expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">11</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>







<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>signed</name> <name>char</name></type> <name><name>gradients4D</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>double</name></type> <name>extrapolate2</name><parameter_list>(
<parameter><decl><type><name><name>struct</name> <name>osn_context</name></name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xsb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ysb</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>dy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>perm</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>perm</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>perm</name><index>[<expr><operator>(</operator><name><name>perm</name><index>[<expr><name>xsb</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>]</index></name> <operator>+</operator> <name>ysb</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0E</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>gradients2D</name><index>[<expr><name>index</name></expr>]</index></name> <operator>*</operator> <name>dx</name> <operator>+</operator> <name><name>gradients2D</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>dy</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>fastFloor</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>xi</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name>x</name></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <name>xi</name></expr> ?</condition><then> <expr><name>xi</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>xi</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>allocate_perm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>osn_context</name></name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nperm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ngrad</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>permGradIndex3D</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>nperm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>perm</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><name>ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>permGradIndex3D</name></name> <operator>=</operator> <call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>ngrad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>permGradIndex3D</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><name>ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>par__simplex_noise</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>osn_context</name></name><modifier>*</modifier><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>source</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>perm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>permGradIndex3D</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>ctx</name> <operator>=</operator> <call><name>PAR_MALLOC</name><argument_list>(<argument><expr>struct <name>osn_context</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><name>ENOMEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>permGradIndex3D</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>allocate_perm</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>perm</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>perm</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>permGradIndex3D</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>permGradIndex3D</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>source</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>seed</name> <operator>=</operator> <name>seed</name> <operator>*</operator> <literal type="number">6364136223846793005LL</literal> <operator>+</operator> <literal type="number">1442695040888963407LL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>seed</name> <operator>=</operator> <name>seed</name> <operator>*</operator> <literal type="number">6364136223846793005LL</literal> <operator>+</operator> <literal type="number">1442695040888963407LL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>seed</name> <operator>=</operator> <name>seed</name> <operator>*</operator> <literal type="number">6364136223846793005LL</literal> <operator>+</operator> <literal type="number">1442695040888963407LL</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">255</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>seed</name> <operator>=</operator> <name>seed</name> <operator>*</operator> <literal type="number">6364136223846793005LL</literal> <operator>+</operator> <literal type="number">1442695040888963407LL</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>seed</name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>%</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>perm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>source</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>permGradIndex3D</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator><operator>(</operator><name><name>perm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <operator>(</operator><call><name>ARRAYSIZE</name><argument_list>(<argument><expr><name>gradients3D</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>source</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name><name>source</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>par__simplex_noise_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>osn_context</name></name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>perm</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>perm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>perm</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>permGradIndex3D</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>permGradIndex3D</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>permGradIndex3D</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>par__simplex_noise2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>osn_context</name></name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>stretchOffset</name> <init>= <expr><operator>(</operator><name>x</name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name>STRETCH_CONSTANT_2D</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>xs</name> <init>= <expr><name>x</name> <operator>+</operator> <name>stretchOffset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>ys</name> <init>= <expr><name>y</name> <operator>+</operator> <name>stretchOffset</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>xsb</name> <init>= <expr><call><name>fastFloor</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ysb</name> <init>= <expr><call><name>fastFloor</name><argument_list>(<argument><expr><name>ys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>double</name></type> <name>squishOffset</name> <init>= <expr><operator>(</operator><name>xsb</name> <operator>+</operator> <name>ysb</name><operator>)</operator> <operator>*</operator> <name>SQUISH_CONSTANT_2D</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>xb</name> <init>= <expr><name>xsb</name> <operator>+</operator> <name>squishOffset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>yb</name> <init>= <expr><name>ysb</name> <operator>+</operator> <name>squishOffset</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>double</name></type> <name>xins</name> <init>= <expr><name>xs</name> <operator>-</operator> <name>xsb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>yins</name> <init>= <expr><name>ys</name> <operator>-</operator> <name>ysb</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>double</name></type> <name>inSum</name> <init>= <expr><name>xins</name> <operator>+</operator> <name>yins</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>double</name></type> <name>dx0</name> <init>= <expr><name>x</name> <operator>-</operator> <name>xb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>dy0</name> <init>= <expr><name>y</name> <operator>-</operator> <name>yb</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>double</name></type> <name>dx_ext</name></decl>, <decl><type ref="prev"/><name>dy_ext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xsv_ext</name></decl>, <decl><type ref="prev"/><name>ysv_ext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>double</name></type> <name>dx1</name> <init>= <expr><name>dx0</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>SQUISH_CONSTANT_2D</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>dy1</name> <init>= <expr><name>dy0</name> <operator>-</operator> <literal type="number">0</literal> <operator>-</operator> <name>SQUISH_CONSTANT_2D</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>attn1</name> <init>= <expr><literal type="number">2</literal> <operator>-</operator> <name>dx1</name> <operator>*</operator> <name>dx1</name> <operator>-</operator> <name>dy1</name> <operator>*</operator> <name>dy1</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attn1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>attn1</name> <operator>*=</operator> <name>attn1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>attn1</name> <operator>*</operator> <name>attn1</name> <operator>*</operator> <call><name>extrapolate2</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>xsb</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ysb</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>dx1</name></expr></argument>, <argument><expr><name>dy1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>double</name></type> <name>dx2</name> <init>= <expr><name>dx0</name> <operator>-</operator> <literal type="number">0</literal> <operator>-</operator> <name>SQUISH_CONSTANT_2D</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>dy2</name> <init>= <expr><name>dy0</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>SQUISH_CONSTANT_2D</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>attn2</name> <init>= <expr><literal type="number">2</literal> <operator>-</operator> <name>dx2</name> <operator>*</operator> <name>dx2</name> <operator>-</operator> <name>dy2</name> <operator>*</operator> <name>dy2</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attn2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>attn2</name> <operator>*=</operator> <name>attn2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>attn2</name> <operator>*</operator> <name>attn2</name> <operator>*</operator> <call><name>extrapolate2</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>xsb</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>ysb</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>dx2</name></expr></argument>, <argument><expr><name>dy2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>inSum</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>double</name></type> <name>zins</name> <init>= <expr><literal type="number">1</literal> <operator>-</operator> <name>inSum</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>zins</name> <operator>&gt;</operator> <name>xins</name> <operator>||</operator> <name>zins</name> <operator>&gt;</operator> <name>yins</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>xins</name> <operator>&gt;</operator> <name>yins</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>xsv_ext</name> <operator>=</operator> <name>xsb</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ysv_ext</name> <operator>=</operator> <name>ysb</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dx_ext</name> <operator>=</operator> <name>dx0</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dy_ext</name> <operator>=</operator> <name>dy0</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>xsv_ext</name> <operator>=</operator> <name>xsb</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ysv_ext</name> <operator>=</operator> <name>ysb</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dx_ext</name> <operator>=</operator> <name>dx0</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dy_ext</name> <operator>=</operator> <name>dy0</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>xsv_ext</name> <operator>=</operator> <name>xsb</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ysv_ext</name> <operator>=</operator> <name>ysb</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dx_ext</name> <operator>=</operator> <name>dx0</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>SQUISH_CONSTANT_2D</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy_ext</name> <operator>=</operator> <name>dy0</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>SQUISH_CONSTANT_2D</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<decl_stmt><decl><type><name>double</name></type> <name>zins</name> <init>= <expr><literal type="number">2</literal> <operator>-</operator> <name>inSum</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>zins</name> <operator>&lt;</operator> <name>xins</name> <operator>||</operator> <name>zins</name> <operator>&lt;</operator> <name>yins</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>xins</name> <operator>&gt;</operator> <name>yins</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>xsv_ext</name> <operator>=</operator> <name>xsb</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ysv_ext</name> <operator>=</operator> <name>ysb</name> <operator>+</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dx_ext</name> <operator>=</operator> <name>dx0</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>SQUISH_CONSTANT_2D</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy_ext</name> <operator>=</operator> <name>dy0</name> <operator>+</operator> <literal type="number">0</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>SQUISH_CONSTANT_2D</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>xsv_ext</name> <operator>=</operator> <name>xsb</name> <operator>+</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ysv_ext</name> <operator>=</operator> <name>ysb</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dx_ext</name> <operator>=</operator> <name>dx0</name> <operator>+</operator> <literal type="number">0</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>SQUISH_CONSTANT_2D</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy_ext</name> <operator>=</operator> <name>dy0</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>SQUISH_CONSTANT_2D</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>dx_ext</name> <operator>=</operator> <name>dx0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy_ext</name> <operator>=</operator> <name>dy0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xsv_ext</name> <operator>=</operator> <name>xsb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ysv_ext</name> <operator>=</operator> <name>ysb</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>xsb</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ysb</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dx0</name> <operator>=</operator> <name>dx0</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>SQUISH_CONSTANT_2D</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dy0</name> <operator>=</operator> <name>dy0</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>SQUISH_CONSTANT_2D</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<decl_stmt><decl><type><name>double</name></type> <name>attn0</name> <init>= <expr><literal type="number">2</literal> <operator>-</operator> <name>dx0</name> <operator>*</operator> <name>dx0</name> <operator>-</operator> <name>dy0</name> <operator>*</operator> <name>dy0</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attn0</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>attn0</name> <operator>*=</operator> <name>attn0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>attn0</name> <operator>*</operator> <name>attn0</name> <operator>*</operator> <call><name>extrapolate2</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>xsb</name></expr></argument>, <argument><expr><name>ysb</name></expr></argument>, <argument><expr><name>dx0</name></expr></argument>, <argument><expr><name>dy0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>double</name></type> <name>attn_ext</name> <init>= <expr><literal type="number">2</literal> <operator>-</operator> <name>dx_ext</name> <operator>*</operator> <name>dx_ext</name> <operator>-</operator> <name>dy_ext</name> <operator>*</operator> <name>dy_ext</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attn_ext</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>attn_ext</name> <operator>*=</operator> <name>attn_ext</name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>attn_ext</name> <operator>*</operator> <name>attn_ext</name> <operator>*</operator>
<call><name>extrapolate2</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>xsv_ext</name></expr></argument>, <argument><expr><name>ysv_ext</name></expr></argument>, <argument><expr><name>dx_ext</name></expr></argument>, <argument><expr><name>dy_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>value</name> <operator>/</operator> <name>NORM_CONSTANT_2D</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>par_shapes_remove_degenerate</name><parameter_list>(<parameter><decl><type><name>par_shapes_mesh</name><modifier>*</modifier></type> <name>mesh</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>mintriarea</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ntriangles</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>triangles</name> <init>= <expr><call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>PAR_SHAPES_T</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name><modifier>*</modifier></type> <name>dst</name> <init>= <expr><name>triangles</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PAR_SHAPES_T</name> <specifier>const</specifier><modifier>*</modifier></type> <name>src</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>next</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>prev</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>mincplen2</name> <init>= <expr><operator>(</operator><name>mintriarea</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>mintriarea</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>f</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr><operator>,</operator> <expr><name>src</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>pa</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>pb</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <specifier>const</specifier><modifier>*</modifier></type> <name>pc</name> <init>= <expr><name><name>mesh</name><operator>-&gt;</operator><name>points</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>par_shapes__copy3</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__subtract3</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>pa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__copy3</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__subtract3</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>pa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes__cross3</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cplen2</name> <init>= <expr><call><name>par_shapes__dot3</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cplen2</name> <operator>&gt;=</operator> <name>mincplen2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ntriangles</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>ntriangles</name></name> <operator>=</operator> <name>ntriangles</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PAR_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>triangles</name></name> <operator>=</operator> <name>triangles</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
