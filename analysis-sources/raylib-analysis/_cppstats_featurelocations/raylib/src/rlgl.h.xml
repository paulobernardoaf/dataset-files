<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\rlgl.h">



























































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RLGL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLGL_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLGL_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAYMATH_STANDALONE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAYMATH_HEADER_ONLY</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLAPI</name></cpp:macro></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BUILD_LIBTYPE_SHARED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLAPI</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBTYPE_SHARED</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLAPI</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TRACELOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACELOG</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACELOGD</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RL_MALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_MALLOC</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>malloc(sz)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RL_CALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_CALLOC</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>calloc(n,sz)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RL_REALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_REALLOC</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>realloc(n,sz)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RL_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_FREE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(p)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raymath.h"</cpp:file></cpp:include> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_21</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAPHICS_API_OPENGL_33</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_21</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GRAPHICS_API_OPENGL_21</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GRAPHICS_API_OPENGL_33</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GRAPHICS_API_OPENGL_ES2</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_21</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAPHICS_API_OPENGL_33</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BATCH_ELEMENTS</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:elif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BATCH_ELEMENTS</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAX_BATCH_BUFFERING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BATCH_BUFFERING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MATRIX_STACK_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DRAWCALL_REGISTERED</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_NEAR_CULL_DISTANCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_NEAR_CULL_DISTANCE</name></cpp:macro> <cpp:value>0.01</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_FAR_CULL_DISTANCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_FAR_CULL_DISTANCE</name></cpp:macro> <cpp:value>1000.0</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SHADER_LOCATIONS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MATERIAL_MAPS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_TEXTURE_WRAP_S</name></cpp:macro> <cpp:value>0x2802</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_TEXTURE_WRAP_T</name></cpp:macro> <cpp:value>0x2803</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_TEXTURE_MAG_FILTER</name></cpp:macro> <cpp:value>0x2800</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_TEXTURE_MIN_FILTER</name></cpp:macro> <cpp:value>0x2801</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_TEXTURE_ANISOTROPIC_FILTER</name></cpp:macro> <cpp:value>0x3000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_FILTER_NEAREST</name></cpp:macro> <cpp:value>0x2600</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_FILTER_LINEAR</name></cpp:macro> <cpp:value>0x2601</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_FILTER_MIP_NEAREST</name></cpp:macro> <cpp:value>0x2700</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_FILTER_NEAREST_MIP_LINEAR</name></cpp:macro> <cpp:value>0x2702</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_FILTER_LINEAR_MIP_NEAREST</name></cpp:macro> <cpp:value>0x2701</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_FILTER_MIP_LINEAR</name></cpp:macro> <cpp:value>0x2703</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_WRAP_REPEAT</name></cpp:macro> <cpp:value>0x2901</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_WRAP_CLAMP</name></cpp:macro> <cpp:value>0x812F</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_WRAP_MIRROR_REPEAT</name></cpp:macro> <cpp:value>0x8370</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_WRAP_MIRROR_CLAMP</name></cpp:macro> <cpp:value>0x8742</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_MODELVIEW</name></cpp:macro> <cpp:value>0x1700</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_PROJECTION</name></cpp:macro> <cpp:value>0x1701</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_TEXTURE</name></cpp:macro> <cpp:value>0x1702</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_LINES</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_TRIANGLES</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_QUADS</name></cpp:macro> <cpp:value>0x0007</cpp:value></cpp:define> 




<typedef>typedef <type><enum>enum <block>{ <decl><name>OPENGL_11</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>OPENGL_21</name></decl>, <decl><name>OPENGL_33</name></decl>, <decl><name>OPENGL_ES_20</name></decl> }</block></enum></type> <name>GlVersion</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>byte</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLGL_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><enum>enum <block>{ <decl><name>false</name></decl>, <decl><name>true</name></decl> }</block></enum></type> <name>bool</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><struct>struct <name>Color</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>a</name></decl>;</decl_stmt>
}</block></struct></type> <name>Color</name>;</typedef>


<typedef>typedef <type><struct>struct <name>Rectangle</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>height</name></decl>;</decl_stmt>
}</block></struct></type> <name>Rectangle</name>;</typedef>



<typedef>typedef <type><struct>struct <name>Texture2D</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mipmaps</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Texture2D</name>;</typedef>


<typedef>typedef <type><name>Texture2D</name></type> <name>Texture</name>;</typedef>


<typedef>typedef <type><name>Texture2D</name></type> <name>TextureCubemap</name>;</typedef>


<typedef>typedef <type><struct>struct <name>RenderTexture2D</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Texture2D</name></type> <name>texture</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Texture2D</name></type> <name>depth</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>depthTexture</name></decl>;</decl_stmt> 
}</block></struct></type> <name>RenderTexture2D</name>;</typedef>


<typedef>typedef <type><name>RenderTexture2D</name></type> <name>RenderTexture</name>;</typedef>


<typedef>typedef <type><struct>struct <name>Mesh</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>vertexCount</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>triangleCount</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>vertices</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>texcoords</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>texcoords2</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>normals</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>tangents</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>colors</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>indices</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>animVertices</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>animNormals</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>boneIds</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>boneWeights</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>vaoId</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>vboId</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Mesh</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SHADER_LOCATIONS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MATERIAL_MAPS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>Shader</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>locs</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Shader</name>;</typedef>


<typedef>typedef <type><struct>struct <name>MaterialMap</name> <block>{
<decl_stmt><decl><type><name>Texture2D</name></type> <name>texture</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>value</name></decl>;</decl_stmt> 
}</block></struct></type> <name>MaterialMap</name>;</typedef>


<typedef>typedef <type><struct>struct <name>Material</name> <block>{
<decl_stmt><decl><type><name>Shader</name></type> <name>shader</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>MaterialMap</name> <modifier>*</modifier></type><name>maps</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>params</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Material</name>;</typedef>


<typedef>typedef <type><struct>struct <name>Camera</name> <block>{
<decl_stmt><decl><type><name>Vector3</name></type> <name>position</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Vector3</name></type> <name>target</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Vector3</name></type> <name>up</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>fovy</name></decl>;</decl_stmt> 
}</block></struct></type> <name>Camera</name>;</typedef>


<typedef>typedef <type><struct>struct <name>VrDeviceInfo</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>hResolution</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>vResolution</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>hScreenSize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>vScreenSize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>vScreenCenter</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>eyeToScreenDistance</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>lensSeparationDistance</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>interpupillaryDistance</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name><name>lensDistortionValues</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name><name>chromaAbCorrection</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>VrDeviceInfo</name>;</typedef>


<typedef>typedef <type><struct>struct <name>VrStereoConfig</name> <block>{
<decl_stmt><decl><type><name>Shader</name></type> <name>distortionShader</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Matrix</name></type> <name><name>eyesProjection</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Matrix</name></type> <name><name>eyesViewOffset</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>eyeViewportRight</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>eyeViewportLeft</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>VrStereoConfig</name>;</typedef>



<typedef>typedef <type><enum>enum <block>{
<decl><name>LOG_ALL</name></decl>,
<decl><name>LOG_TRACE</name></decl>,
<decl><name>LOG_DEBUG</name></decl>,
<decl><name>LOG_INFO</name></decl>,
<decl><name>LOG_WARNING</name></decl>,
<decl><name>LOG_ERROR</name></decl>,
<decl><name>LOG_FATAL</name></decl>,
<decl><name>LOG_NONE</name></decl>
}</block></enum></type> <name>TraceLogType</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>UNCOMPRESSED_GRAYSCALE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>UNCOMPRESSED_GRAY_ALPHA</name></decl>,
<decl><name>UNCOMPRESSED_R5G6B5</name></decl>, 
<decl><name>UNCOMPRESSED_R8G8B8</name></decl>, 
<decl><name>UNCOMPRESSED_R5G5B5A1</name></decl>, 
<decl><name>UNCOMPRESSED_R4G4B4A4</name></decl>, 
<decl><name>UNCOMPRESSED_R8G8B8A8</name></decl>, 
<decl><name>UNCOMPRESSED_R32</name></decl>, 
<decl><name>UNCOMPRESSED_R32G32B32</name></decl>, 
<decl><name>UNCOMPRESSED_R32G32B32A32</name></decl>, 
<decl><name>COMPRESSED_DXT1_RGB</name></decl>, 
<decl><name>COMPRESSED_DXT1_RGBA</name></decl>, 
<decl><name>COMPRESSED_DXT3_RGBA</name></decl>, 
<decl><name>COMPRESSED_DXT5_RGBA</name></decl>, 
<decl><name>COMPRESSED_ETC1_RGB</name></decl>, 
<decl><name>COMPRESSED_ETC2_RGB</name></decl>, 
<decl><name>COMPRESSED_ETC2_EAC_RGBA</name></decl>, 
<decl><name>COMPRESSED_PVRT_RGB</name></decl>, 
<decl><name>COMPRESSED_PVRT_RGBA</name></decl>, 
<decl><name>COMPRESSED_ASTC_4x4_RGBA</name></decl>, 
<decl><name>COMPRESSED_ASTC_8x8_RGBA</name></decl> 
}</block></enum></type> <name>PixelFormat</name>;</typedef>




<typedef>typedef <type><enum>enum <block>{
<decl><name>FILTER_POINT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>FILTER_BILINEAR</name></decl>, 
<decl><name>FILTER_TRILINEAR</name></decl>, 
<decl><name>FILTER_ANISOTROPIC_4X</name></decl>, 
<decl><name>FILTER_ANISOTROPIC_8X</name></decl>, 
<decl><name>FILTER_ANISOTROPIC_16X</name></decl>, 
}</block></enum></type> <name>TextureFilterMode</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>BLEND_ALPHA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>BLEND_ADDITIVE</name></decl>,
<decl><name>BLEND_MULTIPLIED</name></decl>
}</block></enum></type> <name>BlendMode</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>LOC_VERTEX_POSITION</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>LOC_VERTEX_TEXCOORD01</name></decl>,
<decl><name>LOC_VERTEX_TEXCOORD02</name></decl>,
<decl><name>LOC_VERTEX_NORMAL</name></decl>,
<decl><name>LOC_VERTEX_TANGENT</name></decl>,
<decl><name>LOC_VERTEX_COLOR</name></decl>,
<decl><name>LOC_MATRIX_MVP</name></decl>,
<decl><name>LOC_MATRIX_MODEL</name></decl>,
<decl><name>LOC_MATRIX_VIEW</name></decl>,
<decl><name>LOC_MATRIX_PROJECTION</name></decl>,
<decl><name>LOC_VECTOR_VIEW</name></decl>,
<decl><name>LOC_COLOR_DIFFUSE</name></decl>,
<decl><name>LOC_COLOR_SPECULAR</name></decl>,
<decl><name>LOC_COLOR_AMBIENT</name></decl>,
<decl><name>LOC_MAP_ALBEDO</name></decl>, 
<decl><name>LOC_MAP_METALNESS</name></decl>, 
<decl><name>LOC_MAP_NORMAL</name></decl>,
<decl><name>LOC_MAP_ROUGHNESS</name></decl>,
<decl><name>LOC_MAP_OCCLUSION</name></decl>,
<decl><name>LOC_MAP_EMISSION</name></decl>,
<decl><name>LOC_MAP_HEIGHT</name></decl>,
<decl><name>LOC_MAP_CUBEMAP</name></decl>,
<decl><name>LOC_MAP_IRRADIANCE</name></decl>,
<decl><name>LOC_MAP_PREFILTER</name></decl>,
<decl><name>LOC_MAP_BRDF</name></decl>
}</block></enum></type> <name>ShaderLocationIndex</name>;</typedef>


<typedef>typedef <type><enum>enum <block>{
<decl><name>UNIFORM_FLOAT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>UNIFORM_VEC2</name></decl>,
<decl><name>UNIFORM_VEC3</name></decl>,
<decl><name>UNIFORM_VEC4</name></decl>,
<decl><name>UNIFORM_INT</name></decl>,
<decl><name>UNIFORM_IVEC2</name></decl>,
<decl><name>UNIFORM_IVEC3</name></decl>,
<decl><name>UNIFORM_IVEC4</name></decl>,
<decl><name>UNIFORM_SAMPLER2D</name></decl>
}</block></enum></type> <name>ShaderUniformDataType</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOC_MAP_DIFFUSE</name></cpp:macro> <cpp:value>LOC_MAP_ALBEDO</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOC_MAP_SPECULAR</name></cpp:macro> <cpp:value>LOC_MAP_METALNESS</cpp:value></cpp:define>


<typedef>typedef <type><enum>enum <block>{
<decl><name>MAP_ALBEDO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>MAP_METALNESS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>MAP_NORMAL</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>MAP_ROUGHNESS</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>MAP_OCCLUSION</name></decl>,
<decl><name>MAP_EMISSION</name></decl>,
<decl><name>MAP_HEIGHT</name></decl>,
<decl><name>MAP_CUBEMAP</name></decl>, 
<decl><name>MAP_IRRADIANCE</name></decl>, 
<decl><name>MAP_PREFILTER</name></decl>, 
<decl><name>MAP_BRDF</name></decl>
}</block></enum></type> <name>MaterialMapType</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_DIFFUSE</name></cpp:macro> <cpp:value>MAP_ALBEDO</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_SPECULAR</name></cpp:macro> <cpp:value>MAP_METALNESS</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlMatrixMode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlPushMatrix</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlPopMatrix</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlLoadIdentity</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlTranslatef</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlRotatef</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>angleDeg</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlScalef</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlMultMatrixf</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>matf</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlFrustum</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>bottom</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>znear</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>zfar</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlOrtho</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>bottom</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>znear</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>zfar</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlViewport</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl> 




<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlBegin</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlEnd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlVertex2i</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlVertex2f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlVertex3f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlTexCoord2f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlNormal3f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlColor4ub</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlColor3f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlColor4f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl> 





<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlEnableTexture</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlDisableTexture</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlTextureParameters</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlEnableRenderTexture</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlDisableRenderTexture</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlEnableDepthTest</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlDisableDepthTest</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlEnableBackfaceCulling</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlDisableBackfaceCulling</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlEnableScissorTest</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlDisableScissorTest</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlScissor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlEnableWireMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlDisableWireMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlDeleteTextures</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlDeleteRenderTextures</name><parameter_list>(<parameter><decl><type><name>RenderTexture2D</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlDeleteShader</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlDeleteVertexArrays</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlDeleteBuffers</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlClearColor</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlClearScreenBuffers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlUpdateBuffer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bufferId</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dataSize</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>unsigned</name> <name>int</name></type> <name>rlLoadAttribBuffer</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>vaoId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shaderLoc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dynamic</name></decl></parameter>)</parameter_list>;</function_decl> 




<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlglInit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlglClose</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlglDraw</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>rlGetVersion</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>rlCheckBufferLimit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vCount</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlSetDebugMarker</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlLoadExtensions</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>loader</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>Vector3</name></type> <name>rlUnproject</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>Matrix</name></type> <name>proj</name></decl></parameter>, <parameter><decl><type><name>Matrix</name></type> <name>view</name></decl></parameter>)</parameter_list>;</function_decl> 


<function_decl><type><name>RLAPI</name> <name>unsigned</name> <name>int</name></type> <name>rlLoadTexture</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mipmapCount</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>unsigned</name> <name>int</name></type> <name>rlLoadTextureDepth</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>useRenderBuffer</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>unsigned</name> <name>int</name></type> <name>rlLoadTextureCubemap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlUpdateTexture</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlGetGlTextureFormats</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>glInternalFormat</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>glFormat</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>glType</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlUnloadTexture</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlGenerateMipmaps</name><parameter_list>(<parameter><decl><type><name>Texture2D</name> <modifier>*</modifier></type><name>texture</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name> <modifier>*</modifier></type><name>rlReadTexturePixels</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>rlReadScreenPixels</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl> 


<function_decl><type><name>RLAPI</name> <name>RenderTexture2D</name></type> <name>rlLoadRenderTexture</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depthBits</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>useDepthTexture</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlRenderTextureAttach</name><parameter_list>(<parameter><decl><type><name>RenderTexture</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attachType</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>rlRenderTextureComplete</name><parameter_list>(<parameter><decl><type><name>RenderTexture</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl> 


<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlLoadMesh</name><parameter_list>(<parameter><decl><type><name>Mesh</name> <modifier>*</modifier></type><name>mesh</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dynamic</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlUpdateMesh</name><parameter_list>(<parameter><decl><type><name>Mesh</name></type> <name>mesh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlUpdateMeshAt</name><parameter_list>(<parameter><decl><type><name>Mesh</name></type> <name>mesh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlDrawMesh</name><parameter_list>(<parameter><decl><type><name>Mesh</name></type> <name>mesh</name></decl></parameter>, <parameter><decl><type><name>Material</name></type> <name>material</name></decl></parameter>, <parameter><decl><type><name>Matrix</name></type> <name>transform</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>rlUnloadMesh</name><parameter_list>(<parameter><decl><type><name>Mesh</name></type> <name>mesh</name></decl></parameter>)</parameter_list>;</function_decl> 




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLGL_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function_decl><type><name>RLAPI</name> <name>Shader</name></type> <name>LoadShader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vsFileName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fsFileName</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>Shader</name></type> <name>LoadShaderCode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vsCode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fsCode</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>UnloadShader</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Shader</name></type> <name>GetShaderDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>Texture2D</name></type> <name>GetTextureDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>Texture2D</name></type> <name>GetShapesTexture</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>Rectangle</name></type> <name>GetShapesTextureRec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 


<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetShaderLocation</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uniformName</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetShaderValue</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uniformLoc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uniformType</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetShaderValueV</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uniformLoc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uniformType</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetShaderValueMatrix</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uniformLoc</name></decl></parameter>, <parameter><decl><type><name>Matrix</name></type> <name>mat</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetMatrixProjection</name><parameter_list>(<parameter><decl><type><name>Matrix</name></type> <name>proj</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetMatrixModelview</name><parameter_list>(<parameter><decl><type><name>Matrix</name></type> <name>view</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>Matrix</name></type> <name>GetMatrixModelview</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 



<function_decl><type><name>RLAPI</name> <name>Texture2D</name></type> <name>GenTextureCubemap</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>Texture2D</name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>Texture2D</name></type> <name>GenTextureIrradiance</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>Texture2D</name></type> <name>cubemap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>Texture2D</name></type> <name>GenTexturePrefilter</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>Texture2D</name></type> <name>cubemap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>Texture2D</name></type> <name>GenTextureBRDF</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl> 


<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>BeginShaderMode</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>EndShaderMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>BeginBlendMode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>EndBlendMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 


<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>InitVrSimulator</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>CloseVrSimulator</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>UpdateVrTracking</name><parameter_list>(<parameter><decl><type><name>Camera</name> <modifier>*</modifier></type><name>camera</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetVrConfiguration</name><parameter_list>(<parameter><decl><type><name>VrDeviceInfo</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>Shader</name></type> <name>distortion</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsVrSimulatorReady</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ToggleVrMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>BeginVrDrawing</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>EndVrDrawing</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>char</name> <modifier>*</modifier></type><name>LoadFileText</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetPixelDataSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLGL_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLGL_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EXTERNAL_CONFIG_FLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raymath.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OpenGL/gl.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OpenGL/glext.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>APIENTRY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APIENTRY</name></cpp:macro> <cpp:value>__stdcall</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APIENTRY</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WINGDIAPI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINGDIAPI</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/gl.h&gt;</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_21</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAPHICS_API_OPENGL_33</name></cpp:macro></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OpenGL/gl3.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OpenGL/gl3ext.h&gt;</cpp:file></cpp:include> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_REALLOC</name></cpp:macro> <cpp:value>RL_REALLOC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_FREE</name></cpp:macro> <cpp:value>RL_FREE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLAD_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLGL_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"glad.h"</cpp:file></cpp:include> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"external/glad.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;EGL/egl.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GLES2/gl2.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GLES2/gl2ext.h&gt;</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_SHADING_LANGUAGE_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_SHADING_LANGUAGE_VERSION</name></cpp:macro> <cpp:value>0x8B8C</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_COMPRESSED_RGB_S3TC_DXT1_EXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB_S3TC_DXT1_EXT</name></cpp:macro> <cpp:value>0x83F0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_COMPRESSED_RGBA_S3TC_DXT1_EXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_S3TC_DXT1_EXT</name></cpp:macro> <cpp:value>0x83F1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_COMPRESSED_RGBA_S3TC_DXT3_EXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_S3TC_DXT3_EXT</name></cpp:macro> <cpp:value>0x83F2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_COMPRESSED_RGBA_S3TC_DXT5_EXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_S3TC_DXT5_EXT</name></cpp:macro> <cpp:value>0x83F3</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_ETC1_RGB8_OES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_ETC1_RGB8_OES</name></cpp:macro> <cpp:value>0x8D64</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_COMPRESSED_RGB8_ETC2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB8_ETC2</name></cpp:macro> <cpp:value>0x9274</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_COMPRESSED_RGBA8_ETC2_EAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA8_ETC2_EAC</name></cpp:macro> <cpp:value>0x9278</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG</name></cpp:macro> <cpp:value>0x8C00</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG</name></cpp:macro> <cpp:value>0x8C02</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_COMPRESSED_RGBA_ASTC_4x4_KHR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_4x4_KHR</name></cpp:macro> <cpp:value>0x93b0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_COMPRESSED_RGBA_ASTC_8x8_KHR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_COMPRESSED_RGBA_ASTC_8x8_KHR</name></cpp:macro> <cpp:value>0x93b7</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT</name></cpp:macro> <cpp:value>0x84FF</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GL_TEXTURE_MAX_ANISOTROPY_EXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_TEXTURE_MAX_ANISOTROPY_EXT</name></cpp:macro> <cpp:value>0x84FE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_5_6_5</name></cpp:macro> <cpp:value>0x8363</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_5_5_5_1</name></cpp:macro> <cpp:value>0x8034</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_UNSIGNED_SHORT_4_4_4_4</name></cpp:macro> <cpp:value>0x8033</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_21</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE</name></cpp:macro> <cpp:value>0x1909</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_LUMINANCE_ALPHA</name></cpp:macro> <cpp:value>0x190A</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>glClearDepth</name></cpp:macro> <cpp:value>glClearDepthf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_READ_FRAMEBUFFER</name></cpp:macro> <cpp:value>GL_FRAMEBUFFER</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL_DRAW_FRAMEBUFFER</name></cpp:macro> <cpp:value>GL_FRAMEBUFFER</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ATTRIB_POSITION_NAME</name></cpp:macro> <cpp:value>"vertexPosition"</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ATTRIB_TEXCOORD_NAME</name></cpp:macro> <cpp:value>"vertexTexCoord"</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ATTRIB_NORMAL_NAME</name></cpp:macro> <cpp:value>"vertexNormal"</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ATTRIB_COLOR_NAME</name></cpp:macro> <cpp:value>"vertexColor"</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ATTRIB_TANGENT_NAME</name></cpp:macro> <cpp:value>"vertexTangent"</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ATTRIB_TEXCOORD2_NAME</name></cpp:macro> <cpp:value>"vertexTexCoord2"</cpp:value></cpp:define> 






<typedef>typedef <type><struct>struct <name>DynamicBuffer</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>vCounter</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>tcCounter</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>cCounter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>vertices</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>texcoords</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>colors</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>indices</name></decl>;</decl_stmt> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>indices</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>vaoId</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>vboId</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>DynamicBuffer</name>;</typedef>


<typedef>typedef <type><struct>struct <name>DrawCall</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>vertexCount</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>vertexAlignment</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>textureId</name></decl>;</decl_stmt> 



}</block></struct></type> <name>DrawCall</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_VR_SIMULATOR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>VrStereoConfig</name> <block>{
<decl_stmt><decl><type><name>Shader</name></type> <name>distortionShader</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Matrix</name></type> <name><name>eyesProjection</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Matrix</name></type> <name><name>eyesViewOffset</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>eyeViewportRight</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>eyeViewportLeft</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>VrStereoConfig</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>rlglData</name> <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>currentMatrixMode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Matrix</name> <modifier>*</modifier></type><name>currentMatrix</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Matrix</name></type> <name>modelview</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Matrix</name></type> <name>projection</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Matrix</name></type> <name>transform</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>doTransform</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Matrix</name></type> <name><name>stack</name><index>[<expr><name>MAX_MATRIX_STACK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stackCounter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DynamicBuffer</name></type> <name><name>vertexData</name><index>[<expr><name>MAX_BATCH_BUFFERING</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>currentBuffer</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>DrawCall</name> <modifier>*</modifier></type><name>draws</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>drawsCounter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Texture2D</name></type> <name>shapesTexture</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Rectangle</name></type> <name>shapesTextureRec</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>defaultTextureId</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>defaultVShaderId</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>defaultFShaderId</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Shader</name></type> <name>defaultShader</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Shader</name></type> <name>currentShader</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>currentDepth</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>framebufferWidth</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>framebufferHeight</name></decl>;</decl_stmt> 

}</block> <decl><name>State</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>vao</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>texNPOT</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>texDepth</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>texFloat32</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>texCompDXT</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>texCompETC1</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>texCompETC2</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>texCompPVRT</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>texCompASTC</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>texMirrorClamp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>texAnisoFilter</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>debugMarker</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>maxAnisotropicLevel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>maxDepthBits</name></decl>;</decl_stmt> 

}</block> <decl><name>ExtSupported</name></decl>;</struct> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_VR_SIMULATOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <block>{
<decl_stmt><decl><type><name>VrStereoConfig</name></type> <name>config</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RenderTexture2D</name></type> <name>stereoFbo</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>simulatorReady</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>stereoRender</name></decl>;</decl_stmt> 
}</block> <decl><name>Vr</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
}</block></struct></type> <name>rlglData</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>rlglData</name></type> <name>RLGL</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>PFNGLGENVERTEXARRAYSOESPROC</name></type> <name>glGenVertexArrays</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>PFNGLBINDVERTEXARRAYOESPROC</name></type> <name>glBindVertexArray</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>PFNGLDELETEVERTEXARRAYSOESPROC</name></type> <name>glDeleteVertexArrays</name></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>CompileShader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shaderStr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>LoadShaderProgram</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>vShaderId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>fShaderId</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>Shader</name></type> <name>LoadShaderDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SetShaderDefaultLocations</name><parameter_list>(<parameter><decl><type><name>Shader</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UnloadShaderDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>LoadBuffersDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateBuffersDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawBuffersDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UnloadBuffersDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GenDrawCube</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GenDrawQuad</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_VR_SIMULATOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SetStereoView</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>eye</name></decl></parameter>, <parameter><decl><type><name>Matrix</name></type> <name>matProjection</name></decl></parameter>, <parameter><decl><type><name>Matrix</name></type> <name>matModelView</name></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GenerateMipmaps</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>baseWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>baseHeight</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Color</name> <modifier>*</modifier></type><name>GenNextMipmap</name><parameter_list>(<parameter><decl><type><name>Color</name> <modifier>*</modifier></type><name>srcData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcHeight</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type> <name>rlMatrixMode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>mode</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>RL_PROJECTION</name></expr>:</case> <expr_stmt><expr><call><name>glMatrixMode</name><argument_list>(<argument><expr><name>GL_PROJECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>RL_MODELVIEW</name></expr>:</case> <expr_stmt><expr><call><name>glMatrixMode</name><argument_list>(<argument><expr><name>GL_MODELVIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>RL_TEXTURE</name></expr>:</case> <expr_stmt><expr><call><name>glMatrixMode</name><argument_list>(<argument><expr><name>GL_TEXTURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>rlFrustum</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>bottom</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>znear</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>zfar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glFrustum</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>znear</name></expr></argument>, <argument><expr><name>zfar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>rlOrtho</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>bottom</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>znear</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>zfar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glOrtho</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>znear</name></expr></argument>, <argument><expr><name>zfar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>rlPushMatrix</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>glPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>rlPopMatrix</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>glPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>rlLoadIdentity</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>glLoadIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>rlTranslatef</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>glTranslatef</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>rlRotatef</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>angleDeg</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>glRotatef</name><argument_list>(<argument><expr><name>angleDeg</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>rlScalef</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>glScalef</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>rlMultMatrixf</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>matf</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>glMultMatrixf</name><argument_list>(<argument><expr><name>matf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:elif>


<function><type><name>void</name></type> <name>rlMatrixMode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>RL_PROJECTION</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentMatrix</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>projection</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>RL_MODELVIEW</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentMatrix</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>modelview</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentMatrixMode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlPushMatrix</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>stackCounter</name></name> <operator>&gt;=</operator> <name>MAX_MATRIX_STACK_SIZE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"RLGL: Matrix stack overflow (MAX_MATRIX_STACK_SIZE)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentMatrixMode</name></name> <operator>==</operator> <name>RL_MODELVIEW</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>doTransform</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentMatrix</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>transform</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>stack</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>stackCounter</name></name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentMatrix</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>stackCounter</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlPopMatrix</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>stackCounter</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>mat</name> <init>= <expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>stack</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>stackCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentMatrix</name></name> <operator>=</operator> <name>mat</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>stackCounter</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>stackCounter</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentMatrixMode</name></name> <operator>==</operator> <name>RL_MODELVIEW</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentMatrix</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>modelview</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>doTransform</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlLoadIdentity</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentMatrix</name></name> <operator>=</operator> <call><name>MatrixIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlTranslatef</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>matTranslation</name> <init>= <expr><call><name>MatrixTranslate</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentMatrix</name></name> <operator>=</operator> <call><name>MatrixMultiply</name><argument_list>(<argument><expr><name>matTranslation</name></expr></argument>, <argument><expr><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentMatrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlRotatef</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>angleDeg</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>matRotation</name> <init>= <expr><call><name>MatrixIdentity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>axis</name> <init>= <expr><operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><name>x</name></expr>, <expr><name>y</name></expr>, <expr><name>z</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>matRotation</name> <operator>=</operator> <call><name>MatrixRotate</name><argument_list>(<argument><expr><call><name>Vector3Normalize</name><argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>angleDeg</name><operator>*</operator><name>DEG2RAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentMatrix</name></name> <operator>=</operator> <call><name>MatrixMultiply</name><argument_list>(<argument><expr><name>matRotation</name></expr></argument>, <argument><expr><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentMatrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlScalef</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>matScale</name> <init>= <expr><call><name>MatrixScale</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentMatrix</name></name> <operator>=</operator> <call><name>MatrixMultiply</name><argument_list>(<argument><expr><name>matScale</name></expr></argument>, <argument><expr><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentMatrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlMultMatrixf</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>matf</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>Matrix</name></type> <name>mat</name> <init>= <expr><block>{ <expr><name><name>matf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>matf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>, <expr><name><name>matf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>, <expr><name><name>matf</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>,
<expr><name><name>matf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>matf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>, <expr><name><name>matf</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>, <expr><name><name>matf</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>,
<expr><name><name>matf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>matf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>, <expr><name><name>matf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>, <expr><name><name>matf</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>,
<expr><name><name>matf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>, <expr><name><name>matf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>, <expr><name><name>matf</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>, <expr><name><name>matf</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentMatrix</name></name> <operator>=</operator> <call><name>MatrixMultiply</name><argument_list>(<argument><expr><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentMatrix</name></name></expr></argument>, <argument><expr><name>mat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlFrustum</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>bottom</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>znear</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>zfar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>matPerps</name> <init>= <expr><call><name>MatrixFrustum</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>znear</name></expr></argument>, <argument><expr><name>zfar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentMatrix</name></name> <operator>=</operator> <call><name>MatrixMultiply</name><argument_list>(<argument><expr><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentMatrix</name></name></expr></argument>, <argument><expr><name>matPerps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlOrtho</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>bottom</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>znear</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>zfar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>matOrtho</name> <init>= <expr><call><name>MatrixOrtho</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>znear</name></expr></argument>, <argument><expr><name>zfar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentMatrix</name></name> <operator>=</operator> <call><name>MatrixMultiply</name><argument_list>(<argument><expr><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentMatrix</name></name></expr></argument>, <argument><expr><name>matOrtho</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><name>void</name></type> <name>rlViewport</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glViewport</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>void</name></type> <name>rlBegin</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>mode</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>RL_LINES</name></expr>:</case> <expr_stmt><expr><call><name>glBegin</name><argument_list>(<argument><expr><name>GL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>RL_TRIANGLES</name></expr>:</case> <expr_stmt><expr><call><name>glBegin</name><argument_list>(<argument><expr><name>GL_TRIANGLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>RL_QUADS</name></expr>:</case> <expr_stmt><expr><call><name>glBegin</name><argument_list>(<argument><expr><name>GL_QUADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>rlEnd</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>glEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>rlVertex2i</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>glVertex2i</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>rlVertex2f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>glVertex2f</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>rlVertex3f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>glVertex3f</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>rlTexCoord2f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>glTexCoord2f</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>rlNormal3f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>glNormal3f</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>rlColor4ub</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>glColor4ub</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>rlColor3f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>glColor3f</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>rlColor4f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>glColor4f</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:elif>


<function><type><name>void</name></type> <name>rlBegin</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mode</name> <operator>!=</operator> <name>mode</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mode</name> <operator>==</operator> <name>RL_LINES</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexAlignment</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexCount</name> <operator>&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>?</condition><then> <expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexCount</name></expr> </then><else>: <expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexCount</name><operator>%</operator><literal type="number">4</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mode</name> <operator>==</operator> <name>RL_TRIANGLES</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexAlignment</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexCount</name> <operator>&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">4</literal> <operator>-</operator> <operator>(</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexCount</name><operator>%</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexAlignment</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexAlignment</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vCounter</name> <operator>+=</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexAlignment</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>cCounter</name> <operator>+=</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexAlignment</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>tcCounter</name> <operator>+=</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexAlignment</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>&gt;=</operator> <name>MAX_DRAWCALL_REGISTERED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mode</name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>textureId</name> <operator>=</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultTextureId</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlEnd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vCounter</name> <operator>!=</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>cCounter</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>addColors</name> <init>= <expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vCounter</name> <operator>-</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>cCounter</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>addColors</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>colors</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>cCounter</name></expr>]</index></name> <operator>=</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>colors</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>cCounter</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>colors</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>cCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>colors</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>cCounter</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>colors</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>cCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>colors</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>cCounter</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>colors</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>cCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>colors</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>cCounter</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>cCounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vCounter</name> <operator>!=</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>tcCounter</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>addTexCoords</name> <init>= <expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vCounter</name> <operator>-</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>tcCounter</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>addTexCoords</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>texcoords</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>tcCounter</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>texcoords</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>tcCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>tcCounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentDepth</name></name> <operator>+=</operator> <operator>(</operator><literal type="number">1.0f</literal><operator>/</operator><literal type="number">20000.0f</literal><operator>)</operator></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vCounter</name><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><name>MAX_BATCH_ELEMENTS</name><operator>*</operator><literal type="number">4</literal> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>



<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>stackCounter</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>rlVertex3f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>vec</name> <init>= <expr><block>{ <expr><name>x</name></expr>, <expr><name>y</name></expr>, <expr><name>z</name></expr> }</block></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>doTransform</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>vec</name> <operator>=</operator> <call><name>Vector3Transform</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vCounter</name> <operator>&lt;</operator> <operator>(</operator><name>MAX_BATCH_ELEMENTS</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>vertices</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vCounter</name></expr>]</index></name> <operator>=</operator> <name><name>vec</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>vertices</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>vec</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>vertices</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>vec</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vCounter</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexCount</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"RLGL: Batch elements overflow (MAX_BATCH_ELEMENTS)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlVertex2f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentDepth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlVertex2i</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>x</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>y</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentDepth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>rlTexCoord2f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>texcoords</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>tcCounter</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>texcoords</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>tcCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>tcCounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>rlNormal3f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlColor4ub</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>colors</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>cCounter</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>colors</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>cCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>colors</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>cCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>colors</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>cCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>cCounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlColor4f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><name>r</name><operator>*</operator><literal type="number">255</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><name>g</name><operator>*</operator><literal type="number">255</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><name>b</name><operator>*</operator><literal type="number">255</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><name>a</name><operator>*</operator><literal type="number">255</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlColor3f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><name>x</name><operator>*</operator><literal type="number">255</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><name>y</name><operator>*</operator><literal type="number">255</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><name>z</name><operator>*</operator><literal type="number">255</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>void</name></type> <name>rlEnableTexture</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>textureId</name> <operator>!=</operator> <name>id</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mode</name> <operator>==</operator> <name>RL_LINES</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexAlignment</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexCount</name> <operator>&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>?</condition><then> <expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexCount</name></expr> </then><else>: <expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexCount</name><operator>%</operator><literal type="number">4</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mode</name> <operator>==</operator> <name>RL_TRIANGLES</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexAlignment</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexCount</name> <operator>&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">4</literal> <operator>-</operator> <operator>(</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexCount</name><operator>%</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexAlignment</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexAlignment</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vCounter</name> <operator>+=</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexAlignment</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>cCounter</name> <operator>+=</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexAlignment</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>tcCounter</name> <operator>+=</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexAlignment</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>&gt;=</operator> <name>MAX_DRAWCALL_REGISTERED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>textureId</name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>vertexCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlDisableTexture</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glDisable</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vCounter</name> <operator>&gt;=</operator> <operator>(</operator><name>MAX_BATCH_ELEMENTS</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlTextureParameters</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>param</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>RL_TEXTURE_WRAP_S</name></expr>:</case>
<case>case <expr><name>RL_TEXTURE_WRAP_T</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>RL_WRAP_MIRROR_CLAMP</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texMirrorClamp</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GL: Clamp mirror wrap mode not supported (GL_MIRROR_CLAMP_EXT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><name>RL_TEXTURE_MAG_FILTER</name></expr>:</case>
<case>case <expr><name>RL_TEXTURE_MIN_FILTER</name></expr>:</case> <expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>RL_TEXTURE_ANISOTROPIC_FILTER</name></expr>:</case>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;=</operator> <name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>maxAnisotropicLevel</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glTexParameterf</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MAX_ANISOTROPY_EXT</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>maxAnisotropicLevel</name></name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GL: Maximum anisotropic filter level supported is %iX"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>maxAnisotropicLevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameterf</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MAX_ANISOTROPY_EXT</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GL: Anisotropic filtering not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlEnableRenderTexture</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlDisableRenderTexture</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlEnableDepthTest</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_DEPTH_TEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>


<function><type><name>void</name></type> <name>rlDisableDepthTest</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>glDisable</name><argument_list>(<argument><expr><name>GL_DEPTH_TEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>


<function><type><name>void</name></type> <name>rlEnableBackfaceCulling</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_CULL_FACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>


<function><type><name>void</name></type> <name>rlDisableBackfaceCulling</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>glDisable</name><argument_list>(<argument><expr><name>GL_CULL_FACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>


<function><type><name>RLAPI</name> <name>void</name></type> <name>rlEnableScissorTest</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_SCISSOR_TEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>


<function><type><name>RLAPI</name> <name>void</name></type> <name>rlDisableScissorTest</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>glDisable</name><argument_list>(<argument><expr><name>GL_SCISSOR_TEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>


<function><type><name>RLAPI</name> <name>void</name></type> <name>rlScissor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>glScissor</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>


<function><type><name>void</name></type> <name>rlEnableWireMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>glPolygonMode</name><argument_list>(<argument><expr><name>GL_FRONT_AND_BACK</name></expr></argument>, <argument><expr><name>GL_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlDisableWireMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>glPolygonMode</name><argument_list>(<argument><expr><name>GL_FRONT_AND_BACK</name></expr></argument>, <argument><expr><name>GL_FILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlDeleteTextures</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glDeleteTextures</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlDeleteRenderTextures</name><parameter_list>(<parameter><decl><type><name>RenderTexture2D</name></type> <name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>.</operator><name>texture</name><operator>.</operator><name>id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glDeleteTextures</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>target</name><operator>.</operator><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>.</operator><name>depth</name><operator>.</operator><name>id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>.</operator><name>depthTexture</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glDeleteTextures</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>target</name><operator>.</operator><name>depth</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>glDeleteRenderbuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>target</name><operator>.</operator><name>depth</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>.</operator><name>id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glDeleteFramebuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>target</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"FBO: [ID %i] Unloaded render texture data from VRAM (GPU)"</literal></expr></argument>, <argument><expr><name><name>target</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlDeleteShader</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glDeleteProgram</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlDeleteVertexArrays</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>vao</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glDeleteVertexArrays</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"VAO: [ID %i] Unloaded vertex data from VRAM (GPU)"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlDeleteBuffers</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glDeleteBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>vao</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"VBO: [ID %i] Unloaded vertex data from VRAM (GPU)"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlClearColor</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>cr</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>r</name><operator>/</operator><literal type="number">255</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cg</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>g</name><operator>/</operator><literal type="number">255</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>cb</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>b</name><operator>/</operator><literal type="number">255</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>ca</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>a</name><operator>/</operator><literal type="number">255</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glClearColor</name><argument_list>(<argument><expr><name>cr</name></expr></argument>, <argument><expr><name>cg</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>ca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlClearScreenBuffers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glClear</name><argument_list>(<argument><expr><name>GL_COLOR_BUFFER_BIT</name> <operator>|</operator> <name>GL_DEPTH_BUFFER_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlUpdateBuffer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bufferId</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dataSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name>bufferId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBufferSubData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>rlglInit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"GL: OpenGL device information:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" &gt; Vendor: %s"</literal></expr></argument>, <argument><expr><call><name>glGetString</name><argument_list>(<argument><expr><name>GL_VENDOR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" &gt; Renderer: %s"</literal></expr></argument>, <argument><expr><call><name>glGetString</name><argument_list>(<argument><expr><name>GL_RENDERER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" &gt; Version: %s"</literal></expr></argument>, <argument><expr><call><name>glGetString</name><argument_list>(<argument><expr><name>GL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" &gt; GLSL: %s"</literal></expr></argument>, <argument><expr><call><name>glGetString</name><argument_list>(<argument><expr><name>GL_SHADING_LANGUAGE_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>GLint</name></type> <name>numExt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>vao</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texNPOT</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texFloat32</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texDepth</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>glGetIntegerv</name><argument_list>(<argument><expr><name>GL_NUM_EXTENSIONS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numExt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>extList</name> <init>= <expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>numExt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numExt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>extList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>glGetStringi</name><argument_list>(<argument><expr><name>GL_EXTENSIONS</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>extList</name> <init>= <expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extensions</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>glGetString</name><argument_list>(<argument><expr><name>GL_EXTENSIONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>extensions</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>extensionsDup</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>extensionsDup</name></expr></argument>, <argument><expr><name>extensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>extList</name><index>[<expr><name>numExt</name></expr>]</index></name> <operator>=</operator> <name>extensionsDup</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>extensionsDup</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>extensionsDup</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>numExt</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>extList</name><index>[<expr><name>numExt</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>extensionsDup</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"GL: Supported extensions count: %i"</literal></expr></argument>, <argument><expr><name>numExt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numExt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>extList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"GL_OES_vertex_array_object"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>glGenVertexArrays</name> <operator>=</operator> <operator>(</operator><name>PFNGLGENVERTEXARRAYSOESPROC</name><operator>)</operator><call><name>eglGetProcAddress</name><argument_list>(<argument><expr><literal type="string">"glGenVertexArraysOES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glBindVertexArray</name> <operator>=</operator> <operator>(</operator><name>PFNGLBINDVERTEXARRAYOESPROC</name><operator>)</operator><call><name>eglGetProcAddress</name><argument_list>(<argument><expr><literal type="string">"glBindVertexArrayOES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>glDeleteVertexArrays</name> <operator>=</operator> <operator>(</operator><name>PFNGLDELETEVERTEXARRAYSOESPROC</name><operator>)</operator><call><name>eglGetProcAddress</name><argument_list>(<argument><expr><literal type="string">"glDeleteVertexArraysOES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>glGenVertexArrays</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>glBindVertexArray</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>glDeleteVertexArrays</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>vao</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>extList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"GL_OES_texture_npot"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texNPOT</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>extList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"GL_OES_texture_float"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texFloat32</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>extList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"GL_OES_depth_texture"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>extList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"GL_WEBGL_depth_texture"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texDepth</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>extList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"GL_OES_depth24"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>maxDepthBits</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>extList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"GL_OES_depth32"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>maxDepthBits</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>extList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"GL_EXT_texture_compression_s3tc"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>extList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"GL_WEBGL_compressed_texture_s3tc"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>extList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"GL_WEBKIT_WEBGL_compressed_texture_s3tc"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompDXT</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>extList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"GL_OES_compressed_ETC1_RGB8_texture"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>extList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"GL_WEBGL_compressed_texture_etc1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompETC1</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>extList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"GL_ARB_ES3_compatibility"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompETC2</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>extList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"GL_IMG_texture_compression_pvrtc"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompPVRT</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>extList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"GL_KHR_texture_compression_astc_hdr"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompASTC</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>extList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"GL_EXT_texture_filter_anisotropic"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texAnisoFilter</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glGetFloatv</name><argument_list>(<argument><expr><literal type="number">0x84FF</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>maxAnisotropicLevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>extList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"GL_EXT_texture_mirror_clamp"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texMirrorClamp</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>extList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"GL_EXT_debug_marker"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>debugMarker</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>extList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>extensionsDup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>vao</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"GL: VAO extension detected, VAO functions initialized successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GL: VAO extension not found, VAO usage not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texNPOT</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"GL: NPOT textures extension detected, full NPOT textures supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GL: NPOT textures extension not found, limited NPOT support (no-mipmaps, no-repeat)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompDXT</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"GL: DXT compressed textures supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompETC1</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"GL: ETC1 compressed textures supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompETC2</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"GL: ETC2/EAC compressed textures supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompPVRT</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"GL: PVRT compressed textures supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompASTC</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"GL: ASTC compressed textures supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texAnisoFilter</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"GL: Anisotropic textures filtering supported (max: %.0fX)"</literal></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>maxAnisotropicLevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texMirrorClamp</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"GL: Mirror clamp wrap texture mode supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>debugMarker</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"GL: Debug Marker supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pixels</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultTextureId</name></name> <operator>=</operator> <call><name>rlLoadTexture</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UNCOMPRESSED_R8G8B8A8</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultTextureId</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"TEXTURE: [ID %i] Default texture loaded successfully"</literal></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultTextureId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"TEXTURE: Failed to load default texture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultShader</name></name> <operator>=</operator> <call><name>LoadShaderDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentShader</name></name> <operator>=</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultShader</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>LoadBuffersDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>transform</name></name> <operator>=</operator> <call><name>MatrixIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name></name> <operator>=</operator> <operator>(</operator><name>DrawCall</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DrawCall</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>MAX_DRAWCALL_REGISTERED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_DRAWCALL_REGISTERED</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>=</operator> <name>RL_QUADS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vertexCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vertexAlignment</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>textureId</name> <operator>=</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultTextureId</name></name></expr>;</expr_stmt>


</block_content>}</block></for>

<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_MATRIX_STACK_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>stack</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>MatrixIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>projection</name></name> <operator>=</operator> <call><name>MatrixIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>modelview</name></name> <operator>=</operator> <call><name>MatrixIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentMatrix</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>modelview</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 




<expr_stmt><expr><call><name>glDepthFunc</name><argument_list>(<argument><expr><name>GL_LEQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>glDisable</name><argument_list>(<argument><expr><name>GL_DEPTH_TEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>glBlendFunc</name><argument_list>(<argument><expr><name>GL_SRC_ALPHA</name></expr></argument>, <argument><expr><name>GL_ONE_MINUS_SRC_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_BLEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<expr_stmt><expr><call><name>glCullFace</name><argument_list>(<argument><expr><name>GL_BACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>glFrontFace</name><argument_list>(<argument><expr><name>GL_CCW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_CULL_FACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>glHint</name><argument_list>(<argument><expr><name>GL_PERSPECTIVE_CORRECTION_HINT</name></expr></argument>, <argument><expr><name>GL_NICEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>glShadeModel</name><argument_list>(<argument><expr><name>GL_SMOOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>glClearColor</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>glClearDepth</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>glClear</name><argument_list>(<argument><expr><name>GL_COLOR_BUFFER_BIT</name> <operator>|</operator> <name>GL_DEPTH_BUFFER_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferWidth</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferHeight</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>shapesTexture</name></name> <operator>=</operator> <call><name>GetTextureDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>shapesTextureRec</name></name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"RLGL: Default state initialized successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlglClose</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>UnloadShaderDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>UnloadBuffersDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>glDeleteTextures</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultTextureId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"TEXTURE: [ID %i] Unloaded default texture data from VRAM (GPU)"</literal></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultTextureId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlglDraw</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vCounter</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>UpdateBuffersDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawBuffersDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>rlGetVersion</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>OPENGL_11</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_21</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>OPENGL_33</name></expr>;</return> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>OPENGL_21</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><name>OPENGL_33</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><name>OPENGL_ES_20</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>rlCheckBufferLimit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>overflow</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vCounter</name> <operator>+</operator> <name>vCount</name><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><name>MAX_BATCH_ELEMENTS</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>overflow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>overflow</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlSetDebugMarker</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>debugMarker</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glInsertEventMarkerEXT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>rlLoadExtensions</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>loader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gladLoadGLLoader</name><argument_list>(<argument><expr><operator>(</operator><name>GLADloadproc</name><operator>)</operator><name>loader</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GLAD: Cannot load OpenGL extensions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"GLAD: OpenGL extensions loaded successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_21</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>GLAD_GL_VERSION_2_1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"GL: OpenGL 2.1 profile supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><name>GLAD_GL_VERSION_3_3</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"GL: OpenGL 3.3 Core profile supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"GL: OpenGL 3.3 Core profile not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>Vector3</name></type> <name>rlUnproject</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>Matrix</name></type> <name>proj</name></decl></parameter>, <parameter><decl><type><name>Matrix</name></type> <name>view</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Matrix</name></type> <name>matViewProj</name> <init>= <expr><call><name>MatrixMultiply</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>proj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>matViewProj</name> <operator>=</operator> <call><name>MatrixInvert</name><argument_list>(<argument><expr><name>matViewProj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Quaternion</name></type> <name>quat</name> <init>= <expr><block>{ <expr><name><name>source</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>source</name><operator>.</operator><name>y</name></name></expr>, <expr><name><name>source</name><operator>.</operator><name>z</name></name></expr>, <expr><literal type="number">1.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>quat</name> <operator>=</operator> <call><name>QuaternionTransform</name><argument_list>(<argument><expr><name>quat</name></expr></argument>, <argument><expr><name>matViewProj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>quat</name><operator>.</operator><name>x</name></name><operator>/</operator><name><name>quat</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>quat</name><operator>.</operator><name>y</name></name><operator>/</operator><name><name>quat</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>quat</name><operator>.</operator><name>z</name></name><operator>/</operator><name><name>quat</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>int</name></type> <name>rlLoadTexture</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mipmapCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>&gt;=</operator> <name>COMPRESSED_DXT1_RGB</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GL: OpenGL 1.1 does not support GPU compressed texture formats"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompDXT</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>format</name> <operator>==</operator> <name>COMPRESSED_DXT1_RGB</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>format</name> <operator>==</operator> <name>COMPRESSED_DXT1_RGBA</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>format</name> <operator>==</operator> <name>COMPRESSED_DXT3_RGBA</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>format</name> <operator>==</operator> <name>COMPRESSED_DXT5_RGBA</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GL: DXT compressed texture format not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompETC1</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>format</name> <operator>==</operator> <name>COMPRESSED_ETC1_RGB</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GL: ETC1 compressed texture format not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompETC2</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>format</name> <operator>==</operator> <name>COMPRESSED_ETC2_RGB</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>format</name> <operator>==</operator> <name>COMPRESSED_ETC2_EAC_RGBA</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GL: ETC2 compressed texture format not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompPVRT</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>format</name> <operator>==</operator> <name>COMPRESSED_PVRT_RGB</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>format</name> <operator>==</operator> <name>COMPRESSED_PVRT_RGBA</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GL: PVRT compressed texture format not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompASTC</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>format</name> <operator>==</operator> <name>COMPRESSED_ASTC_4x4_RGBA</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>format</name> <operator>==</operator> <name>COMPRESSED_ASTC_8x8_RGBA</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GL: ASTC compressed texture format not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>glPixelStorei</name><argument_list>(<argument><expr><name>GL_UNPACK_ALIGNMENT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glGenTextures</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mipWidth</name> <init>= <expr><name>width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mipHeight</name> <init>= <expr><name>height</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mipOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">"TEXTURE: Load texture from data memory address: 0x%x"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mipmapCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mipSize</name> <init>= <expr><call><name>GetPixelDataSize</name><argument_list>(<argument><expr><name>mipWidth</name></expr></argument>, <argument><expr><name>mipHeight</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>glInternalFormat</name></decl>, <decl><type ref="prev"/><name>glFormat</name></decl>, <decl><type ref="prev"/><name>glType</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rlGetGlTextureFormats</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glInternalFormat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glFormat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">"TEXTURE: Load mipmap level %i (%i x %i), size: %i, offset: %i"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>mipWidth</name></expr></argument>, <argument><expr><name>mipHeight</name></expr></argument>, <argument><expr><name>mipSize</name></expr></argument>, <argument><expr><name>mipOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>glInternalFormat</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>&lt;</operator> <name>COMPRESSED_DXT1_RGB</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glTexImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>glInternalFormat</name></expr></argument>, <argument><expr><name>mipWidth</name></expr></argument>, <argument><expr><name>mipHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>glFormat</name></expr></argument>, <argument><expr><name>glType</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>mipOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>glCompressedTexImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>glInternalFormat</name></expr></argument>, <argument><expr><name>mipWidth</name></expr></argument>, <argument><expr><name>mipHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mipSize</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>mipOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>UNCOMPRESSED_GRAYSCALE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GLint</name></type> <name><name>swizzleMask</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>GL_RED</name></expr>, <expr><name>GL_RED</name></expr>, <expr><name>GL_RED</name></expr>, <expr><name>GL_ONE</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glTexParameteriv</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_SWIZZLE_RGBA</name></expr></argument>, <argument><expr><name>swizzleMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <name>UNCOMPRESSED_GRAY_ALPHA</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_21</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GLint</name></type> <name><name>swizzleMask</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>GL_RED</name></expr>, <expr><name>GL_RED</name></expr>, <expr><name>GL_RED</name></expr>, <expr><name>GL_ALPHA</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>GLint</name></type> <name><name>swizzleMask</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>GL_RED</name></expr>, <expr><name>GL_RED</name></expr>, <expr><name>GL_RED</name></expr>, <expr><name>GL_GREEN</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>glTexParameteriv</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_SWIZZLE_RGBA</name></expr></argument>, <argument><expr><name>swizzleMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mipWidth</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mipHeight</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mipOffset</name> <operator>+=</operator> <name>mipSize</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>mipWidth</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mipWidth</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mipHeight</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mipHeight</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texNPOT</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_S</name></expr></argument>, <argument><expr><name>GL_REPEAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_T</name></expr></argument>, <argument><expr><name>GL_REPEAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_S</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_T</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_S</name></expr></argument>, <argument><expr><name>GL_REPEAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_T</name></expr></argument>, <argument><expr><name>GL_REPEAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MAG_FILTER</name></expr></argument>, <argument><expr><name>GL_NEAREST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MIN_FILTER</name></expr></argument>, <argument><expr><name>GL_NEAREST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>mipmapCount</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MAG_FILTER</name></expr></argument>, <argument><expr><name>GL_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MIN_FILTER</name></expr></argument>, <argument><expr><name>GL_LINEAR_MIPMAP_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"TEXTURE: [ID %i] Texture created successfully (%ix%i - %i mipmaps)"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>mipmapCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"TEXTURE: Failed to load texture"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>unsigned</name> <name>int</name></type> <name>rlLoadTextureDepth</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>useRenderBuffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>glInternalFormat</name> <init>= <expr><name>GL_DEPTH_COMPONENT16</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bits</name> <operator>!=</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>bits</name> <operator>!=</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>bits</name> <operator>!=</operator> <literal type="number">32</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>glInternalFormat</name> <operator>=</operator> <name>GL_DEPTH_COMPONENT24</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>maxDepthBits</name></name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>glInternalFormat</name> <operator>=</operator> <name>GL_DEPTH_COMPONENT24_OES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>glInternalFormat</name> <operator>=</operator> <name>GL_DEPTH_COMPONENT32</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>maxDepthBits</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>glInternalFormat</name> <operator>=</operator> <name>GL_DEPTH_COMPONENT32_OES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>useRenderBuffer</name> <operator>&amp;&amp;</operator> <name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texDepth</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glGenTextures</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>glInternalFormat</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GL_DEPTH_COMPONENT</name></expr></argument>, <argument><expr><name>GL_UNSIGNED_INT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MIN_FILTER</name></expr></argument>, <argument><expr><name>GL_NEAREST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MAG_FILTER</name></expr></argument>, <argument><expr><name>GL_NEAREST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_S</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_T</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><call><name>glGenRenderbuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindRenderbuffer</name><argument_list>(<argument><expr><name>GL_RENDERBUFFER</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glRenderbufferStorage</name><argument_list>(<argument><expr><name>GL_RENDERBUFFER</name></expr></argument>, <argument><expr><name>glInternalFormat</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindRenderbuffer</name><argument_list>(<argument><expr><name>GL_RENDERBUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>unsigned</name> <name>int</name></type> <name>rlLoadTextureCubemap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cubemapId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dataSize</name> <init>= <expr><call><name>GetPixelDataSize</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glGenTextures</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cubemapId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name>cubemapId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>glInternalFormat</name></decl>, <decl><type ref="prev"/><name>glFormat</name></decl>, <decl><type ref="prev"/><name>glType</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rlGetGlTextureFormats</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glInternalFormat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glFormat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>glInternalFormat</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>&lt;</operator> <name>COMPRESSED_DXT1_RGB</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glTexImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP_POSITIVE_X</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>glInternalFormat</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>glFormat</name></expr></argument>, <argument><expr><name>glType</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>i</name><operator>*</operator><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>glCompressedTexImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP_POSITIVE_X</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>glInternalFormat</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>i</name><operator>*</operator><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>UNCOMPRESSED_GRAYSCALE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>GLint</name></type> <name><name>swizzleMask</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>GL_RED</name></expr>, <expr><name>GL_RED</name></expr>, <expr><name>GL_RED</name></expr>, <expr><name>GL_ONE</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glTexParameteriv</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name>GL_TEXTURE_SWIZZLE_RGBA</name></expr></argument>, <argument><expr><name>swizzleMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <name>UNCOMPRESSED_GRAY_ALPHA</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_21</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GLint</name></type> <name><name>swizzleMask</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>GL_RED</name></expr>, <expr><name>GL_RED</name></expr>, <expr><name>GL_RED</name></expr>, <expr><name>GL_ALPHA</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>GLint</name></type> <name><name>swizzleMask</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>GL_RED</name></expr>, <expr><name>GL_RED</name></expr>, <expr><name>GL_RED</name></expr>, <expr><name>GL_GREEN</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>glTexParameteriv</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name>GL_TEXTURE_SWIZZLE_RGBA</name></expr></argument>, <argument><expr><name>swizzleMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MIN_FILTER</name></expr></argument>, <argument><expr><name>GL_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MAG_FILTER</name></expr></argument>, <argument><expr><name>GL_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_S</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_T</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_R</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>cubemapId</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>rlUpdateTexture</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>glInternalFormat</name></decl>, <decl><type ref="prev"/><name>glFormat</name></decl>, <decl><type ref="prev"/><name>glType</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rlGetGlTextureFormats</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glInternalFormat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glFormat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>glInternalFormat</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>format</name> <operator>&lt;</operator> <name>COMPRESSED_DXT1_RGB</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glTexSubImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>glFormat</name></expr></argument>, <argument><expr><name>glType</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"TEXTURE: [ID %i] Failed to update for current texture format (%i)"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlGetGlTextureFormats</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>glInternalFormat</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>glFormat</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>glType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>glFormat</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>glType</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>format</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_21</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>UNCOMPRESSED_GRAYSCALE</name></expr>:</case> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_LUMINANCE</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glFormat</name> <operator>=</operator> <name>GL_LUMINANCE</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glType</name> <operator>=</operator> <name>GL_UNSIGNED_BYTE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_GRAY_ALPHA</name></expr>:</case> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_LUMINANCE_ALPHA</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glFormat</name> <operator>=</operator> <name>GL_LUMINANCE_ALPHA</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glType</name> <operator>=</operator> <name>GL_UNSIGNED_BYTE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R5G6B5</name></expr>:</case> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_RGB</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glFormat</name> <operator>=</operator> <name>GL_RGB</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glType</name> <operator>=</operator> <name>GL_UNSIGNED_SHORT_5_6_5</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R8G8B8</name></expr>:</case> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_RGB</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glFormat</name> <operator>=</operator> <name>GL_RGB</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glType</name> <operator>=</operator> <name>GL_UNSIGNED_BYTE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R5G5B5A1</name></expr>:</case> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_RGBA</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glFormat</name> <operator>=</operator> <name>GL_RGBA</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glType</name> <operator>=</operator> <name>GL_UNSIGNED_SHORT_5_5_5_1</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R4G4B4A4</name></expr>:</case> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_RGBA</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glFormat</name> <operator>=</operator> <name>GL_RGBA</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glType</name> <operator>=</operator> <name>GL_UNSIGNED_SHORT_4_4_4_4</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R8G8B8A8</name></expr>:</case> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_RGBA</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glFormat</name> <operator>=</operator> <name>GL_RGBA</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glType</name> <operator>=</operator> <name>GL_UNSIGNED_BYTE</name></expr>;</expr_stmt> <break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>UNCOMPRESSED_R32</name></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texFloat32</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_LUMINANCE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <expr_stmt><expr><operator>*</operator><name>glFormat</name> <operator>=</operator> <name>GL_LUMINANCE</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glType</name> <operator>=</operator> <name>GL_FLOAT</name></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><name>UNCOMPRESSED_R32G32B32</name></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texFloat32</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_RGB</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <expr_stmt><expr><operator>*</operator><name>glFormat</name> <operator>=</operator> <name>GL_RGB</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glType</name> <operator>=</operator> <name>GL_FLOAT</name></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><name>UNCOMPRESSED_R32G32B32A32</name></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texFloat32</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_RGBA</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <expr_stmt><expr><operator>*</operator><name>glFormat</name> <operator>=</operator> <name>GL_RGBA</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glType</name> <operator>=</operator> <name>GL_FLOAT</name></expr>;</expr_stmt> <break>break;</break> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<case>case <expr><name>UNCOMPRESSED_GRAYSCALE</name></expr>:</case> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_R8</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glFormat</name> <operator>=</operator> <name>GL_RED</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glType</name> <operator>=</operator> <name>GL_UNSIGNED_BYTE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_GRAY_ALPHA</name></expr>:</case> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_RG8</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glFormat</name> <operator>=</operator> <name>GL_RG</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glType</name> <operator>=</operator> <name>GL_UNSIGNED_BYTE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R5G6B5</name></expr>:</case> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_RGB565</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glFormat</name> <operator>=</operator> <name>GL_RGB</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glType</name> <operator>=</operator> <name>GL_UNSIGNED_SHORT_5_6_5</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R8G8B8</name></expr>:</case> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_RGB8</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glFormat</name> <operator>=</operator> <name>GL_RGB</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glType</name> <operator>=</operator> <name>GL_UNSIGNED_BYTE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R5G5B5A1</name></expr>:</case> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_RGB5_A1</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glFormat</name> <operator>=</operator> <name>GL_RGBA</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glType</name> <operator>=</operator> <name>GL_UNSIGNED_SHORT_5_5_5_1</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R4G4B4A4</name></expr>:</case> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_RGBA4</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glFormat</name> <operator>=</operator> <name>GL_RGBA</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glType</name> <operator>=</operator> <name>GL_UNSIGNED_SHORT_4_4_4_4</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R8G8B8A8</name></expr>:</case> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_RGBA8</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glFormat</name> <operator>=</operator> <name>GL_RGBA</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glType</name> <operator>=</operator> <name>GL_UNSIGNED_BYTE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R32</name></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texFloat32</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_R32F</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <expr_stmt><expr><operator>*</operator><name>glFormat</name> <operator>=</operator> <name>GL_RED</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glType</name> <operator>=</operator> <name>GL_FLOAT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R32G32B32</name></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texFloat32</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_RGB32F</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <expr_stmt><expr><operator>*</operator><name>glFormat</name> <operator>=</operator> <name>GL_RGB</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glType</name> <operator>=</operator> <name>GL_FLOAT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R32G32B32A32</name></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texFloat32</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_RGBA32F</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <expr_stmt><expr><operator>*</operator><name>glFormat</name> <operator>=</operator> <name>GL_RGBA</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>glType</name> <operator>=</operator> <name>GL_FLOAT</name></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>COMPRESSED_DXT1_RGB</name></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompDXT</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_COMPRESSED_RGB_S3TC_DXT1_EXT</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <break>break;</break>
<case>case <expr><name>COMPRESSED_DXT1_RGBA</name></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompDXT</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_COMPRESSED_RGBA_S3TC_DXT1_EXT</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <break>break;</break>
<case>case <expr><name>COMPRESSED_DXT3_RGBA</name></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompDXT</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_COMPRESSED_RGBA_S3TC_DXT3_EXT</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <break>break;</break>
<case>case <expr><name>COMPRESSED_DXT5_RGBA</name></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompDXT</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_COMPRESSED_RGBA_S3TC_DXT5_EXT</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <break>break;</break>
<case>case <expr><name>COMPRESSED_ETC1_RGB</name></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompETC1</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_ETC1_RGB8_OES</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <break>break;</break> 
<case>case <expr><name>COMPRESSED_ETC2_RGB</name></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompETC2</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_COMPRESSED_RGB8_ETC2</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <break>break;</break> 
<case>case <expr><name>COMPRESSED_ETC2_EAC_RGBA</name></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompETC2</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_COMPRESSED_RGBA8_ETC2_EAC</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <break>break;</break> 
<case>case <expr><name>COMPRESSED_PVRT_RGB</name></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompPVRT</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <break>break;</break> 
<case>case <expr><name>COMPRESSED_PVRT_RGBA</name></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompPVRT</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <break>break;</break> 
<case>case <expr><name>COMPRESSED_ASTC_4x4_RGBA</name></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompASTC</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_COMPRESSED_RGBA_ASTC_4x4_KHR</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <break>break;</break> 
<case>case <expr><name>COMPRESSED_ASTC_8x8_RGBA</name></expr>:</case> <if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texCompASTC</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>glInternalFormat</name> <operator>=</operator> <name>GL_COMPRESSED_RGBA_ASTC_8x8_KHR</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <break>break;</break> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"TEXTURE: Current format not supported (%i)"</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlUnloadTexture</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glDeleteTextures</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>RenderTexture2D</name></type> <name>rlLoadRenderTexture</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depthBits</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>useDepthTexture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RenderTexture2D</name></type> <name>target</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>useDepthTexture</name> <operator>&amp;&amp;</operator> <name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texDepth</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>target</name><operator>.</operator><name>depthTexture</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>glGenFramebuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>target</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name><name>target</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>format</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>format</name> <operator>&lt;</operator> <name>COMPRESSED_DXT1_RGB</name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>target</name><operator>.</operator><name>texture</name><operator>.</operator><name>id</name></name> <operator>=</operator> <call><name>rlLoadTexture</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>target</name><operator>.</operator><name>texture</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>target</name><operator>.</operator><name>texture</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>target</name><operator>.</operator><name>texture</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>target</name><operator>.</operator><name>texture</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>depthBits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>target</name><operator>.</operator><name>depth</name><operator>.</operator><name>id</name></name> <operator>=</operator> <call><name>rlLoadTextureDepth</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>depthBits</name></expr></argument>, <argument><expr><operator>!</operator><name>useDepthTexture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>target</name><operator>.</operator><name>depth</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>target</name><operator>.</operator><name>depth</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>target</name><operator>.</operator><name>depth</name><operator>.</operator><name>format</name></name> <operator>=</operator> <literal type="number">19</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>target</name><operator>.</operator><name>depth</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>rlRenderTextureAttach</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name><name>target</name><operator>.</operator><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlRenderTextureAttach</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name><name>target</name><operator>.</operator><name>depth</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 




<if_stmt><if>if <condition>(<expr><call><name>rlRenderTextureComplete</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"FBO: [ID %i] Framebuffer object created successfully"</literal></expr></argument>, <argument><expr><name><name>target</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>target</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>rlRenderTextureAttach</name><parameter_list>(<parameter><decl><type><name>RenderTexture2D</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attachType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name><name>target</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>attachType</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glFramebufferTexture2D</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>GL_COLOR_ATTACHMENT0</name></expr></argument>, <argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>attachType</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>.</operator><name>depthTexture</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glFramebufferTexture2D</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>GL_DEPTH_ATTACHMENT</name></expr></argument>, <argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>glFramebufferRenderbuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>GL_DEPTH_ATTACHMENT</name></expr></argument>, <argument><expr><name>GL_RENDERBUFFER</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>rlRenderTextureComplete</name><parameter_list>(<parameter><decl><type><name>RenderTexture</name></type> <name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name><name>target</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GLenum</name></type> <name>status</name> <init>= <expr><call><name>glCheckFramebufferStatus</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>GL_FRAMEBUFFER_COMPLETE</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name>status</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>GL_FRAMEBUFFER_UNSUPPORTED</name></expr>:</case> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FBO: [ID %i] Framebuffer is unsupported"</literal></expr></argument>, <argument><expr><name><name>target</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT</name></expr>:</case> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FBO: [ID %i] Framebuffer has incomplete attachment"</literal></expr></argument>, <argument><expr><name><name>target</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS</name></expr>:</case> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FBO: [ID %i] Framebuffer has incomplete dimensions"</literal></expr></argument>, <argument><expr><name><name>target</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT</name></expr>:</case> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FBO: [ID %i] Framebuffer has a missing attachment"</literal></expr></argument>, <argument><expr><name><name>target</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>status</name> <operator>==</operator> <name>GL_FRAMEBUFFER_COMPLETE</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlGenerateMipmaps</name><parameter_list>(<parameter><decl><type><name>Texture2D</name> <modifier>*</modifier></type><name>texture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>texture</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>texIsPOT</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>texture</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>texture</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>texture</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>texture</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>texture</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>texture</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>texIsPOT</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>texIsPOT</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>texture</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>UNCOMPRESSED_R8G8B8A8</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>rlReadTexturePixels</name><argument_list>(<argument><expr><operator>*</operator><name>texture</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>mipmapCount</name> <init>= <expr><call><name>GenerateMipmaps</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>texture</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>texture</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>texture</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><name><name>texture</name><operator>-&gt;</operator><name>height</name></name><operator>*</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mipWidth</name> <init>= <expr><name><name>texture</name><operator>-&gt;</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mipHeight</name> <init>= <expr><name><name>texture</name><operator>-&gt;</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>level</name> <operator>&lt;</operator> <name>mipmapCount</name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>glTexImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>GL_RGBA8</name></expr></argument>, <argument><expr><name>mipWidth</name></expr></argument>, <argument><expr><name>mipHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GL_RGBA</name></expr></argument>, <argument><expr><name>GL_UNSIGNED_BYTE</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>mipWidth</name><operator>*</operator><name>mipHeight</name><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mipWidth</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mipHeight</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>texture</name><operator>-&gt;</operator><name>mipmaps</name></name> <operator>=</operator> <name>mipmapCount</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"TEXTURE: [ID %i] Mipmaps generated manually on CPU side, total: %i"</literal></expr></argument>, <argument><expr><name><name>texture</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>texture</name><operator>-&gt;</operator><name>mipmaps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"TEXTURE: [ID %i] Failed to generate mipmaps for provided texture format"</literal></expr></argument>, <argument><expr><name><name>texture</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>texIsPOT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texNPOT</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>glGenerateMipmap</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MAG_FILTER</name></expr></argument>, <argument><expr><name>GL_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MIN_FILTER</name></expr></argument>, <argument><expr><name>GL_LINEAR_MIPMAP_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)&lt;(b))?(a):(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)&gt;(b))?(a):(b))</cpp:value></cpp:define>

<expr_stmt><expr><name><name>texture</name><operator>-&gt;</operator><name>mipmaps</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>floor</name><argument_list>(<argument><expr><call><name>log</name><argument_list>(<argument><expr><call><name>MAX</name><argument_list>(<argument><expr><name><name>texture</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>texture</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>/</operator><call><name>log</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"TEXTURE: [ID %i] Mipmaps generated automatically, total: %i"</literal></expr></argument>, <argument><expr><name><name>texture</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>texture</name><operator>-&gt;</operator><name>mipmaps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"TEXTURE: [ID %i] Failed to generate mipmaps"</literal></expr></argument>, <argument><expr><name><name>texture</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlLoadMesh</name><parameter_list>(<parameter><decl><type><name>Mesh</name> <modifier>*</modifier></type><name>mesh</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dynamic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mesh</name><operator>-&gt;</operator><name>vaoId</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"VAO: [ID %i] Trying to re-load an already loaded mesh"</literal></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>vaoId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>vaoId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>vboId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>vboId</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>vboId</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>vboId</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>vboId</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>vboId</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>vboId</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>drawHint</name> <init>= <expr><name>GL_STATIC_DRAW</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dynamic</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>drawHint</name> <operator>=</operator> <name>GL_DYNAMIC_DRAW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>vao</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>glGenVertexArrays</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mesh</name><operator>-&gt;</operator><name>vaoId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>vaoId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>glGenBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mesh</name><operator>-&gt;</operator><name>vboId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>vboId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">3</literal><operator>*</operator><name><name>mesh</name><operator>-&gt;</operator><name>vertexCount</name></name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>vertices</name></name></expr></argument>, <argument><expr><name>drawHint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glGenBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mesh</name><operator>-&gt;</operator><name>vboId</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>vboId</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal><operator>*</operator><name><name>mesh</name><operator>-&gt;</operator><name>vertexCount</name></name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>texcoords</name></name></expr></argument>, <argument><expr><name>drawHint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>mesh</name><operator>-&gt;</operator><name>normals</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glGenBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mesh</name><operator>-&gt;</operator><name>vboId</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>vboId</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">3</literal><operator>*</operator><name><name>mesh</name><operator>-&gt;</operator><name>vertexCount</name></name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>normals</name></name></expr></argument>, <argument><expr><name>drawHint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>glVertexAttrib3f</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glDisableVertexAttribArray</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>mesh</name><operator>-&gt;</operator><name>colors</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glGenBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mesh</name><operator>-&gt;</operator><name>vboId</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>vboId</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><literal type="number">4</literal><operator>*</operator><name><name>mesh</name><operator>-&gt;</operator><name>vertexCount</name></name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>colors</name></name></expr></argument>, <argument><expr><name>drawHint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>GL_UNSIGNED_BYTE</name></expr></argument>, <argument><expr><name>GL_TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>glVertexAttrib4f</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glDisableVertexAttribArray</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>mesh</name><operator>-&gt;</operator><name>tangents</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glGenBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mesh</name><operator>-&gt;</operator><name>vboId</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>vboId</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal><operator>*</operator><name><name>mesh</name><operator>-&gt;</operator><name>vertexCount</name></name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>tangents</name></name></expr></argument>, <argument><expr><name>drawHint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>glVertexAttrib4f</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glDisableVertexAttribArray</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>mesh</name><operator>-&gt;</operator><name>texcoords2</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glGenBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mesh</name><operator>-&gt;</operator><name>vboId</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>vboId</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal><operator>*</operator><name><name>mesh</name><operator>-&gt;</operator><name>vertexCount</name></name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>texcoords2</name></name></expr></argument>, <argument><expr><name>drawHint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>glVertexAttrib2f</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glDisableVertexAttribArray</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mesh</name><operator>-&gt;</operator><name>indices</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glGenBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mesh</name><operator>-&gt;</operator><name>vboId</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>vboId</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><operator>*</operator><name><name>mesh</name><operator>-&gt;</operator><name>triangleCount</name></name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>indices</name></name></expr></argument>, <argument><expr><name>drawHint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>vao</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mesh</name><operator>-&gt;</operator><name>vaoId</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"VAO: [ID %i] Mesh uploaded successfully to VRAM (GPU)"</literal></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>vaoId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"VAO: Failed to load mesh to VRAM (GPU)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"VBO: Mesh uploaded successfully to VRAM (GPU)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>int</name></type> <name>rlLoadAttribBuffer</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>vaoId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shaderLoc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dynamic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>drawHint</name> <init>= <expr><name>GL_STATIC_DRAW</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dynamic</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>drawHint</name> <operator>=</operator> <name>GL_DYNAMIC_DRAW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>vao</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><name>vaoId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glGenBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>drawHint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name>shaderLoc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name>shaderLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>vao</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlUpdateMesh</name><parameter_list>(<parameter><decl><type><name>Mesh</name></type> <name>mesh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rlUpdateMeshAt</name><argument_list>(<argument><expr><name>mesh</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>rlUpdateMeshAt</name><parameter_list>(<parameter><decl><type><name>Mesh</name></type> <name>mesh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>vao</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vaoId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>buffer</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<block>{<block_content>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>vboId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>num</name> <operator>&gt;=</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">3</literal><operator>*</operator><name>num</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>vertices</name></name></expr></argument>, <argument><expr><name>GL_DYNAMIC_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>index</name> <operator>+</operator> <name>num</name> <operator>&gt;=</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBufferSubData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">3</literal><operator>*</operator><name>index</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">3</literal><operator>*</operator><name>num</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>vertices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> 
<block>{<block_content>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>vboId</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>num</name> <operator>&gt;=</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal><operator>*</operator><name>num</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name></name></expr></argument>, <argument><expr><name>GL_DYNAMIC_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>index</name> <operator>+</operator> <name>num</name> <operator>&gt;=</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBufferSubData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal><operator>*</operator><name>index</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal><operator>*</operator><name>num</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> 
<block>{<block_content>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>vboId</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>num</name> <operator>&gt;=</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">3</literal><operator>*</operator><name>num</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>normals</name></name></expr></argument>, <argument><expr><name>GL_DYNAMIC_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>index</name> <operator>+</operator> <name>num</name> <operator>&gt;=</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBufferSubData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">3</literal><operator>*</operator><name>index</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">3</literal><operator>*</operator><name>num</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>normals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> 
<block>{<block_content>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>vboId</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>num</name> <operator>&gt;=</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal><operator>*</operator><name>num</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>colors</name></name></expr></argument>, <argument><expr><name>GL_DYNAMIC_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>index</name> <operator>+</operator> <name>num</name> <operator>&gt;=</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBufferSubData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><literal type="number">4</literal><operator>*</operator><name>index</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><literal type="number">4</literal><operator>*</operator><name>num</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>colors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> 
<block>{<block_content>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>vboId</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>num</name> <operator>&gt;=</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal><operator>*</operator><name>num</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>tangents</name></name></expr></argument>, <argument><expr><name>GL_DYNAMIC_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>index</name> <operator>+</operator> <name>num</name> <operator>&gt;=</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBufferSubData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal><operator>*</operator><name>index</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal><operator>*</operator><name>num</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>tangents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case> 
<block>{<block_content>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>vboId</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>num</name> <operator>&gt;=</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal><operator>*</operator><name>num</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>texcoords2</name></name></expr></argument>, <argument><expr><name>GL_DYNAMIC_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>index</name> <operator>+</operator> <name>num</name> <operator>&gt;=</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBufferSubData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal><operator>*</operator><name>index</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal><operator>*</operator><name>num</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>texcoords2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block> <break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case> 
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>indices</name> <init>= <expr><name><name>mesh</name><operator>.</operator><name>indices</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>vboId</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>num</name> <operator>&gt;=</operator> <name><name>mesh</name><operator>.</operator><name>triangleCount</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>indices</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>num</name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>indices</name></expr></argument>, <argument><expr><name>GL_DYNAMIC_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>index</name> <operator>+</operator> <name>num</name> <operator>&gt;=</operator> <name><name>mesh</name><operator>.</operator><name>triangleCount</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glBufferSubData</name><argument_list>(<argument><expr><name>GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>indices</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>index</name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>indices</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>num</name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>indices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>vao</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlDrawMesh</name><parameter_list>(<parameter><decl><type><name>Mesh</name></type> <name>mesh</name></decl></parameter>, <parameter><decl><type><name>Material</name></type> <name>material</name></decl></parameter>, <parameter><decl><type><name>Matrix</name></type> <name>transform</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>material</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glEnableClientState</name><argument_list>(<argument><expr><name>GL_VERTEX_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>glEnableClientState</name><argument_list>(<argument><expr><name>GL_TEXTURE_COORD_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>mesh</name><operator>.</operator><name>normals</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glEnableClientState</name><argument_list>(<argument><expr><name>GL_NORMAL_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>mesh</name><operator>.</operator><name>colors</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glEnableClientState</name><argument_list>(<argument><expr><name>GL_COLOR_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>glVertexPointer</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>vertices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>glTexCoordPointer</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>mesh</name><operator>.</operator><name>normals</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glNormalPointer</name><argument_list>(<argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>normals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>mesh</name><operator>.</operator><name>colors</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glColorPointer</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>GL_UNSIGNED_BYTE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>colors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlMultMatrixf</name><argument_list>(<argument><expr><call><name>MatrixToFloat</name><argument_list>(<argument><expr><name>transform</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>material</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>material</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>material</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mesh</name><operator>.</operator><name>indices</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glDrawElements</name><argument_list>(<argument><expr><name>GL_TRIANGLES</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>triangleCount</name></name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>GL_UNSIGNED_SHORT</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>indices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>glDrawArrays</name><argument_list>(<argument><expr><name>GL_TRIANGLES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDisableClientState</name><argument_list>(<argument><expr><name>GL_VERTEX_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>glDisableClientState</name><argument_list>(<argument><expr><name>GL_TEXTURE_COORD_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>mesh</name><operator>.</operator><name>normals</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glDisableClientState</name><argument_list>(<argument><expr><name>GL_NORMAL_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>mesh</name><operator>.</operator><name>colors</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glDisableClientState</name><argument_list>(<argument><expr><name>GL_NORMAL_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>glDisable</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>glUseProgram</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MATRIX_MODEL</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SetShaderValueMatrix</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>shader</name></name></expr></argument>, <argument><expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MATRIX_MODEL</name></expr>]</index></name></expr></argument>, <argument><expr><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_COLOR_DIFFUSE</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glUniform4f</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_COLOR_DIFFUSE</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>material</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>r</name></name><operator>/</operator><literal type="number">255.0f</literal></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>material</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>g</name></name><operator>/</operator><literal type="number">255.0f</literal></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>material</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>b</name></name><operator>/</operator><literal type="number">255.0f</literal></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>material</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>a</name></name><operator>/</operator><literal type="number">255.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_COLOR_SPECULAR</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>glUniform4f</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_COLOR_SPECULAR</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>material</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_SPECULAR</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>r</name></name><operator>/</operator><literal type="number">255.0f</literal></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>material</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_SPECULAR</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>g</name></name><operator>/</operator><literal type="number">255.0f</literal></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>material</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_SPECULAR</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>b</name></name><operator>/</operator><literal type="number">255.0f</literal></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>material</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_SPECULAR</name></expr>]</index></name><operator>.</operator><name><name>color</name><operator>.</operator><name>a</name></name><operator>/</operator><literal type="number">255.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MATRIX_VIEW</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SetShaderValueMatrix</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>shader</name></name></expr></argument>, <argument><expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MATRIX_VIEW</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>modelview</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MATRIX_PROJECTION</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SetShaderValueMatrix</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>shader</name></name></expr></argument>, <argument><expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MATRIX_PROJECTION</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>projection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<decl_stmt><decl><type><name>Matrix</name></type> <name>matView</name> <init>= <expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>modelview</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Matrix</name></type> <name>matProjection</name> <init>= <expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>projection</name></name></expr></init></decl>;</decl_stmt> 







<decl_stmt><decl><type><name>Matrix</name></type> <name>matModelView</name> <init>= <expr><call><name>MatrixMultiply</name><argument_list>(<argument><expr><name>transform</name></expr></argument>, <argument><expr><call><name>MatrixMultiply</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>transform</name></name></expr></argument>, <argument><expr><name>matView</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_MATERIAL_MAPS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>material</name><operator>.</operator><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>texture</name><operator>.</operator><name>id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glActiveTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE0</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>==</operator> <name>MAP_IRRADIANCE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name> <operator>==</operator> <name>MAP_PREFILTER</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name> <operator>==</operator> <name>MAP_CUBEMAP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name><name>material</name><operator>.</operator><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>material</name><operator>.</operator><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>glUniform1i</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MAP_DIFFUSE</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>vao</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vaoId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>vboId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_POSITION</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_POSITION</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>vboId</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_TEXCOORD01</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_TEXCOORD01</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_NORMAL</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>vboId</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_NORMAL</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_NORMAL</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_COLOR</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mesh</name><operator>.</operator><name>vboId</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>vboId</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_COLOR</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>GL_UNSIGNED_BYTE</name></expr></argument>, <argument><expr><name>GL_TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_COLOR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><call><name>glVertexAttrib4f</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_COLOR</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glDisableVertexAttribArray</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_COLOR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_TANGENT</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>vboId</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_TANGENT</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_TANGENT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_TEXCOORD02</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>vboId</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_TEXCOORD02</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_TEXCOORD02</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mesh</name><operator>.</operator><name>indices</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>vboId</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eyesCount</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_VR_SIMULATOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>stereoRender</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>eyesCount</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><decl><type><name>int</name></type> <name>eye</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>eye</name> <operator>&lt;</operator> <name>eyesCount</name></expr>;</condition> <incr><expr><name>eye</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>eyesCount</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>modelview</name></name> <operator>=</operator> <name>matModelView</name></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_VR_SIMULATOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>SetStereoView</name><argument_list>(<argument><expr><name>eye</name></expr></argument>, <argument><expr><name>matProjection</name></expr></argument>, <argument><expr><name>matModelView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>Matrix</name></type> <name>matMVP</name> <init>= <expr><call><name>MatrixMultiply</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>modelview</name></name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>projection</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 


<expr_stmt><expr><call><name>glUniformMatrix4fv</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MATRIX_MVP</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><call><name>MatrixToFloat</name><argument_list>(<argument><expr><name>matMVP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>mesh</name><operator>.</operator><name>indices</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glDrawElements</name><argument_list>(<argument><expr><name>GL_TRIANGLES</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>triangleCount</name></name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>GL_UNSIGNED_SHORT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>glDrawArrays</name><argument_list>(<argument><expr><name>GL_TRIANGLES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_MATERIAL_MAPS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>glActiveTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE0</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>==</operator> <name>MAP_IRRADIANCE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name> <operator>==</operator> <name>MAP_PREFILTER</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name> <operator>==</operator> <name>MAP_CUBEMAP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>vao</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mesh</name><operator>.</operator><name>indices</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>glUseProgram</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>projection</name></name> <operator>=</operator> <name>matProjection</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>modelview</name></name> <operator>=</operator> <name>matView</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>rlUnloadMesh</name><parameter_list>(<parameter><decl><type><name>Mesh</name></type> <name>mesh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vertices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>normals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>colors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>tangents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>texcoords2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>indices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>animVertices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>animNormals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>boneWeights</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>boneIds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlDeleteBuffers</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vboId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlDeleteBuffers</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vboId</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlDeleteBuffers</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vboId</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlDeleteBuffers</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vboId</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlDeleteBuffers</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vboId</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlDeleteBuffers</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vboId</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlDeleteBuffers</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vboId</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlDeleteVertexArrays</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vaoId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>rlReadScreenPixels</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>screenData</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name>width</name><operator>*</operator><name>height</name><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>glReadPixels</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>GL_RGBA</name></expr></argument>, <argument><expr><name>GL_UNSIGNED_BYTE</name></expr></argument>, <argument><expr><name>screenData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>imgData</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>width</name><operator>*</operator><name>height</name><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>y</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>width</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>imgData</name><index>[<expr><operator>(</operator><operator>(</operator><name>height</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>y</name><operator>)</operator><operator>*</operator><name>width</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name><name>screenData</name><index>[<expr><operator>(</operator><name>y</name><operator>*</operator><name>width</name><operator>*</operator><literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt> 



<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>imgData</name><index>[<expr><operator>(</operator><operator>(</operator><name>height</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>y</name><operator>)</operator><operator>*</operator><name>width</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>screenData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>imgData</name></expr>;</return> 
</block_content>}</block></function>


<function><type><name>void</name> <modifier>*</modifier></type><name>rlReadTexturePixels</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>












<expr_stmt><expr><call><name>glPixelStorei</name><argument_list>(<argument><expr><name>GL_PACK_ALIGNMENT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>glInternalFormat</name></decl>, <decl><type ref="prev"/><name>glFormat</name></decl>, <decl><type ref="prev"/><name>glType</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rlGetGlTextureFormats</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glInternalFormat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glFormat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>glType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name> <init>= <expr><call><name>GetPixelDataSize</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>texture</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>texture</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>glInternalFormat</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>texture</name><operator>.</operator><name>format</name></name> <operator>&lt;</operator> <name>COMPRESSED_DXT1_RGB</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pixels</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glGetTexImage</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>glFormat</name></expr></argument>, <argument><expr><name>glType</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"TEXTURE: [ID %i] Data retrieval not suported for pixel format (%i)"</literal></expr></argument>, <argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>texture</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>







<decl_stmt><decl><type><name>RenderTexture2D</name></type> <name>fbo</name> <init>= <expr><call><name>rlLoadRenderTexture</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>texture</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>UNCOMPRESSED_R8G8B8A8</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name><name>fbo</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>glFramebufferTexture2D</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>GL_COLOR_ATTACHMENT0</name></expr></argument>, <argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>pixels</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><call><name>GetPixelDataSize</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>texture</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>UNCOMPRESSED_R8G8B8A8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glReadPixels</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>texture</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>texture</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>GL_RGBA</name></expr></argument>, <argument><expr><name>GL_UNSIGNED_BYTE</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glFramebufferTexture2D</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>GL_COLOR_ATTACHMENT0</name></expr></argument>, <argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>fbo</name><operator>.</operator><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlDeleteRenderTextures</name><argument_list>(<argument><expr><name>fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>pixels</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>Texture2D</name></type> <name>GetTextureDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Texture2D</name></type> <name>texture</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>texture</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultTextureId</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texture</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texture</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texture</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>texture</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R8G8B8A8</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>texture</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Texture2D</name></type> <name>GetShapesTexture</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>shapesTexture</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Rectangle</name></type> <name>GetShapesTextureRec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>shapesTextureRec</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetShapesTexture</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>shapesTexture</name></name> <operator>=</operator> <name>texture</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>shapesTextureRec</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Shader</name></type> <name>GetShaderDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultShader</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>Shader</name></type> <name>shader</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>shader</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><name>Shader</name></type> <name>LoadShader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vsFileName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fsFileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Shader</name></type> <name>shader</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vShaderStr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fShaderStr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vsFileName</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>vShaderStr</name> <operator>=</operator> <call><name>LoadFileText</name><argument_list>(<argument><expr><name>vsFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fsFileName</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fShaderStr</name> <operator>=</operator> <call><name>LoadFileText</name><argument_list>(<argument><expr><name>fsFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>shader</name> <operator>=</operator> <call><name>LoadShaderCode</name><argument_list>(<argument><expr><name>vShaderStr</name></expr></argument>, <argument><expr><name>fShaderStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vShaderStr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>vShaderStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fShaderStr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>fShaderStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>shader</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>Shader</name></type> <name>LoadShaderCode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vsCode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fsCode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Shader</name></type> <name>shader</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>shader</name><operator>.</operator><name>locs</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name>MAX_SHADER_LOCATIONS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_SHADER_LOCATIONS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>vertexShaderId</name> <init>= <expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultVShaderId</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fragmentShaderId</name> <init>= <expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultFShaderId</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vsCode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>vertexShaderId</name> <operator>=</operator> <call><name>CompileShader</name><argument_list>(<argument><expr><name>vsCode</name></expr></argument>, <argument><expr><name>GL_VERTEX_SHADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fsCode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fragmentShaderId</name> <operator>=</operator> <call><name>CompileShader</name><argument_list>(<argument><expr><name>fsCode</name></expr></argument>, <argument><expr><name>GL_FRAGMENT_SHADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vertexShaderId</name> <operator>==</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultVShaderId</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>fragmentShaderId</name> <operator>==</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultFShaderId</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>shader</name> <operator>=</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultShader</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>shader</name><operator>.</operator><name>id</name></name> <operator>=</operator> <call><name>LoadShaderProgram</name><argument_list>(<argument><expr><name>vertexShaderId</name></expr></argument>, <argument><expr><name>fragmentShaderId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vertexShaderId</name> <operator>!=</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultVShaderId</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glDeleteShader</name><argument_list>(<argument><expr><name>vertexShaderId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fragmentShaderId</name> <operator>!=</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultFShaderId</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glDeleteShader</name><argument_list>(<argument><expr><name>fragmentShaderId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shader</name><operator>.</operator><name>id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"SHADER: Failed to load custom shader code"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shader</name> <operator>=</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultShader</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>shader</name><operator>.</operator><name>id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SetShaderDefaultLocations</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>uniformCount</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glGetProgramiv</name><argument_list>(<argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>GL_ACTIVE_UNIFORMS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uniformCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>uniformCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>namelen</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GLenum</name></type> <name>type</name> <init>= <expr><name>GL_ZERO</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>glGetActiveUniform</name><argument_list>(<argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>namelen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>namelen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">"SHADER: [ID %i] Active uniform (%s) set at location: %i"</literal></expr></argument>, <argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>shader</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadShader</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>shader</name><operator>.</operator><name>id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rlDeleteShader</name><argument_list>(<argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"SHADER: [ID %i] Unloaded shader program data from VRAM (GPU)"</literal></expr></argument>, <argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>shader</name><operator>.</operator><name>locs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>BeginShaderMode</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentShader</name><operator>.</operator><name>id</name></name> <operator>!=</operator> <name><name>shader</name><operator>.</operator><name>id</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentShader</name></name> <operator>=</operator> <name>shader</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>EndShaderMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>BeginShaderMode</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultShader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>GetShaderLocation</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uniformName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>location</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>location</name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>uniformName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>location</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"SHADER: [ID %i] Failed to find shader uniform: %s"</literal></expr></argument>, <argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>uniformName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"SHADER: [ID %i] Shader uniform (%s) set at location: %i"</literal></expr></argument>, <argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>uniformName</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>location</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetShaderValue</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uniformLoc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uniformType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SetShaderValueV</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>uniformLoc</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>uniformType</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetShaderValueV</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uniformLoc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uniformType</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glUseProgram</name><argument_list>(<argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>uniformType</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>UNIFORM_FLOAT</name></expr>:</case> <expr_stmt><expr><call><name>glUniform1fv</name><argument_list>(<argument><expr><name>uniformLoc</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNIFORM_VEC2</name></expr>:</case> <expr_stmt><expr><call><name>glUniform2fv</name><argument_list>(<argument><expr><name>uniformLoc</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNIFORM_VEC3</name></expr>:</case> <expr_stmt><expr><call><name>glUniform3fv</name><argument_list>(<argument><expr><name>uniformLoc</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNIFORM_VEC4</name></expr>:</case> <expr_stmt><expr><call><name>glUniform4fv</name><argument_list>(<argument><expr><name>uniformLoc</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNIFORM_INT</name></expr>:</case> <expr_stmt><expr><call><name>glUniform1iv</name><argument_list>(<argument><expr><name>uniformLoc</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNIFORM_IVEC2</name></expr>:</case> <expr_stmt><expr><call><name>glUniform2iv</name><argument_list>(<argument><expr><name>uniformLoc</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNIFORM_IVEC3</name></expr>:</case> <expr_stmt><expr><call><name>glUniform3iv</name><argument_list>(<argument><expr><name>uniformLoc</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNIFORM_IVEC4</name></expr>:</case> <expr_stmt><expr><call><name>glUniform4iv</name><argument_list>(<argument><expr><name>uniformLoc</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNIFORM_SAMPLER2D</name></expr>:</case> <expr_stmt><expr><call><name>glUniform1iv</name><argument_list>(<argument><expr><name>uniformLoc</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"SHADER: [ID %i] Failed to set uniform, data type not recognized"</literal></expr></argument>, <argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>SetShaderValueMatrix</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uniformLoc</name></decl></parameter>, <parameter><decl><type><name>Matrix</name></type> <name>mat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glUseProgram</name><argument_list>(<argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glUniformMatrix4fv</name><argument_list>(<argument><expr><name>uniformLoc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><call><name>MatrixToFloat</name><argument_list>(<argument><expr><name>mat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetShaderValueTexture</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uniformLoc</name></decl></parameter>, <parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glUseProgram</name><argument_list>(<argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glUniform1i</name><argument_list>(<argument><expr><name>uniformLoc</name></expr></argument>, <argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetMatrixProjection</name><parameter_list>(<parameter><decl><type><name>Matrix</name></type> <name>projection</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>projection</name></name> <operator>=</operator> <name>projection</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>Matrix</name></type> <name>GetMatrixProjection</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>float</name></type> <name><name>mat</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glGetFloatv</name><argument_list>(<argument><expr><name>GL_PROJECTION_MATRIX</name></expr></argument>,<argument><expr><name>mat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Matrix</name></type> <name>m</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>m</name><operator>.</operator><name>m0</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m1</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m2</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m3</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>.</operator><name>m4</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m5</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m6</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m7</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>.</operator><name>m8</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m9</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m10</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m11</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>.</operator><name>m12</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m13</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m14</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m15</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>m</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>projection</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:empty>#</cpp:empty>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetMatrixModelview</name><parameter_list>(<parameter><decl><type><name>Matrix</name></type> <name>view</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>modelview</name></name> <operator>=</operator> <name>view</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>Matrix</name></type> <name>GetMatrixModelview</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>matrix</name> <init>= <expr><call><name>MatrixIdentity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>float</name></type> <name><name>mat</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glGetFloatv</name><argument_list>(<argument><expr><name>GL_MODELVIEW_MATRIX</name></expr></argument>, <argument><expr><name>mat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><operator>.</operator><name>m0</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>matrix</name><operator>.</operator><name>m1</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>matrix</name><operator>.</operator><name>m2</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>matrix</name><operator>.</operator><name>m3</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><operator>.</operator><name>m4</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>matrix</name><operator>.</operator><name>m5</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>matrix</name><operator>.</operator><name>m6</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>matrix</name><operator>.</operator><name>m7</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><operator>.</operator><name>m8</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>matrix</name><operator>.</operator><name>m9</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>matrix</name><operator>.</operator><name>m10</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>matrix</name><operator>.</operator><name>m11</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>matrix</name><operator>.</operator><name>m12</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>matrix</name><operator>.</operator><name>m13</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>matrix</name><operator>.</operator><name>m14</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>matrix</name><operator>.</operator><name>m15</name></name> <operator>=</operator> <name><name>mat</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>matrix</name> <operator>=</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>modelview</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>matrix</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>Texture2D</name></type> <name>GenTextureCubemap</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>Texture2D</name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Texture2D</name></type> <name>cubemap</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>




<expr_stmt><expr><call><name>glDisable</name><argument_list>(<argument><expr><name>GL_CULL_FACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP_SEAMLESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fbo</name></decl>, <decl><type ref="prev"/><name>rbo</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glGenFramebuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glGenRenderbuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindRenderbuffer</name><argument_list>(<argument><expr><name>GL_RENDERBUFFER</name></expr></argument>, <argument><expr><name>rbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glRenderbufferStorage</name><argument_list>(<argument><expr><name>GL_RENDERBUFFER</name></expr></argument>, <argument><expr><name>GL_DEPTH_COMPONENT24</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>glRenderbufferStorage</name><argument_list>(<argument><expr><name>GL_RENDERBUFFER</name></expr></argument>, <argument><expr><name>GL_DEPTH_COMPONENT16</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>glFramebufferRenderbuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>GL_DEPTH_ATTACHMENT</name></expr></argument>, <argument><expr><name>GL_RENDERBUFFER</name></expr></argument>, <argument><expr><name>rbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>glGenTextures</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cubemap</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name><name>cubemap</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glTexImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP_POSITIVE_X</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GL_RGB32F</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GL_RGB</name></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texFloat32</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glTexImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP_POSITIVE_X</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GL_RGB</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GL_RGB</name></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_S</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_T</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_R</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MIN_FILTER</name></expr></argument>, <argument><expr><name>GL_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MAG_FILTER</name></expr></argument>, <argument><expr><name>GL_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Matrix</name></type> <name>fboProjection</name> <init>= <expr><call><name>MatrixPerspective</name><argument_list>(<argument><expr><literal type="number">90.0</literal><operator>*</operator><name>DEG2RAD</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>DEFAULT_NEAR_CULL_DISTANCE</name></expr></argument>, <argument><expr><name>DEFAULT_FAR_CULL_DISTANCE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Matrix</name></type> <name><name>fboViews</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{
<macro><name>MatrixLookAt</name><argument_list>(<argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>)</argument_list></macro>,
<macro><name>MatrixLookAt</name><argument_list>(<argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ -<literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>)</argument_list></macro>,
<macro><name>MatrixLookAt</name><argument_list>(<argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">1.0f</literal> }</argument>)</argument_list></macro>,
<macro><name>MatrixLookAt</name><argument_list>(<argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">1.0f</literal> }</argument>)</argument_list></macro>,
<macro><name>MatrixLookAt</name><argument_list>(<argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">1.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>)</argument_list></macro>,
<macro><name>MatrixLookAt</name><argument_list>(<argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">1.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>glUseProgram</name><argument_list>(<argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glActiveTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>map</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetShaderValueMatrix</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MATRIX_PROJECTION</name></expr>]</index></name></expr></argument>, <argument><expr><name>fboProjection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glViewport</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>SetShaderValueMatrix</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MATRIX_VIEW</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>fboViews</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glFramebufferTexture2D</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>GL_COLOR_ATTACHMENT0</name></expr></argument>, <argument><expr><name>GL_TEXTURE_CUBE_MAP_POSITIVE_X</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>cubemap</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glClear</name><argument_list>(<argument><expr><name>GL_COLOR_BUFFER_BIT</name> <operator>|</operator> <name>GL_DEPTH_BUFFER_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GenDrawCube</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glViewport</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferWidth</name></name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>cubemap</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cubemap</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cubemap</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cubemap</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R32G32B32</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>cubemap</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>Texture2D</name></type> <name>GenTextureIrradiance</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>Texture2D</name></type> <name>cubemap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Texture2D</name></type> <name>irradiance</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if> 




<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fbo</name></decl>, <decl><type ref="prev"/><name>rbo</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glGenFramebuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glGenRenderbuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindRenderbuffer</name><argument_list>(<argument><expr><name>GL_RENDERBUFFER</name></expr></argument>, <argument><expr><name>rbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glRenderbufferStorage</name><argument_list>(<argument><expr><name>GL_RENDERBUFFER</name></expr></argument>, <argument><expr><name>GL_DEPTH_COMPONENT24</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glFramebufferRenderbuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>GL_DEPTH_ATTACHMENT</name></expr></argument>, <argument><expr><name>GL_RENDERBUFFER</name></expr></argument>, <argument><expr><name>rbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glGenTextures</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>irradiance</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name><name>irradiance</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>glTexImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP_POSITIVE_X</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GL_RGB16F</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GL_RGB</name></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_S</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_T</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_R</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MIN_FILTER</name></expr></argument>, <argument><expr><name>GL_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MAG_FILTER</name></expr></argument>, <argument><expr><name>GL_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Matrix</name></type> <name>fboProjection</name> <init>= <expr><call><name>MatrixPerspective</name><argument_list>(<argument><expr><literal type="number">90.0</literal><operator>*</operator><name>DEG2RAD</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>DEFAULT_NEAR_CULL_DISTANCE</name></expr></argument>, <argument><expr><name>DEFAULT_FAR_CULL_DISTANCE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Matrix</name></type> <name><name>fboViews</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{
<macro><name>MatrixLookAt</name><argument_list>(<argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>)</argument_list></macro>,
<macro><name>MatrixLookAt</name><argument_list>(<argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ -<literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>)</argument_list></macro>,
<macro><name>MatrixLookAt</name><argument_list>(<argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">1.0f</literal> }</argument>)</argument_list></macro>,
<macro><name>MatrixLookAt</name><argument_list>(<argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">1.0f</literal> }</argument>)</argument_list></macro>,
<macro><name>MatrixLookAt</name><argument_list>(<argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">1.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>)</argument_list></macro>,
<macro><name>MatrixLookAt</name><argument_list>(<argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">1.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>glUseProgram</name><argument_list>(<argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glActiveTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name><name>cubemap</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetShaderValueMatrix</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MATRIX_PROJECTION</name></expr>]</index></name></expr></argument>, <argument><expr><name>fboProjection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glViewport</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>SetShaderValueMatrix</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MATRIX_VIEW</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>fboViews</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glFramebufferTexture2D</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>GL_COLOR_ATTACHMENT0</name></expr></argument>, <argument><expr><name>GL_TEXTURE_CUBE_MAP_POSITIVE_X</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>irradiance</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glClear</name><argument_list>(<argument><expr><name>GL_COLOR_BUFFER_BIT</name> <operator>|</operator> <name>GL_DEPTH_BUFFER_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GenDrawCube</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glViewport</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferWidth</name></name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>irradiance</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>irradiance</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>irradiance</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>irradiance</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>Texture2D</name></type> <name>GenTexturePrefilter</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>Texture2D</name></type> <name>cubemap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Texture2D</name></type> <name>prefilter</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if> 



<decl_stmt><decl><type><name>int</name></type> <name>roughnessLoc</name> <init>= <expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"roughness"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fbo</name></decl>, <decl><type ref="prev"/><name>rbo</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glGenFramebuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glGenRenderbuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindRenderbuffer</name><argument_list>(<argument><expr><name>GL_RENDERBUFFER</name></expr></argument>, <argument><expr><name>rbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glRenderbufferStorage</name><argument_list>(<argument><expr><name>GL_RENDERBUFFER</name></expr></argument>, <argument><expr><name>GL_DEPTH_COMPONENT24</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glFramebufferRenderbuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>GL_DEPTH_ATTACHMENT</name></expr></argument>, <argument><expr><name>GL_RENDERBUFFER</name></expr></argument>, <argument><expr><name>rbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glGenTextures</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prefilter</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name><name>prefilter</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>glTexImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP_POSITIVE_X</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GL_RGB16F</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GL_RGB</name></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_S</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_T</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_R</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MIN_FILTER</name></expr></argument>, <argument><expr><name>GL_LINEAR_MIPMAP_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MAG_FILTER</name></expr></argument>, <argument><expr><name>GL_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glGenerateMipmap</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Matrix</name></type> <name>fboProjection</name> <init>= <expr><call><name>MatrixPerspective</name><argument_list>(<argument><expr><literal type="number">90.0</literal><operator>*</operator><name>DEG2RAD</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>DEFAULT_NEAR_CULL_DISTANCE</name></expr></argument>, <argument><expr><name>DEFAULT_FAR_CULL_DISTANCE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Matrix</name></type> <name><name>fboViews</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{
<macro><name>MatrixLookAt</name><argument_list>(<argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>)</argument_list></macro>,
<macro><name>MatrixLookAt</name><argument_list>(<argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ -<literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>)</argument_list></macro>,
<macro><name>MatrixLookAt</name><argument_list>(<argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">1.0f</literal> }</argument>)</argument_list></macro>,
<macro><name>MatrixLookAt</name><argument_list>(<argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">1.0f</literal> }</argument>)</argument_list></macro>,
<macro><name>MatrixLookAt</name><argument_list>(<argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">1.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>)</argument_list></macro>,
<macro><name>MatrixLookAt</name><argument_list>(<argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">1.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>glUseProgram</name><argument_list>(<argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glActiveTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_CUBE_MAP</name></expr></argument>, <argument><expr><name><name>cubemap</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetShaderValueMatrix</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MATRIX_PROJECTION</name></expr>]</index></name></expr></argument>, <argument><expr><name>fboProjection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MIPMAP_LEVELS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>mip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mip</name> <operator>&lt;</operator> <name>MAX_MIPMAP_LEVELS</name></expr>;</condition> <incr><expr><name>mip</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mipWidth</name> <init>= <expr><name>size</name><operator>*</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>powf</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>mip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mipHeight</name> <init>= <expr><name>size</name><operator>*</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>powf</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>mip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glBindRenderbuffer</name><argument_list>(<argument><expr><name>GL_RENDERBUFFER</name></expr></argument>, <argument><expr><name>rbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glRenderbufferStorage</name><argument_list>(<argument><expr><name>GL_RENDERBUFFER</name></expr></argument>, <argument><expr><name>GL_DEPTH_COMPONENT24</name></expr></argument>, <argument><expr><name>mipWidth</name></expr></argument>, <argument><expr><name>mipHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glViewport</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mipWidth</name></expr></argument>, <argument><expr><name>mipHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>roughness</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>mip</name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>MAX_MIPMAP_LEVELS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glUniform1f</name><argument_list>(<argument><expr><name>roughnessLoc</name></expr></argument>, <argument><expr><name>roughness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>SetShaderValueMatrix</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MATRIX_VIEW</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>fboViews</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glFramebufferTexture2D</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>GL_COLOR_ATTACHMENT0</name></expr></argument>, <argument><expr><name>GL_TEXTURE_CUBE_MAP_POSITIVE_X</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>prefilter</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>mip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glClear</name><argument_list>(<argument><expr><name>GL_COLOR_BUFFER_BIT</name> <operator>|</operator> <name>GL_DEPTH_BUFFER_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GenDrawCube</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glViewport</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferWidth</name></name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prefilter</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prefilter</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>prefilter</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>Texture2D</name></type> <name>GenTextureBRDF</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Texture2D</name></type> <name>brdf</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>glGenTextures</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>brdf</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>brdf</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glTexImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GL_RGB32F</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GL_RGB</name></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>texFloat32</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glTexImage2D</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GL_RGB</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GL_RGB</name></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_S</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_WRAP_T</name></expr></argument>, <argument><expr><name>GL_CLAMP_TO_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MIN_FILTER</name></expr></argument>, <argument><expr><name>GL_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glTexParameteri</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name>GL_TEXTURE_MAG_FILTER</name></expr></argument>, <argument><expr><name>GL_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fbo</name></decl>, <decl><type ref="prev"/><name>rbo</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glGenFramebuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glGenRenderbuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindRenderbuffer</name><argument_list>(<argument><expr><name>GL_RENDERBUFFER</name></expr></argument>, <argument><expr><name>rbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glRenderbufferStorage</name><argument_list>(<argument><expr><name>GL_RENDERBUFFER</name></expr></argument>, <argument><expr><name>GL_DEPTH_COMPONENT24</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>glRenderbufferStorage</name><argument_list>(<argument><expr><name>GL_RENDERBUFFER</name></expr></argument>, <argument><expr><name>GL_DEPTH_COMPONENT16</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>glFramebufferTexture2D</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><name>GL_COLOR_ATTACHMENT0</name></expr></argument>, <argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>brdf</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glViewport</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glUseProgram</name><argument_list>(<argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glClear</name><argument_list>(<argument><expr><name>GL_COLOR_BUFFER_BIT</name> <operator>|</operator> <name>GL_DEPTH_BUFFER_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GenDrawQuad</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glBindFramebuffer</name><argument_list>(<argument><expr><name>GL_FRAMEBUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glDeleteRenderbuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glDeleteFramebuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fbo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glViewport</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferWidth</name></name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>brdf</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>brdf</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>brdf</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>brdf</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_R32G32B32</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>brdf</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>BeginBlendMode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>blendMode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>blendMode</name> <operator>!=</operator> <name>mode</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>mode</name> <operator>&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>BLEND_ALPHA</name></expr>:</case> <expr_stmt><expr><call><name>glBlendFunc</name><argument_list>(<argument><expr><name>GL_SRC_ALPHA</name></expr></argument>, <argument><expr><name>GL_ONE_MINUS_SRC_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>BLEND_ADDITIVE</name></expr>:</case> <expr_stmt><expr><call><name>glBlendFunc</name><argument_list>(<argument><expr><name>GL_SRC_ALPHA</name></expr></argument>, <argument><expr><name>GL_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break> 
<case>case <expr><name>BLEND_MULTIPLIED</name></expr>:</case> <expr_stmt><expr><call><name>glBlendFunc</name><argument_list>(<argument><expr><name>GL_DST_COLOR</name></expr></argument>, <argument><expr><name>GL_ONE_MINUS_SRC_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>blendMode</name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>EndBlendMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>BeginBlendMode</name><argument_list>(<argument><expr><name>BLEND_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_VR_SIMULATOR</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function><type><name>void</name></type> <name>InitVrSimulator</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>stereoFbo</name></name> <operator>=</operator> <call><name>rlLoadRenderTexture</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferWidth</name></name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferHeight</name></name></expr></argument>, <argument><expr><name>UNCOMPRESSED_R8G8B8A8</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>simulatorReady</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"RLGL: VR Simulator not supported on OpenGL 1.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>UpdateVrTracking</name><parameter_list>(<parameter><decl><type><name>Camera</name> <modifier>*</modifier></type><name>camera</name></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>


<function><type><name>void</name></type> <name>CloseVrSimulator</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>simulatorReady</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlDeleteRenderTextures</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>stereoFbo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetVrConfiguration</name><parameter_list>(<parameter><decl><type><name>VrDeviceInfo</name></type> <name>hmd</name></decl></parameter>, <parameter><decl><type><name>Shader</name></type> <name>distortion</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>distortionShader</name></name> <operator>=</operator> <name>distortion</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>aspect</name> <init>= <expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>hmd</name><operator>.</operator><name>hResolution</name></name><operator>*</operator><literal type="number">0.5f</literal><operator>)</operator><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>hmd</name><operator>.</operator><name>vResolution</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>lensShift</name> <init>= <expr><operator>(</operator><name><name>hmd</name><operator>.</operator><name>hScreenSize</name></name><operator>*</operator><literal type="number">0.25f</literal> <operator>-</operator> <name><name>hmd</name><operator>.</operator><name>lensSeparationDistance</name></name><operator>*</operator><literal type="number">0.5f</literal><operator>)</operator><operator>/</operator><name><name>hmd</name><operator>.</operator><name>hScreenSize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>leftLensCenter</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0.25f</literal> <operator>+</operator> <name>lensShift</name></expr>, <expr><literal type="number">0.5f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>rightLensCenter</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0.75f</literal> <operator>-</operator> <name>lensShift</name></expr>, <expr><literal type="number">0.5f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>leftScreenCenter</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0.25f</literal></expr>, <expr><literal type="number">0.5f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>rightScreenCenter</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0.75f</literal></expr>, <expr><literal type="number">0.5f</literal></expr> }</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>float</name></type> <name>lensRadius</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0f</literal> <operator>-</operator> <literal type="number">4.0f</literal><operator>*</operator><name>lensShift</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>lensRadiusSq</name> <init>= <expr><name>lensRadius</name><operator>*</operator><name>lensRadius</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>distortionScale</name> <init>= <expr><name><name>hmd</name><operator>.</operator><name>lensDistortionValues</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>
<name><name>hmd</name><operator>.</operator><name>lensDistortionValues</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>lensRadiusSq</name> <operator>+</operator>
<name><name>hmd</name><operator>.</operator><name>lensDistortionValues</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name>lensRadiusSq</name><operator>*</operator><name>lensRadiusSq</name> <operator>+</operator>
<name><name>hmd</name><operator>.</operator><name>lensDistortionValues</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><name>lensRadiusSq</name><operator>*</operator><name>lensRadiusSq</name><operator>*</operator><name>lensRadiusSq</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">"RLGL: VR device configuration:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; Distortion Scale: %f"</literal></expr></argument>, <argument><expr><name>distortionScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>normScreenWidth</name> <init>= <expr><literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>normScreenHeight</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>scaleIn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">2.0f</literal><operator>/</operator><name>normScreenWidth</name></expr>, <expr><literal type="number">2.0f</literal><operator>/</operator><name>normScreenHeight</name><operator>/</operator><name>aspect</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>scale</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>normScreenWidth</name><operator>*</operator><literal type="number">0.5f</literal><operator>/</operator><name>distortionScale</name></expr>, <expr><name>normScreenHeight</name><operator>*</operator><literal type="number">0.5f</literal><operator>*</operator><name>aspect</name><operator>/</operator><name>distortionScale</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; Distortion Shader: LeftLensCenter = { %f, %f }"</literal></expr></argument>, <argument><expr><name><name>leftLensCenter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>leftLensCenter</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; Distortion Shader: RightLensCenter = { %f, %f }"</literal></expr></argument>, <argument><expr><name><name>rightLensCenter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rightLensCenter</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; Distortion Shader: Scale = { %f, %f }"</literal></expr></argument>, <argument><expr><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>scale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; Distortion Shader: ScaleIn = { %f, %f }"</literal></expr></argument>, <argument><expr><name><name>scaleIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>scaleIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<decl_stmt><decl><type><name>float</name></type> <name>fovy</name> <init>= <expr><literal type="number">2.0f</literal><operator>*</operator><operator>(</operator><name>float</name><operator>)</operator><call><name>atan2f</name><argument_list>(<argument><expr><name><name>hmd</name><operator>.</operator><name>vScreenSize</name></name><operator>*</operator><literal type="number">0.5f</literal></expr></argument>, <argument><expr><name><name>hmd</name><operator>.</operator><name>eyeToScreenDistance</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>projOffset</name> <init>= <expr><literal type="number">4.0f</literal><operator>*</operator><name>lensShift</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Matrix</name></type> <name>proj</name> <init>= <expr><call><name>MatrixPerspective</name><argument_list>(<argument><expr><name>fovy</name></expr></argument>, <argument><expr><name>aspect</name></expr></argument>, <argument><expr><name>DEFAULT_NEAR_CULL_DISTANCE</name></expr></argument>, <argument><expr><name>DEFAULT_FAR_CULL_DISTANCE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>eyesProjection</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>MatrixMultiply</name><argument_list>(<argument><expr><name>proj</name></expr></argument>, <argument><expr><call><name>MatrixTranslate</name><argument_list>(<argument><expr><name>projOffset</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>eyesProjection</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>MatrixMultiply</name><argument_list>(<argument><expr><name>proj</name></expr></argument>, <argument><expr><call><name>MatrixTranslate</name><argument_list>(<argument><expr><operator>-</operator><name>projOffset</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>eyesViewOffset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>MatrixTranslate</name><argument_list>(<argument><expr><operator>-</operator><name><name>hmd</name><operator>.</operator><name>interpupillaryDistance</name></name><operator>*</operator><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.075f</literal></expr></argument>, <argument><expr><literal type="number">0.045f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>eyesViewOffset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>MatrixTranslate</name><argument_list>(<argument><expr><name><name>hmd</name><operator>.</operator><name>interpupillaryDistance</name></name><operator>*</operator><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.075f</literal></expr></argument>, <argument><expr><literal type="number">0.045f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>eyeViewportRight</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>hmd</name><operator>.</operator><name>hResolution</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>eyeViewportRight</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>hmd</name><operator>.</operator><name>vResolution</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>eyeViewportLeft</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>hmd</name><operator>.</operator><name>hResolution</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>eyeViewportLeft</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>eyeViewportLeft</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>hmd</name><operator>.</operator><name>hResolution</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>eyeViewportLeft</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>hmd</name><operator>.</operator><name>vResolution</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>distortionShader</name><operator>.</operator><name>id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>distortionShader</name></name></expr></argument>, <argument><expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>distortionShader</name></name></expr></argument>, <argument><expr><literal type="string">"leftLensCenter"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>leftLensCenter</name></expr></argument>, <argument><expr><name>UNIFORM_VEC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>distortionShader</name></name></expr></argument>, <argument><expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>distortionShader</name></name></expr></argument>, <argument><expr><literal type="string">"rightLensCenter"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rightLensCenter</name></expr></argument>, <argument><expr><name>UNIFORM_VEC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>distortionShader</name></name></expr></argument>, <argument><expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>distortionShader</name></name></expr></argument>, <argument><expr><literal type="string">"leftScreenCenter"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>leftScreenCenter</name></expr></argument>, <argument><expr><name>UNIFORM_VEC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>distortionShader</name></name></expr></argument>, <argument><expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>distortionShader</name></name></expr></argument>, <argument><expr><literal type="string">"rightScreenCenter"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rightScreenCenter</name></expr></argument>, <argument><expr><name>UNIFORM_VEC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>distortionShader</name></name></expr></argument>, <argument><expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>distortionShader</name></name></expr></argument>, <argument><expr><literal type="string">"scale"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><name>UNIFORM_VEC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>distortionShader</name></name></expr></argument>, <argument><expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>distortionShader</name></name></expr></argument>, <argument><expr><literal type="string">"scaleIn"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>scaleIn</name></expr></argument>, <argument><expr><name>UNIFORM_VEC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>distortionShader</name></name></expr></argument>, <argument><expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>distortionShader</name></name></expr></argument>, <argument><expr><literal type="string">"hmdWarpParam"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>hmd</name><operator>.</operator><name>lensDistortionValues</name></name></expr></argument>, <argument><expr><name>UNIFORM_VEC4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>distortionShader</name></name></expr></argument>, <argument><expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>distortionShader</name></name></expr></argument>, <argument><expr><literal type="string">"chromaAbParam"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>hmd</name><operator>.</operator><name>chromaAbCorrection</name></name></expr></argument>, <argument><expr><name>UNIFORM_VEC4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>IsVrSimulatorReady</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>simulatorReady</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ToggleVrMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>simulatorReady</name></name> <operator>=</operator> <operator>!</operator><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>simulatorReady</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>simulatorReady</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>stereoRender</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlViewport</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferWidth</name></name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>projection</name></name> <operator>=</operator> <call><name>MatrixOrtho</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferWidth</name></name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferHeight</name></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>modelview</name></name> <operator>=</operator> <call><name>MatrixIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>stereoRender</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>BeginVrDrawing</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>simulatorReady</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rlEnableRenderTexture</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>stereoFbo</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<expr_stmt><expr><call><name>rlClearScreenBuffers</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>stereoRender</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>EndVrDrawing</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>simulatorReady</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>stereoRender</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlDisableRenderTexture</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlClearScreenBuffers</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>rlViewport</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferWidth</name></name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlMatrixMode</name><argument_list>(<argument><expr><name>RL_PROJECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlLoadIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlOrtho</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferWidth</name></name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferHeight</name></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlMatrixMode</name><argument_list>(<argument><expr><name>RL_MODELVIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlLoadIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>distortionShader</name><operator>.</operator><name>id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentShader</name></name> <operator>=</operator> <name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>distortionShader</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentShader</name></name> <operator>=</operator> <call><name>GetShaderDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>rlEnableTexture</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>stereoFbo</name><operator>.</operator><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_QUADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlNormal3f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>stereoFbo</name><operator>.</operator><name>texture</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>stereoFbo</name><operator>.</operator><name>texture</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>stereoFbo</name><operator>.</operator><name>texture</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>stereoFbo</name><operator>.</operator><name>texture</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlDisableTexture</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>UpdateBuffersDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DrawBuffersDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentShader</name></name> <operator>=</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultShader</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlViewport</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferWidth</name></name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>projection</name></name> <operator>=</operator> <call><name>MatrixOrtho</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferWidth</name></name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferHeight</name></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>modelview</name></name> <operator>=</operator> <call><name>MatrixIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlDisableDepthTest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>CompileShader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shaderStr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>shader</name> <init>= <expr><call><name>glCreateShader</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glShaderSource</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>shaderStr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GLint</name></type> <name>success</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glCompileShader</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glGetShaderiv</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>GL_COMPILE_STATUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name> <operator>!=</operator> <name>GL_TRUE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"SHADER: [ID %i] Failed to compile shader code"</literal></expr></argument>, <argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxLength</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>glGetShaderiv</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>GL_INFO_LOG_LENGTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>log</name> <init>= <expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>maxLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name></type> <name><name>log</name><index>[<expr><name>maxLength</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>glGetShaderInfoLog</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>maxLength</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"SHADER: [ID %i] Compile error: %s"</literal></expr></argument>, <argument><expr><name>shader</name></expr></argument>, <argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"SHADER: [ID %i] Compiled successfully"</literal></expr></argument>, <argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>shader</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>LoadShaderProgram</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>vShaderId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>fShaderId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>program</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>GLint</name></type> <name>success</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>program</name> <operator>=</operator> <call><name>glCreateProgram</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glAttachShader</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>vShaderId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glAttachShader</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>fShaderId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glBindAttribLocation</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DEFAULT_ATTRIB_POSITION_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindAttribLocation</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>DEFAULT_ATTRIB_TEXCOORD_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindAttribLocation</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>DEFAULT_ATTRIB_NORMAL_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindAttribLocation</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>DEFAULT_ATTRIB_COLOR_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindAttribLocation</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>DEFAULT_ATTRIB_TANGENT_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindAttribLocation</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>DEFAULT_ATTRIB_TEXCOORD2_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>glLinkProgram</name><argument_list>(<argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>glGetProgramiv</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>GL_LINK_STATUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>success</name> <operator>==</operator> <name>GL_FALSE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"SHADER: [ID %i] Failed to link shader program"</literal></expr></argument>, <argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxLength</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glGetProgramiv</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>GL_INFO_LOG_LENGTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>log</name> <init>= <expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>maxLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name></type> <name><name>log</name><index>[<expr><name>maxLength</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>glGetProgramInfoLog</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>maxLength</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"SHADER: [ID %i] Link error: %s"</literal></expr></argument>, <argument><expr><name>program</name></expr></argument>, <argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>glDeleteProgram</name><argument_list>(<argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>program</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"SHADER: [ID %i] Program loaded successfully"</literal></expr></argument>, <argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>program</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>Shader</name></type> <name>LoadShaderDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Shader</name></type> <name>shader</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>shader</name><operator>.</operator><name>locs</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name>MAX_SHADER_LOCATIONS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_SHADER_LOCATIONS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>defaultVShaderStr</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_21</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#version 120 \n"</literal>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<literal type="string">"#version 100 \n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_21</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"attribute vec3 vertexPosition; \n"</literal>
<literal type="string">"attribute vec2 vertexTexCoord; \n"</literal>
<literal type="string">"attribute vec4 vertexColor; \n"</literal>
<literal type="string">"varying vec2 fragTexCoord; \n"</literal>
<literal type="string">"varying vec4 fragColor; \n"</literal>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<literal type="string">"#version 330 \n"</literal>
<literal type="string">"in vec3 vertexPosition; \n"</literal>
<literal type="string">"in vec2 vertexTexCoord; \n"</literal>
<literal type="string">"in vec4 vertexColor; \n"</literal>
<literal type="string">"out vec2 fragTexCoord; \n"</literal>
<literal type="string">"out vec4 fragColor; \n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"uniform mat4 mvp; \n"</literal>
<literal type="string">"void main() \n"</literal>
<literal type="string">"{ \n"</literal>
<literal type="string">" fragTexCoord = vertexTexCoord; \n"</literal>
<literal type="string">" fragColor = vertexColor; \n"</literal>
<literal type="string">" gl_Position = mvp*vec4(vertexPosition, 1.0); \n"</literal>
<literal type="string">"} \n"</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>defaultFShaderStr</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_21</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"#version 120 \n"</literal>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<literal type="string">"#version 100 \n"</literal>
<literal type="string">"precision mediump float; \n"</literal> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_21</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"varying vec2 fragTexCoord; \n"</literal>
<literal type="string">"varying vec4 fragColor; \n"</literal>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<literal type="string">"#version 330 \n"</literal>
<literal type="string">"in vec2 fragTexCoord; \n"</literal>
<literal type="string">"in vec4 fragColor; \n"</literal>
<literal type="string">"out vec4 finalColor; \n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"uniform sampler2D texture0; \n"</literal>
<literal type="string">"uniform vec4 colDiffuse; \n"</literal>
<literal type="string">"void main() \n"</literal>
<literal type="string">"{ \n"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_21</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" vec4 texelColor = texture2D(texture0, fragTexCoord); \n"</literal> 
<literal type="string">" gl_FragColor = texelColor*colDiffuse*fragColor; \n"</literal>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<literal type="string">" vec4 texelColor = texture(texture0, fragTexCoord); \n"</literal>
<literal type="string">" finalColor = texelColor*colDiffuse*fragColor; \n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"} \n"</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultVShaderId</name></name> <operator>=</operator> <call><name>CompileShader</name><argument_list>(<argument><expr><name>defaultVShaderStr</name></expr></argument>, <argument><expr><name>GL_VERTEX_SHADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultFShaderId</name></name> <operator>=</operator> <call><name>CompileShader</name><argument_list>(<argument><expr><name>defaultFShaderStr</name></expr></argument>, <argument><expr><name>GL_FRAGMENT_SHADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>shader</name><operator>.</operator><name>id</name></name> <operator>=</operator> <call><name>LoadShaderProgram</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultVShaderId</name></name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultFShaderId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shader</name><operator>.</operator><name>id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"SHADER: [ID %i] Default shader loaded successfully"</literal></expr></argument>, <argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_POSITION</name></expr>]</index></name> <operator>=</operator> <call><name>glGetAttribLocation</name><argument_list>(<argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="string">"vertexPosition"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_TEXCOORD01</name></expr>]</index></name> <operator>=</operator> <call><name>glGetAttribLocation</name><argument_list>(<argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="string">"vertexTexCoord"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_COLOR</name></expr>]</index></name> <operator>=</operator> <call><name>glGetAttribLocation</name><argument_list>(<argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="string">"vertexColor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MATRIX_MVP</name></expr>]</index></name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="string">"mvp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_COLOR_DIFFUSE</name></expr>]</index></name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="string">"colDiffuse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MAP_DIFFUSE</name></expr>]</index></name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="string">"texture0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"SHADER: [ID %i] Failed to load default shader"</literal></expr></argument>, <argument><expr><name><name>shader</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>shader</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>SetShaderDefaultLocations</name><parameter_list>(<parameter><decl><type><name>Shader</name> <modifier>*</modifier></type><name>shader</name></decl></parameter>)</parameter_list>
<block>{<block_content>









<expr_stmt><expr><name><name>shader</name><operator>-&gt;</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_POSITION</name></expr>]</index></name> <operator>=</operator> <call><name>glGetAttribLocation</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>DEFAULT_ATTRIB_POSITION_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shader</name><operator>-&gt;</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_TEXCOORD01</name></expr>]</index></name> <operator>=</operator> <call><name>glGetAttribLocation</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>DEFAULT_ATTRIB_TEXCOORD_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shader</name><operator>-&gt;</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_TEXCOORD02</name></expr>]</index></name> <operator>=</operator> <call><name>glGetAttribLocation</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>DEFAULT_ATTRIB_TEXCOORD2_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shader</name><operator>-&gt;</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_NORMAL</name></expr>]</index></name> <operator>=</operator> <call><name>glGetAttribLocation</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>DEFAULT_ATTRIB_NORMAL_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shader</name><operator>-&gt;</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_TANGENT</name></expr>]</index></name> <operator>=</operator> <call><name>glGetAttribLocation</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>DEFAULT_ATTRIB_TANGENT_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shader</name><operator>-&gt;</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_COLOR</name></expr>]</index></name> <operator>=</operator> <call><name>glGetAttribLocation</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>DEFAULT_ATTRIB_COLOR_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>shader</name><operator>-&gt;</operator><name>locs</name><index>[<expr><name>LOC_MATRIX_MVP</name></expr>]</index></name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="string">"mvp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shader</name><operator>-&gt;</operator><name>locs</name><index>[<expr><name>LOC_MATRIX_PROJECTION</name></expr>]</index></name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="string">"projection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shader</name><operator>-&gt;</operator><name>locs</name><index>[<expr><name>LOC_MATRIX_VIEW</name></expr>]</index></name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="string">"view"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>shader</name><operator>-&gt;</operator><name>locs</name><index>[<expr><name>LOC_COLOR_DIFFUSE</name></expr>]</index></name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="string">"colDiffuse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shader</name><operator>-&gt;</operator><name>locs</name><index>[<expr><name>LOC_MAP_DIFFUSE</name></expr>]</index></name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="string">"texture0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shader</name><operator>-&gt;</operator><name>locs</name><index>[<expr><name>LOC_MAP_SPECULAR</name></expr>]</index></name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="string">"texture1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shader</name><operator>-&gt;</operator><name>locs</name><index>[<expr><name>LOC_MAP_NORMAL</name></expr>]</index></name> <operator>=</operator> <call><name>glGetUniformLocation</name><argument_list>(<argument><expr><name><name>shader</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="string">"texture2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>UnloadShaderDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>glUseProgram</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDetachShader</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultShader</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultVShaderId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glDetachShader</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultShader</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultFShaderId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glDeleteShader</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultVShaderId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glDeleteShader</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultFShaderId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDeleteProgram</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultShader</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>LoadBuffersDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_BATCH_BUFFERING</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vertices</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><name>MAX_BATCH_ELEMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>texcoords</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><name>MAX_BATCH_ELEMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>colors</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><literal type="number">4</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><name>MAX_BATCH_ELEMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>indices</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>*</operator><literal type="number">6</literal><operator>*</operator><name>MAX_BATCH_ELEMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>indices</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><operator>*</operator><literal type="number">6</literal><operator>*</operator><name>MAX_BATCH_ELEMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">3</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><name>MAX_BATCH_ELEMENTS</name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vertices</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><name>MAX_BATCH_ELEMENTS</name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>texcoords</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">4</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><name>MAX_BATCH_ELEMENTS</name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>colors</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">6</literal><operator>*</operator><name>MAX_BATCH_ELEMENTS</name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">6</literal></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>indices</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>indices</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>indices</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><name>k</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>indices</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>indices</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><name>k</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>indices</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><name>k</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tcCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"RLGL: Internal vertex buffers initialized successfully in RAM (CPU)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_BATCH_BUFFERING</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>vao</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>glGenVertexArrays</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vaoId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vaoId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>glGenBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vboId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vboId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><name>MAX_BATCH_ELEMENTS</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vertices</name></expr></argument>, <argument><expr><name>GL_DYNAMIC_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentShader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_POSITION</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentShader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_POSITION</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glGenBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vboId</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vboId</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><name>MAX_BATCH_ELEMENTS</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>texcoords</name></expr></argument>, <argument><expr><name>GL_DYNAMIC_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentShader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_TEXCOORD01</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentShader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_TEXCOORD01</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glGenBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vboId</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vboId</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><literal type="number">4</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><name>MAX_BATCH_ELEMENTS</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>colors</name></expr></argument>, <argument><expr><name>GL_DYNAMIC_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentShader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_COLOR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentShader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_COLOR</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>GL_UNSIGNED_BYTE</name></expr></argument>, <argument><expr><name>GL_TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glGenBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vboId</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vboId</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">6</literal><operator>*</operator><name>MAX_BATCH_ELEMENTS</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>indices</name></expr></argument>, <argument><expr><name>GL_STATIC_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">6</literal><operator>*</operator><name>MAX_BATCH_ELEMENTS</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>indices</name></expr></argument>, <argument><expr><name>GL_STATIC_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"RLGL: Internal vertex buffers uploaded successfully to VRAM (GPU)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>vao</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateBuffersDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vCounter</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>vao</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vaoId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>vboId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBufferSubData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">3</literal><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vCounter</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vertices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>vboId</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBufferSubData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vCounter</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>texcoords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>vboId</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBufferSubData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><literal type="number">4</literal><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vCounter</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


















<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>vao</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawBuffersDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>matProjection</name> <init>= <expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>projection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Matrix</name></type> <name>matModelView</name> <init>= <expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>modelview</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eyesCount</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_VR_SIMULATOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>stereoRender</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>eyesCount</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><decl><type><name>int</name></type> <name>eye</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>eye</name> <operator>&lt;</operator> <name>eyesCount</name></expr>;</condition> <incr><expr><name>eye</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_VR_SIMULATOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>eyesCount</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SetStereoView</name><argument_list>(<argument><expr><name>eye</name></expr></argument>, <argument><expr><name>matProjection</name></expr></argument>, <argument><expr><name>matModelView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vCounter</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>glUseProgram</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentShader</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Matrix</name></type> <name>matMVP</name> <init>= <expr><call><name>MatrixMultiply</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>modelview</name></name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>projection</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glUniformMatrix4fv</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentShader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MATRIX_MVP</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><call><name>MatrixToFloat</name><argument_list>(<argument><expr><name>matMVP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glUniform4f</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentShader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_COLOR_DIFFUSE</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glUniform1i</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentShader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MAP_DIFFUSE</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 







<decl_stmt><decl><type><name>int</name></type> <name>vertexOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>vao</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vaoId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>vboId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentShader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_POSITION</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentShader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_POSITION</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>vboId</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentShader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_TEXCOORD01</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentShader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_TEXCOORD01</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>vboId</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentShader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_COLOR</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>GL_UNSIGNED_BYTE</name></expr></argument>, <argument><expr><name>GL_TRUE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentShader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VERTEX_COLOR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name><name>vboId</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>glActiveTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>textureId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>==</operator> <name>RL_LINES</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>==</operator> <name>RL_TRIANGLES</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glDrawArrays</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name></expr></argument>, <argument><expr><name>vertexOffset</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vertexCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_33</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr_stmt><expr><call><name>glDrawElements</name><argument_list>(<argument><expr><name>GL_TRIANGLES</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vertexCount</name><operator>/</operator><literal type="number">4</literal><operator>*</operator><literal type="number">6</literal></expr></argument>, <argument><expr><name>GL_UNSIGNED_INT</name></expr></argument>, <argument><expr><operator>(</operator><name>GLvoid</name> <operator>*</operator><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>GLuint</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>vertexOffset</name><operator>/</operator><literal type="number">4</literal><operator>*</operator><literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_ES2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>glDrawElements</name><argument_list>(<argument><expr><name>GL_TRIANGLES</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vertexCount</name><operator>/</operator><literal type="number">4</literal><operator>*</operator><literal type="number">6</literal></expr></argument>, <argument><expr><name>GL_UNSIGNED_SHORT</name></expr></argument>, <argument><expr><operator>(</operator><name>GLvoid</name> <operator>*</operator><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>GLushort</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>vertexOffset</name><operator>/</operator><literal type="number">4</literal><operator>*</operator><literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>vertexOffset</name> <operator>+=</operator> <operator>(</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vertexCount</name> <operator>+</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vertexAlignment</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>vao</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>glBindTexture</name><argument_list>(<argument><expr><name>GL_TEXTURE_2D</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>vao</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>glUseProgram</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></for>


<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>vCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>tcCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name></expr>]</index></name><operator>.</operator><name>cCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentDepth</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1.0f</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>projection</name></name> <operator>=</operator> <name>matProjection</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>modelview</name></name> <operator>=</operator> <name>matModelView</name></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_DRAWCALL_REGISTERED</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>=</operator> <name>RL_QUADS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vertexCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>draws</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>textureId</name> <operator>=</operator> <name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>defaultTextureId</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>drawsCounter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name> <operator>&gt;=</operator> <name>MAX_BATCH_BUFFERING</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>currentBuffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>UnloadBuffersDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>vao</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>glDisableVertexAttribArray</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glDisableVertexAttribArray</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glDisableVertexAttribArray</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glDisableVertexAttribArray</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ELEMENT_ARRAY_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_BATCH_BUFFERING</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<expr_stmt><expr><call><name>glDeleteBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vboId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glDeleteBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vboId</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glDeleteBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vboId</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glDeleteBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vboId</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>RLGL</name><operator>.</operator><name>ExtSupported</name><operator>.</operator><name>vao</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>glDeleteVertexArrays</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vaoId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vertices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>texcoords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>vertexData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>indices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>GenDrawQuad</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>quadVAO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>quadVBO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>vertices</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>glGenVertexArrays</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>quadVAO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glGenBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>quadVBO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><name>quadVAO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name>quadVBO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vertices</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>vertices</name></expr></argument>, <argument><expr><name>GL_STATIC_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><name>GL_FALSE</name></expr></argument>, <argument><expr><literal type="number">5</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><name>GL_FALSE</name></expr></argument>, <argument><expr><literal type="number">5</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><name>quadVAO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glDrawArrays</name><argument_list>(<argument><expr><name>GL_TRIANGLE_STRIP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDeleteBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>quadVBO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glDeleteVertexArrays</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>quadVAO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>GenDrawCube</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cubeVAO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cubeVBO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>vertices</name><index>[]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr> , <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>glGenVertexArrays</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cubeVAO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glGenBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cubeVBO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><name>cubeVBO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBufferData</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vertices</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>vertices</name></expr></argument>, <argument><expr><name>GL_STATIC_DRAW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><name>cubeVAO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><name>GL_FALSE</name></expr></argument>, <argument><expr><literal type="number">8</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><name>GL_FALSE</name></expr></argument>, <argument><expr><literal type="number">8</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glEnableVertexAttribArray</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glVertexAttribPointer</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><name>GL_FALSE</name></expr></argument>, <argument><expr><literal type="number">8</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><literal type="number">6</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindBuffer</name><argument_list>(<argument><expr><name>GL_ARRAY_BUFFER</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><name>cubeVAO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glDrawArrays</name><argument_list>(<argument><expr><name>GL_TRIANGLES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glBindVertexArray</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDeleteBuffers</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cubeVBO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>glDeleteVertexArrays</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cubeVAO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_VR_SIMULATOR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetStereoView</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>eye</name></decl></parameter>, <parameter><decl><type><name>Matrix</name></type> <name>matProjection</name></decl></parameter>, <parameter><decl><type><name>Matrix</name></type> <name>matModelView</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Matrix</name></type> <name>eyeProjection</name> <init>= <expr><name>matProjection</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Matrix</name></type> <name>eyeModelView</name> <init>= <expr><name>matModelView</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>rlViewport</name><argument_list>(<argument><expr><name>eye</name><operator>*</operator><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferWidth</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferWidth</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>State</name><operator>.</operator><name>framebufferHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>eyeModelView</name> <operator>=</operator> <call><name>MatrixMultiply</name><argument_list>(<argument><expr><name>matModelView</name></expr></argument>, <argument><expr><name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>eyesViewOffset</name><index>[<expr><name>eye</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>eyeProjection</name> <operator>=</operator> <name><name>RLGL</name><operator>.</operator><name>Vr</name><operator>.</operator><name>config</name><operator>.</operator><name>eyesProjection</name><index>[<expr><name>eye</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetMatrixModelview</name><argument_list>(<argument><expr><name>eyeModelView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetMatrixProjection</name><argument_list>(<argument><expr><name>eyeProjection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GRAPHICS_API_OPENGL_11</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function><type><specifier>static</specifier> <name>int</name></type> <name>GenerateMipmaps</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>baseWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>baseHeight</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mipmapCount</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name>baseWidth</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name>baseHeight</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>baseWidth</name><operator>*</operator><name>baseHeight</name><operator>*</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt> 


<while>while <condition>(<expr><operator>(</operator><name>width</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>height</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>width</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>height</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>height</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">"TEXTURE: Next mipmap size: %i x %i"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mipmapCount</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <operator>(</operator><name>width</name><operator>*</operator><name>height</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt> 
</block_content>}</block></while>

<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">"TEXTURE: Total mipmaps required: %i"</literal></expr></argument>, <argument><expr><name>mipmapCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">"TEXTURE: Total size of data required: %i"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><call><name>RL_REALLOC</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>data</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"TEXTURE: Failed to allocate required mipmaps memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name>baseWidth</name></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <name>baseHeight</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>width</name><operator>*</operator><name>height</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>



<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>image</name> <init>= <expr><operator>(</operator><name>Color</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>width</name><operator>*</operator><name>height</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>mipmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>image</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>image</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">"TEXTURE: Mipmap base size (%ix%i)"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>mip</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>mip</name> <operator>&lt;</operator> <name>mipmapCount</name></expr>;</condition> <incr><expr><name>mip</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>mipmap</name> <operator>=</operator> <call><name>GenNextMipmap</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <operator>(</operator><name>width</name><operator>*</operator><name>height</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>width</name><operator>*</operator><name>height</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt> 


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>mipmap</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mipmap</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>mipmap</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>offset</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>mipmap</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>image</name> <operator>=</operator> <name>mipmap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mipmap</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>mipmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>mipmapCount</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>Color</name> <modifier>*</modifier></type><name>GenNextMipmap</name><parameter_list>(<parameter><decl><type><name>Color</name> <modifier>*</modifier></type><name>srcData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcHeight</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x2</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Color</name></type> <name>prow</name></decl>, <decl><type ref="prev"/><name>pcol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name>srcWidth</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name>srcHeight</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>mipmap</name> <init>= <expr><operator>(</operator><name>Color</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>width</name><operator>*</operator><name>height</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>y2</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>y</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>x2</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prow</name><operator>.</operator><name>r</name></name> <operator>=</operator> <operator>(</operator><name><name>srcData</name><index>[<expr><name>y2</name><operator>*</operator><name>srcWidth</name> <operator>+</operator> <name>x2</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>+</operator> <name><name>srcData</name><index>[<expr><name>y2</name><operator>*</operator><name>srcWidth</name> <operator>+</operator> <name>x2</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prow</name><operator>.</operator><name>g</name></name> <operator>=</operator> <operator>(</operator><name><name>srcData</name><index>[<expr><name>y2</name><operator>*</operator><name>srcWidth</name> <operator>+</operator> <name>x2</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>+</operator> <name><name>srcData</name><index>[<expr><name>y2</name><operator>*</operator><name>srcWidth</name> <operator>+</operator> <name>x2</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>g</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prow</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><name><name>srcData</name><index>[<expr><name>y2</name><operator>*</operator><name>srcWidth</name> <operator>+</operator> <name>x2</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>+</operator> <name><name>srcData</name><index>[<expr><name>y2</name><operator>*</operator><name>srcWidth</name> <operator>+</operator> <name>x2</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>b</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prow</name><operator>.</operator><name>a</name></name> <operator>=</operator> <operator>(</operator><name><name>srcData</name><index>[<expr><name>y2</name><operator>*</operator><name>srcWidth</name> <operator>+</operator> <name>x2</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>+</operator> <name><name>srcData</name><index>[<expr><name>y2</name><operator>*</operator><name>srcWidth</name> <operator>+</operator> <name>x2</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>a</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pcol</name><operator>.</operator><name>r</name></name> <operator>=</operator> <operator>(</operator><name><name>srcData</name><index>[<expr><operator>(</operator><name>y2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>srcWidth</name> <operator>+</operator> <name>x2</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>+</operator> <name><name>srcData</name><index>[<expr><operator>(</operator><name>y2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>srcWidth</name> <operator>+</operator> <name>x2</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcol</name><operator>.</operator><name>g</name></name> <operator>=</operator> <operator>(</operator><name><name>srcData</name><index>[<expr><operator>(</operator><name>y2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>srcWidth</name> <operator>+</operator> <name>x2</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>+</operator> <name><name>srcData</name><index>[<expr><operator>(</operator><name>y2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>srcWidth</name> <operator>+</operator> <name>x2</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>g</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcol</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><name><name>srcData</name><index>[<expr><operator>(</operator><name>y2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>srcWidth</name> <operator>+</operator> <name>x2</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>+</operator> <name><name>srcData</name><index>[<expr><operator>(</operator><name>y2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>srcWidth</name> <operator>+</operator> <name>x2</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>b</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcol</name><operator>.</operator><name>a</name></name> <operator>=</operator> <operator>(</operator><name><name>srcData</name><index>[<expr><operator>(</operator><name>y2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>srcWidth</name> <operator>+</operator> <name>x2</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>+</operator> <name><name>srcData</name><index>[<expr><operator>(</operator><name>y2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>srcWidth</name> <operator>+</operator> <name>x2</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>a</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mipmap</name><index>[<expr><name>y</name><operator>*</operator><name>width</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <operator>(</operator><name><name>prow</name><operator>.</operator><name>r</name></name> <operator>+</operator> <name><name>pcol</name><operator>.</operator><name>r</name></name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mipmap</name><index>[<expr><name>y</name><operator>*</operator><name>width</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>=</operator> <operator>(</operator><name><name>prow</name><operator>.</operator><name>g</name></name> <operator>+</operator> <name><name>pcol</name><operator>.</operator><name>g</name></name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mipmap</name><index>[<expr><name>y</name><operator>*</operator><name>width</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <operator>(</operator><name><name>prow</name><operator>.</operator><name>b</name></name> <operator>+</operator> <name><name>pcol</name><operator>.</operator><name>b</name></name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mipmap</name><index>[<expr><name>y</name><operator>*</operator><name>width</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <operator>(</operator><name><name>prow</name><operator>.</operator><name>a</name></name> <operator>+</operator> <name><name>pcol</name><operator>.</operator><name>a</name></name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">"TEXTURE: Mipmap generated successfully (%ix%i)"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mipmap</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLGL_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function><type><name>char</name> <modifier>*</modifier></type><name>LoadFileText</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fileName</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>textFile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">"rt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>textFile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>textFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>ftell</name><argument_list>(<argument><expr><name>textFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>textFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>fread</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>textFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>RL_REALLOC</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>text</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Text file loaded successfully"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Failed to read text file"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>textFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Failed to open text file"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: File name provided is not valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>text</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>GetPixelDataSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dataSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>bpp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<switch>switch <condition>(<expr><name>format</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>UNCOMPRESSED_GRAYSCALE</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_GRAY_ALPHA</name></expr>:</case>
<case>case <expr><name>UNCOMPRESSED_R5G6B5</name></expr>:</case>
<case>case <expr><name>UNCOMPRESSED_R5G5B5A1</name></expr>:</case>
<case>case <expr><name>UNCOMPRESSED_R4G4B4A4</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R8G8B8A8</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R8G8B8</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R32</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R32G32B32</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">32</literal><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UNCOMPRESSED_R32G32B32A32</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">32</literal><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>COMPRESSED_DXT1_RGB</name></expr>:</case>
<case>case <expr><name>COMPRESSED_DXT1_RGBA</name></expr>:</case>
<case>case <expr><name>COMPRESSED_ETC1_RGB</name></expr>:</case>
<case>case <expr><name>COMPRESSED_ETC2_RGB</name></expr>:</case>
<case>case <expr><name>COMPRESSED_PVRT_RGB</name></expr>:</case>
<case>case <expr><name>COMPRESSED_PVRT_RGBA</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>COMPRESSED_DXT3_RGBA</name></expr>:</case>
<case>case <expr><name>COMPRESSED_DXT5_RGBA</name></expr>:</case>
<case>case <expr><name>COMPRESSED_ETC2_EAC_RGBA</name></expr>:</case>
<case>case <expr><name>COMPRESSED_ASTC_4x4_RGBA</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>COMPRESSED_ASTC_8x8_RGBA</name></expr>:</case> <expr_stmt><expr><name>bpp</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>dataSize</name> <operator>=</operator> <name>width</name><operator>*</operator><name>height</name><operator>*</operator><name>bpp</name><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt> 



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>width</name> <operator>&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>height</name> <operator>&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>format</name> <operator>&gt;=</operator> <name>COMPRESSED_DXT1_RGB</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>format</name> <operator>&lt;</operator> <name>COMPRESSED_DXT3_RGBA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dataSize</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>format</name> <operator>&gt;=</operator> <name>COMPRESSED_DXT3_RGBA</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>format</name> <operator>&lt;</operator> <name>COMPRESSED_ASTC_8x8_RGBA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dataSize</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>dataSize</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
