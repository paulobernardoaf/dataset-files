<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\models.c">





































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include> 


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EXTERNAL_CONFIG_FLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;direct.h&gt;</cpp:file></cpp:include> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHDIR</name></cpp:macro> <cpp:value>_chdir</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHDIR</name></cpp:macro> <cpp:value>chdir</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlgl.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_OBJ</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_MTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TINYOBJ_MALLOC</name></cpp:macro> <cpp:value>RL_MALLOC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TINYOBJ_CALLOC</name></cpp:macro> <cpp:value>RL_CALLOC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TINYOBJ_REALLOC</name></cpp:macro> <cpp:value>RL_REALLOC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TINYOBJ_FREE</name></cpp:macro> <cpp:value>RL_FREE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TINYOBJ_LOADER_C_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"external/tinyobj_loader_c.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_GLTF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CGLTF_MALLOC</name></cpp:macro> <cpp:value>RL_MALLOC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CGLTF_FREE</name></cpp:macro> <cpp:value>RL_FREE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CGLTF_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"external/cgltf.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"external/stb_image.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_MESH_GENERATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAR_MALLOC</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((T*)RL_MALLOC(N*sizeof(T)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAR_CALLOC</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((T*)RL_CALLOC(N*sizeof(T), 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAR_REALLOC</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>BUF</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((T*)RL_REALLOC(BUF, sizeof(T)*(N)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAR_FREE</name></cpp:macro> <cpp:value>RL_FREE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAR_SHAPES_IMPLEMENTATION</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"external/par_shapes.h"</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MESH_VBO</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_OBJ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>Model</name></type> <name>LoadOBJ</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_IQM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>Model</name></type> <name>LoadIQM</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_GLTF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>Model</name></type> <name>LoadGLTF</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>void</name></type> <name>DrawLine3D</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>startPos</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>endPos</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name><name>startPos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>startPos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>startPos</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name><name>endPos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>endPos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>endPos</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawPoint3D</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>,<argument><expr><literal type="number">0.0</literal></expr></argument>,<argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>,<argument><expr><literal type="number">0.0</literal></expr></argument>,<argument><expr><literal type="number">0.1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawCircle3D</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>rotationAxis</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rotationAngle</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlRotatef</name><argument_list>(<argument><expr><name>rotationAngle</name></expr></argument>, <argument><expr><name><name>rotationAxis</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>rotationAxis</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>rotationAxis</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">360</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">10</literal></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>DrawCube</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_TRIANGLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawCubeV</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawCube</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawCubeWires</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawCubeWiresV</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawCubeWires</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>DrawCubeTexture</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name><name>position</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><name><name>position</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><name><name>position</name><operator>.</operator><name>z</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlEnableTexture</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_QUADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlNormal3f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlNormal3f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>-</operator> <literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlNormal3f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlNormal3f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>-</operator> <literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlNormal3f</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlNormal3f</name><argument_list>( <argument><expr><operator>-</operator> <literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlDisableTexture</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawSphere</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>centerPos</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DrawSphereEx</name><argument_list>(<argument><expr><name>centerPos</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawSphereEx</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>centerPos</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rings</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>numVertex</name> <init>= <expr><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>*</operator><name>slices</name><operator>*</operator><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><name>numVertex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><name><name>centerPos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>centerPos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>centerPos</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlScalef</name><argument_list>(<argument><expr><name>radius</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_TRIANGLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>slices</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>j</name><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>j</name><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>j</name><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>j</name><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>j</name><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>j</name><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawSphereWires</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>centerPos</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rings</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>numVertex</name> <init>= <expr><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>*</operator><name>slices</name><operator>*</operator><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><name>numVertex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><name><name>centerPos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>centerPos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>centerPos</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlScalef</name><argument_list>(<argument><expr><name>radius</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>slices</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>j</name><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>j</name><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>j</name><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>j</name><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>j</name><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>j</name><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>j</name><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><literal type="number">270</literal><operator>+</operator><operator>(</operator><literal type="number">180</literal><operator>/</operator><operator>(</operator><name>rings</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>j</name><operator>*</operator><literal type="number">360</literal><operator>/</operator><name>slices</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>DrawCylinder</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radiusTop</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radiusBottom</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sides</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sides</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sides</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numVertex</name> <init>= <expr><name>sides</name><operator>*</operator><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><name>numVertex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_TRIANGLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>radiusTop</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">360</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusBottom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusBottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusBottom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusBottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusTop</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusTop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusTop</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusTop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusBottom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusBottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusTop</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusTop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">360</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusTop</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusTop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusTop</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusTop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">360</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusBottom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusBottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusBottom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusBottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">360</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusBottom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusBottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusBottom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusBottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>DrawCylinderWires</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radiusTop</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radiusBottom</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sides</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sides</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sides</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numVertex</name> <init>= <expr><name>sides</name><operator>*</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><name>numVertex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">360</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusBottom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusBottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusBottom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusBottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusBottom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusBottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusTop</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusTop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusTop</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusTop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusTop</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusTop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusTop</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusTop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusBottom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusBottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawPlane</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>centerPos</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><name><name>centerPos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>centerPos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>centerPos</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlScalef</name><argument_list>(<argument><expr><name><name>size</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_QUADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlNormal3f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawRay</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>ray</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>scale</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name><name>ray</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>ray</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>ray</name><operator>.</operator><name>position</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name><name>ray</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>ray</name><operator>.</operator><name>direction</name><operator>.</operator><name>x</name></name><operator>*</operator><name>scale</name></expr></argument>, <argument><expr><name><name>ray</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>ray</name><operator>.</operator><name>direction</name><operator>.</operator><name>y</name></name><operator>*</operator><name>scale</name></expr></argument>, <argument><expr><name><name>ray</name><operator>.</operator><name>position</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name><name>ray</name><operator>.</operator><name>direction</name><operator>.</operator><name>z</name></name><operator>*</operator><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawGrid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>spacing</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>halfSlices</name> <init>= <expr><name>slices</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><name>slices</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><name>halfSlices</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>halfSlices</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rlColor3f</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor3f</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor3f</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor3f</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>rlColor3f</name><argument_list>(<argument><expr><literal type="number">0.75f</literal></expr></argument>, <argument><expr><literal type="number">0.75f</literal></expr></argument>, <argument><expr><literal type="number">0.75f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor3f</name><argument_list>(<argument><expr><literal type="number">0.75f</literal></expr></argument>, <argument><expr><literal type="number">0.75f</literal></expr></argument>, <argument><expr><literal type="number">0.75f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor3f</name><argument_list>(<argument><expr><literal type="number">0.75f</literal></expr></argument>, <argument><expr><literal type="number">0.75f</literal></expr></argument>, <argument><expr><literal type="number">0.75f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor3f</name><argument_list>(<argument><expr><literal type="number">0.75f</literal></expr></argument>, <argument><expr><literal type="number">0.75f</literal></expr></argument>, <argument><expr><literal type="number">0.75f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>i</name><operator>*</operator><name>spacing</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>-</operator><name>halfSlices</name><operator>*</operator><name>spacing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>i</name><operator>*</operator><name>spacing</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>halfSlices</name><operator>*</operator><name>spacing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>-</operator><name>halfSlices</name><operator>*</operator><name>spacing</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>i</name><operator>*</operator><name>spacing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>halfSlices</name><operator>*</operator><name>spacing</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>i</name><operator>*</operator><name>spacing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawGizmo</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>length</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlScalef</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor3f</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor3f</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor3f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor3f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor3f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor3f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Model</name></type> <name>LoadModel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Model</name></type> <name>model</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_OBJ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".obj"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>model</name> <operator>=</operator> <call><name>LoadOBJ</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_IQM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".iqm"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>model</name> <operator>=</operator> <call><name>LoadIQM</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_GLTF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".gltf"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".glb"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>model</name> <operator>=</operator> <call><name>LoadGLTF</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name><name>model</name><operator>.</operator><name>transform</name></name> <operator>=</operator> <call><name>MatrixIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>model</name><operator>.</operator><name>meshCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name></name> <operator>=</operator> <operator>(</operator><name>Mesh</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>meshCount</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Mesh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_MESH_GENERATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MESH: [%s] Failed to load mesh data, default to cube mesh"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GenMeshCube</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MESH: [%s] Failed to load mesh data"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>model</name><operator>.</operator><name>meshCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlLoadMesh</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>model</name><operator>.</operator><name>materialCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MATERIAL: [%s] Failed to load material data, default to white material"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materialCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name></name> <operator>=</operator> <operator>(</operator><name>Material</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>materialCount</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Material</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>LoadMaterialDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>model</name><operator>.</operator><name>meshMaterial</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshMaterial</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>meshCount</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>model</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>Model</name></type> <name>LoadModelFromMesh</name><parameter_list>(<parameter><decl><type><name>Mesh</name></type> <name>mesh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Model</name></type> <name>model</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>transform</name></name> <operator>=</operator> <call><name>MatrixIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name></name> <operator>=</operator> <operator>(</operator><name>Mesh</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>meshCount</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Mesh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mesh</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materialCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name></name> <operator>=</operator> <operator>(</operator><name>Material</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>materialCount</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Material</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>LoadMaterialDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshMaterial</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>meshCount</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshMaterial</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<return>return <expr><name>model</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadModel</name><parameter_list>(<parameter><decl><type><name>Model</name></type> <name>model</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>model</name><operator>.</operator><name>meshCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>UnloadMesh</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>




<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>model</name><operator>.</operator><name>materialCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>maps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>meshes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>materials</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>meshMaterial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>bones</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>bindPose</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"MODEL: Unloaded model from RAM and VRAM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Mesh</name> <modifier>*</modifier></type><name>LoadMeshes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>meshCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Mesh</name> <modifier>*</modifier></type><name>meshes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><operator>*</operator><name>meshCount</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<return>return <expr><name>meshes</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadMesh</name><parameter_list>(<parameter><decl><type><name>Mesh</name></type> <name>mesh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rlUnloadMesh</name><argument_list>(<argument><expr><name>mesh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vboId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ExportMesh</name><parameter_list>(<parameter><decl><type><name>Mesh</name></type> <name>mesh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".obj"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>objFile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">"wt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objFile</name></expr></argument>, <argument><expr><literal type="string">"#//////////////////////////////////////////////////////////////////////////////////\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objFile</name></expr></argument>, <argument><expr><literal type="string">"#// //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objFile</name></expr></argument>, <argument><expr><literal type="string">"#// rMeshOBJ exporter v1.0 - Mesh exported as triangle faces and not optimized //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objFile</name></expr></argument>, <argument><expr><literal type="string">"#// //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objFile</name></expr></argument>, <argument><expr><literal type="string">"#// more info and bugs-report: github.com/raysan5/raylib //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objFile</name></expr></argument>, <argument><expr><literal type="string">"#// feedback and support: ray[at]raylib.com //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objFile</name></expr></argument>, <argument><expr><literal type="string">"#// //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objFile</name></expr></argument>, <argument><expr><literal type="string">"#// Copyright (c) 2018 Ramon Santamaria (@raysan5) //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objFile</name></expr></argument>, <argument><expr><literal type="string">"#// //\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objFile</name></expr></argument>, <argument><expr><literal type="string">"#//////////////////////////////////////////////////////////////////////////////////\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objFile</name></expr></argument>, <argument><expr><literal type="string">"#Vertex Count: %i\n"</literal></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objFile</name></expr></argument>, <argument><expr><literal type="string">"#Triangle Count: %i\n\n"</literal></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>triangleCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objFile</name></expr></argument>, <argument><expr><literal type="string">"g mesh\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>v</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objFile</name></expr></argument>, <argument><expr><literal type="string">"v %.2f %.2f %.2f\n"</literal></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>v</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objFile</name></expr></argument>, <argument><expr><literal type="string">"vt %.2f %.2f\n"</literal></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>v</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objFile</name></expr></argument>, <argument><expr><literal type="string">"vn %.2f %.2f %.2f\n"</literal></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>.</operator><name>triangleCount</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objFile</name></expr></argument>, <argument><expr><literal type="string">"f %i/%i/%i %i/%i/%i %i/%i/%i\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>objFile</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>objFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".raw"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> </block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Mesh exported successfully"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Failed to export mesh data"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>Material</name> <modifier>*</modifier></type><name>LoadMaterials</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>materialCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Material</name> <modifier>*</modifier></type><name>materials</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_MTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".mtl"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>tinyobj_material_t</name> <modifier>*</modifier></type><name>mats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>tinyobj_parse_mtl_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>TINYOBJ_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MATERIAL: [%s] Failed to parse materials file"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>tinyobj_materials_free</name><argument_list>(<argument><expr><name>mats</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Failed to load material file"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>shader</name> <operator>=</operator> <call><name>GetShaderDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>materialCount</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<return>return <expr><name>materials</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Material</name></type> <name>LoadMaterialDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Material</name></type> <name>material</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>maps</name></name> <operator>=</operator> <operator>(</operator><name>MaterialMap</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name>MAX_MATERIAL_MAPS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MaterialMap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>material</name><operator>.</operator><name>shader</name></name> <operator>=</operator> <call><name>GetShaderDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <call><name>GetTextureDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 



<expr_stmt><expr><name><name>material</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>material</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_SPECULAR</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt> 

<return>return <expr><name>material</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadMaterial</name><parameter_list>(<parameter><decl><type><name>Material</name></type> <name>material</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>material</name><operator>.</operator><name>shader</name><operator>.</operator><name>id</name></name> <operator>!=</operator> <call><name>GetShaderDefault</name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>UnloadShader</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>shader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_MATERIAL_MAPS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>material</name><operator>.</operator><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>texture</name><operator>.</operator><name>id</name></name> <operator>!=</operator> <call><name>GetTextureDefault</name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlDeleteTextures</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>material</name><operator>.</operator><name>maps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>SetMaterialTexture</name><parameter_list>(<parameter><decl><type><name>Material</name> <modifier>*</modifier></type><name>material</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mapType</name></decl></parameter>, <parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>material</name><operator>-&gt;</operator><name>maps</name><index>[<expr><name>mapType</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <name>texture</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>SetModelMeshMaterial</name><parameter_list>(<parameter><decl><type><name>Model</name> <modifier>*</modifier></type><name>model</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>meshId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>materialId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>meshId</name> <operator>&gt;=</operator> <name><name>model</name><operator>-&gt;</operator><name>meshCount</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MESH: Id greater than mesh count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>materialId</name> <operator>&gt;=</operator> <name><name>model</name><operator>-&gt;</operator><name>materialCount</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MATERIAL: Id greater than material count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>meshMaterial</name><index>[<expr><name>meshId</name></expr>]</index></name> <operator>=</operator> <name>materialId</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>ModelAnimation</name> <modifier>*</modifier></type><name>LoadModelAnimations</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>animCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IQM_MAGIC</name></cpp:macro> <cpp:value>"INTERQUAKEMODEL"</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IQM_VERSION</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <name>IQMHeader</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>magic</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>filesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_text</name></decl>, <name>ofs_text</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_meshes</name></decl>, <name>ofs_meshes</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_vertexarrays</name></decl>, <name>num_vertexes</name>, <name>ofs_vertexarrays</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_triangles</name></decl>, <name>ofs_triangles</name>, <name>ofs_adjacency</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_joints</name></decl>, <name>ofs_joints</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_poses</name></decl>, <name>ofs_poses</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_anims</name></decl>, <name>ofs_anims</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_frames</name></decl>, <name>num_framechannels</name>, <name>ofs_frames</name>, <name>ofs_bounds</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_comment</name></decl>, <name>ofs_comment</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_extensions</name></decl>, <name>ofs_extensions</name>;</decl_stmt>
}</block></struct></type> <name>IQMHeader</name>;</typedef>

<typedef>typedef <type><struct>struct <name>IQMPose</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>channeloffset</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>channelscale</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>IQMPose</name>;</typedef>

<typedef>typedef <type><struct>struct <name>IQMAnim</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>first_frame</name></decl>, <name>num_frames</name>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>framerate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
}</block></struct></type> <name>IQMAnim</name>;</typedef>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>iqmFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IQMHeader</name></type> <name>iqm</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iqmFile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iqmFile</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Failed to open file"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iqm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IQMHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iqmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>iqm</name><operator>.</operator><name>magic</name></name></expr></argument>, <argument><expr><name>IQM_MAGIC</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IQM_MAGIC</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MODEL: [%s] IQM file is not a valid model"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>iqmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iqm</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name>IQM_VERSION</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MODEL: [%s] IQM file version incorrect"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>iqmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>IQMPose</name> <modifier>*</modifier></type><name>poses</name> <init>= <expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>iqm</name><operator>.</operator><name>num_poses</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>IQMPose</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>iqmFile</name></expr></argument>, <argument><expr><name><name>iqm</name><operator>.</operator><name>ofs_poses</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name>poses</name></expr></argument>, <argument><expr><name><name>iqm</name><operator>.</operator><name>num_poses</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>IQMPose</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iqmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>animCount</name> <operator>=</operator> <name><name>iqm</name><operator>.</operator><name>num_anims</name></name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IQMAnim</name> <modifier>*</modifier></type><name>anim</name> <init>= <expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>iqm</name><operator>.</operator><name>num_anims</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>IQMAnim</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>iqmFile</name></expr></argument>, <argument><expr><name><name>iqm</name><operator>.</operator><name>ofs_anims</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name>anim</name></expr></argument>, <argument><expr><name><name>iqm</name><operator>.</operator><name>num_anims</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>IQMAnim</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iqmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ModelAnimation</name> <modifier>*</modifier></type><name>animations</name> <init>= <expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>iqm</name><operator>.</operator><name>num_anims</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ModelAnimation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>framedata</name> <init>= <expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>iqm</name><operator>.</operator><name>num_frames</name></name><operator>*</operator><name><name>iqm</name><operator>.</operator><name>num_framechannels</name></name><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>iqmFile</name></expr></argument>, <argument><expr><name><name>iqm</name><operator>.</operator><name>ofs_frames</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name>framedata</name></expr></argument>, <argument><expr><name><name>iqm</name><operator>.</operator><name>num_frames</name></name><operator>*</operator><name><name>iqm</name><operator>.</operator><name>num_framechannels</name></name><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iqmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <name><name>iqm</name><operator>.</operator><name>num_anims</name></name></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>frameCount</name> <operator>=</operator> <name><name>anim</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>num_frames</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>boneCount</name> <operator>=</operator> <name><name>iqm</name><operator>.</operator><name>num_poses</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>bones</name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>iqm</name><operator>.</operator><name>num_poses</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>BoneInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>framePoses</name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>anim</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>num_frames</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Transform</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>iqm</name><operator>.</operator><name>num_poses</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>bones</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"ANIMJOINTNAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>bones</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>parent</name> <operator>=</operator> <name><name>poses</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>parent</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>anim</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>num_frames</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>iqm</name><operator>.</operator><name>num_poses</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Transform</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>int</name></type> <name>dcounter</name> <init>= <expr><name><name>anim</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>first_frame</name><operator>*</operator><name><name>iqm</name><operator>.</operator><name>num_framechannels</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>frame</name> <operator>&lt;</operator> <name><name>anim</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>num_frames</name></expr>;</condition> <incr><expr><name>frame</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>iqm</name><operator>.</operator><name>num_poses</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>translation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channeloffset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>translation</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>framedata</name><index>[<expr><name>dcounter</name></expr>]</index></name><operator>*</operator><name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channelscale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dcounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>translation</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channeloffset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>&amp;</operator> <literal type="number">0x02</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>translation</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>framedata</name><index>[<expr><name>dcounter</name></expr>]</index></name><operator>*</operator><name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channelscale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dcounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>translation</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channeloffset</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>&amp;</operator> <literal type="number">0x04</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>translation</name><operator>.</operator><name>z</name></name> <operator>+=</operator> <name><name>framedata</name><index>[<expr><name>dcounter</name></expr>]</index></name><operator>*</operator><name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channelscale</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dcounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rotation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channeloffset</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>&amp;</operator> <literal type="number">0x08</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rotation</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>framedata</name><index>[<expr><name>dcounter</name></expr>]</index></name><operator>*</operator><name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channelscale</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dcounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rotation</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channeloffset</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rotation</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>framedata</name><index>[<expr><name>dcounter</name></expr>]</index></name><operator>*</operator><name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channelscale</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dcounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rotation</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channeloffset</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rotation</name><operator>.</operator><name>z</name></name> <operator>+=</operator> <name><name>framedata</name><index>[<expr><name>dcounter</name></expr>]</index></name><operator>*</operator><name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channelscale</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dcounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rotation</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channeloffset</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rotation</name><operator>.</operator><name>w</name></name> <operator>+=</operator> <name><name>framedata</name><index>[<expr><name>dcounter</name></expr>]</index></name><operator>*</operator><name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channelscale</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dcounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>scale</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channeloffset</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>scale</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>framedata</name><index>[<expr><name>dcounter</name></expr>]</index></name><operator>*</operator><name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channelscale</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dcounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>scale</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channeloffset</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>&amp;</operator> <literal type="number">0x100</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>scale</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>framedata</name><index>[<expr><name>dcounter</name></expr>]</index></name><operator>*</operator><name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channelscale</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dcounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>scale</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channeloffset</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name> <operator>&amp;</operator> <literal type="number">0x200</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>scale</name><operator>.</operator><name>z</name></name> <operator>+=</operator> <name><name>framedata</name><index>[<expr><name>dcounter</name></expr>]</index></name><operator>*</operator><name><name>poses</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channelscale</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dcounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <call><name>QuaternionNormalize</name><argument_list>(<argument><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>frame</name> <operator>&lt;</operator> <name><name>anim</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>num_frames</name></expr>;</condition> <incr><expr><name>frame</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>boneCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>bones</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <call><name>QuaternionMultiply</name><argument_list>(<argument><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>bones</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name></expr>]</index></name><operator>.</operator><name>rotation</name></expr></argument>, <argument><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>translation</name> <operator>=</operator> <call><name>Vector3RotateByQuaternion</name><argument_list>(<argument><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>translation</name></expr></argument>, <argument><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>bones</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name></expr>]</index></name><operator>.</operator><name>rotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>translation</name> <operator>=</operator> <call><name>Vector3Add</name><argument_list>(<argument><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>translation</name></expr></argument>, <argument><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>bones</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name></expr>]</index></name><operator>.</operator><name>translation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scale</name> <operator>=</operator> <call><name>Vector3Multiply</name><argument_list>(<argument><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scale</name></expr></argument>, <argument><expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name><name>animations</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name><name>bones</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name></expr>]</index></name><operator>.</operator><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>framedata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>poses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>anim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>iqmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>animations</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>UpdateModelAnimation</name><parameter_list>(<parameter><decl><type><name>Model</name></type> <name>model</name></decl></parameter>, <parameter><decl><type><name>ModelAnimation</name></type> <name>anim</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>anim</name><operator>.</operator><name>frameCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>anim</name><operator>.</operator><name>bones</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>anim</name><operator>.</operator><name>framePoses</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>frame</name> <operator>&gt;=</operator> <name><name>anim</name><operator>.</operator><name>frameCount</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>frame</name> <operator>=</operator> <name>frame</name><operator>%</operator><name><name>anim</name><operator>.</operator><name>frameCount</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>model</name><operator>.</operator><name>meshCount</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>animVertex</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>animNormal</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>inTranslation</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Quaternion</name></type> <name>inRotation</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Vector3</name></type> <name>outTranslation</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Quaternion</name></type> <name>outRotation</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>outScale</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>boneCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>boneId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>vertexCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>boneId</name> <operator>=</operator> <name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>boneIds</name><index>[<expr><name>boneCounter</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inTranslation</name> <operator>=</operator> <name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name>boneId</name></expr>]</index></name><operator>.</operator><name>translation</name></expr>;</expr_stmt>
<expr_stmt><expr><name>inRotation</name> <operator>=</operator> <name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name>boneId</name></expr>]</index></name><operator>.</operator><name>rotation</name></expr>;</expr_stmt>

<expr_stmt><expr><name>outTranslation</name> <operator>=</operator> <name><name>anim</name><operator>.</operator><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>boneId</name></expr>]</index></name><operator>.</operator><name>translation</name></expr>;</expr_stmt>
<expr_stmt><expr><name>outRotation</name> <operator>=</operator> <name><name>anim</name><operator>.</operator><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>boneId</name></expr>]</index></name><operator>.</operator><name>rotation</name></expr>;</expr_stmt>
<expr_stmt><expr><name>outScale</name> <operator>=</operator> <name><name>anim</name><operator>.</operator><name>framePoses</name><index>[<expr><name>frame</name></expr>]</index><index>[<expr><name>boneId</name></expr>]</index></name><operator>.</operator><name>scale</name></expr>;</expr_stmt>



<expr_stmt><expr><name>animVertex</name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>vertices</name><index>[<expr><name>vCounter</name></expr>]</index></name></expr>, <expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>animVertex</name> <operator>=</operator> <call><name>Vector3Multiply</name><argument_list>(<argument><expr><name>animVertex</name></expr></argument>, <argument><expr><name>outScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>animVertex</name> <operator>=</operator> <call><name>Vector3Subtract</name><argument_list>(<argument><expr><name>animVertex</name></expr></argument>, <argument><expr><name>inTranslation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>animVertex</name> <operator>=</operator> <call><name>Vector3RotateByQuaternion</name><argument_list>(<argument><expr><name>animVertex</name></expr></argument>, <argument><expr><call><name>QuaternionMultiply</name><argument_list>(<argument><expr><name>outRotation</name></expr></argument>, <argument><expr><call><name>QuaternionInvert</name><argument_list>(<argument><expr><name>inRotation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>animVertex</name> <operator>=</operator> <call><name>Vector3Add</name><argument_list>(<argument><expr><name>animVertex</name></expr></argument>, <argument><expr><name>outTranslation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>animVertices</name><index>[<expr><name>vCounter</name></expr>]</index></name> <operator>=</operator> <name><name>animVertex</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>animVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>animVertex</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>animVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>animVertex</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name>animNormal</name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>normals</name><index>[<expr><name>vCounter</name></expr>]</index></name></expr>, <expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>normals</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>normals</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>animNormal</name> <operator>=</operator> <call><name>Vector3RotateByQuaternion</name><argument_list>(<argument><expr><name>animNormal</name></expr></argument>, <argument><expr><call><name>QuaternionMultiply</name><argument_list>(<argument><expr><name>outRotation</name></expr></argument>, <argument><expr><call><name>QuaternionInvert</name><argument_list>(<argument><expr><name>inRotation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>animNormals</name><index>[<expr><name>vCounter</name></expr>]</index></name> <operator>=</operator> <name><name>animNormal</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>animNormals</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>animNormal</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>animNormals</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>animNormal</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vCounter</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>boneCounter</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>rlUpdateBuffer</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>vboId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>animVertices</name></expr></argument>, <argument><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>vertexCount</name><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rlUpdateBuffer</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>vboId</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>animNormals</name></expr></argument>, <argument><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>vertexCount</name><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>UnloadModelAnimation</name><parameter_list>(<parameter><decl><type><name>ModelAnimation</name></type> <name>anim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>anim</name><operator>.</operator><name>frameCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>anim</name><operator>.</operator><name>framePoses</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>anim</name><operator>.</operator><name>bones</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>anim</name><operator>.</operator><name>framePoses</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>IsModelAnimationValid</name><parameter_list>(<parameter><decl><type><name>Model</name></type> <name>model</name></decl></parameter>, <parameter><decl><type><name>ModelAnimation</name></type> <name>anim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>model</name><operator>.</operator><name>boneCount</name></name> <operator>!=</operator> <name><name>anim</name><operator>.</operator><name>boneCount</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>model</name><operator>.</operator><name>boneCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>model</name><operator>.</operator><name>bones</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name> <operator>!=</operator> <name><name>anim</name><operator>.</operator><name>bones</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> <break>break;</break> </block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_MESH_GENERATION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>Mesh</name></type> <name>GenMeshPoly</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sides</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Mesh</name></type> <name>mesh</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vboId</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name>MAX_MESH_VBO</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vertexCount</name> <init>= <expr><name>sides</name><operator>*</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Vector3</name> <modifier>*</modifier></type><name>vertices</name> <init>= <expr><operator>(</operator><name>Vector3</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>vertexCount</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Vector3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">360</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name></expr><operator>,</operator> <expr><name>v</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>vertices</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertices</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vertices</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></for>


<decl_stmt><decl><type><name>Vector3</name> <modifier>*</modifier></type><name>normals</name> <init>= <expr><operator>(</operator><name>Vector3</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>vertexCount</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Vector3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>vertexCount</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>normals</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt></block_content></block></for> 


<decl_stmt><decl><type><name>Vector2</name> <modifier>*</modifier></type><name>texcoords</name> <init>= <expr><operator>(</operator><name>Vector2</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>vertexCount</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Vector2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>vertexCount</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>texcoords</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name> <operator>=</operator> <name>vertexCount</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>triangleCount</name></name> <operator>=</operator> <name>sides</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name><operator>*</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>texcoords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>texcoords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>normals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>normals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>normals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>normals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>texcoords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlLoadMesh</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mesh</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mesh</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Mesh</name></type> <name>GenMeshPlane</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resZ</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Mesh</name></type> <name>mesh</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vboId</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name>MAX_MESH_VBO</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CUSTOM_MESH_GEN_PLANE</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CUSTOM_MESH_GEN_PLANE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>resX</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>resZ</name><operator>++</operator></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>vertexCount</name> <init>= <expr><name>resX</name><operator>*</operator><name>resZ</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Vector3</name> <modifier>*</modifier></type><name>vertices</name> <init>= <expr><operator>(</operator><name>Vector3</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>vertexCount</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Vector3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <name>resZ</name></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>zPos</name> <init>= <expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>z</name><operator>/</operator><operator>(</operator><name>resZ</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">0.5f</literal><operator>)</operator><operator>*</operator><name>length</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>resX</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>xPos</name> <init>= <expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>x</name><operator>/</operator><operator>(</operator><name>resX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">0.5f</literal><operator>)</operator><operator>*</operator><name>width</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>vertices</name><index>[<expr><name>x</name> <operator>+</operator> <name>z</name><operator>*</operator><name>resX</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><name>xPos</name></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><name>zPos</name></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<decl_stmt><decl><type><name>Vector3</name> <modifier>*</modifier></type><name>normals</name> <init>= <expr><operator>(</operator><name>Vector3</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>vertexCount</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Vector3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>vertexCount</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>normals</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt></block_content></block></for> 


<decl_stmt><decl><type><name>Vector2</name> <modifier>*</modifier></type><name>texcoords</name> <init>= <expr><operator>(</operator><name>Vector2</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>vertexCount</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Vector2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>resZ</name></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>u</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>resX</name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>texcoords</name><index>[<expr><name>u</name> <operator>+</operator> <name>v</name><operator>*</operator><name>resX</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name>u</name><operator>/</operator><operator>(</operator><name>resX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>v</name><operator>/</operator><operator>(</operator><name>resZ</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> }</block></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<decl_stmt><decl><type><name>int</name></type> <name>numFaces</name> <init>= <expr><operator>(</operator><name>resX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>resZ</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>triangles</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>numFaces</name><operator>*</operator><literal type="number">6</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>face</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>face</name> <operator>&lt;</operator> <name>numFaces</name></expr>;</condition> <incr><expr><name>face</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>face</name> <operator>%</operator> <operator>(</operator><name>resX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>face</name><operator>/</operator><operator>(</operator><name>resZ</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name>resX</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>triangles</name><index>[<expr><name>t</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>resX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>triangles</name><index>[<expr><name>t</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>triangles</name><index>[<expr><name>t</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>triangles</name><index>[<expr><name>t</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>resX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>triangles</name><index>[<expr><name>t</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>resX</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>triangles</name><index>[<expr><name>t</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name> <operator>=</operator> <name>vertexCount</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>triangleCount</name></name> <operator>=</operator> <name>numFaces</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name><operator>*</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>indices</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>triangleCount</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>vertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>texcoords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>texcoords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>normals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>normals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>normals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>.</operator><name>triangleCount</name></name><operator>*</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>triangles</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>normals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>texcoords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>triangles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<decl_stmt><decl><type><name>par_shapes_mesh</name> <modifier>*</modifier></type><name>plane</name> <init>= <expr><call><name>par_shapes_create_plane</name><argument_list>(<argument><expr><name>resX</name></expr></argument>, <argument><expr><name>resZ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
<expr_stmt><expr><call><name>par_shapes_scale</name><argument_list>(<argument><expr><name>plane</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>par_shapes_rotate</name><argument_list>(<argument>plane</argument>, <argument>-PI/<literal type="number">2.0f</literal></argument>, <argument>(float[]){ <literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>par_shapes_translate</name><argument_list>(<argument><expr><name>plane</name></expr></argument>, <argument><expr><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>plane</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>plane</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>plane</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vboId</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name>MAX_MESH_VBO</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>triangleCount</name></name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>ntriangles</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>plane</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>plane</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>plane</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name><name>plane</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name><name>plane</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name><name>plane</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>tcoords</name><index>[<expr><name><name>plane</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>plane</name><operator>-&gt;</operator><name>tcoords</name><index>[<expr><name><name>plane</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>par_shapes_free_mesh</name><argument_list>(<argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>rlLoadMesh</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mesh</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mesh</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Mesh</name></type> <name>GenMeshCube</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Mesh</name></type> <name>mesh</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vboId</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name>MAX_MESH_VBO</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CUSTOM_MESH_GEN_CUBE</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CUSTOM_MESH_GEN_CUBE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>float</name></type> <name><name>vertices</name><index>[]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>length</name><operator>/</operator><literal type="number">2</literal></expr>,
<expr><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>length</name><operator>/</operator><literal type="number">2</literal></expr>,
<expr><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>length</name><operator>/</operator><literal type="number">2</literal></expr>,
<expr><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>length</name><operator>/</operator><literal type="number">2</literal></expr>,
<expr><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr>,
<expr><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr>,
<expr><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr>,
<expr><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr>,
<expr><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr>,
<expr><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>length</name><operator>/</operator><literal type="number">2</literal></expr>,
<expr><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>length</name><operator>/</operator><literal type="number">2</literal></expr>,
<expr><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr>,
<expr><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr>,
<expr><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr>,
<expr><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>length</name><operator>/</operator><literal type="number">2</literal></expr>,
<expr><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>length</name><operator>/</operator><literal type="number">2</literal></expr>,
<expr><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr>,
<expr><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr>,
<expr><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>length</name><operator>/</operator><literal type="number">2</literal></expr>,
<expr><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>length</name><operator>/</operator><literal type="number">2</literal></expr>,
<expr><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr>,
<expr><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>length</name><operator>/</operator><literal type="number">2</literal></expr>,
<expr><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>length</name><operator>/</operator><literal type="number">2</literal></expr>,
<expr><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>height</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>texcoords</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>normals</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,<expr><operator>-</operator><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,<expr><operator>-</operator><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,<expr><operator>-</operator><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,<expr><operator>-</operator><literal type="number">1.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>,<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>,<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>,<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">0.0f</literal></expr>,<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>,
<expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><literal type="number">24</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vertices</name></name></expr></argument>, <argument><expr><name>vertices</name></expr></argument>, <argument><expr><literal type="number">24</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><literal type="number">24</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name></name></expr></argument>, <argument><expr><name>texcoords</name></expr></argument>, <argument><expr><literal type="number">24</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><literal type="number">24</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>normals</name></name></expr></argument>, <argument><expr><name>normals</name></expr></argument>, <argument><expr><literal type="number">24</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>indices</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><literal type="number">36</literal><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">36</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">6</literal></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>indices</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>indices</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>indices</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>indices</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>indices</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>triangleCount</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 










<decl_stmt><decl><type><name>par_shapes_mesh</name> <modifier>*</modifier></type><name>cube</name> <init>= <expr><call><name>par_shapes_create_cube</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cube</name><operator>-&gt;</operator><name>tcoords</name></name> <operator>=</operator> <call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name><name>cube</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>*</operator><name><name>cube</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>cube</name><operator>-&gt;</operator><name>tcoords</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>par_shapes_scale</name><argument_list>(<argument><expr><name>cube</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes_translate</name><argument_list>(<argument><expr><name>cube</name></expr></argument>, <argument><expr><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes_compute_normals</name><argument_list>(<argument><expr><name>cube</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>cube</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>cube</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>cube</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name> <operator>=</operator> <name><name>cube</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>triangleCount</name></name> <operator>=</operator> <name><name>cube</name><operator>-&gt;</operator><name>ntriangles</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>cube</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>cube</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cube</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>cube</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>cube</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>cube</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>cube</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name><name>cube</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cube</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name><name>cube</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>cube</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name><name>cube</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>cube</name><operator>-&gt;</operator><name>tcoords</name><index>[<expr><name><name>cube</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cube</name><operator>-&gt;</operator><name>tcoords</name><index>[<expr><name><name>cube</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>par_shapes_free_mesh</name><argument_list>(<argument><expr><name>cube</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>rlLoadMesh</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mesh</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mesh</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RLAPI</name> <name>Mesh</name></type> <name>GenMeshSphere</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rings</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Mesh</name></type> <name>mesh</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vboId</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name>MAX_MESH_VBO</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>par_shapes_mesh</name> <modifier>*</modifier></type><name>sphere</name> <init>= <expr><call><name>par_shapes_create_parametric_sphere</name><argument_list>(<argument><expr><name>slices</name></expr></argument>, <argument><expr><name>rings</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>par_shapes_scale</name><argument_list>(<argument><expr><name>sphere</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>sphere</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>sphere</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>sphere</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name> <operator>=</operator> <name><name>sphere</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>triangleCount</name></name> <operator>=</operator> <name><name>sphere</name><operator>-&gt;</operator><name>ntriangles</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>sphere</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>sphere</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sphere</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>sphere</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sphere</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>sphere</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>sphere</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name><name>sphere</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sphere</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name><name>sphere</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sphere</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name><name>sphere</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sphere</name><operator>-&gt;</operator><name>tcoords</name><index>[<expr><name><name>sphere</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sphere</name><operator>-&gt;</operator><name>tcoords</name><index>[<expr><name><name>sphere</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>par_shapes_free_mesh</name><argument_list>(<argument><expr><name>sphere</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlLoadMesh</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mesh</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mesh</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RLAPI</name> <name>Mesh</name></type> <name>GenMeshHemiSphere</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rings</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Mesh</name></type> <name>mesh</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vboId</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name>MAX_MESH_VBO</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>par_shapes_mesh</name> <modifier>*</modifier></type><name>sphere</name> <init>= <expr><call><name>par_shapes_create_hemisphere</name><argument_list>(<argument><expr><name>slices</name></expr></argument>, <argument><expr><name>rings</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>par_shapes_scale</name><argument_list>(<argument><expr><name>sphere</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>sphere</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>sphere</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>sphere</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name> <operator>=</operator> <name><name>sphere</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>triangleCount</name></name> <operator>=</operator> <name><name>sphere</name><operator>-&gt;</operator><name>ntriangles</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>sphere</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>sphere</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sphere</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>sphere</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sphere</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>sphere</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>sphere</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name><name>sphere</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sphere</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name><name>sphere</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sphere</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name><name>sphere</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sphere</name><operator>-&gt;</operator><name>tcoords</name><index>[<expr><name><name>sphere</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sphere</name><operator>-&gt;</operator><name>tcoords</name><index>[<expr><name><name>sphere</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>par_shapes_free_mesh</name><argument_list>(<argument><expr><name>sphere</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlLoadMesh</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mesh</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mesh</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Mesh</name></type> <name>GenMeshCylinder</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Mesh</name></type> <name>mesh</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vboId</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name>MAX_MESH_VBO</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<decl_stmt><decl><type><name>par_shapes_mesh</name> <modifier>*</modifier></type><name>cylinder</name> <init>= <expr><call><name>par_shapes_create_cylinder</name><argument_list>(<argument><expr><name>slices</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>par_shapes_scale</name><argument_list>(<argument><expr><name>cylinder</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>par_shapes_rotate</name><argument_list>(<argument>cylinder</argument>, <argument>-PI/<literal type="number">2.0f</literal></argument>, <argument>(float[]){ <literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>par_shapes_rotate</name><argument_list>(<argument>cylinder</argument>, <argument>PI/<literal type="number">2.0f</literal></argument>, <argument>(float[]){ <literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>par_shapes_mesh</name> <modifier>*</modifier></type><name>capTop</name> <init>= <macro><name>par_shapes_create_disk</name><argument_list>(<argument>radius</argument>, <argument>slices</argument>, <argument>(float[]){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal> }</argument>, <argument>(float[]){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal> }</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>capTop</name><operator>-&gt;</operator><name>tcoords</name></name> <operator>=</operator> <call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name><name>capTop</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>*</operator><name><name>capTop</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>capTop</name><operator>-&gt;</operator><name>tcoords</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></for>
<macro><name>par_shapes_rotate</name><argument_list>(<argument>capTop</argument>, <argument>-PI/<literal type="number">2.0f</literal></argument>, <argument>(float[]){ <literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>par_shapes_translate</name><argument_list>(<argument><expr><name>capTop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>par_shapes_mesh</name> <modifier>*</modifier></type><name>capBottom</name> <init>= <macro><name>par_shapes_create_disk</name><argument_list>(<argument>radius</argument>, <argument>slices</argument>, <argument>(float[]){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal> }</argument>, <argument>(float[]){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">1</literal> }</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>capBottom</name><operator>-&gt;</operator><name>tcoords</name></name> <operator>=</operator> <call><name>PAR_MALLOC</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name><name>capBottom</name><operator>-&gt;</operator><name>npoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>*</operator><name><name>capBottom</name><operator>-&gt;</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>capBottom</name><operator>-&gt;</operator><name>tcoords</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.95f</literal></expr>;</expr_stmt></block_content></block></for>
<macro><name>par_shapes_rotate</name><argument_list>(<argument>capBottom</argument>, <argument>PI/<literal type="number">2.0f</literal></argument>, <argument>(float[]){ <literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>par_shapes_merge_and_free</name><argument_list>(<argument><expr><name>cylinder</name></expr></argument>, <argument><expr><name>capTop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>par_shapes_merge_and_free</name><argument_list>(<argument><expr><name>cylinder</name></expr></argument>, <argument><expr><name>capBottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>cylinder</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>cylinder</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>cylinder</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name> <operator>=</operator> <name><name>cylinder</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>triangleCount</name></name> <operator>=</operator> <name><name>cylinder</name><operator>-&gt;</operator><name>ntriangles</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>cylinder</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>cylinder</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cylinder</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>cylinder</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>cylinder</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>cylinder</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>cylinder</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name><name>cylinder</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cylinder</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name><name>cylinder</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>cylinder</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name><name>cylinder</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>cylinder</name><operator>-&gt;</operator><name>tcoords</name><index>[<expr><name><name>cylinder</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cylinder</name><operator>-&gt;</operator><name>tcoords</name><index>[<expr><name><name>cylinder</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>par_shapes_free_mesh</name><argument_list>(<argument><expr><name>cylinder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlLoadMesh</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mesh</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mesh</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Mesh</name></type> <name>GenMeshTorus</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radSeg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sides</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Mesh</name></type> <name>mesh</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vboId</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name>MAX_MESH_VBO</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>radius</name> <operator>&gt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>radius</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>radius</name> <operator>&lt;</operator> <literal type="number">0.1f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>radius</name> <operator>=</operator> <literal type="number">0.1f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<decl_stmt><decl><type><name>par_shapes_mesh</name> <modifier>*</modifier></type><name>torus</name> <init>= <expr><call><name>par_shapes_create_torus</name><argument_list>(<argument><expr><name>radSeg</name></expr></argument>, <argument><expr><name>sides</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>par_shapes_scale</name><argument_list>(<argument><expr><name>torus</name></expr></argument>, <argument><expr><name>size</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>size</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>size</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>torus</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>torus</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>torus</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name> <operator>=</operator> <name><name>torus</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>triangleCount</name></name> <operator>=</operator> <name><name>torus</name><operator>-&gt;</operator><name>ntriangles</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>torus</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>torus</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>torus</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>torus</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>torus</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>torus</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>torus</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name><name>torus</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>torus</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name><name>torus</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>torus</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name><name>torus</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>torus</name><operator>-&gt;</operator><name>tcoords</name><index>[<expr><name><name>torus</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>torus</name><operator>-&gt;</operator><name>tcoords</name><index>[<expr><name><name>torus</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>par_shapes_free_mesh</name><argument_list>(<argument><expr><name>torus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlLoadMesh</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mesh</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mesh</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Mesh</name></type> <name>GenMeshKnot</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radSeg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sides</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Mesh</name></type> <name>mesh</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vboId</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name>MAX_MESH_VBO</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>radius</name> <operator>&gt;</operator> <literal type="number">3.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>radius</name> <operator>=</operator> <literal type="number">3.0f</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>radius</name> <operator>&lt;</operator> <literal type="number">0.5f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>radius</name> <operator>=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>par_shapes_mesh</name> <modifier>*</modifier></type><name>knot</name> <init>= <expr><call><name>par_shapes_create_trefoil_knot</name><argument_list>(<argument><expr><name>radSeg</name></expr></argument>, <argument><expr><name>sides</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>par_shapes_scale</name><argument_list>(<argument><expr><name>knot</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>knot</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>knot</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>knot</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name> <operator>=</operator> <name><name>knot</name><operator>-&gt;</operator><name>ntriangles</name></name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>triangleCount</name></name> <operator>=</operator> <name><name>knot</name><operator>-&gt;</operator><name>ntriangles</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>knot</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>knot</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>knot</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>knot</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>knot</name><operator>-&gt;</operator><name>points</name><index>[<expr><name><name>knot</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>knot</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name><name>knot</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>knot</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name><name>knot</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>knot</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name><name>knot</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>knot</name><operator>-&gt;</operator><name>tcoords</name><index>[<expr><name><name>knot</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>knot</name><operator>-&gt;</operator><name>tcoords</name><index>[<expr><name><name>knot</name><operator>-&gt;</operator><name>triangles</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>par_shapes_free_mesh</name><argument_list>(<argument><expr><name>knot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlLoadMesh</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mesh</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mesh</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>Mesh</name></type> <name>GenMeshHeightmap</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>heightmap</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAY_VALUE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c.r+c.g+c.b)/3)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>Mesh</name></type> <name>mesh</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vboId</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name>MAX_MESH_VBO</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mapX</name> <init>= <expr><name><name>heightmap</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mapZ</name> <init>= <expr><name><name>heightmap</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><name>heightmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>triangleCount</name></name> <operator>=</operator> <operator>(</operator><name>mapX</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>mapZ</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name> <operator>=</operator> <name><name>mesh</name><operator>.</operator><name>triangleCount</name></name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name><operator>*</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>colors</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>tcCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>trisCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>scaleFactor</name> <init>= <expr><block>{ <expr><name><name>size</name><operator>.</operator><name>x</name></name><operator>/</operator><name>mapX</name></expr>, <expr><name><name>size</name><operator>.</operator><name>y</name></name><operator>/</operator><literal type="number">255.0f</literal></expr>, <expr><name><name>size</name><operator>.</operator><name>z</name></name><operator>/</operator><name>mapZ</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>vA</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>vB</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>vC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>vN</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <name>mapZ</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>mapX</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>




<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>x</name><operator>*</operator><name><name>scaleFactor</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GRAY_VALUE</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><name>x</name> <operator>+</operator> <name>z</name><operator>*</operator><name>mapX</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>scaleFactor</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>z</name><operator>*</operator><name><name>scaleFactor</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>x</name><operator>*</operator><name><name>scaleFactor</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GRAY_VALUE</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name>mapX</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>scaleFactor</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>z</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>scaleFactor</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>scaleFactor</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GRAY_VALUE</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>z</name><operator>*</operator><name>mapX</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>scaleFactor</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>z</name><operator>*</operator><name><name>scaleFactor</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>scaleFactor</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GRAY_VALUE</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>z</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name>mapX</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>*</operator><name><name>scaleFactor</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>z</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>scaleFactor</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vCounter</name> <operator>+=</operator> <literal type="number">18</literal></expr>;</expr_stmt> 



<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>tcCounter</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>x</name><operator>/</operator><operator>(</operator><name>mapX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>z</name><operator>/</operator><operator>(</operator><name>mapZ</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>x</name><operator>/</operator><operator>(</operator><name>mapX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>z</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><operator>(</operator><name>mapZ</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><operator>(</operator><name>mapX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>z</name><operator>/</operator><operator>(</operator><name>mapZ</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><operator>(</operator><name>mapX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>z</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><operator>(</operator><name>mapZ</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tcCounter</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt> 



<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">18</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">9</literal></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>vA</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>nCounter</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vA</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>nCounter</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vA</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>nCounter</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vB</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>nCounter</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vB</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>nCounter</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vB</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>nCounter</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vC</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>nCounter</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vC</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>nCounter</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vC</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>nCounter</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>vN</name> <operator>=</operator> <call><name>Vector3Normalize</name><argument_list>(<argument><expr><call><name>Vector3CrossProduct</name><argument_list>(<argument><expr><call><name>Vector3Subtract</name><argument_list>(<argument><expr><name>vB</name></expr></argument>, <argument><expr><name>vA</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Vector3Subtract</name><argument_list>(<argument><expr><name>vC</name></expr></argument>, <argument><expr><name>vA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>vN</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>vN</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>vN</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>vN</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>vN</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>vN</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>vN</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>vN</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>vN</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>nCounter</name> <operator>+=</operator> <literal type="number">18</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>trisCounter</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlLoadMesh</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mesh</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mesh</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>Mesh</name></type> <name>GenMeshCubicmap</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>cubicmap</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>cubeSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Mesh</name></type> <name>mesh</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vboId</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name>MAX_MESH_VBO</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>cubicmapPixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><name>cubicmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mapWidth</name> <init>= <expr><name><name>cubicmap</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mapHeight</name> <init>= <expr><name><name>cubicmap</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>maxTriangles</name> <init>= <expr><name><name>cubicmap</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>cubicmap</name><operator>.</operator><name>height</name></name><operator>*</operator><literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>tcCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>w</name> <init>= <expr><name><name>cubeSize</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>h</name> <init>= <expr><name><name>cubeSize</name><operator>.</operator><name>z</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>h2</name> <init>= <expr><name><name>cubeSize</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name> <modifier>*</modifier></type><name>mapVertices</name> <init>= <expr><operator>(</operator><name>Vector3</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>maxTriangles</name><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Vector3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name> <modifier>*</modifier></type><name>mapTexcoords</name> <init>= <expr><operator>(</operator><name>Vector2</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>maxTriangles</name><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Vector2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name> <modifier>*</modifier></type><name>mapNormals</name> <init>= <expr><operator>(</operator><name>Vector3</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>maxTriangles</name><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Vector3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Vector3</name></type> <name>n1</name> <init>= <expr><block>{ <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>n2</name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>n3</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>n4</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>n5</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>n6</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><operator>-</operator><literal type="number">1.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<typedef>typedef <type><struct>struct <name>RectangleF</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>height</name></decl>;</decl_stmt>
}</block></struct></type> <name>RectangleF</name>;</typedef>

<decl_stmt><decl><type><name>RectangleF</name></type> <name>rightTexUV</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.5f</literal></expr>, <expr><literal type="number">0.5f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RectangleF</name></type> <name>leftTexUV</name> <init>= <expr><block>{ <expr><literal type="number">0.5f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.5f</literal></expr>, <expr><literal type="number">0.5f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RectangleF</name></type> <name>frontTexUV</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.5f</literal></expr>, <expr><literal type="number">0.5f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RectangleF</name></type> <name>backTexUV</name> <init>= <expr><block>{ <expr><literal type="number">0.5f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.5f</literal></expr>, <expr><literal type="number">0.5f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RectangleF</name></type> <name>topTexUV</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.5f</literal></expr>, <expr><literal type="number">0.5f</literal></expr>, <expr><literal type="number">0.5f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RectangleF</name></type> <name>bottomTexUV</name> <init>= <expr><block>{ <expr><literal type="number">0.5f</literal></expr>, <expr><literal type="number">0.5f</literal></expr>, <expr><literal type="number">0.5f</literal></expr>, <expr><literal type="number">0.5f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <name>mapHeight</name></expr>;</condition> <incr><expr><operator>++</operator><name>z</name></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>mapWidth</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>
<block>{<block_content>

<decl_stmt><decl><type><name>Vector3</name></type> <name>v1</name> <init>= <expr><block>{ <expr><name>w</name><operator>*</operator><operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">0.5f</literal><operator>)</operator></expr>, <expr><name>h2</name></expr>, <expr><name>h</name><operator>*</operator><operator>(</operator><name>z</name> <operator>-</operator> <literal type="number">0.5f</literal><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>v2</name> <init>= <expr><block>{ <expr><name>w</name><operator>*</operator><operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">0.5f</literal><operator>)</operator></expr>, <expr><name>h2</name></expr>, <expr><name>h</name><operator>*</operator><operator>(</operator><name>z</name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>v3</name> <init>= <expr><block>{ <expr><name>w</name><operator>*</operator><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr>, <expr><name>h2</name></expr>, <expr><name>h</name><operator>*</operator><operator>(</operator><name>z</name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>v4</name> <init>= <expr><block>{ <expr><name>w</name><operator>*</operator><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr>, <expr><name>h2</name></expr>, <expr><name>h</name><operator>*</operator><operator>(</operator><name>z</name> <operator>-</operator> <literal type="number">0.5f</literal><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>v5</name> <init>= <expr><block>{ <expr><name>w</name><operator>*</operator><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>h</name><operator>*</operator><operator>(</operator><name>z</name> <operator>-</operator> <literal type="number">0.5f</literal><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>v6</name> <init>= <expr><block>{ <expr><name>w</name><operator>*</operator><operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">0.5f</literal><operator>)</operator></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>h</name><operator>*</operator><operator>(</operator><name>z</name> <operator>-</operator> <literal type="number">0.5f</literal><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>v7</name> <init>= <expr><block>{ <expr><name>w</name><operator>*</operator><operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">0.5f</literal><operator>)</operator></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>h</name><operator>*</operator><operator>(</operator><name>z</name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>v8</name> <init>= <expr><block>{ <expr><name>w</name><operator>*</operator><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>h</name><operator>*</operator><operator>(</operator><name>z</name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cubicmapPixels</name><index>[<expr><name>z</name><operator>*</operator><name><name>cubicmap</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>==</operator> <literal type="number">255</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>cubicmapPixels</name><index>[<expr><name>z</name><operator>*</operator><name><name>cubicmap</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>==</operator> <literal type="number">255</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>cubicmapPixels</name><index>[<expr><name>z</name><operator>*</operator><name><name>cubicmap</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>==</operator> <literal type="number">255</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name></expr>]</index></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>v3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>v3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>v4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name></expr>]</index></name> <operator>=</operator> <name>n3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>n3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>n3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>n3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>n3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>n3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>topTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>topTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>topTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>topTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>topTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>topTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>topTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>topTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>topTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>topTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>topTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>topTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>topTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>topTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>topTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>topTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>topTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>topTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>tcCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name></expr>]</index></name> <operator>=</operator> <name>v6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>v7</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>v6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>v5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>v8</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name></expr>]</index></name> <operator>=</operator> <name>n4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>n4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>n4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>n4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>n4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>n4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>bottomTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>bottomTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>bottomTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>bottomTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>bottomTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>bottomTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>bottomTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>bottomTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>bottomTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>bottomTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>bottomTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>bottomTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>bottomTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>bottomTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>bottomTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>bottomTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>bottomTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>bottomTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>tcCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>z</name> <operator>&lt;</operator> <name><name>cubicmap</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>cubicmapPixels</name><index>[<expr><operator>(</operator><name>z</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>cubicmap</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>cubicmapPixels</name><index>[<expr><operator>(</operator><name>z</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>cubicmap</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>cubicmapPixels</name><index>[<expr><operator>(</operator><name>z</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>cubicmap</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>z</name> <operator>==</operator> <name><name>cubicmap</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name></expr>]</index></name> <operator>=</operator> <name>v2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v7</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>v3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>v3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>v7</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>v8</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name></expr>]</index></name> <operator>=</operator> <name>n6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>n6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>n6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>n6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>n6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>n6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>frontTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>frontTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>frontTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>frontTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>frontTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>frontTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>frontTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>frontTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>frontTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>frontTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>frontTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>frontTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>frontTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>frontTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>frontTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>frontTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>frontTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>frontTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>tcCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>z</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>cubicmapPixels</name><index>[<expr><operator>(</operator><name>z</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>cubicmap</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>cubicmapPixels</name><index>[<expr><operator>(</operator><name>z</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>cubicmap</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>cubicmapPixels</name><index>[<expr><operator>(</operator><name>z</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>cubicmap</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>z</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name></expr>]</index></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>v6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>v4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>v5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name></expr>]</index></name> <operator>=</operator> <name>n5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>n5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>n5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>n5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>n5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>n5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>backTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>backTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>backTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>backTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>backTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>backTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>backTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>backTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>backTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>backTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>backTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>backTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>backTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>backTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>backTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>backTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>backTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>backTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>tcCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>x</name> <operator>&lt;</operator> <name><name>cubicmap</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>cubicmapPixels</name><index>[<expr><name>z</name><operator>*</operator><name><name>cubicmap</name><operator>.</operator><name>width</name></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name><operator>.</operator><name>r</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>cubicmapPixels</name><index>[<expr><name>z</name><operator>*</operator><name><name>cubicmap</name><operator>.</operator><name>width</name></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name><operator>.</operator><name>g</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>cubicmapPixels</name><index>[<expr><name>z</name><operator>*</operator><name><name>cubicmap</name><operator>.</operator><name>width</name></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name><operator>.</operator><name>b</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>x</name> <operator>==</operator> <name><name>cubicmap</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name></expr>]</index></name> <operator>=</operator> <name>v3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>v4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>v4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>v8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>v5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name></expr>]</index></name> <operator>=</operator> <name>n1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>n1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>n1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>n1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>n1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>n1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>rightTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>rightTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>rightTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>rightTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rightTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>rightTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rightTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>rightTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>rightTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rightTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>rightTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>rightTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>rightTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rightTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>rightTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rightTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>rightTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rightTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>tcCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>cubicmapPixels</name><index>[<expr><name>z</name><operator>*</operator><name><name>cubicmap</name><operator>.</operator><name>width</name></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name><operator>.</operator><name>r</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>cubicmapPixels</name><index>[<expr><name>z</name><operator>*</operator><name><name>cubicmap</name><operator>.</operator><name>width</name></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name><operator>.</operator><name>g</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>cubicmapPixels</name><index>[<expr><name>z</name><operator>*</operator><name><name>cubicmap</name><operator>.</operator><name>width</name></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name><operator>.</operator><name>b</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>x</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name></expr>]</index></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v7</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>v2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>v6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>v7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name></expr>]</index></name> <operator>=</operator> <name>n2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>n2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>n2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>n2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>n2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>n2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>leftTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>leftTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>leftTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>leftTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>leftTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>leftTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>leftTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>leftTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>leftTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>leftTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>leftTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>leftTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>leftTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>leftTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>leftTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>leftTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>leftTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>leftTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>tcCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>cubicmapPixels</name><index>[<expr><name>z</name><operator>*</operator><name><name>cubicmap</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>cubicmapPixels</name><index>[<expr><name>z</name><operator>*</operator><name><name>cubicmap</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>g</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>cubicmapPixels</name><index>[<expr><name>z</name><operator>*</operator><name><name>cubicmap</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name></expr>]</index></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>v2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>v4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>v3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name></expr>]</index></name> <operator>=</operator> <name>n4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>n4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>n4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>n4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>n4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>n4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>topTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>topTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>topTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>topTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>topTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>topTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>topTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>topTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>topTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>topTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>topTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>topTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>topTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>topTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>topTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>topTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>topTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>topTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>tcCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name></expr>]</index></name> <operator>=</operator> <name>v6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v7</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>v8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>v6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>v8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapVertices</name><index>[<expr><name>vCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>v5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name></expr>]</index></name> <operator>=</operator> <name>n3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>n3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>n3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>n3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>n3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapNormals</name><index>[<expr><name>nCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>n3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>bottomTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>bottomTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>bottomTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>bottomTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>bottomTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>bottomTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>bottomTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>bottomTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>bottomTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>bottomTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>bottomTexUV</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>bottomTexUV</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>bottomTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>bottomTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>bottomTexUV</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>bottomTexUV</name><operator>.</operator><name>height</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mapTexcoords</name><index>[<expr><name>tcCounter</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>bottomTexUV</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>bottomTexUV</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>tcCounter</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name> <operator>=</operator> <name>vCounter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>triangleCount</name></name> <operator>=</operator> <name>vCounter</name><operator>/</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name><operator>*</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>colors</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>vCounter</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>fCounter</name></expr>]</index></name> <operator>=</operator> <name><name>mapVertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>fCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mapVertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>fCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>mapVertices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fCounter</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>fCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nCounter</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>fCounter</name></expr>]</index></name> <operator>=</operator> <name><name>mapNormals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>fCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mapNormals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>fCounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>mapNormals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fCounter</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>fCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tcCounter</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>fCounter</name></expr>]</index></name> <operator>=</operator> <name><name>mapTexcoords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>fCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mapTexcoords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fCounter</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>mapVertices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>mapNormals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>mapTexcoords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>cubicmapPixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>rlLoadMesh</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mesh</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mesh</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 



<function><type><name>BoundingBox</name></type> <name>MeshBoundingBox</name><parameter_list>(<parameter><decl><type><name>Mesh</name></type> <name>mesh</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>Vector3</name></type> <name>minVertex</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>maxVertex</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mesh</name><operator>.</operator><name>vertices</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>minVertex</name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>maxVertex</name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> }</block></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>.</operator><name>vertexCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>minVertex</name> <operator>=</operator> <macro><name>Vector3Min</name><argument_list>(<argument>minVertex</argument>, <argument>(Vector3){ mesh.vertices[i*<literal type="number">3</literal>]</argument>, <argument>mesh.vertices[i*<literal type="number">3</literal> + <literal type="number">1</literal>]</argument>, <argument>mesh.vertices[i*<literal type="number">3</literal> + <literal type="number">2</literal>] }</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>maxVertex</name> <operator>=</operator> <macro><name>Vector3Max</name><argument_list>(<argument>maxVertex</argument>, <argument>(Vector3){ mesh.vertices[i*<literal type="number">3</literal>]</argument>, <argument>mesh.vertices[i*<literal type="number">3</literal> + <literal type="number">1</literal>]</argument>, <argument>mesh.vertices[i*<literal type="number">3</literal> + <literal type="number">2</literal>] }</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>BoundingBox</name></type> <name>box</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>box</name><operator>.</operator><name>min</name></name> <operator>=</operator> <name>minVertex</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>box</name><operator>.</operator><name>max</name></name> <operator>=</operator> <name>maxVertex</name></expr>;</expr_stmt>

<return>return <expr><name>box</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>MeshTangents</name><parameter_list>(<parameter><decl><type><name>Mesh</name> <modifier>*</modifier></type><name>mesh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mesh</name><operator>-&gt;</operator><name>tangents</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>tangents</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>vertexCount</name></name><operator>*</operator><literal type="number">4</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MESH: Tangents data already available, re-writting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>Vector3</name> <modifier>*</modifier></type><name>tan1</name> <init>= <expr><operator>(</operator><name>Vector3</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>vertexCount</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Vector3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name> <modifier>*</modifier></type><name>tan2</name> <init>= <expr><operator>(</operator><name>Vector3</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>vertexCount</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Vector3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>vertexCount</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control>
<block>{<block_content>

<decl_stmt><decl><type><name>Vector3</name></type> <name>v1</name> <init>= <expr><block>{ <expr><name><name>mesh</name><operator>-&gt;</operator><name>vertices</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>mesh</name><operator>-&gt;</operator><name>vertices</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>mesh</name><operator>-&gt;</operator><name>vertices</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>v2</name> <init>= <expr><block>{ <expr><name><name>mesh</name><operator>-&gt;</operator><name>vertices</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>mesh</name><operator>-&gt;</operator><name>vertices</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>mesh</name><operator>-&gt;</operator><name>vertices</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>v3</name> <init>= <expr><block>{ <expr><name><name>mesh</name><operator>-&gt;</operator><name>vertices</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>mesh</name><operator>-&gt;</operator><name>vertices</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>mesh</name><operator>-&gt;</operator><name>vertices</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Vector2</name></type> <name>uv1</name> <init>= <expr><block>{ <expr><name><name>mesh</name><operator>-&gt;</operator><name>texcoords</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>mesh</name><operator>-&gt;</operator><name>texcoords</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>uv2</name> <init>= <expr><block>{ <expr><name><name>mesh</name><operator>-&gt;</operator><name>texcoords</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>mesh</name><operator>-&gt;</operator><name>texcoords</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector2</name></type> <name>uv3</name> <init>= <expr><block>{ <expr><name><name>mesh</name><operator>-&gt;</operator><name>texcoords</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>mesh</name><operator>-&gt;</operator><name>texcoords</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x1</name> <init>= <expr><name><name>v2</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y1</name> <init>= <expr><name><name>v2</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>z1</name> <init>= <expr><name><name>v2</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>z</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>x2</name> <init>= <expr><name><name>v3</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>y2</name> <init>= <expr><name><name>v3</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>z2</name> <init>= <expr><name><name>v3</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>z</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>s1</name> <init>= <expr><name><name>uv2</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>uv1</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>t1</name> <init>= <expr><name><name>uv2</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>uv1</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>s2</name> <init>= <expr><name><name>uv3</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>uv1</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>t2</name> <init>= <expr><name><name>uv3</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>uv1</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>div</name> <init>= <expr><name>s1</name><operator>*</operator><name>t2</name> <operator>-</operator> <name>s2</name><operator>*</operator><name>t1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>r</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>div</name> <operator>==</operator> <literal type="number">0.0f</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">0.0f</literal></expr> </then><else>: <expr><literal type="number">1.0f</literal><operator>/</operator><name>div</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>sdir</name> <init>= <expr><block>{ <expr><operator>(</operator><name>t2</name><operator>*</operator><name>x1</name> <operator>-</operator> <name>t1</name><operator>*</operator><name>x2</name><operator>)</operator><operator>*</operator><name>r</name></expr>, <expr><operator>(</operator><name>t2</name><operator>*</operator><name>y1</name> <operator>-</operator> <name>t1</name><operator>*</operator><name>y2</name><operator>)</operator><operator>*</operator><name>r</name></expr>, <expr><operator>(</operator><name>t2</name><operator>*</operator><name>z1</name> <operator>-</operator> <name>t1</name><operator>*</operator><name>z2</name><operator>)</operator><operator>*</operator><name>r</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>tdir</name> <init>= <expr><block>{ <expr><operator>(</operator><name>s1</name><operator>*</operator><name>x2</name> <operator>-</operator> <name>s2</name><operator>*</operator><name>x1</name><operator>)</operator><operator>*</operator><name>r</name></expr>, <expr><operator>(</operator><name>s1</name><operator>*</operator><name>y2</name> <operator>-</operator> <name>s2</name><operator>*</operator><name>y1</name><operator>)</operator><operator>*</operator><name>r</name></expr>, <expr><operator>(</operator><name>s1</name><operator>*</operator><name>z2</name> <operator>-</operator> <name>s2</name><operator>*</operator><name>z1</name><operator>)</operator><operator>*</operator><name>r</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tan1</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sdir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tan1</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sdir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tan1</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>sdir</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tan2</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tdir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tan2</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tdir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tan2</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>tdir</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>vertexCount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>normal</name> <init>= <expr><block>{ <expr><name><name>mesh</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>mesh</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>mesh</name><operator>-&gt;</operator><name>normals</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>tangent</name> <init>= <expr><name><name>tan1</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMPUTE_TANGENTS_METHOD_01</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>Vector3</name></type> <name>tmp</name> <init>= <expr><call><name>Vector3Subtract</name><argument_list>(<argument><expr><name>tangent</name></expr></argument>, <argument><expr><call><name>Vector3Scale</name><argument_list>(<argument><expr><name>normal</name></expr></argument>, <argument><expr><call><name>Vector3DotProduct</name><argument_list>(<argument><expr><name>normal</name></expr></argument>, <argument><expr><name>tangent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>Vector3Normalize</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>tangents</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>tangents</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>tangents</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>tangents</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>Vector3OrthoNormalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>normal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tangent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>tangents</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tangent</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>tangents</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tangent</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>tangents</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>tangent</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>tangents</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>Vector3DotProduct</name><argument_list>(<argument><expr><call><name>Vector3CrossProduct</name><argument_list>(<argument><expr><name>normal</name></expr></argument>, <argument><expr><name>tangent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tan2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0.0f</literal><operator>)</operator></expr>?</condition><then> <expr><operator>-</operator><literal type="number">1.0f</literal></expr> </then><else>: <expr><literal type="number">1.0f</literal></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>tan1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>tan2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>mesh</name><operator>-&gt;</operator><name>vboId</name><index>[<expr><name>LOC_VERTEX_TANGENT</name></expr>]</index></name> <operator>=</operator> <call><name>rlLoadAttribBuffer</name><argument_list>(<argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>vaoId</name></name></expr></argument>, <argument><expr><name>LOC_VERTEX_TANGENT</name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>tangents</name></name></expr></argument>, <argument><expr><name><name>mesh</name><operator>-&gt;</operator><name>vertexCount</name></name><operator>*</operator><literal type="number">4</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"MESH: Tangents data computed for provided mesh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>MeshBinormals</name><parameter_list>(<parameter><decl><type><name>Mesh</name> <modifier>*</modifier></type><name>mesh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mesh</name><operator>-&gt;</operator><name>vertexCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>





</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawModel</name><parameter_list>(<parameter><decl><type><name>Model</name></type> <name>model</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>vScale</name> <init>= <expr><block>{ <expr><name>scale</name></expr>, <expr><name>scale</name></expr>, <expr><name>scale</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>rotationAxis</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DrawModelEx</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>rotationAxis</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>vScale</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawModelEx</name><parameter_list>(<parameter><decl><type><name>Model</name></type> <name>model</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>rotationAxis</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rotationAngle</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>Matrix</name></type> <name>matScale</name> <init>= <expr><call><name>MatrixScale</name><argument_list>(<argument><expr><name><name>scale</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>scale</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>scale</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Matrix</name></type> <name>matRotation</name> <init>= <expr><call><name>MatrixRotate</name><argument_list>(<argument><expr><name>rotationAxis</name></expr></argument>, <argument><expr><name>rotationAngle</name><operator>*</operator><name>DEG2RAD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Matrix</name></type> <name>matTranslation</name> <init>= <expr><call><name>MatrixTranslate</name><argument_list>(<argument><expr><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Matrix</name></type> <name>matTransform</name> <init>= <expr><call><name>MatrixMultiply</name><argument_list>(<argument><expr><call><name>MatrixMultiply</name><argument_list>(<argument><expr><name>matScale</name></expr></argument>, <argument><expr><name>matRotation</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>matTranslation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>model</name><operator>.</operator><name>transform</name></name> <operator>=</operator> <call><name>MatrixMultiply</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>transform</name></name></expr></argument>, <argument><expr><name>matTransform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>model</name><operator>.</operator><name>meshCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<decl_stmt><decl><type><name>Color</name></type> <name>color</name> <init>= <expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name><name>model</name><operator>.</operator><name>meshMaterial</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name>color</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Color</name></type> <name>colorTint</name> <init>= <expr><name>WHITE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>colorTint</name><operator>.</operator><name>r</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>color</name><operator>.</operator><name>r</name></name><operator>/</operator><literal type="number">255.0</literal><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>tint</name><operator>.</operator><name>r</name></name><operator>/</operator><literal type="number">255.0</literal><operator>)</operator><operator>)</operator><operator>*</operator><literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colorTint</name><operator>.</operator><name>g</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>color</name><operator>.</operator><name>g</name></name><operator>/</operator><literal type="number">255.0</literal><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>tint</name><operator>.</operator><name>g</name></name><operator>/</operator><literal type="number">255.0</literal><operator>)</operator><operator>)</operator><operator>*</operator><literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colorTint</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>color</name><operator>.</operator><name>b</name></name><operator>/</operator><literal type="number">255.0</literal><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>tint</name><operator>.</operator><name>b</name></name><operator>/</operator><literal type="number">255.0</literal><operator>)</operator><operator>)</operator><operator>*</operator><literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>colorTint</name><operator>.</operator><name>a</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>color</name><operator>.</operator><name>a</name></name><operator>/</operator><literal type="number">255.0</literal><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>tint</name><operator>.</operator><name>a</name></name><operator>/</operator><literal type="number">255.0</literal><operator>)</operator><operator>)</operator><operator>*</operator><literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name><name>model</name><operator>.</operator><name>meshMaterial</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>colorTint</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlDrawMesh</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name><name>model</name><operator>.</operator><name>meshMaterial</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>model</name><operator>.</operator><name>transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name><name>model</name><operator>.</operator><name>meshMaterial</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawModelWires</name><parameter_list>(<parameter><decl><type><name>Model</name></type> <name>model</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rlEnableWireMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawModel</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlDisableWireMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawModelWiresEx</name><parameter_list>(<parameter><decl><type><name>Model</name></type> <name>model</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>rotationAxis</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rotationAngle</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rlEnableWireMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawModelEx</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>rotationAxis</name></expr></argument>, <argument><expr><name>rotationAngle</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlDisableWireMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawBillboard</name><parameter_list>(<parameter><decl><type><name>Camera</name></type> <name>camera</name></decl></parameter>, <parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Rectangle</name></type> <name>sourceRec</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>texture</name><operator>.</operator><name>width</name></name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>texture</name><operator>.</operator><name>height</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DrawBillboardRec</name><argument_list>(<argument><expr><name>camera</name></expr></argument>, <argument><expr><name>texture</name></expr></argument>, <argument><expr><name>sourceRec</name></expr></argument>, <argument><expr><name>center</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawBillboardRec</name><parameter_list>(<parameter><decl><type><name>Camera</name></type> <name>camera</name></decl></parameter>, <parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>sourceRec</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>sizeRatio</name> <init>= <expr><block>{ <expr><name>size</name></expr>, <expr><name>size</name><operator>*</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>sourceRec</name><operator>.</operator><name>height</name></name><operator>/</operator><name><name>sourceRec</name><operator>.</operator><name>width</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Matrix</name></type> <name>matView</name> <init>= <expr><call><name>MatrixLookAt</name><argument_list>(<argument><expr><name><name>camera</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>camera</name><operator>.</operator><name>target</name></name></expr></argument>, <argument><expr><name><name>camera</name><operator>.</operator><name>up</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>right</name> <init>= <expr><block>{ <expr><name><name>matView</name><operator>.</operator><name>m0</name></name></expr>, <expr><name><name>matView</name><operator>.</operator><name>m4</name></name></expr>, <expr><name><name>matView</name><operator>.</operator><name>m8</name></name></expr> }</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>Vector3</name></type> <name>up</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>







<expr_stmt><expr><name>right</name> <operator>=</operator> <call><name>Vector3Scale</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name><name>sizeRatio</name><operator>.</operator><name>x</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>up</name> <operator>=</operator> <call><name>Vector3Scale</name><argument_list>(<argument><expr><name>up</name></expr></argument>, <argument><expr><name><name>sizeRatio</name><operator>.</operator><name>y</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>p1</name> <init>= <expr><call><name>Vector3Add</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>up</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>p2</name> <init>= <expr><call><name>Vector3Subtract</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>up</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>a</name> <init>= <expr><call><name>Vector3Subtract</name><argument_list>(<argument><expr><name>center</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>b</name> <init>= <expr><call><name>Vector3Add</name><argument_list>(<argument><expr><name>center</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>c</name> <init>= <expr><call><name>Vector3Add</name><argument_list>(<argument><expr><name>center</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>d</name> <init>= <expr><call><name>Vector3Subtract</name><argument_list>(<argument><expr><name>center</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlEnableTexture</name><argument_list>(<argument><expr><name><name>texture</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_QUADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>tint</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>tint</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>tint</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>tint</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>sourceRec</name><operator>.</operator><name>x</name></name><operator>/</operator><name><name>texture</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>sourceRec</name><operator>.</operator><name>y</name></name><operator>/</operator><name><name>texture</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>sourceRec</name><operator>.</operator><name>x</name></name><operator>/</operator><name><name>texture</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>sourceRec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>sourceRec</name><operator>.</operator><name>height</name></name><operator>)</operator><operator>/</operator><name><name>texture</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>sourceRec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>sourceRec</name><operator>.</operator><name>width</name></name><operator>)</operator><operator>/</operator><name><name>texture</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>sourceRec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>sourceRec</name><operator>.</operator><name>height</name></name><operator>)</operator><operator>/</operator><name><name>texture</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>sourceRec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>sourceRec</name><operator>.</operator><name>width</name></name><operator>)</operator><operator>/</operator><name><name>texture</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>sourceRec</name><operator>.</operator><name>y</name></name><operator>/</operator><name><name>texture</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlDisableTexture</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>DrawBoundingBox</name><parameter_list>(<parameter><decl><type><name>BoundingBox</name></type> <name>box</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>size</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>box</name><operator>.</operator><name>max</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>box</name><operator>.</operator><name>min</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>size</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>box</name><operator>.</operator><name>max</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>box</name><operator>.</operator><name>min</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>size</name><operator>.</operator><name>z</name></name> <operator>=</operator> <call><name>fabsf</name><argument_list>(<argument><expr><name><name>box</name><operator>.</operator><name>max</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>box</name><operator>.</operator><name>min</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>center</name> <init>= <expr><block>{ <expr><name><name>box</name><operator>.</operator><name>min</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>size</name><operator>.</operator><name>x</name></name><operator>/</operator><literal type="number">2.0f</literal></expr>, <expr><name><name>box</name><operator>.</operator><name>min</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>size</name><operator>.</operator><name>y</name></name><operator>/</operator><literal type="number">2.0f</literal></expr>, <expr><name><name>box</name><operator>.</operator><name>min</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name><name>size</name><operator>.</operator><name>z</name></name><operator>/</operator><literal type="number">2.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DrawCubeWires</name><argument_list>(<argument><expr><name>center</name></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>CheckCollisionSpheres</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>centerA</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radiusA</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>centerB</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radiusB</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>collision</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>














<if_stmt><if>if <condition>(<expr><call><name>Vector3DotProduct</name><argument_list>(<argument><expr><call><name>Vector3Subtract</name><argument_list>(<argument><expr><name>centerB</name></expr></argument>, <argument><expr><name>centerA</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Vector3Subtract</name><argument_list>(<argument><expr><name>centerB</name></expr></argument>, <argument><expr><name>centerA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <operator>(</operator><name>radiusA</name> <operator>+</operator> <name>radiusB</name><operator>)</operator><operator>*</operator><operator>(</operator><name>radiusA</name> <operator>+</operator> <name>radiusB</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>collision</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>collision</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>bool</name></type> <name>CheckCollisionBoxes</name><parameter_list>(<parameter><decl><type><name>BoundingBox</name></type> <name>box1</name></decl></parameter>, <parameter><decl><type><name>BoundingBox</name></type> <name>box2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>collision</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>box1</name><operator>.</operator><name>max</name><operator>.</operator><name>x</name></name> <operator>&gt;=</operator> <name><name>box2</name><operator>.</operator><name>min</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>box1</name><operator>.</operator><name>min</name><operator>.</operator><name>x</name></name> <operator>&lt;=</operator> <name><name>box2</name><operator>.</operator><name>max</name><operator>.</operator><name>x</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>box1</name><operator>.</operator><name>max</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>box2</name><operator>.</operator><name>min</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>box1</name><operator>.</operator><name>min</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name><name>box2</name><operator>.</operator><name>max</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>collision</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>box1</name><operator>.</operator><name>max</name><operator>.</operator><name>z</name></name> <operator>&lt;</operator> <name><name>box2</name><operator>.</operator><name>min</name><operator>.</operator><name>z</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>box1</name><operator>.</operator><name>min</name><operator>.</operator><name>z</name></name> <operator>&gt;</operator> <name><name>box2</name><operator>.</operator><name>max</name><operator>.</operator><name>z</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>collision</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>collision</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>collision</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>CheckCollisionBoxSphere</name><parameter_list>(<parameter><decl><type><name>BoundingBox</name></type> <name>box</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>collision</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dmin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>box</name><operator>.</operator><name>min</name><operator>.</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dmin</name> <operator>+=</operator> <call><name>powf</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>box</name><operator>.</operator><name>min</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>box</name><operator>.</operator><name>max</name><operator>.</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dmin</name> <operator>+=</operator> <call><name>powf</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>box</name><operator>.</operator><name>max</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>box</name><operator>.</operator><name>min</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dmin</name> <operator>+=</operator> <call><name>powf</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>box</name><operator>.</operator><name>min</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name><name>box</name><operator>.</operator><name>max</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dmin</name> <operator>+=</operator> <call><name>powf</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>box</name><operator>.</operator><name>max</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>center</name><operator>.</operator><name>z</name></name> <operator>&lt;</operator> <name><name>box</name><operator>.</operator><name>min</name><operator>.</operator><name>z</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dmin</name> <operator>+=</operator> <call><name>powf</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>box</name><operator>.</operator><name>min</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>center</name><operator>.</operator><name>z</name></name> <operator>&gt;</operator> <name><name>box</name><operator>.</operator><name>max</name><operator>.</operator><name>z</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dmin</name> <operator>+=</operator> <call><name>powf</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>box</name><operator>.</operator><name>max</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dmin</name> <operator>&lt;=</operator> <operator>(</operator><name>radius</name><operator>*</operator><name>radius</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>collision</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>collision</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>CheckCollisionRaySphere</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>ray</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>collision</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>raySpherePos</name> <init>= <expr><call><name>Vector3Subtract</name><argument_list>(<argument><expr><name>center</name></expr></argument>, <argument><expr><name><name>ray</name><operator>.</operator><name>position</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>distance</name> <init>= <expr><call><name>Vector3Length</name><argument_list>(<argument><expr><name>raySpherePos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>vector</name> <init>= <expr><call><name>Vector3DotProduct</name><argument_list>(<argument><expr><name>raySpherePos</name></expr></argument>, <argument><expr><name><name>ray</name><operator>.</operator><name>direction</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>d</name> <init>= <expr><name>radius</name><operator>*</operator><name>radius</name> <operator>-</operator> <operator>(</operator><name>distance</name><operator>*</operator><name>distance</name> <operator>-</operator> <name>vector</name><operator>*</operator><name>vector</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;=</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>collision</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>collision</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>CheckCollisionRaySphereEx</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>ray</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>Vector3</name> <modifier>*</modifier></type><name>collisionPoint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>collision</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>raySpherePos</name> <init>= <expr><call><name>Vector3Subtract</name><argument_list>(<argument><expr><name>center</name></expr></argument>, <argument><expr><name><name>ray</name><operator>.</operator><name>position</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>distance</name> <init>= <expr><call><name>Vector3Length</name><argument_list>(<argument><expr><name>raySpherePos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>vector</name> <init>= <expr><call><name>Vector3DotProduct</name><argument_list>(<argument><expr><name>raySpherePos</name></expr></argument>, <argument><expr><name><name>ray</name><operator>.</operator><name>direction</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>d</name> <init>= <expr><name>radius</name><operator>*</operator><name>radius</name> <operator>-</operator> <operator>(</operator><name>distance</name><operator>*</operator><name>distance</name> <operator>-</operator> <name>vector</name><operator>*</operator><name>vector</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;=</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>collision</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>collisionDistance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>distance</name> <operator>&lt;</operator> <name>radius</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>collisionDistance</name> <operator>=</operator> <name>vector</name> <operator>+</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>collisionDistance</name> <operator>=</operator> <name>vector</name> <operator>-</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<decl_stmt><decl><type><name>Vector3</name></type> <name>cPoint</name> <init>= <expr><call><name>Vector3Add</name><argument_list>(<argument><expr><name><name>ray</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><call><name>Vector3Scale</name><argument_list>(<argument><expr><name><name>ray</name><operator>.</operator><name>direction</name></name></expr></argument>, <argument><expr><name>collisionDistance</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>collisionPoint</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>cPoint</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>collisionPoint</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>cPoint</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>collisionPoint</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <name><name>cPoint</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>

<return>return <expr><name>collision</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>CheckCollisionRayBox</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>ray</name></decl></parameter>, <parameter><decl><type><name>BoundingBox</name></type> <name>box</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>collision</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>t</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>box</name><operator>.</operator><name>min</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>ray</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>/</operator><name><name>ray</name><operator>.</operator><name>direction</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>box</name><operator>.</operator><name>max</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>ray</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>/</operator><name><name>ray</name><operator>.</operator><name>direction</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>box</name><operator>.</operator><name>min</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>ray</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>/</operator><name><name>ray</name><operator>.</operator><name>direction</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>box</name><operator>.</operator><name>max</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>ray</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>/</operator><name><name>ray</name><operator>.</operator><name>direction</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>box</name><operator>.</operator><name>min</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>ray</name><operator>.</operator><name>position</name><operator>.</operator><name>z</name></name><operator>)</operator><operator>/</operator><name><name>ray</name><operator>.</operator><name>direction</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>box</name><operator>.</operator><name>max</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>ray</name><operator>.</operator><name>position</name><operator>.</operator><name>z</name></name><operator>)</operator><operator>/</operator><name><name>ray</name><operator>.</operator><name>direction</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>fmax</name><argument_list>(<argument><expr><call><name>fmax</name><argument_list>(<argument><expr><call><name>fmin</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fmin</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fmin</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>fmin</name><argument_list>(<argument><expr><call><name>fmin</name><argument_list>(<argument><expr><call><name>fmax</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fmax</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>fmax</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>collision</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>t</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>t</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>t</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>collision</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RayHitInfo</name></type> <name>GetCollisionRayModel</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>ray</name></decl></parameter>, <parameter><decl><type><name>Model</name></type> <name>model</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RayHitInfo</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>model</name><operator>.</operator><name>meshCount</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>vertices</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>triangleCount</name> <init>= <expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>vertexCount</name><operator>/</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>triangleCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>Vector3</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name> <modifier>*</modifier></type><name>vertdata</name> <init>= <expr><operator>(</operator><name>Vector3</name> <operator>*</operator><operator>)</operator><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>vertices</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>indices</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>vertdata</name><index>[<expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>indices</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>vertdata</name><index>[<expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>indices</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>vertdata</name><index>[<expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>indices</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>vertdata</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>vertdata</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>vertdata</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>Vector3Transform</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>model</name><operator>.</operator><name>transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>Vector3Transform</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>model</name><operator>.</operator><name>transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>Vector3Transform</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>model</name><operator>.</operator><name>transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RayHitInfo</name></type> <name>triHitInfo</name> <init>= <expr><call><name>GetCollisionRayTriangle</name><argument_list>(<argument><expr><name>ray</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>triHitInfo</name><operator>.</operator><name>hit</name></name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>result</name><operator>.</operator><name>hit</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>result</name><operator>.</operator><name>distance</name></name> <operator>&gt;</operator> <name><name>triHitInfo</name><operator>.</operator><name>distance</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <name>triHitInfo</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>RayHitInfo</name></type> <name>GetCollisionRayTriangle</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>ray</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>p2</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>p3</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPSILON</name></cpp:macro> <cpp:value>0.000001</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>Vector3</name></type> <name>edge1</name></decl>, <decl><type ref="prev"/><name>edge2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vector3</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>det</name></decl>, <decl><type ref="prev"/><name>invDet</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RayHitInfo</name></type> <name>result</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>edge1</name> <operator>=</operator> <call><name>Vector3Subtract</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>edge2</name> <operator>=</operator> <call><name>Vector3Subtract</name><argument_list>(<argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>Vector3CrossProduct</name><argument_list>(<argument><expr><name><name>ray</name><operator>.</operator><name>direction</name></name></expr></argument>, <argument><expr><name>edge2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>det</name> <operator>=</operator> <call><name>Vector3DotProduct</name><argument_list>(<argument><expr><name>edge1</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>det</name> <operator>&gt;</operator> <operator>-</operator><name>EPSILON</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>det</name> <operator>&lt;</operator> <name>EPSILON</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>invDet</name> <operator>=</operator> <literal type="number">1.0f</literal><operator>/</operator><name>det</name></expr>;</expr_stmt>


<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>Vector3Subtract</name><argument_list>(<argument><expr><name><name>ray</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>Vector3DotProduct</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>*</operator><name>invDet</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>u</name> <operator>&lt;</operator> <literal type="number">0.0f</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>u</name> <operator>&gt;</operator> <literal type="number">1.0f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>Vector3CrossProduct</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>Vector3DotProduct</name><argument_list>(<argument><expr><name><name>ray</name><operator>.</operator><name>direction</name></name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call><operator>*</operator><name>invDet</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>&lt;</operator> <literal type="number">0.0f</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>u</name> <operator>+</operator> <name>v</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">1.0f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>Vector3DotProduct</name><argument_list>(<argument><expr><name>edge2</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call><operator>*</operator><name>invDet</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <name>EPSILON</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>hit</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>distance</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>hit</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>normal</name></name> <operator>=</operator> <call><name>Vector3Normalize</name><argument_list>(<argument><expr><call><name>Vector3CrossProduct</name><argument_list>(<argument><expr><name>edge1</name></expr></argument>, <argument><expr><name>edge2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>position</name></name> <operator>=</operator> <call><name>Vector3Add</name><argument_list>(<argument><expr><name><name>ray</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><call><name>Vector3Scale</name><argument_list>(<argument><expr><name><name>ray</name><operator>.</operator><name>direction</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>RayHitInfo</name></type> <name>GetCollisionRayGround</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>ray</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>groundHeight</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPSILON</name></cpp:macro> <cpp:value>0.000001</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>RayHitInfo</name></type> <name>result</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>ray</name><operator>.</operator><name>direction</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>EPSILON</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>distance</name> <init>= <expr><operator>(</operator><name><name>ray</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>groundHeight</name><operator>)</operator><operator>/</operator><operator>-</operator><name><name>ray</name><operator>.</operator><name>direction</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>distance</name> <operator>&gt;=</operator> <literal type="number">0.0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>hit</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>distance</name></name> <operator>=</operator> <name>distance</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>normal</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>.</operator><name>position</name></name> <operator>=</operator> <call><name>Vector3Add</name><argument_list>(<argument><expr><name><name>ray</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><call><name>Vector3Scale</name><argument_list>(<argument><expr><name><name>ray</name><operator>.</operator><name>direction</name></name></expr></argument>, <argument><expr><name>distance</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_OBJ</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>Model</name></type> <name>LoadOBJ</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Model</name></type> <name>model</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tinyobj_attrib_t</name></type> <name>attrib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tinyobj_shape_t</name> <modifier>*</modifier></type><name>meshes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>meshCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tinyobj_material_t</name> <modifier>*</modifier></type><name>materials</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>materialCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fileData</name> <init>= <expr><call><name>LoadFileText</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fileData</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dataSize</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>fileData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>currentDir</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>currentDir</name></expr></argument>, <argument><expr><call><name>GetWorkingDirectory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>chdir</name><argument_list>(<argument><expr><call><name>GetDirectoryPath</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>= <expr><name>TINYOBJ_FLAG_TRIANGULATE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>tinyobj_parse_obj</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attrib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meshes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meshCount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>materials</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>materialCount</name></expr></argument>, <argument><expr><name>fileData</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TINYOBJ_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MODEL: [%s] Failed to load OBJ data"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"MODEL: [%s] OBJ data loaded successfully: %i meshes / %i materials"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>meshCount</name></expr></argument>, <argument><expr><name>materialCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>




<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name></name> <operator>=</operator> <operator>(</operator><name>Mesh</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>meshCount</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Mesh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>materialCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materialCount</name></name> <operator>=</operator> <name>materialCount</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name></name> <operator>=</operator> <operator>(</operator><name>Material</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>materialCount</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Material</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshMaterial</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>meshCount</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>












<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>Mesh</name></type> <name>mesh</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mesh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Mesh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name> <operator>=</operator> <name><name>attrib</name><operator>.</operator><name>num_faces</name></name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>triangleCount</name></name> <operator>=</operator> <name><name>attrib</name><operator>.</operator><name>num_faces</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name><name>mesh</name><operator>.</operator><name>vertexCount</name></name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vboId</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name>MAX_MESH_VBO</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vtCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vnCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>f</name> <operator>&lt;</operator> <name><name>attrib</name><operator>.</operator><name>num_faces</name></name></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<decl_stmt><decl><type><name>tinyobj_vertex_index_t</name></type> <name>idx0</name> <init>= <expr><name><name>attrib</name><operator>.</operator><name>faces</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>f</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tinyobj_vertex_index_t</name></type> <name>idx1</name> <init>= <expr><name><name>attrib</name><operator>.</operator><name>faces</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>f</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tinyobj_vertex_index_t</name></type> <name>idx2</name> <init>= <expr><name><name>attrib</name><operator>.</operator><name>faces</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>f</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCount</name> <operator>+</operator> <name>v</name></expr>]</index></name> <operator>=</operator> <name><name>attrib</name><operator>.</operator><name>vertices</name><index>[<expr><name><name>idx0</name><operator>.</operator><name>v_idx</name></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <name>v</name></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></for> <expr_stmt><expr><name>vCount</name> <operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCount</name> <operator>+</operator> <name>v</name></expr>]</index></name> <operator>=</operator> <name><name>attrib</name><operator>.</operator><name>vertices</name><index>[<expr><name><name>idx1</name><operator>.</operator><name>v_idx</name></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <name>v</name></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></for> <expr_stmt><expr><name>vCount</name> <operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>vertices</name><index>[<expr><name>vCount</name> <operator>+</operator> <name>v</name></expr>]</index></name> <operator>=</operator> <name><name>attrib</name><operator>.</operator><name>vertices</name><index>[<expr><name><name>idx2</name><operator>.</operator><name>v_idx</name></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <name>v</name></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></for> <expr_stmt><expr><name>vCount</name> <operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>



<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>vtCount</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>attrib</name><operator>.</operator><name>texcoords</name><index>[<expr><name><name>idx0</name><operator>.</operator><name>vt_idx</name></name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>vtCount</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>-</operator> <name><name>attrib</name><operator>.</operator><name>texcoords</name><index>[<expr><name><name>idx0</name><operator>.</operator><name>vt_idx</name></name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>vtCount</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>vtCount</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>attrib</name><operator>.</operator><name>texcoords</name><index>[<expr><name><name>idx1</name><operator>.</operator><name>vt_idx</name></name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>vtCount</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>-</operator> <name><name>attrib</name><operator>.</operator><name>texcoords</name><index>[<expr><name><name>idx1</name><operator>.</operator><name>vt_idx</name></name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>vtCount</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>vtCount</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>attrib</name><operator>.</operator><name>texcoords</name><index>[<expr><name><name>idx2</name><operator>.</operator><name>vt_idx</name></name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>texcoords</name><index>[<expr><name>vtCount</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>-</operator> <name><name>attrib</name><operator>.</operator><name>texcoords</name><index>[<expr><name><name>idx2</name><operator>.</operator><name>vt_idx</name></name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>vtCount</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<for>for <control>(<init><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>vnCount</name> <operator>+</operator> <name>v</name></expr>]</index></name> <operator>=</operator> <name><name>attrib</name><operator>.</operator><name>normals</name><index>[<expr><name><name>idx0</name><operator>.</operator><name>vn_idx</name></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <name>v</name></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></for> <expr_stmt><expr><name>vnCount</name> <operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>vnCount</name> <operator>+</operator> <name>v</name></expr>]</index></name> <operator>=</operator> <name><name>attrib</name><operator>.</operator><name>normals</name><index>[<expr><name><name>idx1</name><operator>.</operator><name>vn_idx</name></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <name>v</name></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></for> <expr_stmt><expr><name>vnCount</name> <operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>mesh</name><operator>.</operator><name>normals</name><index>[<expr><name>vnCount</name> <operator>+</operator> <name>v</name></expr>]</index></name> <operator>=</operator> <name><name>attrib</name><operator>.</operator><name>normals</name><index>[<expr><name><name>idx2</name><operator>.</operator><name>vn_idx</name></name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <name>v</name></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></for> <expr_stmt><expr><name>vnCount</name> <operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <name>mesh</name></expr>;</expr_stmt> 


<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshMaterial</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <name><name>attrib</name><operator>.</operator><name>material_ids</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>model</name><operator>.</operator><name>meshMaterial</name><index>[<expr><name>m</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshMaterial</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>materialCount</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>


<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <call><name>LoadMaterialDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




























<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <call><name>GetTextureDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>diffuse_texname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><name><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>diffuse_texname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>diffuse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>diffuse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>diffuse</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>specular_texname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_SPECULAR</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><name><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>specular_texname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_SPECULAR</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>specular</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>specular</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>specular</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_SPECULAR</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>bump_texname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_NORMAL</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><name><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>bump_texname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_NORMAL</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_NORMAL</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>shininess</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_EMISSION</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>emission</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>emission</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>emission</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>displacement_texname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_HEIGHT</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><name><name>materials</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>displacement_texname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></for>

<expr_stmt><expr><call><name>tinyobj_attrib_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attrib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tinyobj_shapes_free</name><argument_list>(<argument><expr><name>meshes</name></expr></argument>, <argument><expr><name>meshCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tinyobj_materials_free</name><argument_list>(<argument><expr><name>materials</name></expr></argument>, <argument><expr><name>materialCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>fileData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>chdir</name><argument_list>(<argument><expr><name>currentDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>model</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_IQM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>Model</name></type> <name>LoadIQM</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IQM_MAGIC</name></cpp:macro> <cpp:value>"INTERQUAKEMODEL"</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IQM_VERSION</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BONE_NAME_LENGTH</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MESH_NAME_LENGTH</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 



<typedef>typedef <type><struct>struct <name>IQMHeader</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>magic</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>filesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_text</name></decl>, <name>ofs_text</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_meshes</name></decl>, <name>ofs_meshes</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_vertexarrays</name></decl>, <name>num_vertexes</name>, <name>ofs_vertexarrays</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_triangles</name></decl>, <name>ofs_triangles</name>, <name>ofs_adjacency</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_joints</name></decl>, <name>ofs_joints</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_poses</name></decl>, <name>ofs_poses</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_anims</name></decl>, <name>ofs_anims</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_frames</name></decl>, <name>num_framechannels</name>, <name>ofs_frames</name>, <name>ofs_bounds</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_comment</name></decl>, <name>ofs_comment</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_extensions</name></decl>, <name>ofs_extensions</name>;</decl_stmt>
}</block></struct></type> <name>IQMHeader</name>;</typedef>

<typedef>typedef <type><struct>struct <name>IQMMesh</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>material</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>first_vertex</name></decl>, <name>num_vertexes</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>first_triangle</name></decl>, <name>num_triangles</name>;</decl_stmt>
}</block></struct></type> <name>IQMMesh</name>;</typedef>

<typedef>typedef <type><struct>struct <name>IQMTriangle</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>vertex</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>IQMTriangle</name>;</typedef>

<typedef>typedef <type><struct>struct <name>IQMJoint</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>translate</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <name><name>rotate</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>, <name><name>scale</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>;</decl_stmt>
}</block></struct></type> <name>IQMJoint</name>;</typedef>

<typedef>typedef <type><struct>struct <name>IQMVertexArray</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name></decl>;</decl_stmt>
}</block></struct></type> <name>IQMVertexArray</name>;</typedef>





























<enum>enum <block>{
<decl><name>IQM_POSITION</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>IQM_TEXCOORD</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>IQM_NORMAL</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>IQM_TANGENT</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 
<decl><name>IQM_BLENDINDEXES</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>IQM_BLENDWEIGHTS</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>IQM_COLOR</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>, 
<decl><name>IQM_CUSTOM</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl> 
}</block>;</enum>

<decl_stmt><decl><type><name>Model</name></type> <name>model</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>iqmFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IQMHeader</name></type> <name>iqm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IQMMesh</name> <modifier>*</modifier></type><name>imesh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IQMTriangle</name> <modifier>*</modifier></type><name>tri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IQMVertexArray</name> <modifier>*</modifier></type><name>va</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IQMJoint</name> <modifier>*</modifier></type><name>ijoint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>vertex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>normal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>blendi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>blendw</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>iqmFile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>iqmFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Failed to open IQM file"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>model</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iqm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IQMHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iqmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>iqm</name><operator>.</operator><name>magic</name></name></expr></argument>, <argument><expr><name>IQM_MAGIC</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IQM_MAGIC</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MODEL: [%s] IQM file is not a valid model"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>iqmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>model</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iqm</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name>IQM_VERSION</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MODEL: [%s] IQM file version not supported (%i)"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>iqm</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>iqmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>model</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>imesh</name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IQMMesh</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>iqm</name><operator>.</operator><name>num_meshes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>iqmFile</name></expr></argument>, <argument><expr><name><name>iqm</name><operator>.</operator><name>ofs_meshes</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name>imesh</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IQMMesh</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>iqm</name><operator>.</operator><name>num_meshes</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iqmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshCount</name></name> <operator>=</operator> <name><name>iqm</name><operator>.</operator><name>num_meshes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name></name> <operator>=</operator> <call><name>RL_CALLOC</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>meshCount</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Mesh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>MESH_NAME_LENGTH</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>model</name><operator>.</operator><name>meshCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>iqmFile</name></expr></argument>, <argument><expr><name><name>iqm</name><operator>.</operator><name>ofs_text</name></name> <operator>+</operator> <name><name>imesh</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>MESH_NAME_LENGTH</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iqmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vertexCount</name> <operator>=</operator> <name><name>imesh</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_vertexes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vertices</name> <operator>=</operator> <call><name>RL_CALLOC</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vertexCount</name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>normals</name> <operator>=</operator> <call><name>RL_CALLOC</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vertexCount</name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>texcoords</name> <operator>=</operator> <call><name>RL_CALLOC</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vertexCount</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>boneIds</name> <operator>=</operator> <call><name>RL_CALLOC</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vertexCount</name><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>boneWeights</name> <operator>=</operator> <call><name>RL_CALLOC</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vertexCount</name><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>triangleCount</name> <operator>=</operator> <name><name>imesh</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_triangles</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>indices</name> <operator>=</operator> <call><name>RL_CALLOC</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>triangleCount</name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>animVertices</name> <operator>=</operator> <call><name>RL_CALLOC</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vertexCount</name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>animNormals</name> <operator>=</operator> <call><name>RL_CALLOC</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vertexCount</name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vboId</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name>MAX_MESH_VBO</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>tri</name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>iqm</name><operator>.</operator><name>num_triangles</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>IQMTriangle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>iqmFile</name></expr></argument>, <argument><expr><name><name>iqm</name><operator>.</operator><name>ofs_triangles</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name>tri</name></expr></argument>, <argument><expr><name><name>iqm</name><operator>.</operator><name>num_triangles</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>IQMTriangle</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iqmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>model</name><operator>.</operator><name>meshCount</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tcounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>imesh</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first_triangle</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name><name>imesh</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first_triangle</name> <operator>+</operator> <name><name>imesh</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>num_triangles</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>indices</name><index>[<expr><name>tcounter</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>tri</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vertex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>imesh</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first_vertex</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>indices</name><index>[<expr><name>tcounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tri</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vertex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>imesh</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first_vertex</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>indices</name><index>[<expr><name>tcounter</name></expr>]</index></name> <operator>=</operator> <name><name>tri</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vertex</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>imesh</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first_vertex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tcounter</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><name>va</name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>iqm</name><operator>.</operator><name>num_vertexarrays</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>IQMVertexArray</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>iqmFile</name></expr></argument>, <argument><expr><name><name>iqm</name><operator>.</operator><name>ofs_vertexarrays</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name><name>iqm</name><operator>.</operator><name>num_vertexarrays</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>IQMVertexArray</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iqmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>iqm</name><operator>.</operator><name>num_vertexarrays</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>va</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>IQM_POSITION</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>vertex</name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>iqm</name><operator>.</operator><name>num_vertexes</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>iqmFile</name></expr></argument>, <argument><expr><name><name>va</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name>vertex</name></expr></argument>, <argument><expr><name><name>iqm</name><operator>.</operator><name>num_vertexes</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iqmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>iqm</name><operator>.</operator><name>num_meshes</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>vCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>imesh</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first_vertex</name><operator>*</operator><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name><name>imesh</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first_vertex</name> <operator>+</operator> <name><name>imesh</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>num_vertexes</name><operator>)</operator><operator>*</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>vertices</name><index>[<expr><name>vCounter</name></expr>]</index></name> <operator>=</operator> <name><name>vertex</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>animVertices</name><index>[<expr><name>vCounter</name></expr>]</index></name> <operator>=</operator> <name><name>vertex</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vCounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>IQM_NORMAL</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>normal</name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>iqm</name><operator>.</operator><name>num_vertexes</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>iqmFile</name></expr></argument>, <argument><expr><name><name>va</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name>normal</name></expr></argument>, <argument><expr><name><name>iqm</name><operator>.</operator><name>num_vertexes</name></name><operator>*</operator><literal type="number">3</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iqmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>iqm</name><operator>.</operator><name>num_meshes</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>vCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>imesh</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first_vertex</name><operator>*</operator><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name><name>imesh</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first_vertex</name> <operator>+</operator> <name><name>imesh</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>num_vertexes</name><operator>)</operator><operator>*</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>normals</name><index>[<expr><name>vCounter</name></expr>]</index></name> <operator>=</operator> <name><name>normal</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>animNormals</name><index>[<expr><name>vCounter</name></expr>]</index></name> <operator>=</operator> <name><name>normal</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vCounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>IQM_TEXCOORD</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>iqm</name><operator>.</operator><name>num_vertexes</name></name><operator>*</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>iqmFile</name></expr></argument>, <argument><expr><name><name>va</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>iqm</name><operator>.</operator><name>num_vertexes</name></name><operator>*</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iqmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>iqm</name><operator>.</operator><name>num_meshes</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>vCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>imesh</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first_vertex</name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name><name>imesh</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first_vertex</name> <operator>+</operator> <name><name>imesh</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>num_vertexes</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>texcoords</name><index>[<expr><name>vCounter</name></expr>]</index></name> <operator>=</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vCounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>IQM_BLENDINDEXES</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>blendi</name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>iqm</name><operator>.</operator><name>num_vertexes</name></name><operator>*</operator><literal type="number">4</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>iqmFile</name></expr></argument>, <argument><expr><name><name>va</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name>blendi</name></expr></argument>, <argument><expr><name><name>iqm</name><operator>.</operator><name>num_vertexes</name></name><operator>*</operator><literal type="number">4</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iqmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>iqm</name><operator>.</operator><name>num_meshes</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>boneCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>imesh</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first_vertex</name><operator>*</operator><literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name><name>imesh</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first_vertex</name> <operator>+</operator> <name><name>imesh</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>num_vertexes</name><operator>)</operator><operator>*</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>boneIds</name><index>[<expr><name>boneCounter</name></expr>]</index></name> <operator>=</operator> <name><name>blendi</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>boneCounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block> <break>break;</break>
<case>case <expr><name>IQM_BLENDWEIGHTS</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>blendw</name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>iqm</name><operator>.</operator><name>num_vertexes</name></name><operator>*</operator><literal type="number">4</literal><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>iqmFile</name></expr></argument>, <argument><expr><name><name>va</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name>blendw</name></expr></argument>, <argument><expr><name><name>iqm</name><operator>.</operator><name>num_vertexes</name></name><operator>*</operator><literal type="number">4</literal><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iqmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>iqm</name><operator>.</operator><name>num_meshes</name></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>boneCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>imesh</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first_vertex</name><operator>*</operator><literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name><name>imesh</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first_vertex</name> <operator>+</operator> <name><name>imesh</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>num_vertexes</name><operator>)</operator><operator>*</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>boneWeights</name><index>[<expr><name>boneCounter</name></expr>]</index></name> <operator>=</operator> <name><name>blendw</name><index>[<expr><name>i</name></expr>]</index></name><operator>/</operator><literal type="number">255.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>boneCounter</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>


<expr_stmt><expr><name>ijoint</name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>iqm</name><operator>.</operator><name>num_joints</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>IQMJoint</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>iqmFile</name></expr></argument>, <argument><expr><name><name>iqm</name><operator>.</operator><name>ofs_joints</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name>ijoint</name></expr></argument>, <argument><expr><name><name>iqm</name><operator>.</operator><name>num_joints</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>IQMJoint</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iqmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>boneCount</name></name> <operator>=</operator> <name><name>iqm</name><operator>.</operator><name>num_joints</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>bones</name></name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>iqm</name><operator>.</operator><name>num_joints</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>BoneInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>bindPose</name></name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>iqm</name><operator>.</operator><name>num_joints</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Transform</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>iqm</name><operator>.</operator><name>num_joints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>bones</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name> <operator>=</operator> <name><name>ijoint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>iqmFile</name></expr></argument>, <argument><expr><name><name>iqm</name><operator>.</operator><name>ofs_text</name></name> <operator>+</operator> <name><name>ijoint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>bones</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>BONE_NAME_LENGTH</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iqmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>translation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>ijoint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>translate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>translation</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>ijoint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>translate</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>translation</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>ijoint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>translate</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rotation</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>ijoint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rotate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rotation</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>ijoint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rotate</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rotation</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>ijoint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rotate</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rotation</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>ijoint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rotate</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>scale</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>ijoint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>scale</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>ijoint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>scale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>scale</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>ijoint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>scale</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>model</name><operator>.</operator><name>boneCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>model</name><operator>.</operator><name>bones</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name> <operator>=</operator> <call><name>QuaternionMultiply</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name><name>model</name><operator>.</operator><name>bones</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name></expr>]</index></name><operator>.</operator><name>rotation</name></expr></argument>, <argument><expr><name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>translation</name> <operator>=</operator> <call><name>Vector3RotateByQuaternion</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>translation</name></expr></argument>, <argument><expr><name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name><name>model</name><operator>.</operator><name>bones</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name></expr>]</index></name><operator>.</operator><name>rotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>translation</name> <operator>=</operator> <call><name>Vector3Add</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>translation</name></expr></argument>, <argument><expr><name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name><name>model</name><operator>.</operator><name>bones</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name></expr>]</index></name><operator>.</operator><name>translation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scale</name> <operator>=</operator> <call><name>Vector3Multiply</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scale</name></expr></argument>, <argument><expr><name><name>model</name><operator>.</operator><name>bindPose</name><index>[<expr><name><name>model</name><operator>.</operator><name>bones</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name></expr>]</index></name><operator>.</operator><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>iqmFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>imesh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>tri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>vertex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>normal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>blendi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>blendw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>ijoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>model</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_GLTF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>base64Table</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">53</literal></expr>,
<expr><literal type="number">54</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>,
<expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>,
<expr><literal type="number">25</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>,
<expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>,
<expr><literal type="number">39</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">48</literal></expr>,
<expr><literal type="number">49</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">51</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GetSizeBase64</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>input</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>input</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>DecodeBase64</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <call><name>GetSizeBase64</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>size</name><operator>/</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>a</name> <init>= <expr><name><name>base64Table</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>input</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name> <init>= <expr><name><name>base64Table</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>input</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name><name>base64Table</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>input</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>d</name> <init>= <expr><name><name>base64Table</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>input</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>size</name><operator>%</operator><literal type="number">3</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>*</operator><name>size</name><operator>/</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>a</name> <init>= <expr><name><name>base64Table</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>input</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>n</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name> <init>= <expr><name><name>base64Table</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>input</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>*</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>size</name><operator>%</operator><literal type="number">3</literal> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>*</operator><name>size</name><operator>/</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>a</name> <init>= <expr><name><name>base64Table</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>input</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>n</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name> <init>= <expr><name><name>base64Table</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>input</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name><name>base64Table</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>input</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>n</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>*</operator><name>size</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>*</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>Image</name></type> <name>LoadImageFromCgltfImage</name><parameter_list>(<parameter><decl><type><name>cgltf_image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>texPath</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Image</name></type> <name>rimage</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>uri</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>uri</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>uri</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>uri</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>uri</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>uri</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>




<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>uri</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">','</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>image</name><operator>-&gt;</operator><name>uri</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>uri</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"IMAGE: glTF data URI is not a valid image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>DecodeBase64</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>uri</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>raw</name> <init>= <expr><call><name>stbi_load_from_memory</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>rimage</name> <operator>=</operator> <call><name>LoadImagePro</name><argument_list>(<argument><expr><name>raw</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>UNCOMPRESSED_R8G8B8A8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ImageColorTint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rimage</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>rimage</name> <operator>=</operator> <call><name>LoadImage</name><argument_list>(<argument><expr><call><name>TextFormat</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>texPath</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ImageColorTint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rimage</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>image</name><operator>-&gt;</operator><name>buffer_view</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>buffer_view</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>image</name><operator>-&gt;</operator><name>buffer_view</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><ternary><condition><expr><name><name>image</name><operator>-&gt;</operator><name>buffer_view</name><operator>-&gt;</operator><name>stride</name></name></expr> ?</condition><then> <expr><name><name>image</name><operator>-&gt;</operator><name>buffer_view</name><operator>-&gt;</operator><name>stride</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>buffer_view</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>image</name><operator>-&gt;</operator><name>buffer_view</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>n</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>raw</name> <init>= <expr><call><name>stbi_load_from_memory</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>image</name><operator>-&gt;</operator><name>buffer_view</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rimage</name> <operator>=</operator> <call><name>LoadImagePro</name><argument_list>(<argument><expr><name>raw</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>UNCOMPRESSED_R8G8B8A8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ImageColorTint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rimage</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>rimage</name> <operator>=</operator> <call><name>LoadImageEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>rimage</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>Model</name></type> <name>LoadGLTF</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_ACCESSOR</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>nbcomp</name></type></parameter>, <parameter><type><name>acc</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ int n = 0; type* buf = (type*)acc-&gt;buffer_view-&gt;buffer-&gt;data+acc-&gt;buffer_view-&gt;offset/sizeof(type)+acc-&gt;offset/sizeof(type); for (int k = 0; k &lt; acc-&gt;count; k++) {for (int l = 0; l &lt; nbcomp; l++) {dst[nbcomp*k+l] = buf[n+l];}n += acc-&gt;stride/sizeof(type);}}</cpp:value></cpp:define>











<decl_stmt><decl><type><name>Model</name></type> <name>model</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>gltfFile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>gltfFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Failed to open glTF file"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>model</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>gltfFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>ftell</name><argument_list>(<argument><expr><name>gltfFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>gltfFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>gltfFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>gltfFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>cgltf_options</name></type> <name>options</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_data</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgltf_result</name></type> <name>result</name> <init>= <expr><call><name>cgltf_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>cgltf_result_success</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"MODEL: [%s] glTF meshes (%s) count: %i"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>file_type</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"glb"</literal></expr> </then><else>: <expr><literal type="string">"gltf"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>meshes_count</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>materials_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"MODEL: [%s] glTF materials (%s) count: %i"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>file_type</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">"glb"</literal></expr> </then><else>: <expr><literal type="string">"gltf"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>meshes_count</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>materials_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>cgltf_load_buffers</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>cgltf_result_success</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"MODEL: [%s] Failed to load mesh/material buffers"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>primitivesCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>primitivesCount</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>primitives_count</name></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshCount</name></name> <operator>=</operator> <name>primitivesCount</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name></name> <operator>=</operator> <call><name>RL_CALLOC</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>meshCount</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Mesh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materialCount</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>materials_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name></name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>materialCount</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Material</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshMaterial</name></name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>meshCount</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>model</name><operator>.</operator><name>meshCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vboId</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name>MAX_MESH_VBO</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>model</name><operator>.</operator><name>materialCount</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>LoadMaterialDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Color</name></type> <name>tint</name> <init>= <expr><operator>(</operator><name>Color</name><operator>)</operator><block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>texPath</name> <init>= <expr><call><name>GetDirectoryPath</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>has_pbr_metallic_roughness</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tint</name><operator>.</operator><name>r</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pbr_metallic_roughness</name><operator>.</operator><name>base_color_factor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tint</name><operator>.</operator><name>g</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pbr_metallic_roughness</name><operator>.</operator><name>base_color_factor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tint</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pbr_metallic_roughness</name><operator>.</operator><name>base_color_factor</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tint</name><operator>.</operator><name>a</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pbr_metallic_roughness</name><operator>.</operator><name>base_color_factor</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_ALBEDO</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>tint</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pbr_metallic_roughness</name><operator>.</operator><name>base_color_texture</name><operator>.</operator><name>texture</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Image</name></type> <name>albedo</name> <init>= <expr><call><name>LoadImageFromCgltfImage</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pbr_metallic_roughness</name><operator>.</operator><name>base_color_texture</name><operator>.</operator><name>texture</name><operator>-&gt;</operator><name>image</name></name></expr></argument>, <argument><expr><name>texPath</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_ALBEDO</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <call><name>LoadTextureFromImage</name><argument_list>(<argument><expr><name>albedo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>albedo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tint</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pbr_metallic_roughness</name><operator>.</operator><name>metallic_roughness_texture</name><operator>.</operator><name>texture</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Image</name></type> <name>metallicRoughness</name> <init>= <expr><call><name>LoadImageFromCgltfImage</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pbr_metallic_roughness</name><operator>.</operator><name>metallic_roughness_texture</name><operator>.</operator><name>texture</name><operator>-&gt;</operator><name>image</name></name></expr></argument>, <argument><expr><name>texPath</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_ROUGHNESS</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <call><name>LoadTextureFromImage</name><argument_list>(<argument><expr><name>metallicRoughness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>roughness</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pbr_metallic_roughness</name><operator>.</operator><name>roughness_factor</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_ROUGHNESS</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>roughness</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>metallic</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pbr_metallic_roughness</name><operator>.</operator><name>metallic_factor</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_METALNESS</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>metallic</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>metallicRoughness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>normal_texture</name><operator>.</operator><name>texture</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Image</name></type> <name>normalImage</name> <init>= <expr><call><name>LoadImageFromCgltfImage</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>normal_texture</name><operator>.</operator><name>texture</name><operator>-&gt;</operator><name>image</name></name></expr></argument>, <argument><expr><name>texPath</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_NORMAL</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <call><name>LoadTextureFromImage</name><argument_list>(<argument><expr><name>normalImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>normalImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>occlusion_texture</name><operator>.</operator><name>texture</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Image</name></type> <name>occulsionImage</name> <init>= <expr><call><name>LoadImageFromCgltfImage</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>occlusion_texture</name><operator>.</operator><name>texture</name><operator>-&gt;</operator><name>image</name></name></expr></argument>, <argument><expr><name>texPath</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_OCCLUSION</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <call><name>LoadTextureFromImage</name><argument_list>(<argument><expr><name>occulsionImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>occulsionImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>emissive_texture</name><operator>.</operator><name>texture</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>Image</name></type> <name>emissiveImage</name> <init>= <expr><call><name>LoadImageFromCgltfImage</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>emissive_texture</name><operator>.</operator><name>texture</name><operator>-&gt;</operator><name>image</name></name></expr></argument>, <argument><expr><name>texPath</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_EMISSION</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <call><name>LoadTextureFromImage</name><argument_list>(<argument><expr><name>emissiveImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tint</name><operator>.</operator><name>r</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>emissive_factor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tint</name><operator>.</operator><name>g</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>emissive_factor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tint</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>emissive_factor</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_EMISSION</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>tint</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>emissiveImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><name><name>model</name><operator>.</operator><name>materialCount</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>LoadMaterialDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>primitiveIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>primitives_count</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>attributes_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>attributes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>cgltf_attribute_type_position</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_accessor</name> <modifier>*</modifier></type><name>acc</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>attributes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>primitiveIndex</name></expr>]</index></name><operator>.</operator><name>vertexCount</name> <operator>=</operator> <name><name>acc</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>primitiveIndex</name></expr>]</index></name><operator>.</operator><name>vertices</name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>primitiveIndex</name></expr>]</index></name><operator>.</operator><name>vertexCount</name><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>LOAD_ACCESSOR</name><argument_list>(<argument>float</argument>, <argument><literal type="number">3</literal></argument>, <argument>acc</argument>, <argument>model.meshes[primitiveIndex].vertices</argument>)</argument_list></macro>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>attributes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>cgltf_attribute_type_normal</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_accessor</name> <modifier>*</modifier></type><name>acc</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>attributes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>primitiveIndex</name></expr>]</index></name><operator>.</operator><name>normals</name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>acc</name><operator>-&gt;</operator><name>count</name></name><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>LOAD_ACCESSOR</name><argument_list>(<argument>float</argument>, <argument><literal type="number">3</literal></argument>, <argument>acc</argument>, <argument>model.meshes[primitiveIndex].normals</argument>)</argument_list></macro>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>attributes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>cgltf_attribute_type_texcoord</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>cgltf_accessor</name> <modifier>*</modifier></type><name>acc</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>attributes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>component_type</name></name> <operator>==</operator> <name>cgltf_component_type_r_32f</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>primitiveIndex</name></expr>]</index></name><operator>.</operator><name>texcoords</name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>acc</name><operator>-&gt;</operator><name>count</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>LOAD_ACCESSOR</name><argument_list>(<argument>float</argument>, <argument><literal type="number">2</literal></argument>, <argument>acc</argument>, <argument>model.meshes[primitiveIndex].texcoords</argument>)</argument_list></macro>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MODEL: [%s] glTF texture coordinates must be float"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>cgltf_accessor</name> <modifier>*</modifier></type><name>acc</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>indices</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>acc</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>acc</name><operator>-&gt;</operator><name>component_type</name></name> <operator>==</operator> <name>cgltf_component_type_r_16u</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>primitiveIndex</name></expr>]</index></name><operator>.</operator><name>triangleCount</name> <operator>=</operator> <name><name>acc</name><operator>-&gt;</operator><name>count</name></name><operator>/</operator><literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>primitiveIndex</name></expr>]</index></name><operator>.</operator><name>indices</name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><operator>*</operator><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>primitiveIndex</name></expr>]</index></name><operator>.</operator><name>triangleCount</name><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>LOAD_ACCESSOR</name><argument_list>(<argument>unsigned short</argument>, <argument><literal type="number">1</literal></argument>, <argument>acc</argument>, <argument>model.meshes[primitiveIndex].indices</argument>)</argument_list></macro>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MODEL: [%s] glTF index data must be unsigned short"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>primitiveIndex</name></expr>]</index></name><operator>.</operator><name>triangleCount</name> <operator>=</operator> <name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><name>primitiveIndex</name></expr>]</index></name><operator>.</operator><name>vertexCount</name><operator>/</operator><literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>material</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshMaterial</name><index>[<expr><name>primitiveIndex</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>meshes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>primitives</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>material</name> <operator>-</operator> <name><name>data</name><operator>-&gt;</operator><name>materials</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>model</name><operator>.</operator><name>meshMaterial</name><index>[<expr><name>primitiveIndex</name></expr>]</index></name> <operator>=</operator> <name><name>model</name><operator>.</operator><name>materialCount</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>primitiveIndex</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>cgltf_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"MODEL: [%s] Failed to load glTF data"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>model</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
