<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats_featurelocations\raylib\src\utils.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UTILS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTILS_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;android/asset_manager.h&gt;</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_TRACELOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACELOG</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TraceLog(level, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_TRACELOG_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACELOGD</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TraceLog(LOG_DEBUG, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACELOGD</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACELOG</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACELOGD</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fopen</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>mode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>android_fopen(name, mode)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>InitAssetManager</name><parameter_list>(<parameter><decl><type><name>AAssetManager</name> <modifier>*</modifier></type><name>manager</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dataPath</name></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>FILE</name> <modifier>*</modifier></type><name>android_fopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_UWP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><enum>enum <block>{
<decl><name>UWP_MSG_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,


<decl><name>UWP_MSG_SHOW_MOUSE</name></decl>,
<decl><name>UWP_MSG_HIDE_MOUSE</name></decl>,
<decl><name>UWP_MSG_LOCK_MOUSE</name></decl>,
<decl><name>UWP_MSG_UNLOCK_MOUSE</name></decl>,
<decl><name>UWP_MSG_SET_MOUSE_LOCATION</name></decl>, 


<decl><name>UWP_MSG_REGISTER_KEY</name></decl>, 
<decl><name>UWP_MSG_REGISTER_CLICK</name></decl>, 
<decl><name>UWP_MSG_SCROLL_WHEEL_UPDATE</name></decl>, 
<decl><name>UWP_MSG_UPDATE_MOUSE_LOCATION</name></decl>, 
<decl><name>UWP_MSG_SET_GAMEPAD_ACTIVE</name></decl>, 
<decl><name>UWP_MSG_SET_GAMEPAD_BUTTON</name></decl>, 
<decl><name>UWP_MSG_SET_GAMEPAD_AXIS</name></decl>, 
<decl><name>UWP_MSG_SET_DISPLAY_DIMS</name></decl>, 
<decl><name>UWP_MSG_HANDLE_RESIZE</name></decl>, 
<decl><name>UWP_MSG_SET_GAME_TIME</name></decl>, 
}</block></enum></type> <name>UWPMessageType</name>;</typedef>

<typedef>typedef <type><struct>struct <name>UWPMessage</name> <block>{
<decl_stmt><decl><type><name>UWPMessageType</name></type> <name>type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Vector2</name></type> <name>paramVector0</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>paramInt0</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>paramInt1</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name>paramChar0</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>paramFloat0</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>double</name></type> <name>paramDouble0</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name>paramBool0</name></decl>;</decl_stmt> 


}</block></struct></type> <name>UWPMessage</name>;</typedef>


<function_decl><type><name>RLAPI</name> <name>UWPMessage</name><modifier>*</modifier></type> <name>CreateUWPMessage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DeleteUWPMessage</name><parameter_list>(<parameter><decl><type><name>UWPMessage</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>UWPHasMessages</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RLAPI</name> <name>UWPMessage</name><modifier>*</modifier></type> <name>UWPGetMessage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>UWPSendMessage</name><parameter_list>(<parameter><decl><type><name>UWPMessage</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>SendMessageToUWP</name><parameter_list>(<parameter><decl><type><name>UWPMessage</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>HasMessageFromUWP</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>UWPMessage</name><modifier>*</modifier></type> <name>GetMessageFromUWP</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
