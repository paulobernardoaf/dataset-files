<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\templates\standard_game\standard_game.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"screens/screens.h"</cpp:file></cpp:include> 

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib template - standard game"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>LOGO</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>InitLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<switch>switch<condition>(<expr><name>currentScreen</name></expr>)</condition> 

<block>{<block_content>

<case>case <expr><name>LOGO</name></expr>:</case> 

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FinishLogoScreen</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>UnloadLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>TITLE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>TITLE</name></expr>:</case> 

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FinishTitleScreen</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>UnloadTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>OPTIONS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitOptionsScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>FinishTitleScreen</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>UnloadTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>GAMEPLAY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitGameplayScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>OPTIONS</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateOptionsScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FinishOptionsScreen</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>UnloadOptionsScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>TITLE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt> 

</block_content>}</block> <break>break;</break>

<case>case <expr><name>GAMEPLAY</name></expr>:</case>

<block>{<block_content> 

<expr_stmt><expr><call><name>UpdateGameplayScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FinishGameplayScreen</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>UnloadGameplayScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>ENDING</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt> 

</block_content>}</block> <break>break;</break>

<case>case <expr><name>ENDING</name></expr>:</case> 

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FinishEndingScreen</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>UnloadEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>TITLE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt> 

</block_content>}</block> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>currentScreen</name></expr>)</condition> 

<block>{<block_content>

<case>case <expr><name>LOGO</name></expr>:</case> <expr_stmt><expr><call><name>DrawLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TITLE</name></expr>:</case> <expr_stmt><expr><call><name>DrawTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>OPTIONS</name></expr>:</case> <expr_stmt><expr><call><name>DrawOptionsScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>GAMEPLAY</name></expr>:</case> <expr_stmt><expr><call><name>DrawGameplayScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ENDING</name></expr>:</case> <expr_stmt><expr><call><name>DrawEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
