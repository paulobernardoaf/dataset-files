<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\games\gold_fever.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;emscripten/emscripten.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>Player</name> <block>{

<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>speed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>radius</name></decl>;</decl_stmt>

}</block></struct></type> <name>Player</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Enemy</name> <block>{

<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>speed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>radius</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>radiusBounds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>moveRight</name></decl>;</decl_stmt>

}</block></struct></type> <name>Enemy</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Points</name> <block>{

<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>radius</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>

}</block></struct></type> <name>Points</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Home</name> <block>{

<decl_stmt><decl><type><name>Rectangle</name></type> <name>rec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt>

}</block></struct></type> <name>Home</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>gameOver</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>pause</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>hiScore</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Player</name></type> <name>player</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Enemy</name></type> <name>enemy</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Points</name></type> <name>points</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Home</name></type> <name>home</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>follow</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InitGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UnloadGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateDrawFrame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"sample game: gold fever"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>emscripten_set_main_loop</name><argument_list>(<argument><expr><name>UpdateDrawFrame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateDrawFrame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>UnloadGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>InitGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>pause</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{<expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>radius</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>speed</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{<expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemy</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{<expr><name>screenWidth</name> <operator>-</operator> <literal type="number">50</literal></expr>, <expr><name>screenHeight</name><operator>/</operator><literal type="number">2</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemy</name><operator>.</operator><name>radius</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemy</name><operator>.</operator><name>radiusBounds</name></name> <operator>=</operator> <literal type="number">150</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemy</name><operator>.</operator><name>speed</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemy</name><operator>.</operator><name>moveRight</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>follow</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>points</name><operator>.</operator><name>radius</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>points</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><name><name>points</name><operator>.</operator><name>radius</name></name></expr></argument>, <argument><expr><name>screenWidth</name> <operator>-</operator> <name><name>points</name><operator>.</operator><name>radius</name></name></expr></argument>)</argument_list></call></expr>, <macro><name>GetRandomValue</name><argument_list>(<argument>points.radius</argument>, <argument>screenHeight - points.radius</argument>)</argument_list></macro>}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>points</name><operator>.</operator><name>value</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>points</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>home</name><operator>.</operator><name>rec</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>home</name><operator>.</operator><name>rec</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>home</name><operator>.</operator><name>rec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>screenWidth</name> <operator>-</operator> <name><name>home</name><operator>.</operator><name>rec</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>home</name><operator>.</operator><name>rec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>screenHeight</name> <operator>-</operator> <name><name>home</name><operator>.</operator><name>rec</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>home</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>home</name><operator>.</operator><name>save</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gameOver</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pause</name> <operator>=</operator> <operator>!</operator><name>pause</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pause</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_RIGHT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>player</name><operator>.</operator><name>speed</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_LEFT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name><name>player</name><operator>.</operator><name>speed</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_UP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name><name>player</name><operator>.</operator><name>speed</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_DOWN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>player</name><operator>.</operator><name>speed</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>player</name><operator>.</operator><name>radius</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>player</name><operator>.</operator><name>radius</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>player</name><operator>.</operator><name>radius</name></name> <operator>&gt;=</operator> <name>screenWidth</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>screenWidth</name> <operator>-</operator> <name><name>player</name><operator>.</operator><name>radius</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>player</name><operator>.</operator><name>radius</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>player</name><operator>.</operator><name>radius</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>player</name><operator>.</operator><name>radius</name></name> <operator>&gt;=</operator> <name>screenHeight</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>screenHeight</name> <operator>-</operator> <name><name>player</name><operator>.</operator><name>radius</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>follow</name> <operator>||</operator> <call><name>CheckCollisionCircles</name><argument_list>(<argument><expr><name><name>player</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>player</name><operator>.</operator><name>radius</name></name></expr></argument>, <argument><expr><name><name>enemy</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>enemy</name><operator>.</operator><name>radiusBounds</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>home</name><operator>.</operator><name>save</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>enemy</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemy</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>enemy</name><operator>.</operator><name>speed</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>enemy</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemy</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name><name>enemy</name><operator>.</operator><name>speed</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name><name>enemy</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemy</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>enemy</name><operator>.</operator><name>speed</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>enemy</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemy</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name><name>enemy</name><operator>.</operator><name>speed</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>enemy</name><operator>.</operator><name>moveRight</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemy</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>enemy</name><operator>.</operator><name>speed</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemy</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name><name>enemy</name><operator>.</operator><name>speed</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enemy</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>enemy</name><operator>.</operator><name>radius</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemy</name><operator>.</operator><name>moveRight</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enemy</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>enemy</name><operator>.</operator><name>radius</name></name> <operator>&gt;=</operator> <name>screenWidth</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemy</name><operator>.</operator><name>moveRight</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enemy</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>enemy</name><operator>.</operator><name>radius</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemy</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>enemy</name><operator>.</operator><name>radius</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enemy</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>enemy</name><operator>.</operator><name>radius</name></name> <operator>&gt;=</operator> <name>screenWidth</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemy</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>screenWidth</name> <operator>-</operator> <name><name>enemy</name><operator>.</operator><name>radius</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enemy</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>enemy</name><operator>.</operator><name>radius</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemy</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>enemy</name><operator>.</operator><name>radius</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enemy</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>enemy</name><operator>.</operator><name>radius</name></name> <operator>&gt;=</operator> <name>screenHeight</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemy</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>screenHeight</name> <operator>-</operator> <name><name>enemy</name><operator>.</operator><name>radius</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionCircles</name><argument_list>(<argument><expr><name><name>player</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>player</name><operator>.</operator><name>radius</name></name></expr></argument>, <argument><expr><name><name>points</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>points</name><operator>.</operator><name>radius</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>points</name><operator>.</operator><name>active</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>follow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>points</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>home</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionCircles</name><argument_list>(<argument><expr><name><name>player</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>player</name><operator>.</operator><name>radius</name></name></expr></argument>, <argument><expr><name><name>enemy</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>enemy</name><operator>.</operator><name>radius</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>home</name><operator>.</operator><name>save</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>gameOver</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hiScore</name> <operator>&lt;</operator> <name>score</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hiScore</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionCircleRec</name><argument_list>(<argument><expr><name><name>player</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>player</name><operator>.</operator><name>radius</name></name></expr></argument>, <argument><expr><name><name>home</name><operator>.</operator><name>rec</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>follow</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>points</name><operator>.</operator><name>active</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <name><name>points</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>points</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemy</name><operator>.</operator><name>speed</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemy</name><operator>.</operator><name>speed</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>points</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><name><name>points</name><operator>.</operator><name>radius</name></name></expr></argument>, <argument><expr><name>screenWidth</name> <operator>-</operator> <name><name>points</name><operator>.</operator><name>radius</name></name></expr></argument>)</argument_list></call></expr>, <macro><name>GetRandomValue</name><argument_list>(<argument>points.radius</argument>, <argument>screenHeight - points.radius</argument>)</argument_list></macro>}</block></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>home</name><operator>.</operator><name>save</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>home</name><operator>.</operator><name>save</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>InitGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gameOver</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gameOver</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>follow</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>screenWidth</name> <operator>-</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>screenHeight</name> <operator>-</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DrawRectangleLines</name><argument_list>(<argument><expr><name><name>home</name><operator>.</operator><name>rec</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>home</name><operator>.</operator><name>rec</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>home</name><operator>.</operator><name>rec</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>home</name><operator>.</operator><name>rec</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>BLUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawCircleLines</name><argument_list>(<argument><expr><name><name>enemy</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>enemy</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>enemy</name><operator>.</operator><name>radiusBounds</name></name></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawCircleV</name><argument_list>(<argument><expr><name><name>enemy</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>enemy</name><operator>.</operator><name>radius</name></name></expr></argument>, <argument><expr><name>MAROON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawCircleV</name><argument_list>(<argument><expr><name><name>player</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>player</name><operator>.</operator><name>radius</name></name></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>points</name><operator>.</operator><name>active</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawCircleV</name><argument_list>(<argument><expr><name><name>points</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>points</name><operator>.</operator><name>radius</name></name></expr></argument>, <argument><expr><name>GOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>TextFormat</name><argument_list>(<argument><expr><literal type="string">"SCORE: %04i"</literal></expr></argument>, <argument><expr><name>score</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>TextFormat</name><argument_list>(<argument><expr><literal type="string">"HI-SCORE: %04i"</literal></expr></argument>, <argument><expr><name>hiScore</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pause</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"GAME PAUSED"</literal></expr></argument>, <argument><expr><name>screenWidth</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><literal type="string">"GAME PAUSED"</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>screenHeight</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"PRESS [ENTER] TO PLAY AGAIN"</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><literal type="string">"PRESS [ENTER] TO PLAY AGAIN"</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UnloadGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateDrawFrame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
