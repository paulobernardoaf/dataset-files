<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\games\space_invaders.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;emscripten/emscripten.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_SHOOTS</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_MAX_ENEMIES</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIRST_WAVE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECOND_WAVE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THIRD_WAVE</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{ <decl><name>FIRST</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>SECOND</name></decl>, <decl><name>THIRD</name></decl> }</block></enum></type> <name>EnemyWave</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Player</name><block>{

<decl_stmt><decl><type><name>Rectangle</name></type> <name>rec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>speed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt>

}</block></struct></type> <name>Player</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Enemy</name><block>{

<decl_stmt><decl><type><name>Rectangle</name></type> <name>rec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>speed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt>

}</block></struct></type> <name>Enemy</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Shoot</name><block>{

<decl_stmt><decl><type><name>Rectangle</name></type> <name>rec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>speed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt>

}</block></struct></type> <name>Shoot</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>gameOver</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>pause</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>victory</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Player</name></type> <name>player</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Enemy</name></type> <name><name>enemy</name><index>[<expr><name>NUM_MAX_ENEMIES</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Shoot</name></type> <name><name>shoot</name><index>[<expr><name>NUM_SHOOTS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>EnemyWave</name></type> <name>wave</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>shootRate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>alpha</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>activeEnemies</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>enemiesKill</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>smooth</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InitGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UnloadGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateDrawFrame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"sample game: space invaders"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>emscripten_set_main_loop</name><argument_list>(<argument><expr><name>UpdateDrawFrame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateDrawFrame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>UnloadGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>InitGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>shootRate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pause</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gameOver</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>victory</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>smooth</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wave</name> <operator>=</operator> <name>FIRST</name></expr>;</expr_stmt>

<expr_stmt><expr><name>activeEnemies</name> <operator>=</operator> <name>FIRST_WAVE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enemiesKill</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>speed</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>speed</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_MAX_ENEMIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenWidth</name> <operator>+</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>screenHeight</name> <operator>-</operator> <name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>GRAY</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_SHOOTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>shoot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shoot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shoot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shoot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shoot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shoot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shoot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shoot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>MAROON</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gameOver</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pause</name> <operator>=</operator> <operator>!</operator><name>pause</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pause</name></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name>wave</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>FIRST</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>smooth</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>alpha</name> <operator>+=</operator> <literal type="number">0.02f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>&gt;=</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>smooth</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>smooth</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>alpha</name> <operator>-=</operator> <literal type="number">0.02f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enemiesKill</name> <operator>==</operator> <name>activeEnemies</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>enemiesKill</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>activeEnemies</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>activeEnemies</name> <operator>=</operator> <name>SECOND_WAVE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wave</name> <operator>=</operator> <name>SECOND</name></expr>;</expr_stmt>

<expr_stmt><expr><name>smooth</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>SECOND</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>smooth</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>alpha</name> <operator>+=</operator> <literal type="number">0.02f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>&gt;=</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>smooth</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>smooth</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>alpha</name> <operator>-=</operator> <literal type="number">0.02f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enemiesKill</name> <operator>==</operator> <name>activeEnemies</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>enemiesKill</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>activeEnemies</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>activeEnemies</name> <operator>=</operator> <name>THIRD_WAVE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wave</name> <operator>=</operator> <name>THIRD</name></expr>;</expr_stmt>

<expr_stmt><expr><name>smooth</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>THIRD</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>smooth</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>alpha</name> <operator>+=</operator> <literal type="number">0.02f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>&gt;=</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>smooth</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>smooth</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>alpha</name> <operator>-=</operator> <literal type="number">0.02f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enemiesKill</name> <operator>==</operator> <name>activeEnemies</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>victory</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_RIGHT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>player</name><operator>.</operator><name>speed</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_LEFT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name><name>player</name><operator>.</operator><name>speed</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_UP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name><name>player</name><operator>.</operator><name>speed</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_DOWN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>player</name><operator>.</operator><name>speed</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>activeEnemies</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name><name>player</name><operator>.</operator><name>rec</name></name></expr></argument>, <argument><expr><name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rec</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>gameOver</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>activeEnemies</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenWidth</name> <operator>+</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>screenHeight</name> <operator>-</operator> <name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>x</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>width</name></name> <operator>&gt;=</operator> <name>screenWidth</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>screenWidth</name> <operator>-</operator> <name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>y</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>height</name></name> <operator>&gt;=</operator> <name>screenHeight</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>screenHeight</name> <operator>-</operator> <name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_SPACE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>shootRate</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_SHOOTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>shoot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <name>shootRate</name><operator>%</operator><literal type="number">20</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>shoot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shoot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>player</name><operator>.</operator><name>rec</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shoot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_SHOOTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>shoot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>shoot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>shoot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>activeEnemies</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>enemy</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name><name>shoot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rec</name></expr></argument>, <argument><expr><name><name>enemy</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rec</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>shoot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemy</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenWidth</name> <operator>+</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>enemy</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>screenHeight</name> <operator>-</operator> <name><name>enemy</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shootRate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>enemiesKill</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shoot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>shoot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>width</name></name> <operator>&gt;=</operator> <name>screenWidth</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>shoot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>shootRate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>InitGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gameOver</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gameOver</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name><name>player</name><operator>.</operator><name>rec</name></name></expr></argument>, <argument><expr><name><name>player</name><operator>.</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wave</name> <operator>==</operator> <name>FIRST</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"FIRST WAVE"</literal></expr></argument>, <argument><expr><name>screenWidth</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><literal type="string">"FIRST WAVE"</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>screenHeight</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>BLACK</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>wave</name> <operator>==</operator> <name>SECOND</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"SECOND WAVE"</literal></expr></argument>, <argument><expr><name>screenWidth</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><literal type="string">"SECOND WAVE"</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>screenHeight</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>BLACK</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>wave</name> <operator>==</operator> <name>THIRD</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"THIRD WAVE"</literal></expr></argument>, <argument><expr><name>screenWidth</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><literal type="string">"THIRD WAVE"</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>screenHeight</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>BLACK</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>activeEnemies</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rec</name></expr></argument>, <argument><expr><name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_SHOOTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>shoot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name><name>shoot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rec</name></expr></argument>, <argument><expr><name><name>shoot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>TextFormat</name><argument_list>(<argument><expr><literal type="string">"%04i"</literal></expr></argument>, <argument><expr><name>score</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>victory</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"YOU WIN"</literal></expr></argument>, <argument><expr><name>screenWidth</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><literal type="string">"YOU WIN"</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>screenHeight</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pause</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"GAME PAUSED"</literal></expr></argument>, <argument><expr><name>screenWidth</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><literal type="string">"GAME PAUSED"</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>screenHeight</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"PRESS [ENTER] TO PLAY AGAIN"</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><literal type="string">"PRESS [ENTER] TO PLAY AGAIN"</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UnloadGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateDrawFrame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
