<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\games\tetris.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;emscripten/emscripten.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQUARE_SIZE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRID_HORIZONTAL_SIZE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRID_VERTICAL_SIZE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LATERAL_SPEED</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TURNING_SPEED</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_FALL_AWAIT_COUNTER</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FADING_TIME</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>GridSquare</name> <block>{ <decl><name>EMPTY</name></decl>, <decl><name>MOVING</name></decl>, <decl><name>FULL</name></decl>, <decl><name>BLOCK</name></decl>, <decl><name>FADING</name></decl> }</block></enum></type> <name>GridSquare</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>gameOver</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>pause</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>GridSquare</name></type> <name><name>grid</name> <index>[<expr><name>GRID_HORIZONTAL_SIZE</name></expr>]</index><index>[<expr><name>GRID_VERTICAL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>GridSquare</name></type> <name><name>piece</name> <index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>GridSquare</name></type> <name><name>incomingPiece</name> <index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>piecePositionX</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>piecePositionY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Color</name></type> <name>fadingColor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>beginPlay</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>pieceActive</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>detection</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>lineToDelete</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>level</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>lines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>gravityMovementCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>lateralMovementCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>turnMovementCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fastFallMovementCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fadeLineCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>gravitySpeed</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InitGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UnloadGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateDrawFrame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>Createpiece</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GetRandompiece</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ResolveFallingMovement</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ResolveLateralMovement</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ResolveTurnMovement</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CheckDetection</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CheckCompletion</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DeleteCompleteLines</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"sample game: tetris"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>emscripten_set_main_loop</name><argument_list>(<argument><expr><name>UpdateDrawFrame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateDrawFrame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>UnloadGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>InitGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fadingColor</name> <operator>=</operator> <name>GRAY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>piecePositionX</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>piecePositionY</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pause</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>beginPlay</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pieceActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>detection</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lineToDelete</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gravityMovementCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lateralMovementCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>turnMovementCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fastFallMovementCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fadeLineCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>gravitySpeed</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GRID_HORIZONTAL_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>GRID_VERTICAL_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>==</operator> <name>GRID_VERTICAL_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name> <operator>==</operator> <name>GRID_HORIZONTAL_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>BLOCK</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>EMPTY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>EMPTY</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gameOver</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pause</name> <operator>=</operator> <operator>!</operator><name>pause</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pause</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lineToDelete</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pieceActive</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pieceActive</name> <operator>=</operator> <call><name>Createpiece</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fastFallMovementCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>fastFallMovementCounter</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>gravityMovementCounter</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>lateralMovementCounter</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>turnMovementCounter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_LEFT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_RIGHT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lateralMovementCounter</name> <operator>=</operator> <name>LATERAL_SPEED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_UP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>turnMovementCounter</name> <operator>=</operator> <name>TURNING_SPEED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_DOWN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>fastFallMovementCounter</name> <operator>&gt;=</operator> <name>FAST_FALL_AWAIT_COUNTER</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>gravityMovementCounter</name> <operator>+=</operator> <name>gravitySpeed</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gravityMovementCounter</name> <operator>&gt;=</operator> <name>gravitySpeed</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CheckDetection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>detection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ResolveFallingMovement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>detection</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pieceActive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CheckCompletion</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lineToDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gravityMovementCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lateralMovementCounter</name> <operator>&gt;=</operator> <name>LATERAL_SPEED</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ResolveLateralMovement</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lateralMovementCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>turnMovementCounter</name> <operator>&gt;=</operator> <name>TURNING_SPEED</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ResolveTurnMovement</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>turnMovementCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GRID_HORIZONTAL_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>FULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>gameOver</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>fadeLineCounter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fadeLineCounter</name><operator>%</operator><literal type="number">8</literal> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fadingColor</name> <operator>=</operator> <name>MAROON</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>fadingColor</name> <operator>=</operator> <name>GRAY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fadeLineCounter</name> <operator>&gt;=</operator> <name>FADING_TIME</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DeleteCompleteLines</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fadeLineCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lineToDelete</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lines</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>InitGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gameOver</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gameOver</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>offset</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>screenWidth</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <operator>(</operator><name>GRID_HORIZONTAL_SIZE</name><operator>*</operator><name>SQUARE_SIZE</name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">50</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>offset</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>screenHeight</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>GRID_VERTICAL_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name>SQUARE_SIZE</name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>SQUARE_SIZE</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>offset</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <literal type="number">50</literal></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>controller</name> <init>= <expr><name><name>offset</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>GRID_VERTICAL_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GRID_HORIZONTAL_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>EMPTY</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawLine</name><argument_list>(<argument><expr><name><name>offset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawLine</name><argument_list>(<argument><expr><name><name>offset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawLine</name><argument_list>(<argument><expr><name><name>offset</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawLine</name><argument_list>(<argument><expr><name><name>offset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>offset</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>SQUARE_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>FULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>offset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>offset</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>SQUARE_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>MOVING</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>offset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>offset</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>SQUARE_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>BLOCK</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>offset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>offset</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>SQUARE_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>FADING</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>offset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name>fadingColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>offset</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>SQUARE_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>offset</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>controller</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>offset</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>SQUARE_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>offset</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">500</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>offset</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">45</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>controler</name> <init>= <expr><name><name>offset</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>incomingPiece</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>EMPTY</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawLine</name><argument_list>(<argument><expr><name><name>offset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawLine</name><argument_list>(<argument><expr><name><name>offset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawLine</name><argument_list>(<argument><expr><name><name>offset</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawLine</name><argument_list>(<argument><expr><name><name>offset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>offset</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>SQUARE_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>incomingPiece</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>MOVING</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>offset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name>SQUARE_SIZE</name></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>offset</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>SQUARE_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>offset</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>controler</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>offset</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>SQUARE_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"INCOMING:"</literal></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>y</name></name> <operator>-</operator> <literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>TextFormat</name><argument_list>(<argument><expr><literal type="string">"LINES: %04i"</literal></expr></argument>, <argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pause</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"GAME PAUSED"</literal></expr></argument>, <argument><expr><name>screenWidth</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><literal type="string">"GAME PAUSED"</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>screenHeight</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"PRESS [ENTER] TO PLAY AGAIN"</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><literal type="string">"PRESS [ENTER] TO PLAY AGAIN"</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UnloadGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateDrawFrame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>Createpiece</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>piecePositionX</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>GRID_HORIZONTAL_SIZE</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>piecePositionY</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>beginPlay</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GetRandompiece</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>beginPlay</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>piece</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>incomingPiece</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>GetRandompiece</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>piecePositionX</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>piecePositionX</name> <operator>+</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>piece</name><index>[<expr><name>i</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>piecePositionX</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>MOVING</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GetRandompiece</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>random</name> <init>= <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>EMPTY</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<switch>switch <condition>(<expr><name>random</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <block>{<block_content> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> </block_content>}</block> <break>break;</break> 

<case>case <expr><literal type="number">1</literal></expr>:</case> <block>{<block_content> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> </block_content>}</block> <break>break;</break> 

<case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> </block_content>}</block> <break>break;</break> 

<case>case <expr><literal type="number">3</literal></expr>:</case> <block>{<block_content> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> </block_content>}</block> <break>break;</break> 

<case>case <expr><literal type="number">4</literal></expr>:</case> <block>{<block_content> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> </block_content>}</block> <break>break;</break> 

<case>case <expr><literal type="number">5</literal></expr>:</case> <block>{<block_content> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> </block_content>}</block> <break>break;</break> 

<case>case <expr><literal type="number">6</literal></expr>:</case> <block>{<block_content> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>incomingPiece</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt> </block_content>}</block> <break>break;</break> 

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ResolveFallingMovement</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>detection</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pieceActive</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>detection</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>GRID_VERTICAL_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GRID_HORIZONTAL_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>MOVING</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>FULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>detection</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pieceActive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>GRID_VERTICAL_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GRID_HORIZONTAL_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>MOVING</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>EMPTY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>piecePositionY</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ResolveLateralMovement</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>collision</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_LEFT</name></expr></argument>)</argument_list></call></expr>)</condition> 

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>GRID_VERTICAL_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GRID_HORIZONTAL_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>MOVING</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>grid</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>FULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>collision</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>collision</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>GRID_VERTICAL_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GRID_HORIZONTAL_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>MOVING</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>grid</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>EMPTY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>piecePositionX</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_RIGHT</name></expr></argument>)</argument_list></call></expr>)</condition> 

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>GRID_VERTICAL_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GRID_HORIZONTAL_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>MOVING</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>==</operator> <name>GRID_HORIZONTAL_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>grid</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>FULL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>collision</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>collision</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>GRID_VERTICAL_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>GRID_HORIZONTAL_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>MOVING</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>grid</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>EMPTY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>piecePositionX</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>collision</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ResolveTurnMovement</name><parameter_list>()</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_UP</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>aux</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>checker</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>piecePositionY</name></expr>]</index></name> <operator>==</operator> <name>MOVING</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name></expr>]</index><index>[<expr><name>piecePositionY</name></expr>]</index></name> <operator>!=</operator> <name>EMPTY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name></expr>]</index><index>[<expr><name>piecePositionY</name></expr>]</index></name> <operator>!=</operator> <name>MOVING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>checker</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>MOVING</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>piecePositionY</name></expr>]</index></name> <operator>!=</operator> <name>EMPTY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>piecePositionY</name></expr>]</index></name> <operator>!=</operator> <name>MOVING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>checker</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>MOVING</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <name>EMPTY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <name>MOVING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>checker</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name></expr>]</index><index>[<expr><name>piecePositionY</name></expr>]</index></name> <operator>==</operator> <name>MOVING</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <name>EMPTY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <name>MOVING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>checker</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>piecePositionY</name></expr>]</index></name> <operator>==</operator> <name>MOVING</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>EMPTY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>MOVING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>checker</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>MOVING</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>piecePositionY</name></expr>]</index></name> <operator>!=</operator> <name>EMPTY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>piecePositionY</name></expr>]</index></name> <operator>!=</operator> <name>MOVING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>checker</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>MOVING</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>EMPTY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>MOVING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>checker</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>MOVING</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <name>EMPTY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <name>MOVING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>checker</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>piecePositionY</name></expr>]</index></name> <operator>==</operator> <name>MOVING</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>EMPTY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>MOVING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>checker</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>MOVING</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>piecePositionY</name></expr>]</index></name> <operator>!=</operator> <name>EMPTY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>piecePositionY</name></expr>]</index></name> <operator>!=</operator> <name>MOVING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>checker</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>MOVING</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>EMPTY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>MOVING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>checker</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>MOVING</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <name>EMPTY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <name>MOVING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>checker</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>MOVING</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>EMPTY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>MOVING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>checker</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>MOVING</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>EMPTY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>MOVING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>checker</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>MOVING</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>EMPTY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>MOVING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>checker</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>MOVING</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>EMPTY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>grid</name><index>[<expr><name>piecePositionX</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>piecePositionY</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>MOVING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>checker</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>checker</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>aux</name> <operator>=</operator> <name><name>piece</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>piece</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>piece</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>piece</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>piece</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>piece</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>piece</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>piece</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>aux</name></expr>;</expr_stmt>

<expr_stmt><expr><name>aux</name> <operator>=</operator> <name><name>piece</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>piece</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>piece</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>piece</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>piece</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>piece</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>piece</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>piece</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>aux</name></expr>;</expr_stmt>

<expr_stmt><expr><name>aux</name> <operator>=</operator> <name><name>piece</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>piece</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>piece</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>piece</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>piece</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>piece</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>piece</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>piece</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>aux</name></expr>;</expr_stmt>

<expr_stmt><expr><name>aux</name> <operator>=</operator> <name><name>piece</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>piece</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>piece</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>piece</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>piece</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>piece</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>piece</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>piece</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>aux</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>GRID_VERTICAL_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GRID_HORIZONTAL_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>MOVING</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>EMPTY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>piecePositionX</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>piecePositionX</name> <operator>+</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>piecePositionY</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>piecePositionY</name> <operator>+</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>piece</name><index>[<expr><name>i</name> <operator>-</operator> <name>piecePositionX</name></expr>]</index><index>[<expr><name>j</name> <operator>-</operator> <name>piecePositionY</name></expr>]</index></name> <operator>==</operator> <name>MOVING</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>MOVING</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckDetection</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>detection</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>GRID_VERTICAL_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GRID_HORIZONTAL_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>MOVING</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>FULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>BLOCK</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>detection</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckCompletion</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>lineToDelete</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>calculator</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>GRID_VERTICAL_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>calculator</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GRID_HORIZONTAL_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>FULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>calculator</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>calculator</name> <operator>==</operator> <name>GRID_HORIZONTAL_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>lineToDelete</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>calculator</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>z</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <name>GRID_HORIZONTAL_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>grid</name><index>[<expr><name>z</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>FADING</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DeleteCompleteLines</name><parameter_list>()</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>GRID_VERTICAL_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<while>while <condition>(<expr><name><name>grid</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>FADING</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GRID_HORIZONTAL_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>EMPTY</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j2</name> <init>= <expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j2</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j2</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i2</name> <operator>&lt;</operator> <name>GRID_HORIZONTAL_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i2</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>grid</name><index>[<expr><name>i2</name></expr>]</index><index>[<expr><name>j2</name></expr>]</index></name> <operator>==</operator> <name>FULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>grid</name><index>[<expr><name>i2</name></expr>]</index><index>[<expr><name>j2</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>FULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grid</name><index>[<expr><name>i2</name></expr>]</index><index>[<expr><name>j2</name></expr>]</index></name> <operator>=</operator> <name>EMPTY</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>grid</name><index>[<expr><name>i2</name></expr>]</index><index>[<expr><name>j2</name></expr>]</index></name> <operator>==</operator> <name>FADING</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>grid</name><index>[<expr><name>i2</name></expr>]</index><index>[<expr><name>j2</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>FADING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>grid</name><index>[<expr><name>i2</name></expr>]</index><index>[<expr><name>j2</name></expr>]</index></name> <operator>=</operator> <name>EMPTY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></while>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
