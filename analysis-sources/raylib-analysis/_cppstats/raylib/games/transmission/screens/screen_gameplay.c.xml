<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\games\transmission\screens\screen_gameplay.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"screens.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LINE_CHAR</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>codingWords</name><index>[<expr><name>MAX_CODING_WORDS</name></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"pollo\0"</literal></expr>,

<expr><literal type="string">"conejo\0"</literal></expr>,

<expr><literal type="string">"huevo\0"</literal></expr>,

<expr><literal type="string">"nido\0"</literal></expr>,

<expr><literal type="string">"aire\0"</literal></expr>,

<expr><literal type="string">"armario\0"</literal></expr>,

<expr><literal type="string">"agujero\0"</literal></expr>,

<expr><literal type="string">"platano\0"</literal></expr>,

<expr><literal type="string">"pastel\0"</literal></expr>,

<expr><literal type="string">"mercado\0"</literal></expr>,

<expr><literal type="string">"raton\0"</literal></expr>,

<expr><literal type="string">"melon\0"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>framesCounter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>finishScreen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>texBackground</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Font</name></type> <name>fontMessage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>texWordsAtlas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>texVignette</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Sound</name></type> <name>fxGrab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Sound</name></type> <name>fxPlace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Sound</name></type> <name>fxLeave</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Music</name></type> <name>musSpy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Word</name></type> <name><name>words</name><index>[<expr><name>MAX_CODING_WORDS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Mission</name> <modifier>*</modifier></type><name>missions</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>canSend</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>msgOffset</name> <init>= <expr><block>{ <expr><literal type="number">430</literal></expr>, <expr><literal type="number">300</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>InitGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fontMessage</name> <operator>=</operator> <call><name>LoadFontEx</name><argument_list>(<argument><expr><literal type="string">"resources/fonts/traveling_typewriter.ttf"</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>texBackground</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/message_background.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>texVignette</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/message_vignette.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fxGrab</name> <operator>=</operator> <call><name>LoadSound</name><argument_list>(<argument><expr><literal type="string">"resources/audio/fx_grab.ogg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fxPlace</name> <operator>=</operator> <call><name>LoadSound</name><argument_list>(<argument><expr><literal type="string">"resources/audio/fx_place.ogg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fxLeave</name> <operator>=</operator> <call><name>LoadSound</name><argument_list>(<argument><expr><literal type="string">"resources/audio/fx_leave.ogg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>musSpy</name> <operator>=</operator> <call><name>LoadMusicStream</name><argument_list>(<argument><expr><literal type="string">"resources/audio/s_p_y.xm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PlayMusicStream</name><argument_list>(<argument><expr><name>musSpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORD_ATLAS_FROM_FILE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORD_ATLAS_FROM_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>texWordsAtlas</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/textures/mission_words.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>Image</name></type> <name>imWordsBase</name> <init>= <expr><call><name>LoadImage</name><argument_list>(<argument><expr><literal type="string">"resources/textures/words_base.png"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Image</name></type> <name>imWords</name> <init>= <expr><call><name>GenImageColor</name><argument_list>(<argument><expr><name><name>imWordsBase</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>imWordsBase</name><operator>.</operator><name>height</name></name><operator>*</operator><name>MAX_CODING_WORDS</name></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_CODING_WORDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<macro><name>ImageDraw</name><argument_list>(<argument>&amp;imWords</argument>, <argument>imWordsBase</argument>,

<argument>(Rectangle){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>imWordsBase.width</argument>, <argument>imWordsBase.height }</argument>,

<argument>(Rectangle){ <literal type="number">0</literal></argument>, <argument>imWordsBase.height*i</argument>, <argument>imWordsBase.width</argument>, <argument>imWordsBase.height }</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>ImageDrawTextEx</name><argument_list>(<argument>&amp;imWords</argument>,<argument>(Vector2){ imWordsBase.width/<literal type="number">2</literal> - MeasureTextEx(fontMessage, codingWords[i],

fontMessage.baseSize, <literal type="number">0</literal>).x/<literal type="number">2</literal></argument>, <argument>imWordsBase.height*i }</argument>, <argument>fontMessage</argument>, <argument>codingWords[i]</argument>,

<argument>fontMessage.baseSize</argument>, <argument><literal type="number">0</literal></argument>, <argument>BLACK</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>texWordsAtlas</name> <operator>=</operator> <call><name>LoadTextureFromImage</name><argument_list>(<argument><expr><name>imWords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>imWordsBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>imWords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>missions</name> <operator>=</operator> <call><name>LoadMissions</name><argument_list>(<argument><expr><literal type="string">"resources/missions.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TraceLog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Words count %i"</literal></expr></argument>, <argument><expr><name><name>missions</name><index>[<expr><name>currentMission</name></expr>]</index></name><operator>.</operator><name>wordsCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_CODING_WORDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">110</literal> <operator>+</operator> <literal type="number">940</literal><operator>*</operator><operator>(</operator><name>i</name><operator>/</operator><operator>(</operator><name>MAX_CODING_WORDS</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">200</literal> <operator>+</operator> <literal type="number">60</literal><operator>*</operator><operator>(</operator><name>i</name><operator>%</operator><operator>(</operator><name>MAX_CODING_WORDS</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">140</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">35</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iniRec</name> <operator>=</operator> <name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hover</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>picked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>msgLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>missions</name><index>[<expr><name>currentMission</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>currentLine</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>currentLine</name> <operator>*</operator> <name>MAX_LINE_CHAR</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>msgLen</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>missions</name><index>[<expr><name>currentMission</name></expr>]</index></name><operator>.</operator><name><name>msg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>missions</name><index>[<expr><name>currentMission</name></expr>]</index></name><operator>.</operator><name><name>msg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>currentLine</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>currentLine</name><operator>*</operator><name>MAX_LINE_CHAR</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>int</name></type> <name>currentWord</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offsetX</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offsetY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>foundWord</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wordInitPosX</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wordInitPosY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>msgLen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>missions</name><index>[<expr><name>currentMission</name></expr>]</index></name><operator>.</operator><name><name>msg</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>foundWord</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>foundWord</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>messageWords</name><index>[<expr><name>currentWord</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>width</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>MeasureTextEx</name><argument_list>(<argument><expr><name>fontMessage</name></expr></argument>, <argument><expr><call><name>TextSubtext</name><argument_list>(<argument><expr><name><name>missions</name><index>[<expr><name>currentMission</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>, <argument><expr><name>wordInitPosX</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>-</operator> <name>wordInitPosX</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>messageWords</name><index>[<expr><name>currentWord</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>fontMessage</name><operator>.</operator><name>baseSize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>messageWords</name><index>[<expr><name>currentWord</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>text</name></expr></argument>, <argument><expr><call><name>TextSubtext</name><argument_list>(<argument><expr><name><name>missions</name><index>[<expr><name>currentMission</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>, <argument><expr><name>wordInitPosX</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>-</operator> <name>wordInitPosX</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>wordInitPosX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>foundWord</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>missions</name><index>[<expr><name>currentMission</name></expr>]</index></name><operator>.</operator><name><name>msg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offsetX</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>MeasureTextEx</name><argument_list>(<argument><expr><name>fontMessage</name></expr></argument>, <argument><expr><call><name>TextSubtext</name><argument_list>(<argument><expr><name><name>missions</name><index>[<expr><name>currentMission</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>, <argument><expr><name>wordInitPosY</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>wordInitPosY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>messageWords</name><index>[<expr><name>currentWord</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>offsetX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>messageWords</name><index>[<expr><name>currentWord</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>offsetY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wordInitPosX</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>currentWord</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>missions</name><index>[<expr><name>currentMission</name></expr>]</index></name><operator>.</operator><name><name>msg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>wordInitPosY</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offsetY</name> <operator>+=</operator> <operator>(</operator><name><name>fontMessage</name><operator>.</operator><name>baseSize</name></name> <operator>+</operator> <name><name>fontMessage</name><operator>.</operator><name>baseSize</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>missions</name><index>[<expr><name>currentMission</name></expr>]</index></name><operator>.</operator><name>wordsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>messageWords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>messageWords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>msgOffset</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>messageWords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>msgOffset</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>messageWords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <operator>(</operator><name><name>texWordsAtlas</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name><name>messageWords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>width</name></name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>messageWords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <operator>(</operator><operator>(</operator><name><name>texWordsAtlas</name><operator>.</operator><name>height</name></name> <operator>/</operator> <name>MAX_CODING_WORDS</name><operator>)</operator> <operator>-</operator> <name><name>messageWords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>height</name></name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>messageWords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>texWordsAtlas</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>messageWords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>texWordsAtlas</name><operator>.</operator><name>height</name></name> <operator>/</operator> <name>MAX_CODING_WORDS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>messageWords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hover</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>messageWords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>picked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateMusicStream</name><argument_list>(<argument><expr><name>musSpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_CODING_WORDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rec</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hover</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>picked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxGrab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hover</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>picked</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>missions</name><index>[<expr><name>currentMission</name></expr>]</index></name><operator>.</operator><name>wordsCount</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>messageWords</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rec</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>messageWords</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>hover</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>messageWords</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>hover</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonReleased</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>picked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>missions</name><index>[<expr><name>currentMission</name></expr>]</index></name><operator>.</operator><name>wordsCount</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>messageWords</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>hover</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>messageWords</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rec</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxPlace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>messageWords</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>messageWords</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>messageWords</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><name><name>messageWords</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>words</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>rec</name> <operator>=</operator> <name><name>words</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>iniRec</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>messageWords</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>missions</name><index>[<expr><name>currentMission</name></expr>]</index></name><operator>.</operator><name>wordsCount</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>k</name> <operator>&amp;&amp;</operator> <name><name>messageWords</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name><name>messageWords</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>id</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>messageWords</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxLeave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rec</name> <operator>=</operator> <name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iniRec</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>messageWords</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>messageWords</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>picked</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>GetMouseX</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>GetMouseY</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>canSend</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>missions</name><index>[<expr><name>currentMission</name></expr>]</index></name><operator>.</operator><name>wordsCount</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>messageWords</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>canSend</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>canSend</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IsButtonPressed</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>texBackground</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawTextEx</name><argument_list>(<argument><expr><name>fontMessage</name></expr></argument>, <argument><expr><name><name>missions</name><index>[<expr><name>currentMission</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>, <argument><expr><name>msgOffset</name></expr></argument>, <argument><expr><name><name>fontMessage</name><operator>.</operator><name>baseSize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>missions</name><index>[<expr><name>currentMission</name></expr>]</index></name><operator>.</operator><name>wordsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>recLines</name> <init>= <expr><name><name>messageWords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rec</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DrawRectangleLines</name><argument_list>(<argument><expr><name><name>recLines</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>recLines</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>recLines</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>recLines</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>RED</name></expr></argument>, <argument><expr><literal type="number">0.35f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>messageWords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hover</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name><name>messageWords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rec</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>RED</name></expr></argument>, <argument><expr><literal type="number">0.30f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><name><name>messageWords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_CODING_WORDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>picked</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextureRec</name><argument_list>(<argument>texWordsAtlas</argument>, <argument>(Rectangle){ <literal type="number">0</literal></argument>, <argument>i*<literal type="number">35</literal></argument>, <argument><literal type="number">140</literal></argument>, <argument><literal type="number">35</literal> }</argument>, <argument>(Vector2){ words[i].rec.x</argument>, <argument>words[i].rec.y }</argument>, <argument>MAROON</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hover</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextureRec</name><argument_list>(<argument>texWordsAtlas</argument>, <argument>(Rectangle){ <literal type="number">0</literal></argument>, <argument>i*<literal type="number">35</literal></argument>, <argument><literal type="number">140</literal></argument>, <argument><literal type="number">35</literal> }</argument>, <argument>(Vector2){ words[i].rec.x</argument>, <argument>words[i].rec.y }</argument>, <argument>RED</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <macro><name>DrawTextureRec</name><argument_list>(<argument>texWordsAtlas</argument>, <argument>(Rectangle){ <literal type="number">0</literal></argument>, <argument>i*<literal type="number">35</literal></argument>, <argument><literal type="number">140</literal></argument>, <argument><literal type="number">35</literal> }</argument>, <argument>(Vector2){ words[i].rec.x</argument>, <argument>words[i].rec.y }</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<macro><name>DrawTexturePro</name><argument_list>(<argument>texVignette</argument>, <argument>(Rectangle){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal></argument>,<argument>texVignette.width</argument>, <argument>texVignette.height}</argument>, <argument>(Rectangle){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal></argument>,<argument>GetScreenWidth()</argument>, <argument>GetScreenHeight()}</argument>, <argument>(Vector2){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal>}</argument>, <argument><literal type="number">0</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name>canSend</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawButton</name><argument_list>(<argument><expr><literal type="string">"enviar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UnloadGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texBackground</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texVignette</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texWordsAtlas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadSound</name><argument_list>(<argument><expr><name>fxGrab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadSound</name><argument_list>(<argument><expr><name>fxLeave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadSound</name><argument_list>(<argument><expr><name>fxPlace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadMusicStream</name><argument_list>(<argument><expr><name>musSpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>missions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>FinishGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>finishScreen</name></expr>;</return>

</block_content>}</block></function>

</unit>
