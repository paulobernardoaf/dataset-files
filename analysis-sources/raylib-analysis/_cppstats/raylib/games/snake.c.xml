<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\games\snake.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;emscripten/emscripten.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNAKE_LENGTH</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQUARE_SIZE</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>Snake</name> <block>{

<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>speed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt>

}</block></struct></type> <name>Snake</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Food</name> <block>{

<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt>

}</block></struct></type> <name>Food</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>framesCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>gameOver</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>pause</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Food</name></type> <name>fruit</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Snake</name></type> <name><name>snake</name><index>[<expr><name>SNAKE_LENGTH</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Vector2</name></type> <name><name>snakePosition</name><index>[<expr><name>SNAKE_LENGTH</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>allowMove</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Vector2</name></type> <name>offset</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>counterTail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InitGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UnloadGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateDrawFrame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"sample game: snake"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>emscripten_set_main_loop</name><argument_list>(<argument><expr><name>UpdateDrawFrame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateDrawFrame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>UnloadGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>InitGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>gameOver</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pause</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>counterTail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>allowMove</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>offset</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>screenWidth</name><operator>%</operator><name>SQUARE_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>offset</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>screenHeight</name><operator>%</operator><name>SQUARE_SIZE</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SNAKE_LENGTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>offset</name><operator>.</operator><name>x</name></name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name><name>offset</name><operator>.</operator><name>y</name></name><operator>/</operator><literal type="number">2</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name>SQUARE_SIZE</name></expr>, <expr><name>SQUARE_SIZE</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>speed</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name>SQUARE_SIZE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>DARKBLUE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>BLUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SNAKE_LENGTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>snakePosition</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>fruit</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name>SQUARE_SIZE</name></expr>, <expr><name>SQUARE_SIZE</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fruit</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>SKYBLUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fruit</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gameOver</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pause</name> <operator>=</operator> <operator>!</operator><name>pause</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pause</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_RIGHT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>x</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>allowMove</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>speed</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name>SQUARE_SIZE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name>allowMove</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_LEFT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>x</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>allowMove</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>speed</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><operator>-</operator><name>SQUARE_SIZE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name>allowMove</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_UP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>y</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>allowMove</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>speed</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><name>SQUARE_SIZE</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name>allowMove</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_DOWN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>y</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>allowMove</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>speed</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>SQUARE_SIZE</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name>allowMove</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>counterTail</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>snakePosition</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>framesCounter</name><operator>%</operator><literal type="number">5</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>counterTail</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>allowMove</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <name><name>snakePosition</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>screenWidth</name> <operator>-</operator> <name><name>offset</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>)</operator> <operator>||</operator> 

<operator>(</operator><operator>(</operator><name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>screenHeight</name> <operator>-</operator> <name><name>offset</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>gameOver</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>counterTail</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>==</operator> <name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>==</operator> <name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>gameOver</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fruit</name><operator>.</operator><name>active</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fruit</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fruit</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>screenWidth</name><operator>/</operator><name>SQUARE_SIZE</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>SQUARE_SIZE</name> <operator>+</operator> <name><name>offset</name><operator>.</operator><name>x</name></name><operator>/</operator><literal type="number">2</literal></expr>, <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>screenHeight</name><operator>/</operator><name>SQUARE_SIZE</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>SQUARE_SIZE</name> <operator>+</operator> <name><name>offset</name><operator>.</operator><name>y</name></name><operator>/</operator><literal type="number">2</literal></expr> }</block></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>counterTail</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<while>while <condition>(<expr><operator>(</operator><name><name>fruit</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>==</operator> <name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fruit</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>==</operator> <name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fruit</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>screenWidth</name><operator>/</operator><name>SQUARE_SIZE</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>SQUARE_SIZE</name> <operator>+</operator> <name><name>offset</name><operator>.</operator><name>x</name></name><operator>/</operator><literal type="number">2</literal></expr>, <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>screenHeight</name><operator>/</operator><name>SQUARE_SIZE</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>SQUARE_SIZE</name> <operator>+</operator> <name><name>offset</name><operator>.</operator><name>y</name></name><operator>/</operator><literal type="number">2</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>fruit</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>fruit</name><operator>.</operator><name>size</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>size</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>fruit</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>fruit</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>fruit</name><operator>.</operator><name>size</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>snake</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>size</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>fruit</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>snake</name><index>[<expr><name>counterTail</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <name><name>snakePosition</name><index>[<expr><name>counterTail</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>counterTail</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fruit</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>InitGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gameOver</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gameOver</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>screenWidth</name><operator>/</operator><name>SQUARE_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<macro><name>DrawLineV</name><argument_list>(<argument>(Vector2){SQUARE_SIZE*i + offset.x/<literal type="number">2</literal></argument>, <argument>offset.y/<literal type="number">2</literal>}</argument>, <argument>(Vector2){SQUARE_SIZE*i + offset.x/<literal type="number">2</literal></argument>, <argument>screenHeight - offset.y/<literal type="number">2</literal>}</argument>, <argument>LIGHTGRAY</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>screenHeight</name><operator>/</operator><name>SQUARE_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<macro><name>DrawLineV</name><argument_list>(<argument>(Vector2){offset.x/<literal type="number">2</literal></argument>, <argument>SQUARE_SIZE*i + offset.y/<literal type="number">2</literal>}</argument>, <argument>(Vector2){screenWidth - offset.x/<literal type="number">2</literal></argument>, <argument>SQUARE_SIZE*i + offset.y/<literal type="number">2</literal>}</argument>, <argument>LIGHTGRAY</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>counterTail</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleV</name><argument_list>(<argument><expr><name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name></expr></argument>, <argument><expr><name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>, <argument><expr><name><name>snake</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>DrawRectangleV</name><argument_list>(<argument><expr><name><name>fruit</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>fruit</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>fruit</name><operator>.</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pause</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"GAME PAUSED"</literal></expr></argument>, <argument><expr><name>screenWidth</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><literal type="string">"GAME PAUSED"</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>screenHeight</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"PRESS [ENTER] TO PLAY AGAIN"</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><literal type="string">"PRESS [ENTER] TO PLAY AGAIN"</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UnloadGame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateDrawFrame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
