<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\games\cat_vs_roomba\roomba.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"screens/screens.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;emscripten/emscripten.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>GameScreen</name></type> <name>currentScreen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Font</name></type> <name>font</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Font</name></type> <name>font2</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Music</name></type> <name>music</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sound</name></type> <name>fxCoin</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">1280</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TILE_VIEWER_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">1080</literal></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">720</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>transAlpha</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>onTransition</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>transFadeOut</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>transFromScreen</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>transToScreen</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ChangeToScreen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>screen</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TransitionToScreen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>screen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateTransition</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawTransition</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdateDrawFrame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"CAT VS ROOMBA [GGJ19]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitAudioDevice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>LoadFont</name><argument_list>(<argument><expr><literal type="string">"resources/star.fnt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>font2</name> <operator>=</operator> <call><name>LoadFont</name><argument_list>(<argument><expr><literal type="string">"resources/star2.fnt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>music</name> <operator>=</operator> <call><name>LoadMusicStream</name><argument_list>(<argument><expr><literal type="string">"resources/cat_mouse.mod"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fxCoin</name> <operator>=</operator> <call><name>LoadSound</name><argument_list>(<argument><expr><literal type="string">"resources/coin.wav"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetMusicVolume</name><argument_list>(<argument><expr><name>music</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PlayMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>LOGO</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_WEB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>emscripten_set_main_loop</name><argument_list>(<argument><expr><name>UpdateDrawFrame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateDrawFrame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name>currentScreen</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>LOGO</name></expr>:</case> <expr_stmt><expr><call><name>UnloadLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TITLE</name></expr>:</case> <expr_stmt><expr><call><name>UnloadTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>GAMEPLAY</name></expr>:</case> <expr_stmt><expr><call><name>UnloadGameplayScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ENDING</name></expr>:</case> <expr_stmt><expr><call><name>UnloadEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>UnloadFont</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadFont</name><argument_list>(<argument><expr><name>font2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadSound</name><argument_list>(<argument><expr><name>fxCoin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseAudioDevice</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ChangeToScreen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>screen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>currentScreen</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>LOGO</name></expr>:</case> <expr_stmt><expr><call><name>UnloadLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TITLE</name></expr>:</case> <expr_stmt><expr><call><name>UnloadTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>GAMEPLAY</name></expr>:</case> <expr_stmt><expr><call><name>UnloadGameplayScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ENDING</name></expr>:</case> <expr_stmt><expr><call><name>UnloadEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>screen</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>LOGO</name></expr>:</case> <expr_stmt><expr><call><name>InitLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TITLE</name></expr>:</case> <expr_stmt><expr><call><name>InitTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>GAMEPLAY</name></expr>:</case> <expr_stmt><expr><call><name>InitGameplayScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ENDING</name></expr>:</case> <expr_stmt><expr><call><name>InitEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>screen</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TransitionToScreen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>screen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>onTransition</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>transFadeOut</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>transFromScreen</name> <operator>=</operator> <name>currentScreen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>transToScreen</name> <operator>=</operator> <name>screen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>transAlpha</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateTransition</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>transFadeOut</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>transAlpha</name> <operator>+=</operator> <literal type="number">0.02f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>transAlpha</name> <operator>&gt;</operator> <literal type="number">1.01f</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>transAlpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>transFromScreen</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>LOGO</name></expr>:</case> <expr_stmt><expr><call><name>UnloadLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TITLE</name></expr>:</case> <expr_stmt><expr><call><name>UnloadTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>GAMEPLAY</name></expr>:</case> <expr_stmt><expr><call><name>UnloadGameplayScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ENDING</name></expr>:</case> <expr_stmt><expr><call><name>UnloadEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>transToScreen</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>LOGO</name></expr>:</case> <expr_stmt><expr><call><name>InitLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TITLE</name></expr>:</case> <expr_stmt><expr><call><name>InitTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>GAMEPLAY</name></expr>:</case> <expr_stmt><expr><call><name>InitGameplayScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ENDING</name></expr>:</case> <expr_stmt><expr><call><name>InitEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>currentScreen</name> <operator>=</operator> <name>transToScreen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>transFadeOut</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>transAlpha</name> <operator>-=</operator> <literal type="number">0.02f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>transAlpha</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">0.01f</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>transAlpha</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>transFadeOut</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>onTransition</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>transFromScreen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>transToScreen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawTransition</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>BLACK</name></expr></argument>, <argument><expr><name>transAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateDrawFrame</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>onTransition</name></expr>)</condition>

<block>{<block_content>

<switch>switch<condition>(<expr><name>currentScreen</name></expr>)</condition> 

<block>{<block_content>

<case>case <expr><name>LOGO</name></expr>:</case> 

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FinishLogoScreen</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>TITLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>TITLE</name></expr>:</case> 

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FinishTitleScreen</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>OPTIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>FinishTitleScreen</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>GAMEPLAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>GAMEPLAY</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateGameplayScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FinishGameplayScreen</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>ENDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>ENDING</name></expr>:</case>

<block>{<block_content> 

<expr_stmt><expr><call><name>UpdateEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FinishEndingScreen</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TransitionToScreen</name><argument_list>(<argument><expr><name>TITLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>UpdateTransition</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>currentScreen</name></expr>)</condition> 

<block>{<block_content>

<case>case <expr><name>LOGO</name></expr>:</case> <expr_stmt><expr><call><name>DrawLogoScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>TITLE</name></expr>:</case> <expr_stmt><expr><call><name>DrawTitleScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>GAMEPLAY</name></expr>:</case> <expr_stmt><expr><call><name>DrawGameplayScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ENDING</name></expr>:</case> <expr_stmt><expr><call><name>DrawEndingScreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>onTransition</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawTransition</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
