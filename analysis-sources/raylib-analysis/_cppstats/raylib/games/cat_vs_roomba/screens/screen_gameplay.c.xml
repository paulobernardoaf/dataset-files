<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\games\cat_vs_roomba\screens\screen_gameplay.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"screens.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raymath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TILE_REQUIRED_CLEAN_TIME</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TILE_SCORE_BY_CLEANED_LEVEL</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TILE_REQUIRED_CLEAN_AREA</name></cpp:macro> <cpp:value>28*28</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TILE_SIZE</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TILES_X</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TILES_Y</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAT_TARGET_RADIUS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAT_DIRT_CELL_RADIUS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_LIMIT_SECONDS</name></cpp:macro> <cpp:value>180</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SCORE_POPUPS</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>cleaned</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Dirtile</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>alpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>enabled</name></decl>;</decl_stmt>

}</block></struct></type> <name>ScorePopup</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>posX</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>posY</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt> 

}</block></struct></type> <name>FurSet</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>furId</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cellX</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>cellY</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Furniture</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>framesCounter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>timeLevelSeconds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>levelFinished</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>finishScreen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Vector2</name></type> <name>roomOffset</name> <init>= <expr><block>{ <expr><literal type="number">70</literal></expr>, <expr><literal type="number">70</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>roomba</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>cat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>dirtiles</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>furniture</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TILE_VIEWER_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>tracemap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Texture2D</name></type> <name>fursetid</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>Music</name></type> <name>catch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Sound</name></type> <name><name>fxCat</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Sound</name></type> <name><name>fxRoomba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Vector2</name></type> <name>roombaPosition</name> <init>= <expr><block>{ <expr><literal type="number">100</literal></expr>, <expr><literal type="number">100</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Vector2</name></type> <name>roombaSpeed</name> <init>= <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>roombaTilePosX</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>roombaTilePosY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Vector2</name></type> <name>catPosition</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Vector2</name></type> <name>catTargetPosition</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Vector2</name></type> <name>catSpeed</name> <init>= <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>catTilePosX</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>catTilePosY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>catShouldMove</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Vector2</name></type> <name>mousePosition</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mouseTileX</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>mouseTileY</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Dirtile</name></type> <name><name>tiles</name><index>[<expr><name>MAX_TILES_X</name><operator>*</operator><name>MAX_TILES_Y</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ScorePopup</name></type> <name><name>popup</name><index>[<expr><name>MAX_SCORE_POPUPS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>FurSet</name></type> <name><name>furset</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Furniture</name></type> <name><name>furmap</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>furnitureCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>furcolmap</name><index>[<expr><name>MAX_TILES_X</name><operator>*</operator><name>MAX_TILES_Y</name></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,

<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,

<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,

<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,

<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,

<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,

<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,

<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,

<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,

<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,

<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>showObjective</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>GetTileCleanPercent</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>InitGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>timeLevelSeconds</name> <operator>=</operator> <name>TIME_LIMIT_SECONDS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>levelFinished</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>roomba</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/roomba.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cat</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/cat.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dirtiles</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/dirtiles.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>furniture</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/furniture.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TILE_VIEWER_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>tracemap</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/tracemap.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fursetid</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/fursetid.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>furCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fursetFile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"resources/furset.txt"</literal></expr></argument>, <argument><expr><literal type="string">"rt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fursetFile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name>fursetFile</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fgets</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><name>fursetFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> 

<block>{<block_content>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"f %i %i %i %i %i"</literal></expr></argument>, 

<argument><expr><operator>&amp;</operator><name><name>furset</name><index>[<expr><name>furCount</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name><name>furset</name><index>[<expr><name>furCount</name></expr>]</index></name><operator>.</operator><name>posX</name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name><name>furset</name><index>[<expr><name>furCount</name></expr>]</index></name><operator>.</operator><name>posY</name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name><name>furset</name><index>[<expr><name>furCount</name></expr>]</index></name><operator>.</operator><name>width</name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name><name>furset</name><index>[<expr><name>furCount</name></expr>]</index></name><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>furCount</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><literal type="char">'.'</literal></expr>:</case> 

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fursetFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>furCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>furset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>posX</name> <operator>*=</operator> <name>TILE_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>furset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>posY</name> <operator>*=</operator> <name>TILE_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>furset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>*=</operator> <name>TILE_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>furset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>*=</operator> <name>TILE_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Furniture SET elements read: %i\n"</literal></expr></argument>, <argument><expr><name>furCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>furnitureFile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"resources/furmap.txt"</literal></expr></argument>, <argument><expr><literal type="string">"rt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>furnitureFile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name>furnitureFile</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fgets</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><name>furnitureFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> 

<block>{<block_content>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"f %i %i %i %i %i"</literal></expr></argument>, 

<argument><expr><operator>&amp;</operator><name><name>furmap</name><index>[<expr><name>furnitureCount</name></expr>]</index></name><operator>.</operator><name>furId</name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name><name>furmap</name><index>[<expr><name>furnitureCount</name></expr>]</index></name><operator>.</operator><name>cellX</name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name><name>furmap</name><index>[<expr><name>furnitureCount</name></expr>]</index></name><operator>.</operator><name>cellY</name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name><name>furmap</name><index>[<expr><name>furnitureCount</name></expr>]</index></name><operator>.</operator><name>state</name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name><name>furmap</name><index>[<expr><name>furnitureCount</name></expr>]</index></name><operator>.</operator><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>furnitureCount</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><literal type="char">'.'</literal></expr>:</case> 

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>furnitureFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Furniture MAP elements read: %i\n"</literal></expr></argument>, <argument><expr><name>furnitureCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>MAX_TILES_Y</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>MAX_TILES_X</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name><name>roomOffset</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>TILE_SIZE</name><operator>*</operator><name>x</name></expr>, <expr><name><name>roomOffset</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>TILE_SIZE</name><operator>*</operator><name>y</name></expr> }</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>furcolmap</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>furcolmap</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>!=</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dirt</name> <init>= <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dirt</name> <operator>&lt;</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>dirt</name> <operator>&lt;</operator> <literal type="number">70</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>level</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>dirt</name> <operator>&lt;</operator> <literal type="number">90</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>level</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>dirt</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>level</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>counter</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>level</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>TILE_REQUIRED_CLEAN_TIME</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>cleaned</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>level</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_SCORE_POPUPS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>popup</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>popup</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>TILE_SCORE_BY_CLEANED_LEVEL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>popup</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>enabled</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>popup</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>catPosition</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">30</literal><operator>*</operator><name>TILE_SIZE</name> <operator>+</operator> <name><name>roomOffset</name><operator>.</operator><name>x</name></name></expr>, <expr><name>TILE_SIZE</name> <operator>+</operator> <name><name>roomOffset</name><operator>.</operator><name>y</name></name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name>catTargetPosition</name> <operator>=</operator> <name>catPosition</name></expr>;</expr_stmt>

<expr_stmt><expr><name>showObjective</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fxCat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>LoadSound</name><argument_list>(<argument><expr><literal type="string">"resources/fxcat01.wav"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fxCat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>LoadSound</name><argument_list>(<argument><expr><literal type="string">"resources/fxcat02.wav"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fxRoomba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>LoadSound</name><argument_list>(<argument><expr><literal type="string">"resources/fxrobot01.wav"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fxRoomba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>LoadSound</name><argument_list>(<argument><expr><literal type="string">"resources/fxrobot02.wav"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fxRoomba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>LoadSound</name><argument_list>(<argument><expr><literal type="string">"resources/fxrobot03.wav"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>catch</name> <operator>=</operator> <call><name>LoadMusicStream</name><argument_list>(<argument><expr><literal type="string">"resources/catch22.mod"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StopMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetMusicVolume</name><argument_list>(<argument><expr><name>catch</name></expr></argument>, <argument><expr><literal type="number">0.6f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PlayMusicStream</name><argument_list>(<argument><expr><name>catch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateMusicStream</name><argument_list>(<argument><expr><name>catch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>showObjective</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>showObjective</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxCoin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>framesCounter</name> <operator>==</operator> <literal type="number">60</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>timeLevelSeconds</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>timeLevelSeconds</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>levelFinished</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxCoin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetTileCleanPercent</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">80</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mousePosition</name> <operator>=</operator> <call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mouseTileX</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>floorf</name><argument_list>(<argument><expr><operator>(</operator><name><name>mousePosition</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>roomOffset</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>/</operator><name>TILE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mouseTileY</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>floorf</name><argument_list>(<argument><expr><operator>(</operator><name><name>mousePosition</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>roomOffset</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>/</operator><name>TILE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>prevPosition</name> <init>= <expr><name>roombaPosition</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_D</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>roombaPosition</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>roombaSpeed</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_A</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>roombaPosition</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name><name>roombaSpeed</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_W</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>roombaPosition</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name><name>roombaSpeed</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_S</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>roombaPosition</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>roombaSpeed</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>roombaTilePosX</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>floorf</name><argument_list>(<argument><expr><name><name>roombaPosition</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>roomOffset</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>/</operator><name>TILE_SIZE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>roombaTilePosY</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>floorf</name><argument_list>(<argument><expr><name><name>roombaPosition</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>roomOffset</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>/</operator><name>TILE_SIZE</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>roombaPosition</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>roomba</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal> <operator>&lt;</operator> <name><name>roomOffset</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>||</operator> 

<operator>(</operator><operator>(</operator><name><name>roombaPosition</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>roomba</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><name><name>roomOffset</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>MAX_TILES_X</name><operator>*</operator><name>TILE_SIZE</name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>roombaPosition</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>roomba</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal> <operator>&lt;</operator> <name><name>roomOffset</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>||</operator> 

<operator>(</operator><operator>(</operator><name><name>roombaPosition</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>roomba</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><name><name>roomOffset</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>MAX_TILES_Y</name><operator>*</operator><name>TILE_SIZE</name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>furcolmap</name><index>[<expr><name>roombaTilePosY</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>roombaTilePosX</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> 

<operator>(</operator><name><name>furcolmap</name><index>[<expr><name>roombaTilePosY</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>roombaTilePosX</name></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>roombaPosition</name> <operator>=</operator> <name>prevPosition</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>MAX_TILES_Y</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>MAX_TILES_X</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>cleanRec</name> <init>= <macro><name>GetCollisionRec</name><argument_list>(<argument>(Rectangle){ tiles[y*MAX_TILES_X + x].position.x</argument>, <argument>tiles[y*MAX_TILES_X + x].position.y</argument>, <argument><literal type="number">36</literal></argument>, <argument><literal type="number">36</literal> }</argument>,

<argument>(Rectangle){ roombaPosition.x - roomba.width/<literal type="number">2</literal></argument>, <argument>roombaPosition.y - roomba.height/<literal type="number">2</literal></argument>, <argument>roomba.width</argument>, <argument>roomba.height }</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cleanRec</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>cleanRec</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>&gt;</operator> <name>TILE_REQUIRED_CLEAN_AREA</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>counter</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>counter</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>state</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>score</name> <operator>+=</operator> <name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>level</name><operator>*</operator><name>TILE_SCORE_BY_CLEANED_LEVEL</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_SCORE_POPUPS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>popup</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>enabled</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>popup</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>position</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>popup</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>TILE_SCORE_BY_CLEANED_LEVEL</name><operator>*</operator><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>popup</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>enabled</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>popup</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>counter</name> <operator>=</operator> <name>TILE_REQUIRED_CLEAN_TIME</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_SCORE_POPUPS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>popup</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>enabled</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>popup</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>popup</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>-=</operator> <literal type="number">0.015f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>popup</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>popup</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>enabled</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mousePosition</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>roomOffset</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mousePosition</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>roomOffset</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>MAX_TILES_X</name><operator>*</operator><name>TILE_SIZE</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> 

<operator>(</operator><name><name>mousePosition</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name><name>roomOffset</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mousePosition</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>roomOffset</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>MAX_TILES_Y</name><operator>*</operator><name>TILE_SIZE</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> 

<name><name>furcolmap</name><index>[<expr><name>mouseTileY</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>mouseTileX</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>catTargetPosition</name> <operator>=</operator> <call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>catShouldMove</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_RIGHT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name><name>fxCat</name><index>[<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_SPACE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name><name>fxRoomba</name><index>[<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>catShouldMove</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointCircle</name><argument_list>(<argument><expr><name>catPosition</name></expr></argument>, <argument><expr><name>catTargetPosition</name></expr></argument>, <argument><expr><name>CAT_TARGET_RADIUS</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>catShouldMove</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>catTilePosX</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>floorf</name><argument_list>(<argument><expr><operator>(</operator><name><name>catPosition</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>cat</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>roomOffset</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>/</operator><name>TILE_SIZE</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>catTilePosY</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>floorf</name><argument_list>(<argument><expr><operator>(</operator><name><name>catPosition</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>cat</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">10</literal> <operator>-</operator> <name><name>roomOffset</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>/</operator><name>TILE_SIZE</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>furcolmap</name><index>[<expr><name>mouseTileY</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>mouseTileX</name></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>catTilePosY</name> <operator>-</operator> <name>CAT_DIRT_CELL_RADIUS</name><operator>)</operator></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <operator>(</operator><name>catTilePosY</name> <operator>+</operator> <name>CAT_DIRT_CELL_RADIUS</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>catTilePosX</name> <operator>-</operator> <name>CAT_DIRT_CELL_RADIUS</name><operator>)</operator></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>catTilePosX</name> <operator>+</operator> <name>CAT_DIRT_CELL_RADIUS</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>&lt;</operator> <name>MAX_TILES_Y</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>x</name> <operator>&lt;</operator> <name>MAX_TILES_X</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> 

<operator>(</operator><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> 

<operator>(</operator><name><name>furcolmap</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>furcolmap</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>!=</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dirt</name> <init>= <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dirt</name> <operator>&lt;</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>dirt</name> <operator>&lt;</operator> <literal type="number">70</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>level</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>dirt</name> <operator>&lt;</operator> <literal type="number">90</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>level</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>dirt</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>level</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>counter</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>level</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>TILE_REQUIRED_CLEAN_TIME</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>cleaned</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>level</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>dir</name> <init>= <expr><call><name>Vector2Subtract</name><argument_list>(<argument><expr><name>catTargetPosition</name></expr></argument>, <argument><expr><name>catPosition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>dirnorm</name> <init>= <expr><call><name>Vector2Normalize</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>catPosition</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>catSpeed</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>dirnorm</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>catPosition</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>catSpeed</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>dirnorm</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>levelFinished</name></expr>)</condition>

<block>{<block_content>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><literal type="number">0x57374cff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>MAX_TILES_Y</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>MAX_TILES_X</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<macro><name>DrawTextureRec</name><argument_list>(<argument>dirtiles</argument>, <argument>(Rectangle){ tiles[y*MAX_TILES_X + x].state*TILE_SIZE</argument>, <argument><literal type="number">0</literal></argument>, <argument>TILE_SIZE</argument>, <argument>TILE_SIZE }</argument>, 

<argument>(Vector2){ roomOffset.x + TILE_SIZE*x</argument>, <argument>roomOffset.y + TILE_SIZE*y }</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<macro><name>DrawTextureRec</name><argument_list>(<argument>furniture</argument>, <argument>(Rectangle){ furset[<literal type="number">30</literal>].posX</argument>, <argument>furset[<literal type="number">30</literal>].posY</argument>, <argument>furset[<literal type="number">30</literal>].width</argument>, <argument>furset[<literal type="number">30</literal>].height }</argument>, <argument>roomOffset</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawTextureRec</name><argument_list>(<argument>furniture</argument>, <argument>(Rectangle){ furset[<literal type="number">29</literal>].posX</argument>, <argument>furset[<literal type="number">29</literal>].posY</argument>, <argument>furset[<literal type="number">29</literal>].width</argument>, <argument>furset[<literal type="number">29</literal>].height }</argument>, <argument>(Vector2){ roomOffset.x + <literal type="number">29</literal>*<literal type="number">36</literal></argument>, <argument>roomOffset.y }</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>roomba</name></expr></argument>, <argument><expr><name><name>roombaPosition</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>roomba</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>roombaPosition</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>roomba</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>cat</name></expr></argument>, <argument><expr><name><name>catPosition</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>cat</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>catPosition</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>cat</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>furAlpha</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>furnitureCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><macro><name>CheckCollisionCircleRec</name><argument_list>(<argument>(Vector2){ roombaPosition.x - roomba.width/<literal type="number">2</literal></argument>, <argument>roombaPosition.y - roomba.height/<literal type="number">2</literal> }</argument>, <argument>roomba.width</argument>,

<argument>(Rectangle){ roomOffset.x + furmap[i].cellX*TILE_SIZE</argument>, <argument>roomOffset.y + furmap[i].cellY*TILE_SIZE</argument>,

<argument>furset[furmap[i].furId].width</argument>, <argument>furset[furmap[i].furId].height}</argument>)</argument_list></macro> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>furmap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<macro><name>DrawTextureRec</name><argument_list>(<argument>furniture</argument>, <argument>(Rectangle){ furset[furmap[i].furId].posX</argument>, <argument>furset[furmap[i].furId].posY</argument>, <argument>furset[furmap[i].furId].width</argument>, <argument>furset[furmap[i].furId].height }</argument>, 

<argument>(Vector2){ roomOffset.x + furmap[i].cellX*TILE_SIZE</argument>, <argument>roomOffset.y + furmap[i].cellY*TILE_SIZE }</argument>, <argument>Fade(WHITE, <literal type="number">0.5f</literal>)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<macro><name>DrawTextureRec</name><argument_list>(<argument>furniture</argument>, <argument>(Rectangle){ furset[furmap[i].furId].posX</argument>, <argument>furset[furmap[i].furId].posY</argument>, <argument>furset[furmap[i].furId].width</argument>, <argument>furset[furmap[i].furId].height }</argument>, 

<argument>(Vector2){ roomOffset.x + furmap[i].cellX*TILE_SIZE</argument>, <argument>roomOffset.y + furmap[i].cellY*TILE_SIZE }</argument>, <argument>Fade(WHITE, furAlpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TILE_VIEWER_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>tracemap</name></expr></argument>, <argument><expr><name><name>roomOffset</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>roomOffset</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>WHITE</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>fursetid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">720</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>DrawTextEx</name><argument_list>(<argument>font2</argument>, <argument><literal type="string">"SCORE:"</literal></argument>, <argument>(Vector2){ <literal type="number">80</literal></argument>, <argument><literal type="number">10</literal> }</argument>, <argument>font2.baseSize</argument>, <argument><literal type="number">2</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"%i"</literal>, score)</argument>, <argument>(Vector2){ <literal type="number">260</literal></argument>, <argument><literal type="number">10</literal> }</argument>, <argument>font.baseSize</argument>, <argument><literal type="number">2</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawTextEx</name><argument_list>(<argument>font2</argument>, <argument><literal type="string">"CLEAN:"</literal></argument>, <argument>(Vector2){ <literal type="number">500</literal></argument>, <argument><literal type="number">10</literal> }</argument>, <argument>font2.baseSize</argument>, <argument><literal type="number">2</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"%.2f%%"</literal>, GetTileCleanPercent())</argument>, <argument>(Vector2){ <literal type="number">690</literal></argument>, <argument><literal type="number">10</literal> }</argument>, <argument>font.baseSize</argument>, <argument><literal type="number">2</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawTextEx</name><argument_list>(<argument>font2</argument>, <argument><literal type="string">"TIME:"</literal></argument>, <argument>(Vector2){ <literal type="number">950</literal></argument>, <argument><literal type="number">10</literal> }</argument>, <argument>font2.baseSize</argument>, <argument><literal type="number">2</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument>FormatText(<literal type="string">"%i:%02is"</literal>, timeLevelSeconds/<literal type="number">60</literal>, timeLevelSeconds%<literal type="number">60</literal>)</argument>, <argument>(Vector2){ <literal type="number">1100</literal></argument>, <argument><literal type="number">10</literal> }</argument>, <argument>font.baseSize</argument>, <argument><literal type="number">2</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mouseTileY</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>mouseTileY</name> <operator>&lt;</operator> <name>MAX_TILES_Y</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>mouseTileX</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>mouseTileX</name> <operator>&lt;</operator> <name>MAX_TILES_X</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<macro><name>DrawRectangleLinesEx</name><argument_list>(<argument>(Rectangle){ tiles[mouseTileY*MAX_TILES_X + mouseTileX].position.x</argument>, 

<argument>tiles[mouseTileY*MAX_TILES_X + mouseTileX].position.y</argument>, <argument>TILE_SIZE</argument>, <argument>TILE_SIZE }</argument>, <argument><literal type="number">2</literal></argument>, <argument>RED</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_SCORE_POPUPS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>popup</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>enabled</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"+%i"</literal></expr></argument>, <argument><expr><name><name>popup</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>popup</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>popup</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>RED</name></expr></argument>, <argument><expr><name><name>popup</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>showObjective</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">150</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">300</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>DARKGRAY</name></expr></argument>, <argument><expr><literal type="number">0.7f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawTextEx</name><argument_list>(<argument>font2</argument>, <argument><literal type="string">"OBJECTIVE:"</literal></argument>, <argument>(Vector2){ <literal type="number">500</literal></argument>, <argument><literal type="number">240</literal> }</argument>, <argument>font2.baseSize</argument>, <argument><literal type="number">2</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawTextEx</name><argument_list>(<argument>font</argument>, <argument><literal type="string">"CLEAN 80% OF THE ROOM"</literal></argument>, <argument>(Vector2){ <literal type="number">300</literal></argument>, <argument><literal type="number">320</literal> }</argument>, <argument>font.baseSize</argument>, <argument><literal type="number">2</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UnloadGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>roomba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>dirtiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>furniture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadSound</name><argument_list>(<argument><expr><name><name>fxCat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadSound</name><argument_list>(<argument><expr><name><name>fxCat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadSound</name><argument_list>(<argument><expr><name><name>fxRoomba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadSound</name><argument_list>(<argument><expr><name><name>fxRoomba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadSound</name><argument_list>(<argument><expr><name><name>fxRoomba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StopMusicStream</name><argument_list>(<argument><expr><name>catch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadMusicStream</name><argument_list>(<argument><expr><name>catch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>FinishGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>finishScreen</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>GetTileCleanPercent</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tileLevelsToClean</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tileLevelsCleaned</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>MAX_TILES_Y</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>MAX_TILES_X</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tileLevelsToClean</name> <operator>+=</operator> <name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tileLevelsCleaned</name> <operator>+=</operator> <name><name>tiles</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_TILES_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>state</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>tileLevelsToClean</name> <operator>-</operator> <name>tileLevelsCleaned</name><operator>)</operator><operator>/</operator><name>tileLevelsToClean</name><operator>)</operator><operator>*</operator><literal type="number">100.0f</literal></expr>;</expr_stmt>

<return>return <expr><name>value</name></expr>;</return>

</block_content>}</block></function></unit>
