<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\games\repair\screens\screen_gameplay.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"screens.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>doHairCut</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>doHairTint</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>doEyeLiner</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>doLipStick</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>doNose</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>doGlasses</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>headColors</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xffe29bff</literal></expr>, <expr><literal type="number">0xfed5a8ff</literal></expr>, <expr><literal type="number">0xad8962ff</literal></expr>, <expr><literal type="number">0xfff1b8ff</literal></expr>, <expr><literal type="number">0xffd6c4ff</literal></expr>, <expr><literal type="number">0xd49c8dff</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>hairColors</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xf5bf60ff</literal></expr>, <expr><literal type="number">0xaa754aff</literal></expr>, <expr><literal type="number">0x974e14ff</literal></expr>, <expr><literal type="number">0xf36347ff</literal></expr>, <expr><literal type="number">0x87f347ff</literal></expr>, <expr><literal type="number">0xfc48d0ff</literal></expr>, <expr><literal type="number">0x3b435dff</literal></expr>, <expr><literal type="number">0x5f5e60ff</literal></expr>, <expr><literal type="number">0xe7e7e7ff</literal></expr>, <expr><literal type="number">0xfb386bff</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>framesCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>finishScreen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>RenderTexture</name></type> <name>target</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>InitGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>LoadRenderTexture</name><argument_list>(<argument><expr><literal type="number">720</literal></expr></argument>, <argument><expr><literal type="number">720</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetTextureFilter</name><argument_list>(<argument><expr><name><name>target</name><operator>.</operator><name>texture</name></name></expr></argument>, <argument><expr><name>FILTER_BILINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>playerBase</name> <operator>=</operator> <name>player</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dating</name> <operator>=</operator> <call><name>GenerateCharacter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>datingBase</name> <operator>=</operator> <name>dating</name></expr>;</expr_stmt>

<expr_stmt><expr><name>doHairCut</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>doHairTint</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>doEyeLiner</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>doLipStick</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>doNose</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>doGlasses</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_SPACE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>player</name> <operator>=</operator> <call><name>GenerateCharacter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>playerBase</name> <operator>=</operator> <name>player</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>background</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><literal type="number">0xf6aa60ff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>GuiButton</name><argument_list>(<argument>(Rectangle){ <literal type="number">20</literal></argument>, <argument><literal type="number">40</literal></argument>, <argument><literal type="number">300</literal></argument>, <argument><literal type="number">60</literal> }</argument>, <argument><literal type="string">"RE-TOUCH:"</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><macro><name>GuiButton</name><argument_list>(<argument>(Rectangle){ <literal type="number">20</literal></argument>, <argument><literal type="number">40</literal> + <literal type="number">90</literal></argument>, <argument><literal type="number">300</literal></argument>, <argument><literal type="number">80</literal> }</argument>, <argument><literal type="string">"HAIR TINT"</literal></argument>, <argument>doHairTint? <literal type="number">3</literal> : -<literal type="number">1</literal></argument>)</argument_list></macro></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>doHairTint</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>colHair</name></name> <operator>=</operator> <name><name>hairColors</name><index>[<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><macro><name>GuiButton</name><argument_list>(<argument>(Rectangle){ <literal type="number">20</literal></argument>, <argument><literal type="number">40</literal> + <literal type="number">180</literal></argument>, <argument><literal type="number">300</literal></argument>, <argument><literal type="number">80</literal> }</argument>, <argument><literal type="string">"HAIR"</literal></argument>, <argument>doHairCut? <literal type="number">3</literal> : -<literal type="number">1</literal></argument>)</argument_list></macro></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>doHairCut</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>hair</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>texHair</name><operator>.</operator><name>width</name></name><operator>/</operator><name>BASE_HAIR_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><macro><name>GuiButton</name><argument_list>(<argument>(Rectangle){ <literal type="number">20</literal></argument>, <argument><literal type="number">40</literal> + <literal type="number">270</literal></argument>, <argument><literal type="number">300</literal></argument>, <argument><literal type="number">80</literal> }</argument>, <argument><literal type="string">"EYES"</literal></argument>, <argument>doEyeLiner? <literal type="number">3</literal> : -<literal type="number">1</literal></argument>)</argument_list></macro></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>doEyeLiner</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>eyes</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>texEyes</name><operator>.</operator><name>width</name></name><operator>/</operator><name>BASE_EYES_WIDTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><macro><name>GuiButton</name><argument_list>(<argument>(Rectangle){ <literal type="number">20</literal></argument>, <argument><literal type="number">40</literal> + <literal type="number">360</literal></argument>, <argument><literal type="number">300</literal></argument>, <argument><literal type="number">80</literal> }</argument>, <argument><literal type="string">"NOSE"</literal></argument>, <argument>doNose? <literal type="number">3</literal> : -<literal type="number">1</literal></argument>)</argument_list></macro></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>doNose</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>nose</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>texNose</name><operator>.</operator><name>width</name></name><operator>/</operator><name>BASE_NOSE_WIDTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><macro><name>GuiButton</name><argument_list>(<argument>(Rectangle){ <literal type="number">20</literal></argument>, <argument><literal type="number">40</literal> + <literal type="number">450</literal></argument>, <argument><literal type="number">300</literal></argument>, <argument><literal type="number">80</literal> }</argument>, <argument><literal type="string">"LIPS"</literal></argument>, <argument>doLipStick? <literal type="number">3</literal> : -<literal type="number">1</literal></argument>)</argument_list></macro></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>doLipStick</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>mouth</name></name> <operator>=</operator> <call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>texMouth</name><operator>.</operator><name>width</name></name><operator>/</operator><name>BASE_MOUTH_WIDTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><macro><name>GuiButton</name><argument_list>(<argument>(Rectangle){ <literal type="number">20</literal></argument>, <argument><literal type="number">40</literal> + <literal type="number">540</literal></argument>, <argument><literal type="number">300</literal></argument>, <argument><literal type="number">80</literal> }</argument>, <argument><literal type="string">"GLASSES"</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>doGlasses</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<macro><name>DrawCharacter</name><argument_list>(<argument>player</argument>, <argument>(Vector2){ GetScreenWidth()/<literal type="number">2</literal> - <literal type="number">125</literal></argument>, <argument><literal type="number">80</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>GuiButton</name><argument_list>(<argument>(Rectangle){ <literal type="number">970</literal></argument>, <argument><literal type="number">40</literal></argument>, <argument><literal type="number">260</literal></argument>, <argument><literal type="number">60</literal> }</argument>, <argument><literal type="string">"DATING:"</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>GuiButton</name><argument_list>(<argument>(Rectangle){ <literal type="number">970</literal></argument>, <argument><literal type="number">40</literal> + <literal type="number">70</literal></argument>, <argument><literal type="number">260</literal></argument>, <argument><literal type="number">260</literal> }</argument>, <argument><literal type="string">" "</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>BeginTextureMode</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawCharacter</name><argument_list>(<argument>dating</argument>, <argument>(Vector2){ (<literal type="number">720</literal> - <literal type="number">250</literal>)/<literal type="number">2</literal></argument>, <argument>(<literal type="number">720</literal> - <literal type="number">500</literal>)/<literal type="number">2</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>EndTextureMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>target.texture</argument>, <argument>(Rectangle){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument>(float)target.texture.width</argument>, <argument>(float)-target.texture.height }</argument>, <argument>(Rectangle){ <literal type="number">970</literal></argument>, <argument><literal type="number">40</literal> + <literal type="number">70</literal></argument>, <argument><literal type="number">260</literal></argument>, <argument><literal type="number">260</literal> }</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal> }</argument>, <argument><literal type="number">0.0f</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><macro><name>GuiButton</name><argument_list>(<argument>(Rectangle){ <literal type="number">970</literal></argument>, <argument><literal type="number">580</literal></argument>, <argument><literal type="number">260</literal></argument>, <argument><literal type="number">90</literal> }</argument>, <argument><literal type="string">"GO DATE!"</literal></argument>, <argument>-<literal type="number">1</literal></argument>)</argument_list></macro></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>finishScreen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UnloadGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>FinishGameplayScreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>finishScreen</name></expr>;</return>

</block_content>}</block></function>

</unit>
