<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\audio\audio_raw_stream.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SAMPLES</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SAMPLES_PER_UPDATE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [audio] example - raw audio streaming"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitAudioDevice</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>AudioStream</name></type> <name>stream</name> <init>= <expr><call><name>InitAudioStream</name><argument_list>(<argument><expr><literal type="number">22050</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>MAX_SAMPLES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>writeBuf</name> <init>= <expr><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>MAX_SAMPLES_PER_UPDATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PlayAudioStream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePosition</name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">100.0f</literal></expr>, <expr><operator>-</operator><literal type="number">100.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>frequency</name> <init>= <expr><literal type="number">440.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>oldFrequency</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>readCursor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>waveLength</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>mousePosition</name> <operator>=</operator> <call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>fp</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>mousePosition</name><operator>.</operator><name>y</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>frequency</name> <operator>=</operator> <literal type="number">40.0f</literal> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>fp</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frequency</name> <operator>!=</operator> <name>oldFrequency</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>oldWavelength</name> <init>= <expr><name>waveLength</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>waveLength</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">22050</literal><operator>/</operator><name>frequency</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>waveLength</name> <operator>&gt;</operator> <name>MAX_SAMPLES</name><operator>/</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>waveLength</name> <operator>=</operator> <name>MAX_SAMPLES</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>waveLength</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>waveLength</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>waveLength</name><operator>*</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><call><name>sinf</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>PI</name><operator>*</operator><operator>(</operator><name>float</name><operator>)</operator><name>i</name><operator>/</operator><name>waveLength</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">32000</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>readCursor</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>readCursor</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>waveLength</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>oldWavelength</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>oldFrequency</name> <operator>=</operator> <name>frequency</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsAudioStreamProcessed</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>writeCursor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>writeCursor</name> <operator>&lt;</operator> <name>MAX_SAMPLES_PER_UPDATE</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>writeLength</name> <init>= <expr><name>MAX_SAMPLES_PER_UPDATE</name><operator>-</operator><name>writeCursor</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>readLength</name> <init>= <expr><name>waveLength</name><operator>-</operator><name>readCursor</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>writeLength</name> <operator>&gt;</operator> <name>readLength</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>writeLength</name> <operator>=</operator> <name>readLength</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>writeBuf</name> <operator>+</operator> <name>writeCursor</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>readCursor</name></expr></argument>, <argument><expr><name>writeLength</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>readCursor</name> <operator>=</operator> <operator>(</operator><name>readCursor</name> <operator>+</operator> <name>writeLength</name><operator>)</operator> <operator>%</operator> <name>waveLength</name></expr>;</expr_stmt>

<expr_stmt><expr><name>writeCursor</name> <operator>+=</operator> <name>writeLength</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>UpdateAudioStream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>writeBuf</name></expr></argument>, <argument><expr><name>MAX_SAMPLES_PER_UPDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"sine frequency: %i"</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>frequency</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">220</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"click mouse button to change frequency"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>screenWidth</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">250</literal> <operator>+</operator> <literal type="number">50</literal><operator>*</operator><name><name>data</name><index>[<expr><name>i</name><operator>*</operator><name>MAX_SAMPLES</name><operator>/</operator><name>screenWidth</name></expr>]</index></name><operator>/</operator><literal type="number">32000</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawPixelV</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>writeBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseAudioStream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseAudioDevice</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
