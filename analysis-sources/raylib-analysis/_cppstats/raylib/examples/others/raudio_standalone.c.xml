<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\others\raudio_standalone.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raudio.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;conio.h&gt;</cpp:file></cpp:include> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>kbhit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>termios</name></name></type> <name>oldt</name></decl>, <decl><type ref="prev"/><name>newt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>oldf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tcgetattr</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newt</name> <operator>=</operator> <name>oldt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newt</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ICANON</name> <operator>|</operator> <name>ECHO</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcsetattr</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>TCSANOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldf</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fcntl</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>oldf</name> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tcsetattr</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>TCSANOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fcntl</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>oldf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <name>EOF</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ungetc</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name></type> <name>getch</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_ESCAPE</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name>key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitAudioDevice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Sound</name></type> <name>fxWav</name> <init>= <expr><call><name>LoadSound</name><argument_list>(<argument><expr><literal type="string">"resources/audio/weird.wav"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Sound</name></type> <name>fxOgg</name> <init>= <expr><call><name>LoadSound</name><argument_list>(<argument><expr><literal type="string">"resources/audio/tanatana.ogg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Music</name></type> <name>music</name> <init>= <expr><call><name>LoadMusicStream</name><argument_list>(<argument><expr><literal type="string">"resources/audio/guitar_noodling.ogg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PlayMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nPress s or d to play sounds...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>key</name> <operator>!=</operator> <name>KEY_ESCAPE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>kbhit</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>getch</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PlaySound</name><argument_list>(<argument><expr><name>fxOgg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UpdateMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>UnloadSound</name><argument_list>(<argument><expr><name>fxWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>UnloadSound</name><argument_list>(<argument><expr><name>fxOgg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>UnloadMusicStream</name><argument_list>(<argument><expr><name>music</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseAudioDevice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
