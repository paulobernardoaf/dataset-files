<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\others\easings.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EASINGS_STATIC_INLINE</name></cpp:macro></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EASINGS_STATIC_INLINE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EASEDEF</name></cpp:macro> <cpp:value>static inline</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EASEDEF</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.14159265358979323846f</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseLinearNone</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>c</name><operator>*</operator><name>t</name><operator>/</operator><name>d</name> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseLinearIn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>c</name><operator>*</operator><name>t</name><operator>/</operator><name>d</name> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseLinearOut</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>c</name><operator>*</operator><name>t</name><operator>/</operator><name>d</name> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseLinearInOut</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>,<parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>c</name><operator>*</operator><name>t</name><operator>/</operator><name>d</name> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseSineIn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><operator>-</operator><name>c</name><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>t</name><operator>/</operator><name>d</name><operator>*</operator><operator>(</operator><name>PI</name><operator>/</operator><literal type="number">2.0f</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <name>c</name> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseSineOut</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>c</name><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name>t</name><operator>/</operator><name>d</name><operator>*</operator><operator>(</operator><name>PI</name><operator>/</operator><literal type="number">2.0f</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseSineInOut</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><operator>-</operator><name>c</name><operator>/</operator><literal type="number">2.0f</literal><operator>*</operator><operator>(</operator><call><name>cosf</name><argument_list>(<argument><expr><name>PI</name><operator>*</operator><name>t</name><operator>/</operator><name>d</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1.0f</literal><operator>)</operator> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseCircIn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>t</name> <operator>/=</operator> <name>d</name></expr>;</expr_stmt> <return>return <expr><operator>(</operator><operator>-</operator><name>c</name><operator>*</operator><operator>(</operator><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>-</operator> <name>t</name><operator>*</operator><name>t</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1.0f</literal><operator>)</operator> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseCircOut</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>t</name> <operator>=</operator> <name>t</name><operator>/</operator><name>d</name> <operator>-</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt> <return>return <expr><operator>(</operator><name>c</name><operator>*</operator><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>-</operator> <name>t</name><operator>*</operator><name>t</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseCircInOut</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name><operator>/=</operator><name>d</name><operator>/</operator><literal type="number">2.0f</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><operator>-</operator><name>c</name><operator>/</operator><literal type="number">2.0f</literal><operator>*</operator><operator>(</operator><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>-</operator> <name>t</name><operator>*</operator><name>t</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1.0f</literal><operator>)</operator> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>-=</operator> <literal type="number">2.0f</literal></expr>;</expr_stmt> <return>return <expr><operator>(</operator><name>c</name><operator>/</operator><literal type="number">2.0f</literal><operator>*</operator><operator>(</operator><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>-</operator> <name>t</name><operator>*</operator><name>t</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1.0f</literal><operator>)</operator> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseCubicIn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>t</name> <operator>/=</operator> <name>d</name></expr>;</expr_stmt> <return>return <expr><operator>(</operator><name>c</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseCubicOut</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>t</name> <operator>=</operator> <name>t</name><operator>/</operator><name>d</name> <operator>-</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt> <return>return <expr><operator>(</operator><name>c</name><operator>*</operator><operator>(</operator><name>t</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name> <operator>+</operator> <literal type="number">1.0f</literal><operator>)</operator> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseCubicInOut</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name><operator>/=</operator><name>d</name><operator>/</operator><literal type="number">2.0f</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>c</name><operator>/</operator><literal type="number">2.0f</literal><operator>*</operator><name>t</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>-=</operator> <literal type="number">2.0f</literal></expr>;</expr_stmt> <return>return <expr><operator>(</operator><name>c</name><operator>/</operator><literal type="number">2.0f</literal><operator>*</operator><operator>(</operator><name>t</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name> <operator>+</operator> <literal type="number">2.0f</literal><operator>)</operator> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseQuadIn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>t</name> <operator>/=</operator> <name>d</name></expr>;</expr_stmt> <return>return <expr><operator>(</operator><name>c</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseQuadOut</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>t</name> <operator>/=</operator> <name>d</name></expr>;</expr_stmt> <return>return <expr><operator>(</operator><operator>-</operator><name>c</name><operator>*</operator><name>t</name><operator>*</operator><operator>(</operator><name>t</name> <operator>-</operator> <literal type="number">2.0f</literal><operator>)</operator> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseQuadInOut</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name><operator>/=</operator><name>d</name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>c</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>t</name><operator>*</operator><name>t</name><operator>)</operator><operator>)</operator> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>-</operator><name>c</name><operator>/</operator><literal type="number">2.0f</literal><operator>*</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>t</name> <operator>-</operator> <literal type="number">1.0f</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>t</name> <operator>-</operator> <literal type="number">3.0f</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1.0f</literal><operator>)</operator> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseExpoIn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><operator>(</operator><name>t</name> <operator>==</operator> <literal type="number">0.0f</literal><operator>)</operator></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><operator>(</operator><name>c</name><operator>*</operator><call><name>pow</name><argument_list>(<argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><literal type="number">10.0f</literal><operator>*</operator><operator>(</operator><name>t</name><operator>/</operator><name>d</name> <operator>-</operator> <literal type="number">1.0f</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <name>b</name><operator>)</operator></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseExpoOut</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><operator>(</operator><name>t</name> <operator>==</operator> <name>d</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>b</name> <operator>+</operator> <name>c</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>c</name><operator>*</operator><operator>(</operator><operator>-</operator><call><name>pow</name><argument_list>(<argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">10.0f</literal><operator>*</operator><name>t</name><operator>/</operator><name>d</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1.0f</literal><operator>)</operator> <operator>+</operator> <name>b</name><operator>)</operator></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseExpoInOut</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>b</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>b</name> <operator>+</operator> <name>c</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name><operator>/=</operator><name>d</name><operator>/</operator><literal type="number">2.0f</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>c</name><operator>/</operator><literal type="number">2.0f</literal><operator>*</operator><call><name>pow</name><argument_list>(<argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><literal type="number">10.0f</literal><operator>*</operator><operator>(</operator><name>t</name> <operator>-</operator> <literal type="number">1.0f</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>c</name><operator>/</operator><literal type="number">2.0f</literal><operator>*</operator><operator>(</operator><operator>-</operator><call><name>pow</name><argument_list>(<argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">10.0f</literal><operator>*</operator><operator>(</operator><name>t</name> <operator>-</operator> <literal type="number">1.0f</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2.0f</literal><operator>)</operator> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseBackIn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><literal type="number">1.70158f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>postFix</name> <init>= <expr><name>t</name><operator>/=</operator><name>d</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>c</name><operator>*</operator><operator>(</operator><name>postFix</name><operator>)</operator><operator>*</operator><name>t</name><operator>*</operator><operator>(</operator><operator>(</operator><name>s</name> <operator>+</operator> <literal type="number">1.0f</literal><operator>)</operator><operator>*</operator><name>t</name> <operator>-</operator> <name>s</name><operator>)</operator> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseBackOut</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><literal type="number">1.70158f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>t</name><operator>/</operator><name>d</name> <operator>-</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>c</name><operator>*</operator><operator>(</operator><name>t</name><operator>*</operator><name>t</name><operator>*</operator><operator>(</operator><operator>(</operator><name>s</name> <operator>+</operator> <literal type="number">1.0f</literal><operator>)</operator><operator>*</operator><name>t</name> <operator>+</operator> <name>s</name><operator>)</operator> <operator>+</operator> <literal type="number">1.0f</literal><operator>)</operator> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseBackInOut</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><literal type="number">1.70158f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name><operator>/=</operator><name>d</name><operator>/</operator><literal type="number">2.0f</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">1.0f</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>*=</operator> <literal type="number">1.525f</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>c</name><operator>/</operator><literal type="number">2.0f</literal><operator>*</operator><operator>(</operator><name>t</name><operator>*</operator><name>t</name><operator>*</operator><operator>(</operator><operator>(</operator><name>s</name> <operator>+</operator> <literal type="number">1.0f</literal><operator>)</operator><operator>*</operator><name>t</name> <operator>-</operator> <name>s</name><operator>)</operator><operator>)</operator> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>postFix</name> <init>= <expr><name>t</name><operator>-=</operator><literal type="number">2.0f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>*=</operator> <literal type="number">1.525f</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>c</name><operator>/</operator><literal type="number">2.0f</literal><operator>*</operator><operator>(</operator><operator>(</operator><name>postFix</name><operator>)</operator><operator>*</operator><name>t</name><operator>*</operator><operator>(</operator><operator>(</operator><name>s</name> <operator>+</operator> <literal type="number">1.0f</literal><operator>)</operator><operator>*</operator><name>t</name> <operator>+</operator> <name>s</name><operator>)</operator> <operator>+</operator> <literal type="number">2.0f</literal><operator>)</operator> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseBounceOut</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name><operator>/=</operator><name>d</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><literal type="number">1.0f</literal><operator>/</operator><literal type="number">2.75f</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>c</name><operator>*</operator><operator>(</operator><literal type="number">7.5625f</literal><operator>*</operator><name>t</name><operator>*</operator><name>t</name><operator>)</operator> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>t</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">2.0f</literal><operator>/</operator><literal type="number">2.75f</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>postFix</name> <init>= <expr><name>t</name><operator>-=</operator><operator>(</operator><literal type="number">1.5f</literal><operator>/</operator><literal type="number">2.75f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>c</name><operator>*</operator><operator>(</operator><literal type="number">7.5625f</literal><operator>*</operator><operator>(</operator><name>postFix</name><operator>)</operator><operator>*</operator><name>t</name> <operator>+</operator> <literal type="number">0.75f</literal><operator>)</operator> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>t</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">2.5</literal><operator>/</operator><literal type="number">2.75</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>postFix</name> <init>= <expr><name>t</name><operator>-=</operator><operator>(</operator><literal type="number">2.25f</literal><operator>/</operator><literal type="number">2.75f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>c</name><operator>*</operator><operator>(</operator><literal type="number">7.5625f</literal><operator>*</operator><operator>(</operator><name>postFix</name><operator>)</operator><operator>*</operator><name>t</name> <operator>+</operator> <literal type="number">0.9375f</literal><operator>)</operator> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>postFix</name> <init>= <expr><name>t</name><operator>-=</operator><operator>(</operator><literal type="number">2.625f</literal><operator>/</operator><literal type="number">2.75f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>c</name><operator>*</operator><operator>(</operator><literal type="number">7.5625f</literal><operator>*</operator><operator>(</operator><name>postFix</name><operator>)</operator><operator>*</operator><name>t</name> <operator>+</operator> <literal type="number">0.984375f</literal><operator>)</operator> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseBounceIn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>c</name> <operator>-</operator> <call><name>EaseBounceOut</name><argument_list>(<argument><expr><name>d</name> <operator>-</operator> <name>t</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseBounceInOut</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <name>d</name><operator>/</operator><literal type="number">2.0f</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><call><name>EaseBounceIn</name><argument_list>(<argument><expr><name>t</name><operator>*</operator><literal type="number">2.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">0.5f</literal> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><operator>(</operator><call><name>EaseBounceOut</name><argument_list>(<argument><expr><name>t</name><operator>*</operator><literal type="number">2.0f</literal> <operator>-</operator> <name>d</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">0.5f</literal> <operator>+</operator> <name>c</name><operator>*</operator><literal type="number">0.5f</literal> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseElasticIn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>b</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name><operator>/=</operator><name>d</name><operator>)</operator> <operator>==</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>b</name> <operator>+</operator> <name>c</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>p</name> <init>= <expr><name>d</name><operator>*</operator><literal type="number">0.3f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><name>p</name><operator>/</operator><literal type="number">4.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>postFix</name> <init>= <expr><name>a</name><operator>*</operator><call><name>pow</name><argument_list>(<argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><literal type="number">10.0f</literal><operator>*</operator><operator>(</operator><name>t</name><operator>-=</operator><literal type="number">1.0f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>-</operator><operator>(</operator><name>postFix</name><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><operator>(</operator><name>t</name><operator>*</operator><name>d</name><operator>-</operator><name>s</name><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">2.0f</literal><operator>*</operator><name>PI</name><operator>)</operator><operator>/</operator><name>p</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseElasticOut</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>b</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name><operator>/=</operator><name>d</name><operator>)</operator> <operator>==</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>b</name> <operator>+</operator> <name>c</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>p</name> <init>= <expr><name>d</name><operator>*</operator><literal type="number">0.3f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><name>p</name><operator>/</operator><literal type="number">4.0f</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>a</name><operator>*</operator><call><name>pow</name><argument_list>(<argument><expr><literal type="number">2.0f</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">10.0f</literal><operator>*</operator><name>t</name></expr></argument>)</argument_list></call><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><operator>(</operator><name>t</name><operator>*</operator><name>d</name><operator>-</operator><name>s</name><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">2.0f</literal><operator>*</operator><name>PI</name><operator>)</operator><operator>/</operator><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>c</name> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>EASEDEF</name> <name>float</name></type> <name>EaseElasticInOut</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>b</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name><operator>/=</operator><name>d</name><operator>/</operator><literal type="number">2.0f</literal><operator>)</operator> <operator>==</operator> <literal type="number">2.0f</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>b</name> <operator>+</operator> <name>c</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>p</name> <init>= <expr><name>d</name><operator>*</operator><operator>(</operator><literal type="number">0.3f</literal><operator>*</operator><literal type="number">1.5f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><name>p</name><operator>/</operator><literal type="number">4.0f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <literal type="number">1.0f</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>postFix</name> <init>= <expr><name>a</name><operator>*</operator><call><name>pow</name><argument_list>(<argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><literal type="number">10.0f</literal><operator>*</operator><operator>(</operator><name>t</name><operator>-=</operator><literal type="number">1.0f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>-</operator><literal type="number">0.5f</literal><operator>*</operator><operator>(</operator><name>postFix</name><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><operator>(</operator><name>t</name><operator>*</operator><name>d</name><operator>-</operator><name>s</name><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">2.0f</literal><operator>*</operator><name>PI</name><operator>)</operator><operator>/</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <name>b</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>postFix</name> <init>= <expr><name>a</name><operator>*</operator><call><name>pow</name><argument_list>(<argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">10.0f</literal><operator>*</operator><operator>(</operator><name>t</name><operator>-=</operator><literal type="number">1.0f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>postFix</name><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><operator>(</operator><name>t</name><operator>*</operator><name>d</name><operator>-</operator><name>s</name><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">2.0f</literal><operator>*</operator><name>PI</name><operator>)</operator><operator>/</operator><name>p</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">0.5f</literal> <operator>+</operator> <name>c</name> <operator>+</operator> <name>b</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
