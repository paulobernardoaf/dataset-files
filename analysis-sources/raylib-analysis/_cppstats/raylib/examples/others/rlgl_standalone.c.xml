<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\others\rlgl_standalone.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLGL_IMPLEMENTATION</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLGL_STANDALONE</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLGL_SUPPORT_TRACELOG</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlgl.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__EMSCRIPTEN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLFW_INCLUDE_ES2</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GLFW/glfw3.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RED</name></cpp:macro> <cpp:value>(Color){ 230, 41, 55, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAYWHITE</name></cpp:macro> <cpp:value>(Color){ 245, 245, 245, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DARKGRAY</name></cpp:macro> <cpp:value>(Color){ 80, 80, 80, 255 }</cpp:value></cpp:define> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ErrorCallback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>KeyCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scancode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mods</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawGrid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>spacing</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawCube</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawCubeWires</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawRectangleV</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glfwSetErrorCallback</name><argument_list>(<argument><expr><name>ErrorCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glfwInit</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"GLFW3: Can not initialize GLFW\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"GLFW3: GLFW initialized successfully\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_SAMPLES</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_DEPTH_BITS</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_CONTEXT_VERSION_MAJOR</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_CONTEXT_VERSION_MINOR</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glfwWindowHint</name><argument_list>(<argument><expr><name>GLFW_OPENGL_PROFILE</name></expr></argument>, <argument><expr><name>GLFW_OPENGL_CORE_PROFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>GLFWwindow</name> <modifier>*</modifier></type><name>window</name> <init>= <expr><call><name>glfwCreateWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"rlgl standalone"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>glfwTerminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"GLFW3: Window created successfully\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>glfwSetWindowPos</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glfwSetKeyCallback</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>KeyCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glfwMakeContextCurrent</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glfwSwapInterval</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlLoadExtensions</name><argument_list>(<argument><expr><name>glfwGetProcAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlglInit</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlViewport</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlMatrixMode</name><argument_list>(<argument><expr><name>RL_PROJECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlLoadIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlOrtho</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlMatrixMode</name><argument_list>(<argument><expr><name>RL_MODELVIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlLoadIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlClearColor</name><argument_list>(<argument><expr><literal type="number">245</literal></expr></argument>, <argument><expr><literal type="number">245</literal></expr></argument>, <argument><expr><literal type="number">245</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlEnableDepthTest</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>Camera</name></type> <name>camera</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">5.0f</literal></expr>, <expr><literal type="number">5.0f</literal></expr>, <expr><literal type="number">5.0f</literal></expr> }</block></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>target</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>up</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>fovy</name></name> <operator>=</operator> <literal type="number">45.0f</literal></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>Vector3</name></type> <name>cubePosition</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<while>while <condition>(<expr><operator>!</operator><call><name>glfwWindowShouldClose</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>rlClearScreenBuffers</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>Matrix</name></type> <name>matProj</name> <init>= <expr><call><name>MatrixPerspective</name><argument_list>(<argument><expr><name><name>camera</name><operator>.</operator><name>fovy</name></name><operator>*</operator><name>DEG2RAD</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>screenWidth</name><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><name>screenHeight</name></expr></argument>, <argument><expr><literal type="number">0.01</literal></expr></argument>, <argument><expr><literal type="number">1000.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Matrix</name></type> <name>matView</name> <init>= <expr><call><name>MatrixLookAt</name><argument_list>(<argument><expr><name><name>camera</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>camera</name><operator>.</operator><name>target</name></name></expr></argument>, <argument><expr><name><name>camera</name><operator>.</operator><name>up</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetMatrixModelview</name><argument_list>(<argument><expr><name>matView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>SetMatrixProjection</name><argument_list>(<argument><expr><name>matProj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DrawCube</name><argument_list>(<argument><expr><name>cubePosition</name></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawCubeWires</name><argument_list>(<argument><expr><name>cubePosition</name></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawGrid</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLGL_CREATE_MATRIX_MANUALLY</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLGL_CREATE_MATRIX_MANUALLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>matProj</name> <operator>=</operator> <call><name>MatrixOrtho</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>matView</name> <operator>=</operator> <call><name>MatrixIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetMatrixModelview</name><argument_list>(<argument><expr><name>matView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>SetMatrixProjection</name><argument_list>(<argument><expr><name>matProj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<expr_stmt><expr><call><name>rlMatrixMode</name><argument_list>(<argument><expr><name>RL_PROJECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlLoadIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlOrtho</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlMatrixMode</name><argument_list>(<argument><expr><name>RL_MODELVIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlLoadIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>DrawRectangleV</name><argument_list>(<argument>(Vector2){ <literal type="number">10.0f</literal></argument>, <argument><literal type="number">10.0f</literal> }</argument>, <argument>(Vector2){ <literal type="number">780.0f</literal></argument>, <argument><literal type="number">20.0f</literal> }</argument>, <argument>DARKGRAY</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glfwSwapBuffers</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glfwPollEvents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>rlglClose</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>glfwDestroyWindow</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>glfwTerminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ErrorCallback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>KeyCallback</name><parameter_list>(<parameter><decl><type><name>GLFWwindow</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scancode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mods</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>GLFW_KEY_ESCAPE</name> <operator>&amp;&amp;</operator> <name>action</name> <operator>==</operator> <name>GLFW_PRESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>glfwSetWindowShouldClose</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>GL_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawRectangleV</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_TRIANGLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2i</name><argument_list>(<argument><expr><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2i</name><argument_list>(<argument><expr><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>size</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2i</name><argument_list>(<argument><expr><name><name>position</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>size</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>size</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2i</name><argument_list>(<argument><expr><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2i</name><argument_list>(<argument><expr><name><name>position</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>size</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>size</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2i</name><argument_list>(<argument><expr><name><name>position</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>size</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawGrid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>spacing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>halfSlices</name> <init>= <expr><name>slices</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><name>halfSlices</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>halfSlices</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor3f</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor3f</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor3f</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor3f</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor3f</name><argument_list>(<argument><expr><literal type="number">0.75f</literal></expr></argument>, <argument><expr><literal type="number">0.75f</literal></expr></argument>, <argument><expr><literal type="number">0.75f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor3f</name><argument_list>(<argument><expr><literal type="number">0.75f</literal></expr></argument>, <argument><expr><literal type="number">0.75f</literal></expr></argument>, <argument><expr><literal type="number">0.75f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor3f</name><argument_list>(<argument><expr><literal type="number">0.75f</literal></expr></argument>, <argument><expr><literal type="number">0.75f</literal></expr></argument>, <argument><expr><literal type="number">0.75f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor3f</name><argument_list>(<argument><expr><literal type="number">0.75f</literal></expr></argument>, <argument><expr><literal type="number">0.75f</literal></expr></argument>, <argument><expr><literal type="number">0.75f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>i</name><operator>*</operator><name>spacing</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>-</operator><name>halfSlices</name><operator>*</operator><name>spacing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>i</name><operator>*</operator><name>spacing</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>halfSlices</name><operator>*</operator><name>spacing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>-</operator><name>halfSlices</name><operator>*</operator><name>spacing</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>i</name><operator>*</operator><name>spacing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>halfSlices</name><operator>*</operator><name>spacing</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>i</name><operator>*</operator><name>spacing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawCube</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_TRIANGLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawCubeWires</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>+</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlVertex3f</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><name>height</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name><operator>-</operator><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
