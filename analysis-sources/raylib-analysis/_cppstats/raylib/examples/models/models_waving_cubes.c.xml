<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\models\models_waving_cubes.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [models] example - waving cubes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Camera3D</name></type> <name>camera</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">30.0f</literal></expr>, <expr><literal type="number">20.0f</literal></expr>, <expr><literal type="number">30.0f</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>target</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>up</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>fovy</name></name> <operator>=</operator> <literal type="number">70.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CAMERA_PERSPECTIVE</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>numBlocks</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>time</name> <init>= <expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>scale</name> <init>= <expr><operator>(</operator><literal type="number">2.0f</literal> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>sin</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><literal type="number">0.7f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>cameraTime</name> <init>= <expr><name>time</name><operator>*</operator><literal type="number">0.3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>cos</name><argument_list>(<argument><expr><name>cameraTime</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">40.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>position</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>sin</name><argument_list>(<argument><expr><name>cameraTime</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">40.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginMode3D</name><argument_list>(<argument><expr><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawGrid</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">5.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>numBlocks</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> 

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>numBlocks</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> 

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <name>numBlocks</name></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control> 

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>blockScale</name> <init>= <expr><operator>(</operator><name>x</name> <operator>+</operator> <name>y</name> <operator>+</operator> <name>z</name><operator>)</operator><operator>/</operator><literal type="number">30.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>scatter</name> <init>= <expr><call><name>sinf</name><argument_list>(<argument><expr><name>blockScale</name><operator>*</operator><literal type="number">20.0f</literal> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>time</name><operator>*</operator><literal type="number">4.0f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>cubePos</name> <init>= <expr><block>{

<expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>x</name> <operator>-</operator> <name>numBlocks</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>scale</name><operator>*</operator><literal type="number">3.0f</literal><operator>)</operator> <operator>+</operator> <name>scatter</name></expr>,

<expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>y</name> <operator>-</operator> <name>numBlocks</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>scale</name><operator>*</operator><literal type="number">2.0f</literal><operator>)</operator> <operator>+</operator> <name>scatter</name></expr>,

<expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>z</name> <operator>-</operator> <name>numBlocks</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>scale</name><operator>*</operator><literal type="number">3.0f</literal><operator>)</operator> <operator>+</operator> <name>scatter</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Color</name></type> <name>cubeColor</name> <init>= <macro><name>ColorFromHSV</name><argument_list>(<argument>(Vector3){ (float)(((x + y + z)*<literal type="number">18</literal>)%<literal type="number">360</literal>)</argument>, <argument><literal type="number">0.75f</literal></argument>, <argument><literal type="number">0.9f</literal> }</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cubeSize</name> <init>= <expr><operator>(</operator><literal type="number">2.4f</literal> <operator>-</operator> <name>scale</name><operator>)</operator><operator>*</operator><name>blockScale</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DrawCube</name><argument_list>(<argument><expr><name>cubePos</name></expr></argument>, <argument><expr><name>cubeSize</name></expr></argument>, <argument><expr><name>cubeSize</name></expr></argument>, <argument><expr><name>cubeSize</name></expr></argument>, <argument><expr><name>cubeColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>EndMode3D</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawFPS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
