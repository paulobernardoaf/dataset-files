<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\models\models_orthographic_projection.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOVY_PERSPECTIVE</name></cpp:macro> <cpp:value>45.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH_ORTHOGRAPHIC</name></cpp:macro> <cpp:value>10.0f</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [models] example - geometric shapes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Camera</name></type> <name>camera</name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">10.0f</literal></expr>, <expr><literal type="number">10.0f</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>, <expr><name>FOVY_PERSPECTIVE</name></expr>, <expr><name>CAMERA_PERSPECTIVE</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_SPACE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>camera</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>CAMERA_PERSPECTIVE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>fovy</name></name> <operator>=</operator> <name>WIDTH_ORTHOGRAPHIC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CAMERA_ORTHOGRAPHIC</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>fovy</name></name> <operator>=</operator> <name>FOVY_PERSPECTIVE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CAMERA_PERSPECTIVE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginMode3D</name><argument_list>(<argument><expr><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawCube</name><argument_list>(<argument>(Vector3){-<literal type="number">4.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">2.0f</literal>}</argument>, <argument><literal type="number">2.0f</literal></argument>, <argument><literal type="number">5.0f</literal></argument>, <argument><literal type="number">2.0f</literal></argument>, <argument>RED</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawCubeWires</name><argument_list>(<argument>(Vector3){-<literal type="number">4.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">2.0f</literal>}</argument>, <argument><literal type="number">2.0f</literal></argument>, <argument><literal type="number">5.0f</literal></argument>, <argument><literal type="number">2.0f</literal></argument>, <argument>GOLD</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawCubeWires</name><argument_list>(<argument>(Vector3){-<literal type="number">4.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">2.0f</literal>}</argument>, <argument><literal type="number">3.0f</literal></argument>, <argument><literal type="number">6.0f</literal></argument>, <argument><literal type="number">2.0f</literal></argument>, <argument>MAROON</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawSphere</name><argument_list>(<argument>(Vector3){-<literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">2.0f</literal>}</argument>, <argument><literal type="number">1.0f</literal></argument>, <argument>GREEN</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawSphereWires</name><argument_list>(<argument>(Vector3){<literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">2.0f</literal>}</argument>, <argument><literal type="number">2.0f</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument>LIME</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawCylinder</name><argument_list>(<argument>(Vector3){<literal type="number">4.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">2.0f</literal>}</argument>, <argument><literal type="number">1.0f</literal></argument>, <argument><literal type="number">2.0f</literal></argument>, <argument><literal type="number">3.0f</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument>SKYBLUE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawCylinderWires</name><argument_list>(<argument>(Vector3){<literal type="number">4.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">2.0f</literal>}</argument>, <argument><literal type="number">1.0f</literal></argument>, <argument><literal type="number">2.0f</literal></argument>, <argument><literal type="number">3.0f</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument>DARKBLUE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawCylinderWires</name><argument_list>(<argument>(Vector3){<literal type="number">4.5f</literal></argument>, <argument>-<literal type="number">1.0f</literal></argument>, <argument><literal type="number">2.0f</literal>}</argument>, <argument><literal type="number">1.0f</literal></argument>, <argument><literal type="number">1.0f</literal></argument>, <argument><literal type="number">2.0f</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument>BROWN</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawCylinder</name><argument_list>(<argument>(Vector3){<literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">4.0f</literal>}</argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">1.5f</literal></argument>, <argument><literal type="number">3.0f</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>GOLD</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawCylinderWires</name><argument_list>(<argument>(Vector3){<literal type="number">1.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument>-<literal type="number">4.0f</literal>}</argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">1.5f</literal></argument>, <argument><literal type="number">3.0f</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>PINK</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>DrawGrid</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>EndMode3D</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Press Spacebar to switch camera type"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>camera</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>CAMERA_ORTHOGRAPHIC</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"ORTHOGRAPHIC"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>camera</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>CAMERA_PERSPECTIVE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"PERSPECTIVE"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DrawFPS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
