<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\models\models_material_pbr.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raymath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLIGHTS_IMPLEMENTATION</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlights.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CUBEMAP_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IRRADIANCE_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFILTERED_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRDF_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define> 

<function_decl><type><specifier>static</specifier> <name>Material</name></type> <name>LoadMaterialPBR</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>albedo</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>metalness</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>roughness</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetConfigFlags</name><argument_list>(<argument><expr><name>FLAG_MSAA_4X_HINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [models] example - pbr material"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Camera</name></type> <name>camera</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">4.0f</literal></expr>, <expr><literal type="number">4.0f</literal></expr>, <expr><literal type="number">4.0f</literal></expr> }</block></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>target</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.5f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>up</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>fovy</name></name> <operator>=</operator> <literal type="number">45.0f</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CAMERA_PERSPECTIVE</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>Model</name></type> <name>model</name> <init>= <expr><call><name>LoadModel</name><argument_list>(<argument><expr><literal type="string">"resources/pbr/trooper.obj"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MeshTangents</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>model</name><operator>.</operator><name>meshes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadMaterial</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <macro><name>LoadMaterialPBR</name><argument_list>(<argument>(Color){ <literal type="number">255</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument><literal type="number">255</literal> }</argument>, <argument><literal type="number">1.0f</literal></argument>, <argument><literal type="number">1.0f</literal></argument>)</argument_list></macro></expr>;</expr_stmt>

<macro><name>CreateLight</name><argument_list>(<argument>LIGHT_POINT</argument>, <argument>(Vector3){ LIGHT_DISTANCE</argument>, <argument>LIGHT_HEIGHT</argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Color){ <literal type="number">255</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal> }</argument>, <argument>model.materials[<literal type="number">0</literal>].shader</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>CreateLight</name><argument_list>(<argument>LIGHT_POINT</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument>LIGHT_HEIGHT</argument>, <argument>LIGHT_DISTANCE }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Color){ <literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal> }</argument>, <argument>model.materials[<literal type="number">0</literal>].shader</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>CreateLight</name><argument_list>(<argument>LIGHT_POINT</argument>, <argument>(Vector3){ -LIGHT_DISTANCE</argument>, <argument>LIGHT_HEIGHT</argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Color){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument><literal type="number">255</literal> }</argument>, <argument>model.materials[<literal type="number">0</literal>].shader</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>CreateLight</name><argument_list>(<argument>LIGHT_DIRECTIONAL</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument>LIGHT_HEIGHT*<literal type="number">2.0f</literal></argument>, <argument>-LIGHT_DISTANCE }</argument>, <argument>(Vector3){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument>(Color){ <literal type="number">255</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument><literal type="number">255</literal> }</argument>, <argument>model.materials[<literal type="number">0</literal>].shader</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>SetCameraMode</name><argument_list>(<argument><expr><name>camera</name></expr></argument>, <argument><expr><name>CAMERA_ORBITAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateCamera</name><argument_list>(<argument><expr><operator>&amp;</operator><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>cameraPos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>camera</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>camera</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name></expr>, <expr><name><name>camera</name><operator>.</operator><name>position</name><operator>.</operator><name>z</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>shader</name></expr></argument>, <argument><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VECTOR_VIEW</name></expr>]</index></name></expr></argument>, <argument><expr><name>cameraPos</name></expr></argument>, <argument><expr><name>UNIFORM_VEC3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginMode3D</name><argument_list>(<argument><expr><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawModel</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><call><name>Vector3Zero</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawGrid</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndMode3D</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawFPS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_ALBEDO</name></expr>]</index></name><operator>.</operator><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_NORMAL</name></expr>]</index></name><operator>.</operator><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_METALNESS</name></expr>]</index></name><operator>.</operator><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_ROUGHNESS</name></expr>]</index></name><operator>.</operator><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_OCCLUSION</name></expr>]</index></name><operator>.</operator><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_IRRADIANCE</name></expr>]</index></name><operator>.</operator><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_PREFILTER</name></expr>]</index></name><operator>.</operator><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_BRDF</name></expr>]</index></name><operator>.</operator><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadShader</name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadModel</name><argument_list>(<argument><expr><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Material</name></type> <name>LoadMaterialPBR</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>albedo</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>metalness</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>roughness</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Material</name></type> <name>mat</name> <init>= <expr><call><name>LoadMaterialDefault</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>shader</name></name> <operator>=</operator> <call><name>LoadShader</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl330/pbr.vs"</literal></expr></argument>, <argument><expr><literal type="string">"resources/shaders/glsl330/pbr.fs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>shader</name></name> <operator>=</operator> <call><name>LoadShader</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl100/pbr.vs"</literal></expr></argument>, <argument><expr><literal type="string">"resources/shaders/glsl100/pbr.fs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MAP_ALBEDO</name></expr>]</index></name> <operator>=</operator> <call><name>GetShaderLocation</name><argument_list>(<argument><expr><name><name>mat</name><operator>.</operator><name>shader</name></name></expr></argument>, <argument><expr><literal type="string">"albedo.sampler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MAP_METALNESS</name></expr>]</index></name> <operator>=</operator> <call><name>GetShaderLocation</name><argument_list>(<argument><expr><name><name>mat</name><operator>.</operator><name>shader</name></name></expr></argument>, <argument><expr><literal type="string">"metalness.sampler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MAP_NORMAL</name></expr>]</index></name> <operator>=</operator> <call><name>GetShaderLocation</name><argument_list>(<argument><expr><name><name>mat</name><operator>.</operator><name>shader</name></name></expr></argument>, <argument><expr><literal type="string">"normals.sampler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MAP_ROUGHNESS</name></expr>]</index></name> <operator>=</operator> <call><name>GetShaderLocation</name><argument_list>(<argument><expr><name><name>mat</name><operator>.</operator><name>shader</name></name></expr></argument>, <argument><expr><literal type="string">"roughness.sampler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MAP_OCCLUSION</name></expr>]</index></name> <operator>=</operator> <call><name>GetShaderLocation</name><argument_list>(<argument><expr><name><name>mat</name><operator>.</operator><name>shader</name></name></expr></argument>, <argument><expr><literal type="string">"occlusion.sampler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MAP_IRRADIANCE</name></expr>]</index></name> <operator>=</operator> <call><name>GetShaderLocation</name><argument_list>(<argument><expr><name><name>mat</name><operator>.</operator><name>shader</name></name></expr></argument>, <argument><expr><literal type="string">"irradianceMap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MAP_PREFILTER</name></expr>]</index></name> <operator>=</operator> <call><name>GetShaderLocation</name><argument_list>(<argument><expr><name><name>mat</name><operator>.</operator><name>shader</name></name></expr></argument>, <argument><expr><literal type="string">"prefilterMap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MAP_BRDF</name></expr>]</index></name> <operator>=</operator> <call><name>GetShaderLocation</name><argument_list>(<argument><expr><name><name>mat</name><operator>.</operator><name>shader</name></name></expr></argument>, <argument><expr><literal type="string">"brdfLUT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_MATRIX_MODEL</name></expr>]</index></name> <operator>=</operator> <call><name>GetShaderLocation</name><argument_list>(<argument><expr><name><name>mat</name><operator>.</operator><name>shader</name></name></expr></argument>, <argument><expr><literal type="string">"matModel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>shader</name><operator>.</operator><name>locs</name><index>[<expr><name>LOC_VECTOR_VIEW</name></expr>]</index></name> <operator>=</operator> <call><name>GetShaderLocation</name><argument_list>(<argument><expr><name><name>mat</name><operator>.</operator><name>shader</name></name></expr></argument>, <argument><expr><literal type="string">"viewPos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_ALBEDO</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/pbr/trooper_albedo.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_NORMAL</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/pbr/trooper_normals.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_METALNESS</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/pbr/trooper_metalness.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_ROUGHNESS</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/pbr/trooper_roughness.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_OCCLUSION</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/pbr/trooper_ao.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>Shader</name></type> <name>shdrCubemap</name> <init>= <expr><call><name>LoadShader</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl330/cubemap.vs"</literal></expr></argument>, <argument><expr><literal type="string">"resources/shaders/glsl330/cubemap.fs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<decl_stmt><decl><type><name>Shader</name></type> <name>shdrCubemap</name> <init>= <expr><call><name>LoadShader</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl100/cubemap.vs"</literal></expr></argument>, <argument><expr><literal type="string">"resources/shaders/glsl100/cubemap.fs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>Shader</name></type> <name>shdrIrradiance</name> <init>= <expr><call><name>LoadShader</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl330/skybox.vs"</literal></expr></argument>, <argument><expr><literal type="string">"resources/shaders/glsl330/irradiance.fs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<decl_stmt><decl><type><name>Shader</name></type> <name>shdrIrradiance</name> <init>= <expr><call><name>LoadShader</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl100/skybox.vs"</literal></expr></argument>, <argument><expr><literal type="string">"resources/shaders/glsl100/irradiance.fs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>Shader</name></type> <name>shdrPrefilter</name> <init>= <expr><call><name>LoadShader</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl330/skybox.vs"</literal></expr></argument>, <argument><expr><literal type="string">"resources/shaders/glsl330/prefilter.fs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>Shader</name></type> <name>shdrPrefilter</name> <init>= <expr><call><name>LoadShader</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl100/skybox.vs"</literal></expr></argument>, <argument><expr><literal type="string">"resources/shaders/glsl100/prefilter.fs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>Shader</name></type> <name>shdrBRDF</name> <init>= <expr><call><name>LoadShader</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl330/brdf.vs"</literal></expr></argument>, <argument><expr><literal type="string">"resources/shaders/glsl330/brdf.fs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>Shader</name></type> <name>shdrBRDF</name> <init>= <expr><call><name>LoadShader</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl100/brdf.vs"</literal></expr></argument>, <argument><expr><literal type="string">"resources/shaders/glsl100/brdf.fs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>SetShaderValue</name><argument_list>(<argument>shdrCubemap</argument>, <argument>GetShaderLocation(shdrCubemap, <literal type="string">"equirectangularMap"</literal>)</argument>, <argument>(int[<literal type="number">1</literal>]){ <literal type="number">0</literal> }</argument>, <argument>UNIFORM_INT</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>SetShaderValue</name><argument_list>(<argument>shdrIrradiance</argument>, <argument>GetShaderLocation(shdrIrradiance, <literal type="string">"environmentMap"</literal>)</argument>, <argument>(int[<literal type="number">1</literal>]){ <literal type="number">0</literal> }</argument>, <argument>UNIFORM_INT</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>SetShaderValue</name><argument_list>(<argument>shdrPrefilter</argument>, <argument>GetShaderLocation(shdrPrefilter, <literal type="string">"environmentMap"</literal>)</argument>, <argument>(int[<literal type="number">1</literal>]){ <literal type="number">0</literal> }</argument>, <argument>UNIFORM_INT</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>Texture2D</name></type> <name>texHDR</name> <init>= <expr><call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/dresden_square.hdr"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Texture2D</name></type> <name>cubemap</name> <init>= <expr><call><name>GenTextureCubemap</name><argument_list>(<argument><expr><name>shdrCubemap</name></expr></argument>, <argument><expr><name>texHDR</name></expr></argument>, <argument><expr><name>CUBEMAP_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_IRRADIANCE</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <call><name>GenTextureIrradiance</name><argument_list>(<argument><expr><name>shdrIrradiance</name></expr></argument>, <argument><expr><name>cubemap</name></expr></argument>, <argument><expr><name>IRRADIANCE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_PREFILTER</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <call><name>GenTexturePrefilter</name><argument_list>(<argument><expr><name>shdrPrefilter</name></expr></argument>, <argument><expr><name>cubemap</name></expr></argument>, <argument><expr><name>PREFILTERED_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_BRDF</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <call><name>GenTextureBRDF</name><argument_list>(<argument><expr><name>shdrBRDF</name></expr></argument>, <argument><expr><name>BRDF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>cubemap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texHDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadShader</name><argument_list>(<argument><expr><name>shdrCubemap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadShader</name><argument_list>(<argument><expr><name>shdrIrradiance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadShader</name><argument_list>(<argument><expr><name>shdrPrefilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadShader</name><argument_list>(<argument><expr><name>shdrBRDF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetTextureFilter</name><argument_list>(<argument><expr><name><name>mat</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_ALBEDO</name></expr>]</index></name><operator>.</operator><name>texture</name></expr></argument>, <argument><expr><name>FILTER_BILINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetTextureFilter</name><argument_list>(<argument><expr><name><name>mat</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_NORMAL</name></expr>]</index></name><operator>.</operator><name>texture</name></expr></argument>, <argument><expr><name>FILTER_BILINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetTextureFilter</name><argument_list>(<argument><expr><name><name>mat</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_METALNESS</name></expr>]</index></name><operator>.</operator><name>texture</name></expr></argument>, <argument><expr><name>FILTER_BILINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetTextureFilter</name><argument_list>(<argument><expr><name><name>mat</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_ROUGHNESS</name></expr>]</index></name><operator>.</operator><name>texture</name></expr></argument>, <argument><expr><name>FILTER_BILINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetTextureFilter</name><argument_list>(<argument><expr><name><name>mat</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_OCCLUSION</name></expr>]</index></name><operator>.</operator><name>texture</name></expr></argument>, <argument><expr><name>FILTER_BILINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>SetShaderValue</name><argument_list>(<argument>mat.shader</argument>, <argument>GetShaderLocation(mat.shader, <literal type="string">"albedo.useSampler"</literal>)</argument>, <argument>(int[<literal type="number">1</literal>]){ <literal type="number">1</literal> }</argument>, <argument>UNIFORM_INT</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>SetShaderValue</name><argument_list>(<argument>mat.shader</argument>, <argument>GetShaderLocation(mat.shader, <literal type="string">"normals.useSampler"</literal>)</argument>, <argument>(int[<literal type="number">1</literal>]){ <literal type="number">1</literal> }</argument>, <argument>UNIFORM_INT</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>SetShaderValue</name><argument_list>(<argument>mat.shader</argument>, <argument>GetShaderLocation(mat.shader, <literal type="string">"metalness.useSampler"</literal>)</argument>, <argument>(int[<literal type="number">1</literal>]){ <literal type="number">1</literal> }</argument>, <argument>UNIFORM_INT</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>SetShaderValue</name><argument_list>(<argument>mat.shader</argument>, <argument>GetShaderLocation(mat.shader, <literal type="string">"roughness.useSampler"</literal>)</argument>, <argument>(int[<literal type="number">1</literal>]){ <literal type="number">1</literal> }</argument>, <argument>UNIFORM_INT</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>SetShaderValue</name><argument_list>(<argument>mat.shader</argument>, <argument>GetShaderLocation(mat.shader, <literal type="string">"occlusion.useSampler"</literal>)</argument>, <argument>(int[<literal type="number">1</literal>]){ <literal type="number">1</literal> }</argument>, <argument>UNIFORM_INT</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>renderModeLoc</name> <init>= <expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name><name>mat</name><operator>.</operator><name>shader</name></name></expr></argument>, <argument><expr><literal type="string">"renderMode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>SetShaderValue</name><argument_list>(<argument>mat.shader</argument>, <argument>renderModeLoc</argument>, <argument>(int[<literal type="number">1</literal>]){ <literal type="number">0</literal> }</argument>, <argument>UNIFORM_INT</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_ALBEDO</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <name>albedo</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_NORMAL</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{ <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_METALNESS</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>metalness</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_ROUGHNESS</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>roughness</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_OCCLUSION</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_EMISSION</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mat</name><operator>.</operator><name>maps</name><index>[<expr><name>MAP_HEIGHT</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>

<return>return <expr><name>mat</name></expr>;</return>

</block_content>}</block></function>

</unit>
