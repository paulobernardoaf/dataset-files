<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\models\models_box_collisions.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [models] example - box collisions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Camera</name></type> <name>camera</name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">10.0f</literal></expr>, <expr><literal type="number">10.0f</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>, <expr><literal type="number">45.0f</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>playerPosition</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">2.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>playerSize</name> <init>= <expr><block>{ <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">2.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Color</name></type> <name>playerColor</name> <init>= <expr><name>GREEN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>enemyBoxPos</name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">4.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>enemyBoxSize</name> <init>= <expr><block>{ <expr><literal type="number">2.0f</literal></expr>, <expr><literal type="number">2.0f</literal></expr>, <expr><literal type="number">2.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>enemySpherePos</name> <init>= <expr><block>{ <expr><literal type="number">4.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>enemySphereSize</name> <init>= <expr><literal type="number">1.5f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>collision</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_RIGHT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>playerPosition</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <literal type="number">0.2f</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_LEFT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>playerPosition</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <literal type="number">0.2f</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_DOWN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>playerPosition</name><operator>.</operator><name>z</name></name> <operator>+=</operator> <literal type="number">0.2f</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_UP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>playerPosition</name><operator>.</operator><name>z</name></name> <operator>-=</operator> <literal type="number">0.2f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>collision</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><macro><name>CheckCollisionBoxes</name><argument_list>(

<argument>(BoundingBox){(Vector3){ playerPosition.x - playerSize.x/<literal type="number">2</literal></argument>,

<argument>playerPosition.y - playerSize.y/<literal type="number">2</literal></argument>,

<argument>playerPosition.z - playerSize.z/<literal type="number">2</literal> }</argument>,

<argument>(Vector3){ playerPosition.x + playerSize.x/<literal type="number">2</literal></argument>,

<argument>playerPosition.y + playerSize.y/<literal type="number">2</literal></argument>,

<argument>playerPosition.z + playerSize.z/<literal type="number">2</literal> }}</argument>,

<argument>(BoundingBox){(Vector3){ enemyBoxPos.x - enemyBoxSize.x/<literal type="number">2</literal></argument>,

<argument>enemyBoxPos.y - enemyBoxSize.y/<literal type="number">2</literal></argument>,

<argument>enemyBoxPos.z - enemyBoxSize.z/<literal type="number">2</literal> }</argument>,

<argument>(Vector3){ enemyBoxPos.x + enemyBoxSize.x/<literal type="number">2</literal></argument>,

<argument>enemyBoxPos.y + enemyBoxSize.y/<literal type="number">2</literal></argument>,

<argument>enemyBoxPos.z + enemyBoxSize.z/<literal type="number">2</literal> }}</argument>)</argument_list></macro></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>collision</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><macro><name>CheckCollisionBoxSphere</name><argument_list>(

<argument>(BoundingBox){(Vector3){ playerPosition.x - playerSize.x/<literal type="number">2</literal></argument>,

<argument>playerPosition.y - playerSize.y/<literal type="number">2</literal></argument>,

<argument>playerPosition.z - playerSize.z/<literal type="number">2</literal> }</argument>,

<argument>(Vector3){ playerPosition.x + playerSize.x/<literal type="number">2</literal></argument>,

<argument>playerPosition.y + playerSize.y/<literal type="number">2</literal></argument>,

<argument>playerPosition.z + playerSize.z/<literal type="number">2</literal> }}</argument>,

<argument>enemySpherePos</argument>, <argument>enemySphereSize</argument>)</argument_list></macro></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>collision</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>collision</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>playerColor</name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>playerColor</name> <operator>=</operator> <name>GREEN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginMode3D</name><argument_list>(<argument><expr><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawCube</name><argument_list>(<argument><expr><name>enemyBoxPos</name></expr></argument>, <argument><expr><name><name>enemyBoxSize</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>enemyBoxSize</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>enemyBoxSize</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawCubeWires</name><argument_list>(<argument><expr><name>enemyBoxPos</name></expr></argument>, <argument><expr><name><name>enemyBoxSize</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>enemyBoxSize</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>enemyBoxSize</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawSphere</name><argument_list>(<argument><expr><name>enemySpherePos</name></expr></argument>, <argument><expr><name>enemySphereSize</name></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawSphereWires</name><argument_list>(<argument><expr><name>enemySpherePos</name></expr></argument>, <argument><expr><name>enemySphereSize</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawCubeV</name><argument_list>(<argument><expr><name>playerPosition</name></expr></argument>, <argument><expr><name>playerSize</name></expr></argument>, <argument><expr><name>playerColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawGrid</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>EndMode3D</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Move player with cursors to collide"</literal></expr></argument>, <argument><expr><literal type="number">220</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawFPS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function></unit>
