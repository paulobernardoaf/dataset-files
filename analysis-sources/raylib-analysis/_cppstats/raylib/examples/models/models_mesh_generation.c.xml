<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\models\models_mesh_generation.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_MODELS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [models] example - mesh generation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Image</name></type> <name>checked</name> <init>= <expr><call><name>GenImageChecked</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Texture2D</name></type> <name>texture</name> <init>= <expr><call><name>LoadTextureFromImage</name><argument_list>(<argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Model</name></type> <name><name>models</name><index>[<expr><name>NUM_MODELS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>models</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>LoadModelFromMesh</name><argument_list>(<argument><expr><call><name>GenMeshPlane</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>models</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>LoadModelFromMesh</name><argument_list>(<argument><expr><call><name>GenMeshCube</name><argument_list>(<argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>models</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>LoadModelFromMesh</name><argument_list>(<argument><expr><call><name>GenMeshSphere</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>models</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>LoadModelFromMesh</name><argument_list>(<argument><expr><call><name>GenMeshHemiSphere</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>models</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>LoadModelFromMesh</name><argument_list>(<argument><expr><call><name>GenMeshCylinder</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>models</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>LoadModelFromMesh</name><argument_list>(<argument><expr><call><name>GenMeshTorus</name><argument_list>(<argument><expr><literal type="number">0.25f</literal></expr></argument>, <argument><expr><literal type="number">4.0f</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>models</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>LoadModelFromMesh</name><argument_list>(<argument><expr><call><name>GenMeshKnot</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>models</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>LoadModelFromMesh</name><argument_list>(<argument><expr><call><name>GenMeshPoly</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_MODELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>models</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <name>texture</name></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>Camera</name></type> <name>camera</name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">5.0f</literal></expr>, <expr><literal type="number">5.0f</literal></expr>, <expr><literal type="number">5.0f</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>, <expr><literal type="number">45.0f</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>position</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>currentModel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetCameraMode</name><argument_list>(<argument><expr><name>camera</name></expr></argument>, <argument><expr><name>CAMERA_ORBITAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateCamera</name><argument_list>(<argument><expr><operator>&amp;</operator><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>currentModel</name> <operator>=</operator> <operator>(</operator><name>currentModel</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>%</operator><name>NUM_MODELS</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_RIGHT</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>currentModel</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>currentModel</name> <operator>&gt;=</operator> <name>NUM_MODELS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>currentModel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_LEFT</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>currentModel</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>currentModel</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>currentModel</name> <operator>=</operator> <name>NUM_MODELS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginMode3D</name><argument_list>(<argument><expr><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawModel</name><argument_list>(<argument><expr><name><name>models</name><index>[<expr><name>currentModel</name></expr>]</index></name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawGrid</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndMode3D</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="number">310</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>SKYBLUE</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangleLines</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="number">310</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>DARKBLUE</name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"MOUSE LEFT BUTTON to CYCLE PROCEDURAL MODELS"</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">410</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>BLUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>currentModel</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"PLANE"</literal></expr></argument>, <argument><expr><literal type="number">680</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>DARKBLUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"CUBE"</literal></expr></argument>, <argument><expr><literal type="number">680</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>DARKBLUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"SPHERE"</literal></expr></argument>, <argument><expr><literal type="number">680</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>DARKBLUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"HEMISPHERE"</literal></expr></argument>, <argument><expr><literal type="number">640</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>DARKBLUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"CYLINDER"</literal></expr></argument>, <argument><expr><literal type="number">680</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>DARKBLUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"TORUS"</literal></expr></argument>, <argument><expr><literal type="number">680</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>DARKBLUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"KNOT"</literal></expr></argument>, <argument><expr><literal type="number">680</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>DARKBLUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"POLY"</literal></expr></argument>, <argument><expr><literal type="number">680</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>DARKBLUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_MODELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>UnloadModel</name><argument_list>(<argument><expr><name><name>models</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function></unit>
