<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\shaders\shaders_texture_waves.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLSL_VERSION</name></cpp:macro> <cpp:value>330</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLSL_VERSION</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [shaders] example - texture waves"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Texture2D</name></type> <name>texture</name> <init>= <expr><call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/space.png"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Shader</name></type> <name>shader</name> <init>= <expr><call><name>LoadShader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl%i/wave.fs"</literal></expr></argument>, <argument><expr><name>GLSL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>secondsLoc</name> <init>= <expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"secondes"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>freqXLoc</name> <init>= <expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"freqX"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>freqYLoc</name> <init>= <expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"freqY"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ampXLoc</name> <init>= <expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"ampX"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ampYLoc</name> <init>= <expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"ampY"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>speedXLoc</name> <init>= <expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"speedX"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>speedYLoc</name> <init>= <expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"speedY"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>freqX</name> <init>= <expr><literal type="number">25.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>freqY</name> <init>= <expr><literal type="number">25.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>ampX</name> <init>= <expr><literal type="number">5.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>ampY</name> <init>= <expr><literal type="number">5.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>speedX</name> <init>= <expr><literal type="number">8.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>speedY</name> <init>= <expr><literal type="number">8.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>screenSize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><macro><name>GetScreenHeight</name><argument_list>()</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>screenSize</name></expr></argument>, <argument><expr><name>UNIFORM_VEC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>freqXLoc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>freqX</name></expr></argument>, <argument><expr><name>UNIFORM_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>freqYLoc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>freqY</name></expr></argument>, <argument><expr><name>UNIFORM_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>ampXLoc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ampX</name></expr></argument>, <argument><expr><name>UNIFORM_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>ampYLoc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ampY</name></expr></argument>, <argument><expr><name>UNIFORM_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>speedXLoc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>speedX</name></expr></argument>, <argument><expr><name>UNIFORM_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>speedYLoc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>speedY</name></expr></argument>, <argument><expr><name>UNIFORM_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>seconds</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>seconds</name> <operator>+=</operator> <call><name>GetFrameTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>secondsLoc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seconds</name></expr></argument>, <argument><expr><name>UNIFORM_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginShaderMode</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><name><name>texture</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndShaderMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>UnloadShader</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
