<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\shaders\shaders_raymarching.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLSL_VERSION</name></cpp:macro> <cpp:value>330</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLSL_VERSION</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetConfigFlags</name><argument_list>(<argument><expr><name>FLAG_WINDOW_RESIZABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [shaders] example - raymarching shapes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Camera</name></type> <name>camera</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">2.5f</literal></expr>, <expr><literal type="number">2.5f</literal></expr>, <expr><literal type="number">3.0f</literal></expr> }</block></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>target</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.7f</literal></expr> }</block></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>up</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>fovy</name></name> <operator>=</operator> <literal type="number">65.0f</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>SetCameraMode</name><argument_list>(<argument><expr><name>camera</name></expr></argument>, <argument><expr><name>CAMERA_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>Shader</name></type> <name>shader</name> <init>= <expr><call><name>LoadShader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl%i/raymarching.fs"</literal></expr></argument>, <argument><expr><name>GLSL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>viewEyeLoc</name> <init>= <expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"viewEye"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>viewCenterLoc</name> <init>= <expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"viewCenter"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>runTimeLoc</name> <init>= <expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"runTime"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>resolutionLoc</name> <init>= <expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"resolution"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>resolution</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name>screenWidth</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>screenHeight</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>resolutionLoc</name></expr></argument>, <argument><expr><name>resolution</name></expr></argument>, <argument><expr><name>UNIFORM_VEC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>runTime</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>IsWindowResized</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>screenWidth</name> <operator>=</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>screenHeight</name> <operator>=</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>resolution</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name>screenWidth</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>screenHeight</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>resolutionLoc</name></expr></argument>, <argument><expr><name>resolution</name></expr></argument>, <argument><expr><name>UNIFORM_VEC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UpdateCamera</name><argument_list>(<argument><expr><operator>&amp;</operator><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>cameraPos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>camera</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>camera</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name></expr>, <expr><name><name>camera</name><operator>.</operator><name>position</name><operator>.</operator><name>z</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>cameraTarget</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>camera</name><operator>.</operator><name>target</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>camera</name><operator>.</operator><name>target</name><operator>.</operator><name>y</name></name></expr>, <expr><name><name>camera</name><operator>.</operator><name>target</name><operator>.</operator><name>z</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>deltaTime</name> <init>= <expr><call><name>GetFrameTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>runTime</name> <operator>+=</operator> <name>deltaTime</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>viewEyeLoc</name></expr></argument>, <argument><expr><name>cameraPos</name></expr></argument>, <argument><expr><name>UNIFORM_VEC3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>viewCenterLoc</name></expr></argument>, <argument><expr><name>cameraTarget</name></expr></argument>, <argument><expr><name>UNIFORM_VEC3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>runTimeLoc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>runTime</name></expr></argument>, <argument><expr><name>UNIFORM_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginShaderMode</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndShaderMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"(c) Raymarching shader by IÃ±igo Quilez. MIT License."</literal></expr></argument>, <argument><expr><name>screenWidth</name> <operator>-</operator> <literal type="number">280</literal></expr></argument>, <argument><expr><name>screenHeight</name> <operator>-</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>UnloadShader</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
