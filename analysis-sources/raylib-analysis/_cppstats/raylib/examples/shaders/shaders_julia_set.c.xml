<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\shaders\shaders_julia_set.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLSL_VERSION</name></cpp:macro> <cpp:value>330</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLSL_VERSION</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>POINTS_OF_INTEREST</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><operator>-</operator><literal type="number">0.348827</literal></expr>, <expr><literal type="number">0.607167</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.786268</literal></expr>, <expr><literal type="number">0.169728</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.8</literal></expr>, <expr><literal type="number">0.156</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0.285</literal></expr>, <expr><literal type="number">0.0</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.835</literal></expr>, <expr><operator>-</operator><literal type="number">0.2321</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.70176</literal></expr>, <expr><operator>-</operator><literal type="number">0.3842</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [shaders] example - julia sets"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Shader</name></type> <name>shader</name> <init>= <expr><call><name>LoadShader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl%i/julia_set.fs"</literal></expr></argument>, <argument><expr><name>GLSL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>POINTS_OF_INTEREST</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>POINTS_OF_INTEREST</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>offset</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><operator>(</operator><name>float</name><operator>)</operator><name>screenWidth</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><operator>(</operator><name>float</name><operator>)</operator><name>screenHeight</name><operator>/</operator><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>zoom</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>offsetSpeed</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cLoc</name> <init>= <expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>zoomLoc</name> <init>= <expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"zoom"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offsetLoc</name> <init>= <expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>screenDims</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name>screenWidth</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>screenHeight</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><call><name>GetShaderLocation</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><literal type="string">"screenDims"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>screenDims</name></expr></argument>, <argument><expr><name>UNIFORM_VEC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>cLoc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>UNIFORM_VEC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>zoomLoc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zoom</name></expr></argument>, <argument><expr><name>UNIFORM_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>offsetLoc</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>UNIFORM_VEC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>RenderTexture2D</name></type> <name>target</name> <init>= <expr><call><name>LoadRenderTexture</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>incrementSpeed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>showControls</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>pause</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ONE</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_TWO</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_THREE</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_FOUR</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_FIVE</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_SIX</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ONE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>POINTS_OF_INTEREST</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr><operator>,</operator> <expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>POINTS_OF_INTEREST</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_TWO</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>POINTS_OF_INTEREST</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr><operator>,</operator> <expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>POINTS_OF_INTEREST</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_THREE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>POINTS_OF_INTEREST</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr><operator>,</operator> <expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>POINTS_OF_INTEREST</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_FOUR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>POINTS_OF_INTEREST</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr><operator>,</operator> <expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>POINTS_OF_INTEREST</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_FIVE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>POINTS_OF_INTEREST</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr><operator>,</operator> <expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>POINTS_OF_INTEREST</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_SIX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>POINTS_OF_INTEREST</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr><operator>,</operator> <expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>POINTS_OF_INTEREST</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>cLoc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>UNIFORM_VEC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_SPACE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pause</name> <operator>=</operator> <operator>!</operator><name>pause</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_F1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>showControls</name> <operator>=</operator> <operator>!</operator><name>showControls</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pause</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_RIGHT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>incrementSpeed</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_LEFT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>incrementSpeed</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_RIGHT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zoom</name> <operator>+=</operator> <name>zoom</name><operator>*</operator><literal type="number">0.003f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_RIGHT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zoom</name> <operator>-=</operator> <name>zoom</name><operator>*</operator><literal type="number">0.003f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePos</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>offsetSpeed</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>mousePos</name><operator>.</operator><name>x</name></name> <operator>-</operator><operator>(</operator><name>float</name><operator>)</operator><name>screenWidth</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>offsetSpeed</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>mousePos</name><operator>.</operator><name>y</name></name> <operator>-</operator><operator>(</operator><name>float</name><operator>)</operator><name>screenHeight</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <call><name>GetFrameTime</name><argument_list>()</argument_list></call><operator>*</operator><name><name>offsetSpeed</name><operator>.</operator><name>x</name></name><operator>*</operator><literal type="number">0.8f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <call><name>GetFrameTime</name><argument_list>()</argument_list></call><operator>*</operator><name><name>offsetSpeed</name><operator>.</operator><name>y</name></name><operator>*</operator><literal type="number">0.8f</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>offsetSpeed</name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>zoomLoc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zoom</name></expr></argument>, <argument><expr><name>UNIFORM_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>offsetLoc</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>UNIFORM_VEC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>amount</name> <init>= <expr><call><name>GetFrameTime</name><argument_list>()</argument_list></call><operator>*</operator><name>incrementSpeed</name><operator>*</operator><literal type="number">0.0005f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>amount</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>amount</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetShaderValue</name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>cLoc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>UNIFORM_VEC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BeginTextureMode</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndTextureMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginShaderMode</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name><name>target</name><operator>.</operator><name>texture</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndShaderMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>showControls</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Press Mouse buttons right/left to zoom in/out and move"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Press KEY_F1 to toggle these controls"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Press KEYS [1 - 6] to change point of interest"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Press KEY_LEFT | KEY_RIGHT to change speed"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Press KEY_SPACE to pause movement animation"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">75</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>UnloadShader</name><argument_list>(<argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>UnloadRenderTexture</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
