<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\shaders\shaders_postprocessing.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLATFORM_DESKTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLSL_VERSION</name></cpp:macro> <cpp:value>330</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLSL_VERSION</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_POSTPRO_SHADERS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{

<decl><name>FX_GRAYSCALE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>FX_POSTERIZATION</name></decl>,

<decl><name>FX_DREAM_VISION</name></decl>,

<decl><name>FX_PIXELIZER</name></decl>,

<decl><name>FX_CROSS_HATCHING</name></decl>,

<decl><name>FX_CROSS_STITCHING</name></decl>,

<decl><name>FX_PREDATOR_VIEW</name></decl>,

<decl><name>FX_SCANLINES</name></decl>,

<decl><name>FX_FISHEYE</name></decl>,

<decl><name>FX_SOBEL</name></decl>,

<decl><name>FX_BLOOM</name></decl>,

<decl><name>FX_BLUR</name></decl>,

}</block></enum></type> <name>PostproShader</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>postproShaderText</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"GRAYSCALE"</literal></expr>,

<expr><literal type="string">"POSTERIZATION"</literal></expr>,

<expr><literal type="string">"DREAM_VISION"</literal></expr>,

<expr><literal type="string">"PIXELIZER"</literal></expr>,

<expr><literal type="string">"CROSS_HATCHING"</literal></expr>,

<expr><literal type="string">"CROSS_STITCHING"</literal></expr>,

<expr><literal type="string">"PREDATOR_VIEW"</literal></expr>,

<expr><literal type="string">"SCANLINES"</literal></expr>,

<expr><literal type="string">"FISHEYE"</literal></expr>,

<expr><literal type="string">"SOBEL"</literal></expr>,

<expr><literal type="string">"BLOOM"</literal></expr>,

<expr><literal type="string">"BLUR"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetConfigFlags</name><argument_list>(<argument><expr><name>FLAG_MSAA_4X_HINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [shaders] example - postprocessing shader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Camera</name></type> <name>camera</name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">2.0f</literal></expr>, <expr><literal type="number">3.0f</literal></expr>, <expr><literal type="number">2.0f</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>, <expr><literal type="number">45.0f</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Model</name></type> <name>model</name> <init>= <expr><call><name>LoadModel</name><argument_list>(<argument><expr><literal type="string">"resources/models/church.obj"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Texture2D</name></type> <name>texture</name> <init>= <expr><call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/models/church_diffuse.png"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>model</name><operator>.</operator><name>materials</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>maps</name><index>[<expr><name>MAP_DIFFUSE</name></expr>]</index></name><operator>.</operator><name>texture</name> <operator>=</operator> <name>texture</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>Vector3</name></type> <name>position</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Shader</name></type> <name><name>shaders</name><index>[<expr><name>MAX_POSTPRO_SHADERS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>shaders</name><index>[<expr><name>FX_GRAYSCALE</name></expr>]</index></name> <operator>=</operator> <call><name>LoadShader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl%i/grayscale.fs"</literal></expr></argument>, <argument><expr><name>GLSL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shaders</name><index>[<expr><name>FX_POSTERIZATION</name></expr>]</index></name> <operator>=</operator> <call><name>LoadShader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl%i/posterization.fs"</literal></expr></argument>, <argument><expr><name>GLSL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shaders</name><index>[<expr><name>FX_DREAM_VISION</name></expr>]</index></name> <operator>=</operator> <call><name>LoadShader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl%i/dream_vision.fs"</literal></expr></argument>, <argument><expr><name>GLSL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shaders</name><index>[<expr><name>FX_PIXELIZER</name></expr>]</index></name> <operator>=</operator> <call><name>LoadShader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl%i/pixelizer.fs"</literal></expr></argument>, <argument><expr><name>GLSL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shaders</name><index>[<expr><name>FX_CROSS_HATCHING</name></expr>]</index></name> <operator>=</operator> <call><name>LoadShader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl%i/cross_hatching.fs"</literal></expr></argument>, <argument><expr><name>GLSL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shaders</name><index>[<expr><name>FX_CROSS_STITCHING</name></expr>]</index></name> <operator>=</operator> <call><name>LoadShader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl%i/cross_stitching.fs"</literal></expr></argument>, <argument><expr><name>GLSL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shaders</name><index>[<expr><name>FX_PREDATOR_VIEW</name></expr>]</index></name> <operator>=</operator> <call><name>LoadShader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl%i/predator.fs"</literal></expr></argument>, <argument><expr><name>GLSL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shaders</name><index>[<expr><name>FX_SCANLINES</name></expr>]</index></name> <operator>=</operator> <call><name>LoadShader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl%i/scanlines.fs"</literal></expr></argument>, <argument><expr><name>GLSL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shaders</name><index>[<expr><name>FX_FISHEYE</name></expr>]</index></name> <operator>=</operator> <call><name>LoadShader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl%i/fisheye.fs"</literal></expr></argument>, <argument><expr><name>GLSL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shaders</name><index>[<expr><name>FX_SOBEL</name></expr>]</index></name> <operator>=</operator> <call><name>LoadShader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl%i/sobel.fs"</literal></expr></argument>, <argument><expr><name>GLSL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shaders</name><index>[<expr><name>FX_BLOOM</name></expr>]</index></name> <operator>=</operator> <call><name>LoadShader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl%i/bloom.fs"</literal></expr></argument>, <argument><expr><name>GLSL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>shaders</name><index>[<expr><name>FX_BLUR</name></expr>]</index></name> <operator>=</operator> <call><name>LoadShader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"resources/shaders/glsl%i/blur.fs"</literal></expr></argument>, <argument><expr><name>GLSL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>currentShader</name> <init>= <expr><name>FX_GRAYSCALE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RenderTexture2D</name></type> <name>target</name> <init>= <expr><call><name>LoadRenderTexture</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetCameraMode</name><argument_list>(<argument><expr><name>camera</name></expr></argument>, <argument><expr><name>CAMERA_ORBITAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateCamera</name><argument_list>(<argument><expr><operator>&amp;</operator><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_RIGHT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>currentShader</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_LEFT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>currentShader</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>currentShader</name> <operator>&gt;=</operator> <name>MAX_POSTPRO_SHADERS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>currentShader</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>currentShader</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>currentShader</name> <operator>=</operator> <name>MAX_POSTPRO_SHADERS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginTextureMode</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BeginMode3D</name><argument_list>(<argument><expr><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DrawModel</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><literal type="number">0.1f</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DrawGrid</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>EndMode3D</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>EndTextureMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BeginShaderMode</name><argument_list>(<argument><expr><name><name>shaders</name><index>[<expr><name>currentShader</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawTextureRec</name><argument_list>(<argument>target.texture</argument>, <argument>(Rectangle){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>target.texture.width</argument>, <argument>-target.texture.height }</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal> }</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>EndShaderMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">580</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>LIGHTGRAY</name></expr></argument>, <argument><expr><literal type="number">0.7f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"(c) Church 3D model by Alberto Cano"</literal></expr></argument>, <argument><expr><name>screenWidth</name> <operator>-</operator> <literal type="number">200</literal></expr></argument>, <argument><expr><name>screenHeight</name> <operator>-</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"CURRENT POSTPRO SHADER:"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><name><name>postproShaderText</name><index>[<expr><name>currentShader</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">330</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"&lt; &gt;"</literal></expr></argument>, <argument><expr><literal type="number">540</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><name>DARKBLUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawFPS</name><argument_list>(<argument><expr><literal type="number">700</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_POSTPRO_SHADERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>UnloadShader</name><argument_list>(<argument><expr><name><name>shaders</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>UnloadModel</name><argument_list>(<argument><expr><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>UnloadRenderTexture</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
