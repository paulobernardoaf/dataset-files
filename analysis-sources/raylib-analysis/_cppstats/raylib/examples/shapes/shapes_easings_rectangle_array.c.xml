<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\shapes\shapes_easings_rectangle_array.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easings.h"</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RECS_WIDTH</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RECS_HEIGHT</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RECS_X</name></cpp:macro> <cpp:value>800/RECS_WIDTH</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RECS_Y</name></cpp:macro> <cpp:value>450/RECS_HEIGHT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLAY_TIME_IN_FRAMES</name></cpp:macro> <cpp:value>240</cpp:value></cpp:define> 

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [shapes] example - easings rectangle array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name><name>recs</name><index>[<expr><name>MAX_RECS_X</name><operator>*</operator><name>MAX_RECS_Y</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>MAX_RECS_Y</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>MAX_RECS_X</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>recs</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_RECS_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>RECS_WIDTH</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name>RECS_WIDTH</name><operator>*</operator><name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>recs</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_RECS_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>RECS_HEIGHT</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name>RECS_HEIGHT</name><operator>*</operator><name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>recs</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_RECS_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name>RECS_WIDTH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>recs</name><index>[<expr><name>y</name><operator>*</operator><name>MAX_RECS_X</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name>RECS_HEIGHT</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<decl_stmt><decl><type><name>float</name></type> <name>rotation</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>framesCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_RECS_X</name><operator>*</operator><name>MAX_RECS_Y</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <call><name>EaseCircOut</name><argument_list>(<argument><expr><name>framesCounter</name></expr></argument>, <argument><expr><name>RECS_HEIGHT</name></expr></argument>, <argument><expr><operator>-</operator><name>RECS_HEIGHT</name></expr></argument>, <argument><expr><name>PLAY_TIME_IN_FRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <call><name>EaseCircOut</name><argument_list>(<argument><expr><name>framesCounter</name></expr></argument>, <argument><expr><name>RECS_WIDTH</name></expr></argument>, <argument><expr><operator>-</operator><name>RECS_WIDTH</name></expr></argument>, <argument><expr><name>PLAY_TIME_IN_FRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>rotation</name> <operator>=</operator> <call><name>EaseLinearIn</name><argument_list>(<argument><expr><name>framesCounter</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">360.0f</literal></expr></argument>, <argument><expr><name>PLAY_TIME_IN_FRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>state</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_SPACE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_RECS_X</name><operator>*</operator><name>MAX_RECS_Y</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name>RECS_HEIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name>RECS_WIDTH</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_RECS_X</name><operator>*</operator><name>MAX_RECS_Y</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<macro><name>DrawRectanglePro</name><argument_list>(<argument>recs[i]</argument>, <argument>(Vector2){ recs[i].width/<literal type="number">2</literal></argument>, <argument>recs[i].height/<literal type="number">2</literal> }</argument>, <argument>rotation</argument>, <argument>RED</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"PRESS [SPACE] TO PLAY AGAIN!"</literal></expr></argument>, <argument><expr><literal type="number">240</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function></unit>
