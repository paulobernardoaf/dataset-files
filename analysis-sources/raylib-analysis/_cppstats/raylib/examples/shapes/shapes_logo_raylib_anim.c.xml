<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\shapes\shapes_logo_raylib_anim.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [shapes] example - raylib logo animation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>logoPositionX</name> <init>= <expr><name>screenWidth</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>logoPositionY</name> <init>= <expr><name>screenHeight</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>framesCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lettersCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>topSideRecWidth</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>leftSideRecHeight</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bottomSideRecWidth</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rightSideRecHeight</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>alpha</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>framesCounter</name> <operator>==</operator> <literal type="number">120</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>topSideRecWidth</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>leftSideRecHeight</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>topSideRecWidth</name> <operator>==</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>bottomSideRecWidth</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rightSideRecHeight</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bottomSideRecWidth</name> <operator>==</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>framesCounter</name><operator>/</operator><literal type="number">12</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>lettersCount</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lettersCount</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>alpha</name> <operator>-=</operator> <literal type="number">0.02f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lettersCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>topSideRecWidth</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>leftSideRecHeight</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bottomSideRecWidth</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rightSideRecHeight</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>framesCounter</name><operator>/</operator><literal type="number">15</literal><operator>)</operator><operator>%</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>logoPositionX</name></expr></argument>, <argument><expr><name>logoPositionY</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>logoPositionX</name></expr></argument>, <argument><expr><name>logoPositionY</name></expr></argument>, <argument><expr><name>topSideRecWidth</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>logoPositionX</name></expr></argument>, <argument><expr><name>logoPositionY</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>leftSideRecHeight</name></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>logoPositionX</name></expr></argument>, <argument><expr><name>logoPositionY</name></expr></argument>, <argument><expr><name>topSideRecWidth</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>logoPositionX</name></expr></argument>, <argument><expr><name>logoPositionY</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>leftSideRecHeight</name></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>logoPositionX</name> <operator>+</operator> <literal type="number">240</literal></expr></argument>, <argument><expr><name>logoPositionY</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>rightSideRecHeight</name></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>logoPositionX</name></expr></argument>, <argument><expr><name>logoPositionY</name> <operator>+</operator> <literal type="number">240</literal></expr></argument>, <argument><expr><name>bottomSideRecWidth</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>logoPositionX</name></expr></argument>, <argument><expr><name>logoPositionY</name></expr></argument>, <argument><expr><name>topSideRecWidth</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>BLACK</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>logoPositionX</name></expr></argument>, <argument><expr><name>logoPositionY</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>leftSideRecHeight</name> <operator>-</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>BLACK</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>logoPositionX</name> <operator>+</operator> <literal type="number">240</literal></expr></argument>, <argument><expr><name>logoPositionY</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>rightSideRecHeight</name> <operator>-</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>BLACK</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>logoPositionX</name></expr></argument>, <argument><expr><name>logoPositionY</name> <operator>+</operator> <literal type="number">240</literal></expr></argument>, <argument><expr><name>bottomSideRecWidth</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>BLACK</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>screenWidth</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">112</literal></expr></argument>, <argument><expr><name>screenHeight</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">112</literal></expr></argument>, <argument><expr><literal type="number">224</literal></expr></argument>, <argument><expr><literal type="number">224</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>TextSubtext</name><argument_list>(<argument><expr><literal type="string">"raylib"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>lettersCount</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>screenWidth</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">44</literal></expr></argument>, <argument><expr><name>screenHeight</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>BLACK</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"[R] REPLAY"</literal></expr></argument>, <argument><expr><literal type="number">340</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function></unit>
