<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\shapes\shapes_following_eyes.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include> 

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [shapes] example - following eyes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>scleraLeftPosition</name> <init>= <expr><block>{ <expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">100</literal></expr>, <expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>scleraRightPosition</name> <init>= <expr><block>{ <expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">100</literal></expr>, <expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>scleraRadius</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>irisLeftPosition</name> <init>= <expr><block>{ <expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">100</literal></expr>, <expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>irisRightPosition</name> <init>= <expr><block>{ <expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">100</literal></expr>, <expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>irisRadius</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>angle</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dx</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>dy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>dxx</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>dyy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>irisLeftPosition</name> <operator>=</operator> <call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>irisRightPosition</name> <operator>=</operator> <call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CheckCollisionPointCircle</name><argument_list>(<argument><expr><name>irisLeftPosition</name></expr></argument>, <argument><expr><name>scleraLeftPosition</name></expr></argument>, <argument><expr><name>scleraRadius</name> <operator>-</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dx</name> <operator>=</operator> <name><name>irisLeftPosition</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>scleraLeftPosition</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dy</name> <operator>=</operator> <name><name>irisLeftPosition</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>scleraLeftPosition</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>angle</name> <operator>=</operator> <call><name>atan2f</name><argument_list>(<argument><expr><name>dy</name></expr></argument>, <argument><expr><name>dx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dxx</name> <operator>=</operator> <operator>(</operator><name>scleraRadius</name> <operator>-</operator> <name>irisRadius</name><operator>)</operator><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dyy</name> <operator>=</operator> <operator>(</operator><name>scleraRadius</name> <operator>-</operator> <name>irisRadius</name><operator>)</operator><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>irisLeftPosition</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>scleraLeftPosition</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>dxx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>irisLeftPosition</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>scleraLeftPosition</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>dyy</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CheckCollisionPointCircle</name><argument_list>(<argument><expr><name>irisRightPosition</name></expr></argument>, <argument><expr><name>scleraRightPosition</name></expr></argument>, <argument><expr><name>scleraRadius</name> <operator>-</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>dx</name> <operator>=</operator> <name><name>irisRightPosition</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>scleraRightPosition</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dy</name> <operator>=</operator> <name><name>irisRightPosition</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>scleraRightPosition</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>angle</name> <operator>=</operator> <call><name>atan2f</name><argument_list>(<argument><expr><name>dy</name></expr></argument>, <argument><expr><name>dx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dxx</name> <operator>=</operator> <operator>(</operator><name>scleraRadius</name> <operator>-</operator> <name>irisRadius</name><operator>)</operator><operator>*</operator><call><name>cosf</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dyy</name> <operator>=</operator> <operator>(</operator><name>scleraRadius</name> <operator>-</operator> <name>irisRadius</name><operator>)</operator><operator>*</operator><call><name>sinf</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>irisRightPosition</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>scleraRightPosition</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>dxx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>irisRightPosition</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>scleraRightPosition</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>dyy</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawCircleV</name><argument_list>(<argument><expr><name>scleraLeftPosition</name></expr></argument>, <argument><expr><name>scleraRadius</name></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawCircleV</name><argument_list>(<argument><expr><name>irisLeftPosition</name></expr></argument>, <argument><expr><name>irisRadius</name></expr></argument>, <argument><expr><name>BROWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawCircleV</name><argument_list>(<argument><expr><name>irisLeftPosition</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawCircleV</name><argument_list>(<argument><expr><name>scleraRightPosition</name></expr></argument>, <argument><expr><name>scleraRadius</name></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawCircleV</name><argument_list>(<argument><expr><name>irisRightPosition</name></expr></argument>, <argument><expr><name>irisRadius</name></expr></argument>, <argument><expr><name>DARKGREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawCircleV</name><argument_list>(<argument><expr><name>irisRightPosition</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawFPS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function></unit>
