<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\shapes\raygui.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAYGUI_VERSION</name></cpp:macro> <cpp:value>"2.5-dev"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RAYGUI_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYGUI_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BUILD_LIBTYPE_SHARED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAYGUIDEF</name></cpp:macro> <cpp:value>__declspec(dllexport) extern</cpp:value></cpp:define> 

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBTYPE_SHARED</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAYGUIDEF</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAYGUIDEF</name></cpp:macro> <cpp:value>extern "C"</cpp:value></cpp:define> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAYGUIDEF</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYGUI_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAYGUIDEF</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXTEDIT_CURSOR_BLINK_FRAMES</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_CONTROLS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_PROPS_DEFAULT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_PROPS_EXTENDED</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYGUI_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><enum>enum <block>{ <decl><name>false</name></decl>, <decl><name>true</name></decl> }</block></enum></type> <name>bool</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>Vector2</name> <block>{

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>

}</block></struct></type> <name>Vector2</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Vector3</name> <block>{

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>z</name></decl>;</decl_stmt>

}</block></struct></type> <name>Vector3</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Color</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>g</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>a</name></decl>;</decl_stmt>

}</block></struct></type> <name>Color</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Rectangle</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

}</block></struct></type> <name>Rectangle</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>Texture2D</name></name></type> <name>Texture2D</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>Font</name></name></type> <name>Font</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYGUI_TEXTBOX_EXTENDED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>GuiTextBoxState</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>cursor</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>select</name></decl>;</decl_stmt> 

}</block></struct></type> <name>GuiTextBoxState</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <block>{

<decl><name>GUI_STATE_NORMAL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>GUI_STATE_FOCUSED</name></decl>,

<decl><name>GUI_STATE_PRESSED</name></decl>,

<decl><name>GUI_STATE_DISABLED</name></decl>,

}</block></enum></type> <name>GuiControlState</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>GUI_TEXT_ALIGN_LEFT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>GUI_TEXT_ALIGN_CENTER</name></decl>,

<decl><name>GUI_TEXT_ALIGN_RIGHT</name></decl>,

}</block></enum></type> <name>GuiTextAlignment</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>LABEL</name></decl>, 

<decl><name>BUTTON</name></decl>, 

<decl><name>TOGGLE</name></decl>, 

<decl><name>SLIDER</name></decl>, 

<decl><name>PROGRESSBAR</name></decl>,

<decl><name>CHECKBOX</name></decl>,

<decl><name>COMBOBOX</name></decl>,

<decl><name>DROPDOWNBOX</name></decl>,

<decl><name>TEXTBOX</name></decl>, 

<decl><name>VALUEBOX</name></decl>,

<decl><name>SPINNER</name></decl>,

<decl><name>LISTVIEW</name></decl>,

<decl><name>COLORPICKER</name></decl>,

<decl><name>SCROLLBAR</name></decl>,

<decl><name>RESERVED</name></decl>

}</block></enum></type> <name>GuiControl</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>BORDER_COLOR_NORMAL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>BASE_COLOR_NORMAL</name></decl>,

<decl><name>TEXT_COLOR_NORMAL</name></decl>,

<decl><name>BORDER_COLOR_FOCUSED</name></decl>,

<decl><name>BASE_COLOR_FOCUSED</name></decl>,

<decl><name>TEXT_COLOR_FOCUSED</name></decl>,

<decl><name>BORDER_COLOR_PRESSED</name></decl>,

<decl><name>BASE_COLOR_PRESSED</name></decl>,

<decl><name>TEXT_COLOR_PRESSED</name></decl>,

<decl><name>BORDER_COLOR_DISABLED</name></decl>,

<decl><name>BASE_COLOR_DISABLED</name></decl>,

<decl><name>TEXT_COLOR_DISABLED</name></decl>,

<decl><name>BORDER_WIDTH</name></decl>,

<decl><name>INNER_PADDING</name></decl>,

<decl><name>TEXT_ALIGNMENT</name></decl>,

<decl><name>RESERVED02</name></decl>

}</block></enum></type> <name>GuiControlProperty</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>TEXT_SIZE</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>TEXT_SPACING</name></decl>,

<decl><name>LINE_COLOR</name></decl>,

<decl><name>BACKGROUND_COLOR</name></decl>,

}</block></enum></type> <name>GuiDefaultProperty</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>GROUP_PADDING</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

}</block></enum></type> <name>GuiToggleProperty</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>SLIDER_WIDTH</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>TEXT_PADDING</name></decl>

}</block></enum></type> <name>GuiSliderProperty</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>CHECK_TEXT_PADDING</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>

}</block></enum></type> <name>GuiCheckBoxProperty</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>SELECTOR_WIDTH</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>SELECTOR_PADDING</name></decl>

}</block></enum></type> <name>GuiComboBoxProperty</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>ARROW_RIGHT_PADDING</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

}</block></enum></type> <name>GuiDropdownBoxProperty</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>MULTILINE_PADDING</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>COLOR_SELECTED_FG</name></decl>,

<decl><name>COLOR_SELECTED_BG</name></decl>

}</block></enum></type> <name>GuiTextBoxProperty</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>SELECT_BUTTON_WIDTH</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>SELECT_BUTTON_PADDING</name></decl>,

<decl><name>SELECT_BUTTON_BORDER_WIDTH</name></decl>

}</block></enum></type> <name>GuiSpinnerProperty</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>ARROWS_SIZE</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>SLIDER_PADDING</name></decl>,

<decl><name>SLIDER_SIZE</name></decl>,

<decl><name>SCROLL_SPEED</name></decl>,

<decl><name>ARROWS_VISIBLE</name></decl>

}</block></enum></type> <name>GuiScrollBarProperty</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>SCROLLBAR_LEFT_SIDE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>SCROLLBAR_RIGHT_SIDE</name></decl>

}</block></enum></type> <name>GuiScrollBarSide</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>ELEMENTS_HEIGHT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>ELEMENTS_PADDING</name></decl>,

<decl><name>SCROLLBAR_WIDTH</name></decl>,

<decl><name>SCROLLBAR_SIDE</name></decl>, 

}</block></enum></type> <name>GuiListViewProperty</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>COLOR_SELECTOR_SIZE</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>BAR_WIDTH</name></decl>, 

<decl><name>BAR_PADDING</name></decl>, 

<decl><name>BAR_SELECTOR_HEIGHT</name></decl>, 

<decl><name>BAR_SELECTOR_PADDING</name></decl> 

}</block></enum></type> <name>GuiColorPickerProperty</name>;</typedef>

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiEnable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiDisable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiLock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiUnlock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiFont</name><parameter_list>(<parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiFade</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiSetStyle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>control</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>property</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>int</name></type> <name>GuiGetStyle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>control</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>property</name></decl></parameter>)</parameter_list>;</function_decl> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYGUI_TEXTBOX_EXTENDED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiTextBoxSetActive</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>Rectangle</name></type> <name>GuiTextBoxGetActive</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiTextBoxSetCursor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>int</name></type> <name>GuiTextBoxGetCursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiTextBoxSetSelection</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>Vector2</name></type> <name>GuiTextBoxGetSelection</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiTextBoxIsActive</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>GuiTextBoxState</name></type> <name>GuiTextBoxGetState</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiTextBoxSetState</name><parameter_list>(<parameter><decl><type><name>GuiTextBoxState</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiTextBoxSelectAll</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiTextBoxCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiTextBoxPaste</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>textSize</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiTextBoxCut</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>int</name></type> <name>GuiTextBoxDelete</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>before</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>int</name></type> <name>GuiTextBoxGetByteIndex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>)</parameter_list>;</function_decl> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiWindowBox</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiGroupBox</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiLine</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiPanel</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>Rectangle</name></type> <name>GuiScrollPanel</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>content</name></decl></parameter>, <parameter><decl><type><name>Vector2</name> <modifier>*</modifier></type><name>scroll</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiLabel</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiButton</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiLabelButton</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiImageButton</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiImageButtonEx</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>texSource</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiToggle</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>int</name></type> <name>GuiToggleGroup</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>active</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiCheckBox</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>checked</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>int</name></type> <name>GuiComboBox</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>active</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiDropdownBox</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>active</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>editMode</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiSpinner</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minValue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxValue</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>editMode</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiValueBox</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minValue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxValue</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>editMode</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiTextBox</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>textSize</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>editMode</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiTextBoxMulti</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>textSize</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>editMode</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>float</name></type> <name>GuiSlider</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>minValue</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>maxValue</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>showValue</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>float</name></type> <name>GuiSliderBar</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>minValue</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>maxValue</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>showValue</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>float</name></type> <name>GuiProgressBar</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>minValue</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>maxValue</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>showValue</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiStatusBar</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiDummyRec</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>int</name></type> <name>GuiScrollBar</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minValue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxValue</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>Vector2</name></type> <name>GuiGrid</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>spacing</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subdivs</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiListView</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>active</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>scrollIndex</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>editMode</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiListViewEx</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>enabled</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>active</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>focus</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>scrollIndex</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>editMode</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>int</name></type> <name>GuiMessageBox</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>windowTitle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buttons</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>int</name></type> <name>GuiTextInputBox</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>windowTitle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buttons</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>Color</name></type> <name>GuiColorPicker</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiLoadStyle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiLoadStyleProps</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiLoadStyleDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiUpdateStyleComplete</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RAYGUIDEF</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GuiIconText</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iconId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYGUI_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYGUI_RICONS_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYGUI_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RICONS_STANDALONE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RICONS_IMPLEMENTATION</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ricons.h"</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYGUI_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAYGUI_CLITERAL</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAYGUI_CLITERAL</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(name)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <block>{ <decl><name>BORDER</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>BASE</name></decl>, <decl><name>TEXT</name></decl>, <decl><name>OTHER</name></decl> }</block></enum></type> <name>GuiPropertyElement</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>GuiControlState</name></type> <name>guiState</name> <init>= <expr><name>GUI_STATE_NORMAL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>Font</name></type> <name>guiFont</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>guiLocked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>guiAlpha</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name><name>guiStyle</name><index>[<expr><name>NUM_CONTROLS</name><operator>*</operator><operator>(</operator><name>NUM_PROPS_DEFAULT</name> <operator>+</operator> <name>NUM_PROPS_EXTENDED</name><operator>)</operator></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>guiStyleLoaded</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYGUI_TEXTBOX_EXTENDED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>Rectangle</name></type> <name>guiTextBoxActive</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>GuiTextBoxState</name></type> <name>guiTextBoxState</name> <init>= <expr><block>{ <expr><operator>.</operator><name>cursor</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>select</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYGUI_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_RIGHT</name></cpp:macro> <cpp:value>262</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_LEFT</name></cpp:macro> <cpp:value>263</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_DOWN</name></cpp:macro> <cpp:value>264</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_UP</name></cpp:macro> <cpp:value>265</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_BACKSPACE</name></cpp:macro> <cpp:value>259</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_ENTER</name></cpp:macro> <cpp:value>257</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSE_LEFT_BUTTON</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>Vector2</name></type> <name>GetMousePosition</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GetMouseWheelMove</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>IsMouseButtonDown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>IsMouseButtonPressed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>IsMouseButtonReleased</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>IsKeyDown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>IsKeyPressed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GetKeyPressed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawRectangle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawRectangleGradientEx</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>col1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>col2</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>col3</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>col4</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawTriangle</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v3</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawTextureRec</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>sourceRec</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>Font</name></type> <name>GetFontDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>Vector2</name></type> <name>MeasureTextEx</name><parameter_list>(<parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>spacing</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawTextEx</name><parameter_list>(<parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>spacing</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>Font</name></type> <name>LoadFontEx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fontChars</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>charsCount</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>Color</name></type> <name>GetColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hexValue</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ColorToInt</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>Color</name></type> <name>Fade</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>CheckCollisionPointRec</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>point</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TextFormat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawRectangleRec</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawRectangleLinesEx</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineThick</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawRectangleGradientV</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>posX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color2</name></decl></parameter>)</parameter_list>;</function_decl> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>GuiListElement</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>editMode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>Vector3</name></type> <name>ConvertHSVtoRGB</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>hsv</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>Vector3</name></type> <name>ConvertRGBtoHSV</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>rgb</name></decl></parameter>)</parameter_list>;</function_decl> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>GetTextWidth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>size</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>text</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>MeasureTextEx</name><argument_list>(<argument><expr><name>guiFont</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SPACING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>size</name><operator>.</operator><name>x</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Rectangle</name></type> <name>GetTextBounds</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>control</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>textBounds</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>textBounds</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>textBounds</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>textBounds</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>textBounds</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>control</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>COMBOBOX</name></expr>:</case> <expr_stmt><expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-=</operator> <operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name>SELECTOR_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name>SELECTOR_PADDING</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>CHECKBOX</name></expr>:</case> <expr_stmt><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <operator>(</operator><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>control</name></expr></argument>, <argument><expr><name>CHECK_TEXT_PADDING</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>textBounds</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetTextIcon</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>iconId</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYGUI_RICONS_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>iconValue</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'#'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>iconValue</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>iconValue</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>iconId</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>iconValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>iconId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>text</name> <operator>+=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>text</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GuiDrawText</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALIGN_OFFSET</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)h%2)</cpp:value></cpp:define> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>text</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>iconId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>GetTextIcon</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iconId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICON_TEXT_PADDING</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name> <init>= <expr><block>{ <expr><name><name>bounds</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>bounds</name><operator>.</operator><name>y</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>textWidth</name> <init>= <expr><call><name>GetTextWidth</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>textHeight</name> <init>= <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYGUI_RICONS_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>iconId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>textWidth</name> <operator>+=</operator> <name>RICONS_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>text</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>textWidth</name> <operator>+=</operator> <name>ICON_TEXT_PADDING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name>alignment</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>GUI_TEXT_ALIGN_LEFT</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name>textHeight</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <call><name>VALIGN_OFFSET</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>GUI_TEXT_ALIGN_CENTER</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name>textWidth</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name>textHeight</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <call><name>VALIGN_OFFSET</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>GUI_TEXT_ALIGN_RIGHT</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>position</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name>textWidth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>position</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name>textHeight</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <call><name>VALIGN_OFFSET</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYGUI_RICONS_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICON_TEXT_PADDING</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name>iconId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<macro><name>DrawIcon</name><argument_list>(<argument>iconId</argument>, <argument>RAYGUI_CLITERAL(Vector2){ position.x</argument>, <argument>bounds.y + bounds.height/<literal type="number">2</literal> - RICONS_SIZE/<literal type="number">2</literal> + VALIGN_OFFSET(bounds.height) }</argument>, <argument><literal type="number">1</literal></argument>, <argument>tint</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>position</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <operator>(</operator><name>RICONS_SIZE</name> <operator>+</operator> <name>ICON_TEXT_PADDING</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DrawTextEx</name><argument_list>(<argument><expr><name>guiFont</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SPACING</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>GuiTextSplit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>textRow</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiEnable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>guiState</name> <operator>=</operator> <name>GUI_STATE_NORMAL</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiDisable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>guiState</name> <operator>=</operator> <name>GUI_STATE_DISABLED</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiLock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>guiLocked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiUnlock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>guiLocked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>guiState</name> <operator>=</operator> <operator>(</operator><name>GuiControlState</name><operator>)</operator><name>state</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiFont</name><parameter_list>(<parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>font</name><operator>.</operator><name>texture</name><operator>.</operator><name>id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>guiFont</name> <operator>=</operator> <name>font</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>, <argument><expr><name><name>font</name><operator>.</operator><name>baseSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiFade</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>alpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>alpha</name> <operator>&gt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>guiAlpha</name> <operator>=</operator> <name>alpha</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiSetStyle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>control</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>property</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>guiStyleLoaded</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GuiLoadStyleDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>guiStyle</name><index>[<expr><name>control</name><operator>*</operator><operator>(</operator><name>NUM_PROPS_DEFAULT</name> <operator>+</operator> <name>NUM_PROPS_EXTENDED</name><operator>)</operator> <operator>+</operator> <name>property</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>int</name></type> <name>GuiGetStyle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>control</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>property</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>guiStyleLoaded</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GuiLoadStyleDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>guiStyle</name><index>[<expr><name>control</name><operator>*</operator><operator>(</operator><name>NUM_PROPS_DEFAULT</name> <operator>+</operator> <name>NUM_PROPS_EXTENDED</name><operator>)</operator> <operator>+</operator> <name>property</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYGUI_TEXTBOX_EXTENDED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiTextBoxSetActive</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<expr_stmt><expr><name>guiTextBoxActive</name> <operator>=</operator> <name>bounds</name></expr>;</expr_stmt>

<expr_stmt><expr><name>guiTextBoxState</name> <operator>=</operator> <operator>(</operator><name>GuiTextBoxState</name><operator>)</operator><block>{ <expr><operator>.</operator><name>cursor</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>select</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>Rectangle</name></type> <name>GuiTextBoxGetActive</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>guiTextBoxActive</name></expr>;</return> </block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiTextBoxSetCursor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cursor</name></decl></parameter>)</parameter_list> 

<block>{<block_content> 

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>cursor</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>cursor</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>int</name></type> <name>GuiTextBoxGetCursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiTextBoxSetSelection</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GuiTextBoxSetCursor</name><argument_list>(<argument><expr><name>start</name> <operator>+</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>Vector2</name></type> <name>GuiTextBoxGetSelection</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>==</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <macro><name>RAYGUI_CLITERAL</name><argument_list>(<argument>Vector2</argument>)</argument_list></macro><expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>&gt;</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <macro><name>RAYGUI_CLITERAL</name><argument_list>(<argument>Vector2</argument>)</argument_list></macro><expr><block>{ <expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name></expr>, <expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>-</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name></expr> }</block></expr>;</return></block_content></block></if></if_stmt>

<return>return <macro><name>RAYGUI_CLITERAL</name><argument_list>(<argument>Vector2</argument>)</argument_list></macro><expr><block>{ <expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr>, <expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>-</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr> }</block></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiTextBoxIsActive</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>==</operator> <name><name>guiTextBoxActive</name><operator>.</operator><name>x</name></name> <operator>&amp;&amp;</operator> <name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>==</operator> <name><name>guiTextBoxActive</name><operator>.</operator><name>y</name></name> <operator>&amp;&amp;</operator> 

<name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>==</operator> <name><name>guiTextBoxActive</name><operator>.</operator><name>width</name></name> <operator>&amp;&amp;</operator> <name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>==</operator> <name><name>guiTextBoxActive</name><operator>.</operator><name>height</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>GuiTextBoxState</name></type> <name>GuiTextBoxGetState</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>guiTextBoxState</name></expr>;</return> </block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiTextBoxSetState</name><parameter_list>(<parameter><decl><type><name>GuiTextBoxState</name></type> <name>state</name></decl></parameter>)</parameter_list> 

<block>{<block_content> 

<expr_stmt><expr><name>guiTextBoxState</name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiWindowBox</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINDOW_CLOSE_BUTTON_PADDING</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINDOW_STATUSBAR_HEIGHT</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>clicked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>statusBar</name> <init>= <expr><block>{ <expr><name><name>bounds</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>bounds</name><operator>.</operator><name>y</name></name></expr>, <expr><name><name>bounds</name><operator>.</operator><name>width</name></name></expr>, <expr><name>WINDOW_STATUSBAR_HEIGHT</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>&lt;</operator> <name>WINDOW_STATUSBAR_HEIGHT</name><operator>*</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>WINDOW_STATUSBAR_HEIGHT</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>buttonRec</name> <init>= <expr><block>{ <expr><name><name>statusBar</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>statusBar</name><operator>.</operator><name>width</name></name> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>WINDOW_CLOSE_BUTTON_PADDING</name> <operator>-</operator> <literal type="number">20</literal></expr>,

<expr><name><name>statusBar</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>WINDOW_CLOSE_BUTTON_PADDING</name></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawRectangleRec</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ bounds.x + GuiGetStyle(DEFAULT, BORDER_WIDTH)</argument>, <argument>bounds.y + GuiGetStyle(DEFAULT, BORDER_WIDTH)</argument>,

<argument>bounds.width - GuiGetStyle(DEFAULT, BORDER_WIDTH)*<literal type="number">2</literal></argument>, <argument>bounds.height - GuiGetStyle(DEFAULT, BORDER_WIDTH)*<literal type="number">2</literal> }</argument>,

<argument>Fade(GetColor(GuiGetStyle(DEFAULT, BACKGROUND_COLOR)), guiAlpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>defaultPadding</name> <init>= <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>defaultTextAlign</name> <init>= <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>, <argument><expr><name>GUI_TEXT_ALIGN_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiStatusBar</name><argument_list>(<argument><expr><name>statusBar</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>, <argument><expr><name>defaultPadding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>, <argument><expr><name>defaultTextAlign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tempBorderWidth</name> <init>= <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tempTextAlignment</name> <init>= <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>, <argument><expr><name>GUI_TEXT_ALIGN_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYGUI_RICONS_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>clicked</name> <operator>=</operator> <call><name>GuiButton</name><argument_list>(<argument><expr><name>buttonRec</name></expr></argument>, <argument><expr><call><name>GuiIconText</name><argument_list>(<argument><expr><name>RICON_CROSS_SMALL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>clicked</name> <operator>=</operator> <call><name>GuiButton</name><argument_list>(<argument><expr><name>buttonRec</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>, <argument><expr><name>tempBorderWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>, <argument><expr><name>tempTextAlignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>clicked</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiGroupBox</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GROUPBOX_LINE_THICK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GROUPBOX_TEXT_PADDING</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GROUPBOX_PADDING</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>GROUPBOX_LINE_THICK</name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>state</name> <operator>==</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator></expr>?</condition><then> <expr><name>BORDER_COLOR_DISABLED</name></expr> </then><else>: <expr><name>LINE_COLOR</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name>GROUPBOX_LINE_THICK</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>state</name> <operator>==</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator></expr>?</condition><then> <expr><name>BORDER_COLOR_DISABLED</name></expr> </then><else>: <expr><name>LINE_COLOR</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>GROUPBOX_LINE_THICK</name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>state</name> <operator>==</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator></expr>?</condition><then> <expr><name>BORDER_COLOR_DISABLED</name></expr> </then><else>: <expr><name>LINE_COLOR</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>GuiLine</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ bounds.x</argument>, <argument>bounds.y</argument>, <argument>bounds.width</argument>, <argument><literal type="number">1</literal> }</argument>, <argument>text</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiLine</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_THICK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_TEXT_PADDING</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_TEXT_SPACING</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Color</name></type> <name>color</name> <init>= <expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>state</name> <operator>==</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator></expr>?</condition><then> <expr><name>BORDER_COLOR_DISABLED</name></expr> </then><else>: <expr><name>LINE_COLOR</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>textBounds</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>textBounds</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>GetTextWidth</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>LINE_TEXT_SPACING</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>textBounds</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>textBounds</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>LINE_TEXT_PADDING</name> <operator>+</operator> <name>LINE_TEXT_SPACING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>textBounds</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>LINE_TEXT_PADDING</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiLabel</name><argument_list>(<argument><expr><name>textBounds</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>textBounds</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>LINE_TEXT_PADDING</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>LINE_TEXT_SPACING</name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <operator>(</operator><name><name>textBounds</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>LINE_TEXT_PADDING</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>LINE_TEXT_SPACING</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiPanel</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PANEL_BORDER_WIDTH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>state</name> <operator>==</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator></expr>?</condition><then> <expr><name>BASE_COLOR_DISABLED</name></expr> </then><else>: <expr><name>BACKGROUND_COLOR</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><name>PANEL_BORDER_WIDTH</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>state</name> <operator>==</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator></expr>?</condition><then> <expr><name>BORDER_COLOR_DISABLED</name></expr></then><else>: <expr><name>LINE_COLOR</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>Rectangle</name></type> <name>GuiScrollPanel</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>content</name></decl></parameter>, <parameter><decl><type><name>Vector2</name> <modifier>*</modifier></type><name>scroll</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>scrollPos</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>scroll</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>scrollPos</name> <operator>=</operator> <operator>*</operator><name>scroll</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hasHorizontalScrollBar</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>content</name><operator>.</operator><name>width</name></name> <operator>&gt;</operator> <name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call><operator>)</operator></expr>?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hasVerticalScrollBar</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>content</name><operator>.</operator><name>height</name></name> <operator>&gt;</operator> <name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call><operator>)</operator></expr>?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasHorizontalScrollBar</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hasHorizontalScrollBar</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>hasVerticalScrollBar</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>content</name><operator>.</operator><name>width</name></name> <operator>&gt;</operator> <operator>(</operator><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>SCROLLBAR_WIDTH</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator></expr>?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasVerticalScrollBar</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hasVerticalScrollBar</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>hasHorizontalScrollBar</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>content</name><operator>.</operator><name>height</name></name> <operator>&gt;</operator> <operator>(</operator><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>SCROLLBAR_WIDTH</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator></expr>?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>horizontalScrollBarWidth</name> <init>= <expr><ternary><condition><expr><name>hasHorizontalScrollBar</name></expr>?</condition><then> <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>SCROLLBAR_WIDTH</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>verticalScrollBarWidth</name> <init>= <expr><ternary><condition><expr><name>hasVerticalScrollBar</name></expr>?</condition><then> <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>SCROLLBAR_WIDTH</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Rectangle</name></type> <name>horizontalScrollBar</name> <init>= <expr><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>SCROLLBAR_SIDE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SCROLLBAR_LEFT_SIDE</name><operator>)</operator> <operator>?</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>verticalScrollBarWidth</name> <operator>:</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name>horizontalScrollBarWidth</name> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name>verticalScrollBarWidth</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>horizontalScrollBarWidth</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Rectangle</name></type> <name>verticalScrollBar</name> <init>= <expr><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>SCROLLBAR_SIDE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SCROLLBAR_LEFT_SIDE</name><operator>)</operator> <operator>?</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>:</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name>verticalScrollBarWidth</name> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call><operator>)</operator></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>verticalScrollBarWidth</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name>horizontalScrollBarWidth</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><macro><name>GuiGetStyle</name><argument_list>(<argument>DEFAULT</argument>, <argument>BORDER_WIDTH</argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>view</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>SCROLLBAR_SIDE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SCROLLBAR_LEFT_SIDE</name><operator>)</operator></expr>?</condition><then>

<macro><name>RAYGUI_CLITERAL</name><argument_list>(<argument>Rectangle</argument>)</argument_list></macro><expr><block>{ <expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>verticalScrollBarWidth</name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>verticalScrollBarWidth</name></expr>, <expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>horizontalScrollBarWidth</name></expr> }</block></expr> </then><else>:

<macro><name>RAYGUI_CLITERAL</name><argument_list>(<argument>Rectangle</argument>)</argument_list></macro><expr><block>{ <expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>verticalScrollBarWidth</name></expr>, <expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>horizontalScrollBarWidth</name></expr> }</block></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>view</name><operator>.</operator><name>width</name></name> <operator>&gt;</operator> <name><name>content</name><operator>.</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>view</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>content</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>view</name><operator>.</operator><name>height</name></name> <operator>&gt;</operator> <name><name>content</name><operator>.</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>view</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>content</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>horizontalMin</name> <init>= <expr><ternary><condition><expr><name>hasHorizontalScrollBar</name></expr>?</condition><then> <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>SCROLLBAR_SIDE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SCROLLBAR_LEFT_SIDE</name><operator>)</operator></expr>?</condition><then> <expr><operator>-</operator><name>verticalScrollBarWidth</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>SCROLLBAR_SIDE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SCROLLBAR_LEFT_SIDE</name><operator>)</operator></expr>?</condition><then> <expr><operator>-</operator><name>verticalScrollBarWidth</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>horizontalMax</name> <init>= <expr><ternary><condition><expr><name>hasHorizontalScrollBar</name></expr>?</condition><then> <expr><name><name>content</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>verticalScrollBarWidth</name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>SCROLLBAR_SIDE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SCROLLBAR_LEFT_SIDE</name><operator>)</operator></expr>?</condition><then> <expr><name>verticalScrollBarWidth</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><operator>-</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>verticalMin</name> <init>= <expr><ternary><condition><expr><name>hasVerticalScrollBar</name></expr>?</condition><then> <expr><operator>-</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>verticalMax</name> <init>= <expr><ternary><condition><expr><name>hasVerticalScrollBar</name></expr>?</condition><then> <expr><name><name>content</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>+</operator> <name>horizontalScrollBarWidth</name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>guiLocked</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePoint</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_PRESSED</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_FOCUSED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hasHorizontalScrollBar</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_RIGHT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>scrollPos</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SCROLL_SPEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_LEFT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>scrollPos</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SCROLL_SPEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hasVerticalScrollBar</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_DOWN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>scrollPos</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SCROLL_SPEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_UP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>scrollPos</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SCROLL_SPEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>scrollPos</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <call><name>GetMouseWheelMove</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">20</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>scrollPos</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <operator>-</operator><name>horizontalMin</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>scrollPos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><name>horizontalMin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>scrollPos</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <operator>-</operator><name>horizontalMax</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>scrollPos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><name>horizontalMax</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>scrollPos</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <operator>-</operator><name>verticalMin</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>scrollPos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><name>verticalMin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>scrollPos</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <operator>-</operator><name>verticalMax</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>scrollPos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><name>verticalMax</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BACKGROUND_COLOR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slider</name> <init>= <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SLIDER_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hasHorizontalScrollBar</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SLIDER_SIZE</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>verticalScrollBarWidth</name><operator>)</operator><operator>/</operator><name><name>content</name><operator>.</operator><name>width</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>verticalScrollBarWidth</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scrollPos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><call><name>GuiScrollBar</name><argument_list>(<argument><expr><name>horizontalScrollBar</name></expr></argument>, <argument><expr><operator>-</operator><name><name>scrollPos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>horizontalMin</name></expr></argument>, <argument><expr><name>horizontalMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hasVerticalScrollBar</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SLIDER_SIZE</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>horizontalScrollBarWidth</name><operator>)</operator><operator>/</operator><name><name>content</name><operator>.</operator><name>height</name></name><operator>)</operator><operator>*</operator> <operator>(</operator><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>horizontalScrollBarWidth</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scrollPos</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><call><name>GuiScrollBar</name><argument_list>(<argument><expr><name>verticalScrollBar</name></expr></argument>, <argument><expr><operator>-</operator><name><name>scrollPos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>verticalMin</name></expr></argument>, <argument><expr><name>verticalMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hasHorizontalScrollBar</name> <operator>&amp;&amp;</operator> <name>hasVerticalScrollBar</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>horizontalScrollBar</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>horizontalScrollBar</name><operator>.</operator><name>width</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>verticalScrollBar</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>verticalScrollBar</name><operator>.</operator><name>height</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name>horizontalScrollBarWidth</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>verticalScrollBarWidth</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>,

<argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>TEXT</name> <operator>+</operator> <operator>(</operator><name>state</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SLIDER_SIZE</name></expr></argument>, <argument><expr><name>slider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>BORDER</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>scroll</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>scroll</name> <operator>=</operator> <name>scrollPos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>view</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiLabel</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GuiDrawText</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>GetTextBounds</name><argument_list>(<argument><expr><name>LABEL</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LABEL</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LABEL</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>state</name> <operator>==</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator></expr>?</condition><then> <expr><name>TEXT_COLOR_DISABLED</name></expr> </then><else>: <expr><name>TEXT_COLOR_NORMAL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiButton</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>pressed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>guiLocked</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePoint</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_PRESSED</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_FOCUSED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonReleased</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BASE</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiDrawText</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>GetTextBounds</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>TEXT</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pressed</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiLabelButton</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>pressed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>guiLocked</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePoint</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_PRESSED</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_FOCUSED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonReleased</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GuiDrawText</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>GetTextBounds</name><argument_list>(<argument><expr><name>LABEL</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LABEL</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LABEL</name></expr></argument>, <argument><expr><name>TEXT</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pressed</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiImageButton</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <macro><name>GuiImageButtonEx</name><argument_list>(<argument>bounds</argument>, <argument>texture</argument>, <argument>RAYGUI_CLITERAL(Rectangle){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>(float)texture.width</argument>, <argument>(float)texture.height }</argument>, <argument>NULL</argument>)</argument_list></macro>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiImageButtonEx</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>texSource</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>clicked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>guiLocked</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePoint</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_PRESSED</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsMouseButtonReleased</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>clicked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_FOCUSED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BASE</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GuiDrawText</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>GetTextBounds</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>TEXT</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>texture</name><operator>.</operator><name>id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <macro><name>DrawTextureRec</name><argument_list>(<argument>texture</argument>, <argument>texSource</argument>, <argument>RAYGUI_CLITERAL(Vector2){ bounds.x + bounds.width/<literal type="number">2</literal> - (texSource.width + GuiGetStyle(BUTTON, INNER_PADDING)/<literal type="number">2</literal>)/<literal type="number">2</literal></argument>, <argument>bounds.y + bounds.height/<literal type="number">2</literal> - texSource.height/<literal type="number">2</literal> }</argument>, <argument>Fade(GetColor(GuiGetStyle(BUTTON, TEXT + (state*<literal type="number">3</literal>))), guiAlpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>clicked</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiToggle</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>guiLocked</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePoint</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_PRESSED</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsMouseButtonReleased</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_NORMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>active</name> <operator>=</operator> <operator>!</operator><name>active</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_FOCUSED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>GUI_STATE_NORMAL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>active</name></expr>?</condition><then> <expr><name>BORDER_COLOR_PRESSED</name></expr> </then><else>: <expr><operator>(</operator><name>BORDER</name> <operator>+</operator> <name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>active</name></expr>?</condition><then> <expr><name>BASE_COLOR_PRESSED</name></expr> </then><else>: <expr><operator>(</operator><name>BASE</name> <operator>+</operator> <name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiDrawText</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>GetTextBounds</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>active</name></expr>?</condition><then> <expr><name>TEXT_COLOR_PRESSED</name></expr> </then><else>: <expr><operator>(</operator><name>TEXT</name> <operator>+</operator> <name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>, <argument><expr><name>BORDER</name> <operator>+</operator> <name>state</name><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>, <argument><expr><name>BASE</name> <operator>+</operator> <name>state</name><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiDrawText</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>GetTextBounds</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>, <argument><expr><name>TEXT</name> <operator>+</operator> <name>state</name><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>active</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>int</name></type> <name>GuiToggleGroup</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>active</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>initBoundsX</name> <init>= <expr><name><name>bounds</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>rows</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>elementsCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>elementsPtrs</name> <init>= <expr><call><name>GuiTextSplit</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elementsCount</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prevRow</name> <init>= <expr><name><name>rows</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>elementsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>prevRow</name> <operator>!=</operator> <name><name>rows</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>initBoundsX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <operator>(</operator><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>, <argument><expr><name>GROUP_PADDING</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prevRow</name> <operator>=</operator> <name><name>rows</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>active</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GuiToggle</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><name><name>elementsPtrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>GuiToggle</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><name><name>elementsPtrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>active</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <operator>(</operator><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>, <argument><expr><name>GROUP_PADDING</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>active</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiCheckBox</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>checked</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>textBounds</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>textBounds</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>CHECKBOX</name></expr></argument>, <argument><expr><name>CHECK_TEXT_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>textBounds</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>textBounds</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>GetTextWidth</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>textBounds</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>guiLocked</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePoint</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><macro><name>CheckCollisionPointRec</name><argument_list>(<argument>mousePoint</argument>, <argument>RAYGUI_CLITERAL(Rectangle){ bounds.x</argument>, <argument>bounds.y</argument>, <argument>bounds.width + textBounds.width + GuiGetStyle(CHECKBOX, CHECK_TEXT_PADDING)</argument>, <argument>bounds.height }</argument>)</argument_list></macro></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_PRESSED</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_FOCUSED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonReleased</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>checked</name> <operator>=</operator> <operator>!</operator><name>checked</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>CHECKBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>CHECKBOX</name></expr></argument>, <argument><expr><name>BORDER</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>checked</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>CHECKBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>CHECKBOX</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>CHECKBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>CHECKBOX</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>CHECKBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>CHECKBOX</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,

<argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>CHECKBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>CHECKBOX</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,

<argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>CHECKBOX</name></expr></argument>, <argument><expr><name>TEXT</name> <operator>+</operator> <name>state</name><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GuiDrawText</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>textBounds</name></expr></argument>, <argument><expr><name>GUI_TEXT_ALIGN_LEFT</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LABEL</name></expr></argument>, <argument><expr><name>TEXT</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>checked</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>int</name></type> <name>GuiComboBox</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>active</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-=</operator> <operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COMBOBOX</name></expr></argument>, <argument><expr><name>SELECTOR_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COMBOBOX</name></expr></argument>, <argument><expr><name>SELECTOR_PADDING</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>selector</name> <init>= <expr><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COMBOBOX</name></expr></argument>, <argument><expr><name>SELECTOR_PADDING</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>y</name></name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COMBOBOX</name></expr></argument>, <argument><expr><name>SELECTOR_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>height</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>elementsCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>elementsPtrs</name> <init>= <expr><call><name>GuiTextSplit</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elementsCount</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>active</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>active</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>active</name> <operator>&gt;</operator> <name>elementsCount</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>active</name> <operator>=</operator> <name>elementsCount</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>guiLocked</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePoint</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>active</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>active</name> <operator>&gt;=</operator> <name>elementsCount</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>active</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_PRESSED</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_FOCUSED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COMBOBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COMBOBOX</name></expr></argument>, <argument><expr><name>BORDER</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COMBOBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COMBOBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COMBOBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COMBOBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COMBOBOX</name></expr></argument>, <argument><expr><name>BASE</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiDrawText</name><argument_list>(<argument><expr><name><name>elementsPtrs</name><index>[<expr><name>active</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>GetTextBounds</name><argument_list>(<argument><expr><name>COMBOBOX</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COMBOBOX</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COMBOBOX</name></expr></argument>, <argument><expr><name>TEXT</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tempBorderWidth</name> <init>= <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tempTextAlign</name> <init>= <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>, <argument><expr><name>GUI_TEXT_ALIGN_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiButton</name><argument_list>(<argument><expr><name>selector</name></expr></argument>, <argument><expr><call><name>TextFormat</name><argument_list>(<argument><expr><literal type="string">"%i/%i"</literal></expr></argument>, <argument><expr><name>active</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>elementsCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>, <argument><expr><name>tempTextAlign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>, <argument><expr><name>tempBorderWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>active</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiDropdownBox</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>active</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>editMode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>elementsCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>elementsPtrs</name> <init>= <expr><call><name>GuiTextSplit</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elementsCount</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>pressed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>auxActive</name> <init>= <expr><operator>*</operator><name>active</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>closeBounds</name> <init>= <expr><name>bounds</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>openBounds</name> <init>= <expr><name>bounds</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>openBounds</name><operator>.</operator><name>height</name></name> <operator>*=</operator> <operator>(</operator><name>elementsCount</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>guiLocked</name> <operator>&amp;&amp;</operator> <name>editMode</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>guiLocked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>guiLocked</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePoint</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>editMode</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_PRESSED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>editMode</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>closeBounds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_PRESSED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_FOCUSED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>closeBounds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>openBounds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IsMouseButtonReleased</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tempTextAlign</name> <init>= <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DROPDOWNBOX</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>state</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>GUI_STATE_NORMAL</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DROPDOWNBOX</name></expr></argument>, <argument><expr><name>BASE_COLOR_NORMAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DROPDOWNBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DROPDOWNBOX</name></expr></argument>, <argument><expr><name>BORDER_COLOR_NORMAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>GuiListElement</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ bounds.x</argument>, <argument>bounds.y</argument>, <argument>bounds.width</argument>, <argument>bounds.height }</argument>, <argument>elementsPtrs[auxActive]</argument>, <argument>false</argument>, <argument>false</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>GUI_STATE_FOCUSED</name></expr>:</case>

<block>{<block_content>

<macro><name>GuiListElement</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ bounds.x</argument>, <argument>bounds.y</argument>, <argument>bounds.width</argument>, <argument>bounds.height }</argument>, <argument>elementsPtrs[auxActive]</argument>, <argument>false</argument>, <argument>editMode</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>GUI_STATE_PRESSED</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>editMode</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>GuiListElement</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ bounds.x</argument>, <argument>bounds.y</argument>, <argument>bounds.width</argument>, <argument>bounds.height }</argument>, <argument>elementsPtrs[auxActive]</argument>, <argument>true</argument>, <argument>true</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>editMode</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GuiPanel</name><argument_list>(<argument><expr><name>openBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>GuiListElement</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ bounds.x</argument>, <argument>bounds.y</argument>, <argument>bounds.width</argument>, <argument>bounds.height }</argument>, <argument>elementsPtrs[auxActive]</argument>, <argument>true</argument>, <argument>true</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>elementsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>auxActive</name> <operator>&amp;&amp;</operator> <name>editMode</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><macro><name>GuiListElement</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ bounds.x</argument>, <argument>bounds.y + bounds.height*(i + <literal type="number">1</literal>) + GuiGetStyle(DROPDOWNBOX, INNER_PADDING)</argument>,

<argument>bounds.width</argument>, <argument>bounds.height - GuiGetStyle(DROPDOWNBOX, INNER_PADDING) }</argument>,

<argument>elementsPtrs[i]</argument>, <argument>true</argument>, <argument>true</argument>)</argument_list></macro> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><macro><name>GuiListElement</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ bounds.x</argument>, <argument>bounds.y + bounds.height*(i+<literal type="number">1</literal>) + GuiGetStyle(DROPDOWNBOX, INNER_PADDING)</argument>,

<argument>bounds.width</argument>, <argument>bounds.height - GuiGetStyle(DROPDOWNBOX, INNER_PADDING) }</argument>,

<argument>elementsPtrs[i]</argument>, <argument>false</argument>, <argument>true</argument>)</argument_list></macro></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>auxActive</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>GUI_STATE_DISABLED</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DROPDOWNBOX</name></expr></argument>, <argument><expr><name>BASE_COLOR_DISABLED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DROPDOWNBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DROPDOWNBOX</name></expr></argument>, <argument><expr><name>BORDER_COLOR_DISABLED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>GuiListElement</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ bounds.x</argument>, <argument>bounds.y</argument>, <argument>bounds.width</argument>, <argument>bounds.height }</argument>, <argument>elementsPtrs[auxActive]</argument>, <argument>false</argument>, <argument>false</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>, <argument><expr><name>tempTextAlign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawTriangle</name><argument_list>(<argument>RAYGUI_CLITERAL(Vector2){ bounds.x + bounds.width - GuiGetStyle(DROPDOWNBOX, ARROW_RIGHT_PADDING)</argument>, <argument>bounds.y + bounds.height/<literal type="number">2</literal> - <literal type="number">2</literal> }</argument>,

<argument>RAYGUI_CLITERAL(Vector2){ bounds.x + bounds.width - GuiGetStyle(DROPDOWNBOX, ARROW_RIGHT_PADDING) + <literal type="number">5</literal></argument>, <argument>bounds.y + bounds.height/<literal type="number">2</literal> - <literal type="number">2</literal> + <literal type="number">5</literal> }</argument>,

<argument>RAYGUI_CLITERAL(Vector2){ bounds.x + bounds.width - GuiGetStyle(DROPDOWNBOX, ARROW_RIGHT_PADDING) + <literal type="number">10</literal></argument>, <argument>bounds.y + bounds.height/<literal type="number">2</literal> - <literal type="number">2</literal> }</argument>,

<argument>Fade(GetColor(GuiGetStyle(DROPDOWNBOX, TEXT + (state*<literal type="number">3</literal>))), guiAlpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>*</operator><name>active</name> <operator>=</operator> <name>auxActive</name></expr>;</expr_stmt>

<return>return <expr><name>pressed</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYGUI_TEXTBOX_EXTENDED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiSpinner</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minValue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxValue</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>editMode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUI_SPINNER_HOLD_SPEED</name></cpp:macro> <cpp:value>0.2f</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>timer</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tempValue</name> <init>= <expr><operator>*</operator><name>value</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>time</name> <init>= <expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>pressed</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>active</name> <init>= <expr><call><name>GuiTextBoxIsActive</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>spinner</name> <init>= <expr><block>{ <expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SPINNER</name></expr></argument>, <argument><expr><name>SELECT_BUTTON_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SPINNER</name></expr></argument>, <argument><expr><name>SELECT_BUTTON_PADDING</name></expr></argument>)</argument_list></call></expr>, <expr><name><name>bounds</name><operator>.</operator><name>y</name></name></expr>,

<expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SPINNER</name></expr></argument>, <argument><expr><name>SELECT_BUTTON_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SPINNER</name></expr></argument>, <argument><expr><name>SELECT_BUTTON_PADDING</name></expr></argument>)</argument_list></call><operator>)</operator></expr>, <expr><name><name>bounds</name><operator>.</operator><name>height</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>leftButtonBound</name> <init>= <expr><block>{ <expr><name><name>bounds</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>bounds</name><operator>.</operator><name>y</name></name></expr>, <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SPINNER</name></expr></argument>, <argument><expr><name>SELECT_BUTTON_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><name><name>bounds</name><operator>.</operator><name>height</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>rightButtonBound</name> <init>= <expr><block>{ <expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SPINNER</name></expr></argument>, <argument><expr><name>SELECT_BUTTON_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><name><name>bounds</name><operator>.</operator><name>y</name></name></expr>, <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SPINNER</name></expr></argument>, <argument><expr><name>SELECT_BUTTON_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><name><name>bounds</name><operator>.</operator><name>height</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mouse</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tempValue</name> <operator>&lt;</operator> <name>minValue</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tempValue</name> <operator>=</operator> <name>minValue</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tempValue</name> <operator>&gt;</operator> <name>maxValue</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tempValue</name> <operator>=</operator> <name>maxValue</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>editMode</name></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>active</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> 

<call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mouse</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GuiTextBoxSetActive</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mouse</name></expr></argument>, <argument><expr><name>leftButtonBound</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mouse</name></expr></argument>, <argument><expr><name>rightButtonBound</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> 

<call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>timer</name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GuiTextBoxIsActive</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>guiTextBoxActive</name> <operator>=</operator> <name>spinner</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>pressed</name> <operator>=</operator> <call><name>GuiValueBox</name><argument_list>(<argument><expr><name>spinner</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tempValue</name></expr></argument>, <argument><expr><name>minValue</name></expr></argument>, <argument><expr><name>maxValue</name></expr></argument>, <argument><expr><name>editMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GuiTextBoxIsActive</name><argument_list>(<argument><expr><name>spinner</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>guiTextBoxActive</name> <operator>=</operator> <name>bounds</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tempBorderWidth</name> <init>= <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SPINNER</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tempTextAlign</name> <init>= <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>, <argument><expr><name>GUI_TEXT_ALIGN_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>icon</name> <init>= <expr><literal type="string">"&lt;"</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYGUI_RICONS_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>icon</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>GuiIconText</name><argument_list>(<argument><expr><name>RICON_ARROW_LEFT_FILL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>GuiButton</name><argument_list>(<argument><expr><name>leftButtonBound</name></expr></argument>, <argument><expr><name>icon</name></expr></argument>)</argument_list></call> <operator>||</operator> 

<operator>(</operator><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 

<call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mouse</name></expr></argument>, <argument><expr><name>leftButtonBound</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 

<operator>(</operator><name>time</name> <operator>-</operator> <name>timer</name><operator>)</operator> <operator>&gt;</operator> <name>GUI_SPINNER_HOLD_SPEED</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tempValue</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>icon</name> <operator>=</operator> <literal type="string">"&gt;"</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYGUI_RICONS_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>icon</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>GuiIconText</name><argument_list>(<argument><expr><name>RICON_ARROW_RIGHT_FILL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><call><name>GuiButton</name><argument_list>(<argument><expr><name>rightButtonBound</name></expr></argument>, <argument><expr><name>icon</name></expr></argument>)</argument_list></call> <operator>||</operator> 

<operator>(</operator><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 

<call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mouse</name></expr></argument>, <argument><expr><name>rightButtonBound</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 

<operator>(</operator><name>time</name> <operator>-</operator> <name>timer</name><operator>)</operator> <operator>&gt;</operator> <name>GUI_SPINNER_HOLD_SPEED</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>tempValue</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>, <argument><expr><name>tempTextAlign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>, <argument><expr><name>tempBorderWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tempValue</name> <operator>&lt;</operator> <name>minValue</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tempValue</name> <operator>=</operator> <name>minValue</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tempValue</name> <operator>&gt;</operator> <name>maxValue</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tempValue</name> <operator>=</operator> <name>maxValue</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>active</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>time</name> <operator>-</operator> <name>timer</name><operator>)</operator> <operator>&gt;</operator> <name>GUI_SPINNER_HOLD_SPEED</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>timer</name> <operator>==</operator> <literal type="number">0.0f</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>timer</name> <operator>&gt;</operator> <name>time</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>timer</name> <operator>=</operator> <name>time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>tempValue</name></expr>;</expr_stmt>

<return>return <expr><name>pressed</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiValueBox</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minValue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxValue</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>editMode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALUEBOX_MAX_CHARS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name></type> <name><name>text</name><index>[<expr><name>VALUEBOX_MAX_CHARS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><operator>*</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>pressed</name> <init>= <expr><call><name>GuiTextBox</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>VALUEBOX_MAX_CHARS</name></expr></argument>, <argument><expr><name>editMode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>&gt;</operator> <name>maxValue</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>maxValue</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>value</name> <operator>&lt;</operator> <name>minValue</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>minValue</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>pressed</name></expr>;</return>

</block_content>}</block></function>

<enum>enum <block>{

<decl><name>GUI_MEASURE_MODE_CURSOR_END</name> <init>= <expr><literal type="number">0xA</literal></expr></init></decl>,

<decl><name>GUI_MEASURE_MODE_CURSOR_POS</name></decl>,

<decl><name>GUI_MEASURE_MODE_CURSOR_COORDS</name></decl>,

}</block>;</enum>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GuiMeasureTextBox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>Font</name></type> <name>font</name> <init>= <expr><name>guiFont</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>fontSize</name> <init>= <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>spacing</name> <init>= <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SPACING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>textOffsetX</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>scaleFactor</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>letter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>scaleFactor</name> <operator>=</operator> <name>fontSize</name><operator>/</operator><name><name>font</name><operator>.</operator><name>baseSize</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>glyphWidth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>glyphWidth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>letter</name> <operator>=</operator> <call><name>GetNextCodepoint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>letter</name> <operator>==</operator> <literal type="number">0x3f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>next</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>GetGlyphIndex</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>letter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>next</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>letter</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>glyphWidth</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>advanceX</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then>

<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>width</name></name><operator>*</operator><name>scaleFactor</name> <operator>+</operator> <name>spacing</name><operator>)</operator></expr></then><else>:

<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>advanceX</name><operator>*</operator><name>scaleFactor</name> <operator>+</operator> <name>spacing</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>textOffsetX</name> <operator>+</operator> <name>glyphWidth</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;=</operator> <name><name>rec</name><operator>.</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>==</operator> <name>GUI_MEASURE_MODE_CURSOR_POS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>pos</name> <operator>==</operator> <name>k</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>GUI_MEASURE_MODE_CURSOR_COORDS</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>grec</name> <init>= <expr><block>{<expr><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>textOffsetX</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name><name>rec</name><operator>.</operator><name>y</name></name></expr>, <expr><name>glyphWidth</name></expr>, <expr><operator>(</operator><name><name>font</name><operator>.</operator><name>baseSize</name></name> <operator>+</operator> <name><name>font</name><operator>.</operator><name>baseSize</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>scaleFactor</name> <operator>-</operator> <literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mouse</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mouse</name></expr></argument>, <argument><expr><name>grec</name></expr></argument>)</argument_list></call></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mouse</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <operator>(</operator><name><name>grec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>glyphWidth</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>textOffsetX</name> <operator>+=</operator> <name>glyphWidth</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt>

<expr_stmt><expr><name>textOffsetX</name> <operator>+=</operator> <name>glyphWidth</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>textOffsetX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GetPrevCodepoint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0x3f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>text</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>prev</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>p</name> <operator>&gt;=</operator> <name>start</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</condition> <incr><expr><name>p</name><operator>--</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>GetNextCodepoint</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GuiMeasureTextBoxRev</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>Font</name></type> <name>font</name> <init>= <expr><name>guiFont</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>fontSize</name> <init>= <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>spacing</name> <init>= <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SPACING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>textOffsetX</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>scaleFactor</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>letter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>scaleFactor</name> <operator>=</operator> <name>fontSize</name><operator>/</operator><name><name>font</name><operator>.</operator><name>baseSize</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>glyphWidth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>prev</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>length</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>glyphWidth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>letter</name> <operator>=</operator> <call><name>GetPrevCodepoint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>letter</name> <operator>==</operator> <literal type="number">0x3f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>prev</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>GetGlyphIndex</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>letter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <name>prev</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>letter</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>glyphWidth</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>advanceX</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then>

<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>rec</name><operator>.</operator><name>width</name></name><operator>*</operator><name>scaleFactor</name> <operator>+</operator> <name>spacing</name><operator>)</operator></expr></then><else>:

<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>advanceX</name><operator>*</operator><name>scaleFactor</name> <operator>+</operator> <name>spacing</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>textOffsetX</name> <operator>+</operator> <name>glyphWidth</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;=</operator> <name><name>rec</name><operator>.</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt>

<expr_stmt><expr><name>textOffsetX</name> <operator>+=</operator> <name>glyphWidth</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>i</name> <operator>+</operator> <name>prev</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>GuiTextBoxGetCursorCoordinates</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>GuiMeasureTextBox</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>GUI_MEASURE_MODE_CURSOR_POS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>GuiTextBoxGetCursorFromMouse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>GuiMeasureTextBox</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>GUI_MEASURE_MODE_CURSOR_COORDS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>GuiTextBoxMaxCharacters</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GuiMeasureTextBox</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>GUI_MEASURE_MODE_CURSOR_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pos</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>GuiCountCodepointsUntilNewline</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>letter</name> <init>= <expr><call><name>GetNextCodepoint</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>letter</name> <operator>==</operator> <literal type="number">0x3f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>MoveTextBoxCursorRight</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>textRec</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>GuiCountCodepointsUntilNewline</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>&lt;</operator> <name>count</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max</name> <init>= <expr><call><name>GuiTextBoxMaxCharacters</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name>textRec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>-</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name><operator>)</operator> <operator>&gt;</operator> <name>max</name></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cidx</name> <init>= <expr><call><name>GuiTextBoxGetByteIndex</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name> <operator>=</operator> <call><name>GuiMeasureTextBoxRev</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>cidx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>textRec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>-</operator> <name>pos</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>MoveTextBoxCursorLeft</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>text</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>&lt;</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>letter</name> <init>= <expr><call><name>GetPrevCodepoint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>letter</name> <operator>==</operator> <literal type="number">0x3f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>prev</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name> <operator>-=</operator> <name>prev</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>int</name></type> <name>GuiTextBoxGetByteIndex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><name>from</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>k</name> <operator>&lt;</operator> <name>to</name><operator>)</operator></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>letter</name> <init>= <expr><call><name>GetNextCodepoint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>letter</name> <operator>==</operator> <literal type="number">0x3f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>k</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>int</name></type> <name>GuiTextBoxDelete</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>before</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>text</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>startIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>endIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>!=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>&gt;</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>startIdx</name> <operator>=</operator> <call><name>GuiTextBoxGetByteIndex</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endIdx</name> <operator>=</operator> <call><name>GuiTextBoxGetByteIndex</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>&lt;</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>before</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>endIdx</name> <operator>=</operator> <call><name>GuiTextBoxGetByteIndex</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>startIdx</name> <operator>=</operator> <call><name>GuiTextBoxGetByteIndex</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>&lt;</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <call><name>GuiCountCodepointsUntilNewline</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>startIdx</name> <operator>=</operator> <call><name>GuiTextBoxGetByteIndex</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endIdx</name> <operator>=</operator> <call><name>GuiTextBoxGetByteIndex</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>startIdx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>endIdx</name></expr>]</index></name></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <name>endIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>length</name> <operator>-</operator> <operator>(</operator><name>endIdx</name> <operator>-</operator> <name>startIdx</name><operator>)</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<return>return <expr><operator>(</operator><name>endIdx</name> <operator>-</operator> <name>startIdx</name><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiTextBoxSelectAll</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <call><name>GuiCountCodepointsUntilNewline</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiTextBoxCopy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>text</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> 

<operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> 

<operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>!=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>&gt;</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>GuiTextBoxGetByteIndex</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>GuiTextBoxGetByteIndex</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clipText</name> <init>= <expr><call><name>TextSubtext</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetClipboardText</name><argument_list>(<argument><expr><name>clipText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiTextBoxPaste</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>textSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clipText</name> <init>= <expr><call><name>GetClipboardText</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>text</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>clipText</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>!=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>-=</operator> <call><name>GuiTextBoxDelete</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>clipLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>clipText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>length</name> <operator>+</operator> <name>clipLen</name><operator>)</operator> <operator>&lt;=</operator> <name>textSize</name><operator>)</operator></expr> ?</condition><then> <expr><name>clipLen</name></expr> </then><else>: <expr><name>textSize</name> <operator>-</operator> <name>length</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>startIdx</name> <init>= <expr><call><name>GuiTextBoxGetByteIndex</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>endIdx</name> <init>= <expr><name>startIdx</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>endIdx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>startIdx</name></expr>]</index></name></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <name>startIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>length</name> <operator>+</operator> <name>size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>startIdx</name></expr>]</index></name></expr></argument>, <argument><expr><name>clipText</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>startIdx</name> <operator>+</operator> <name>size</name><operator>)</operator></expr>;</condition> <incr><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>letter</name> <init>= <expr><call><name>GetNextCodepoint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>letter</name> <operator>!=</operator> <literal type="number">0x3f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiTextBoxCut</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>text</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> 

<operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>!=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>&gt;</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>startIdx</name> <init>= <expr><call><name>GuiTextBoxGetByteIndex</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>endIdx</name> <init>= <expr><call><name>GuiTextBoxGetByteIndex</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clipText</name> <init>= <expr><call><name>TextSubtext</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>startIdx</name></expr></argument>, <argument><expr><name>endIdx</name> <operator>-</operator> <name>startIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetClipboardText</name><argument_list>(<argument><expr><name>clipText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>startIdx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>endIdx</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>endIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>len</name> <operator>-</operator> <operator>(</operator><name>endIdx</name> <operator>-</operator> <name>startIdx</name><operator>)</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>&lt;</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>EncodeCodepoint</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0x7f</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0x7ff</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xc0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xe0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0x10ffff</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xf0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiTextBox</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>textSize</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>editMode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUI_TEXTBOX_CURSOR_SPEED_MODIFIER</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>framesCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>pressed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name>textSize</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>textSize</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name>textSize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>verticalPadding</name> <init>= <expr><operator>(</operator><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>verticalPadding</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>verticalPadding</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>textRec</name> <init>= <expr><block>{ <expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call></expr>, 

<expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>verticalPadding</name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>, 

<expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call><operator>)</operator></expr>, 

<macro><name>GuiGetStyle</name><argument_list>(<argument>DEFAULT</argument>, <argument>TEXT_SIZE</argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>cursorPos</name> <init>= <expr><block>{ <expr><name><name>textRec</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>textRec</name><operator>.</operator><name>y</name></name></expr> }</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>active</name> <init>= <expr><call><name>GuiTextBoxIsActive</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>selStart</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>selLength</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>textStartIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>guiLocked</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>Vector2</name></type> <name>mousePoint</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>editMode</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>active</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 

<operator>(</operator><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_RIGHT_BUTTON</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiTextBoxSetActive</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_RIGHT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<macro><name>GuiTextBoxSetActive</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){<literal type="number">0</literal></argument>,<argument><literal type="number">0</literal></argument>,<argument>-<literal type="number">1</literal></argument>,<argument>-<literal type="number">1</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> 

<expr_stmt><expr><name>active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>active</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_PRESSED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>&gt;</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>&gt;</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name> <operator>&gt;</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <call><name>GuiTextBoxMaxCharacters</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>textRec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>GuiTextBoxGetByteIndex</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name> <operator>=</operator> <call><name>GuiMeasureTextBoxRev</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>textRec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>-</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_RIGHT</name></expr></argument>)</argument_list></call> <operator>||</operator> 

<operator>(</operator><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_RIGHT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>framesCounter</name><operator>%</operator><name>GUI_TEXTBOX_CURSOR_SPEED_MODIFIER</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_LEFT_SHIFT</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>MoveTextBoxCursorRight</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>textRec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>!=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>&lt;</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MoveTextBoxCursorRight</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>textRec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>MoveTextBoxCursorRight</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>textRec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_LEFT</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_LEFT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>framesCounter</name><operator>%</operator><name>GUI_TEXTBOX_CURSOR_SPEED_MODIFIER</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_LEFT_SHIFT</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>MoveTextBoxCursorLeft</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>!=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>&gt;</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name> <operator>&gt;</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name> <operator>=</operator> <call><name>GuiTextBoxGetByteIndex</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>MoveTextBoxCursorLeft</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_BACKSPACE</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_BACKSPACE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>framesCounter</name><operator>%</operator><name>GUI_TEXTBOX_CURSOR_SPEED_MODIFIER</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GuiTextBoxDelete</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_DELETE</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_DELETE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>framesCounter</name><operator>%</operator><name>GUI_TEXTBOX_CURSOR_SPEED_MODIFIER</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GuiTextBoxDelete</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_HOME</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_LEFT_SHIFT</name></expr></argument>)</argument_list></call></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>&gt;</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name><operator>)</operator> <operator>||</operator> 

<operator>(</operator><operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_END</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><call><name>GuiCountCodepointsUntilNewline</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_LEFT_SHIFT</name></expr></argument>)</argument_list></call></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>!=</operator> <name>max</name><operator>)</operator></expr>)</condition>

<block>{<block_content> 

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>GuiTextBoxGetByteIndex</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name> <operator>=</operator> <call><name>GuiMeasureTextBoxRev</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>textRec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>-</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_LEFT_CONTROL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_A</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GuiTextBoxSelectAll</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_LEFT_CONTROL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_C</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GuiTextBoxCopy</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_LEFT_CONTROL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_X</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GuiTextBoxCut</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_LEFT_CONTROL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_V</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GuiTextBoxPaste</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>textSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><call><name>GetKeyPressed</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>key</name> <operator>&gt;=</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>textSize</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>!=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GuiTextBoxDelete</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>out</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><call><name>EncodeCodepoint</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>startIdx</name> <init>= <expr><call><name>GuiTextBoxGetByteIndex</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>endIdx</name> <init>= <expr><name>startIdx</name> <operator>+</operator> <name>sz</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>endIdx</name> <operator>&lt;=</operator> <name>textSize</name> <operator>&amp;&amp;</operator> <name>length</name> <operator>&lt;</operator> <name>textSize</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>endIdx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>startIdx</name></expr>]</index></name></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <name>startIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>startIdx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>length</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max</name> <init>= <expr><call><name>GuiTextBoxMaxCharacters</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name>textRec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>-</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name><operator>)</operator> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>textRec</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GuiTextBoxGetCursorFromMouse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name>textRec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>+=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mousePoint</name><operator>.</operator><name>x</name></name> <operator>&lt;=</operator> <name><name>bounds</name><operator>.</operator><name>x</name></name><operator>+</operator><name><name>bounds</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <literal type="number">0</literal> <operator>+</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name> <operator>+</operator> <call><name>GuiTextBoxMaxCharacters</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name>textRec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cursor</name> <init>= <expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>-</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>move</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>textRec</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GuiTextBoxGetCursorFromMouse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name>textRec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>move</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mousePoint</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>bounds</name><operator>.</operator><name>x</name></name><operator>+</operator><name><name>bounds</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>GuiTextBoxMaxCharacters</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name>textRec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>cursor</name> <operator>+</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>framesCounter</name><operator>%</operator><name>GUI_TEXTBOX_CURSOR_SPEED_MODIFIER</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>move</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cursor</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>MoveTextBoxCursorLeft</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>cursor</name> <operator>==</operator> <call><name>GuiTextBoxMaxCharacters</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name>textRec</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MoveTextBoxCursorRight</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>textRec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cursorPos</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>GuiTextBoxGetCursorCoordinates</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name></expr></argument>, <argument><expr><name>textRec</name></expr></argument>, <argument><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>-</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>textStartIndex</name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>index</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>selStart</name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>selLength</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>&gt;</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>selStart</name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>selLength</name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>-</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>selStart</name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>selLength</name> <operator>=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>-</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name> <operator>&gt;</operator> <name>selStart</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>selLength</name> <operator>-=</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name> <operator>-</operator> <name>selStart</name></expr>;</expr_stmt>

<expr_stmt><expr><name>selStart</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>selStart</name> <operator>=</operator> <name>selStart</name> <operator>-</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_FOCUSED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_FOCUSED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>active</name> <operator>&amp;&amp;</operator> <call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_LEFT_CONTROL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_C</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>select</name> <init>= <expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cursor</name> <init>= <expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>==</operator> <name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GuiTextBoxSelectAll</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GuiTextBoxCopy</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>select</name></name> <operator>=</operator> <name>select</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>cursor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>guiTextBoxState</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>GUI_STATE_PRESSED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BASE_COLOR_FOCUSED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>editMode</name> <operator>&amp;&amp;</operator> <name>active</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>framesCounter</name><operator>/</operator><name>TEXTEDIT_CURSOR_BLINK_FRAMES</name><operator>)</operator><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>selLength</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>cursorPos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>cursorPos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_COLOR_PRESSED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>GUI_STATE_DISABLED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BASE_COLOR_DISABLED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DrawTextRecEx</name><argument_list>(<argument><expr><name>guiFont</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>textStartIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name>textRec</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SPACING</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>TEXT</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>selStart</name></expr></argument>, <argument><expr><name>selLength</name></expr></argument>, <argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>COLOR_SELECTED_FG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>COLOR_SELECTED_BG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pressed</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<function><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiSpinner</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minValue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxValue</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>editMode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>pressed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tempValue</name> <init>= <expr><operator>*</operator><name>value</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>spinner</name> <init>= <expr><block>{ <expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SPINNER</name></expr></argument>, <argument><expr><name>SELECT_BUTTON_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SPINNER</name></expr></argument>, <argument><expr><name>SELECT_BUTTON_PADDING</name></expr></argument>)</argument_list></call></expr>, <expr><name><name>bounds</name><operator>.</operator><name>y</name></name></expr>,

<expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SPINNER</name></expr></argument>, <argument><expr><name>SELECT_BUTTON_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SPINNER</name></expr></argument>, <argument><expr><name>SELECT_BUTTON_PADDING</name></expr></argument>)</argument_list></call><operator>)</operator></expr>, <expr><name><name>bounds</name><operator>.</operator><name>height</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>leftButtonBound</name> <init>= <expr><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>x</name></name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>y</name></name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SPINNER</name></expr></argument>, <argument><expr><name>SELECT_BUTTON_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>height</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>rightButtonBound</name> <init>= <expr><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SPINNER</name></expr></argument>, <argument><expr><name>SELECT_BUTTON_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>y</name></name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SPINNER</name></expr></argument>, <argument><expr><name>SELECT_BUTTON_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>height</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>editMode</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tempValue</name> <operator>&lt;</operator> <name>minValue</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tempValue</name> <operator>=</operator> <name>minValue</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tempValue</name> <operator>&gt;</operator> <name>maxValue</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tempValue</name> <operator>=</operator> <name>maxValue</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pressed</name> <operator>=</operator> <call><name>GuiValueBox</name><argument_list>(<argument><expr><name>spinner</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tempValue</name></expr></argument>, <argument><expr><name>minValue</name></expr></argument>, <argument><expr><name>maxValue</name></expr></argument>, <argument><expr><name>editMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tempBorderWidth</name> <init>= <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SPINNER</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tempTextAlign</name> <init>= <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>, <argument><expr><name>GUI_TEXT_ALIGN_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYGUI_RICONS_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>GuiButton</name><argument_list>(<argument><expr><name>leftButtonBound</name></expr></argument>, <argument><expr><call><name>GuiIconText</name><argument_list>(<argument><expr><name>RICON_ARROW_LEFT_FILL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tempValue</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GuiButton</name><argument_list>(<argument><expr><name>rightButtonBound</name></expr></argument>, <argument><expr><call><name>GuiIconText</name><argument_list>(<argument><expr><name>RICON_ARROW_RIGHT_FILL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tempValue</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>GuiButton</name><argument_list>(<argument><expr><name>leftButtonBound</name></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tempValue</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GuiButton</name><argument_list>(<argument><expr><name>rightButtonBound</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tempValue</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>, <argument><expr><name>tempTextAlign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>, <argument><expr><name>tempBorderWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>tempValue</name></expr>;</expr_stmt>

<return>return <expr><name>pressed</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiValueBox</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minValue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxValue</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>editMode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALUEBOX_MAX_CHARS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>framesCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>pressed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>text</name><index>[<expr><name>VALUEBOX_MAX_CHARS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><operator>*</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>guiLocked</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePoint</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>valueHasChanged</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>editMode</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_PRESSED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keyCount</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>keyCount</name> <operator>&lt;</operator> <name>VALUEBOX_MAX_CHARS</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>maxWidth</name> <init>= <expr><operator>(</operator><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>VALUEBOX</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetTextWidth</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>maxWidth</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><call><name>GetKeyPressed</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>key</name> <operator>&gt;=</operator> <literal type="number">48</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>key</name> <operator>&lt;=</operator> <literal type="number">57</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>keyCount</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>key</name></expr>;</expr_stmt>

<expr_stmt><expr><name>keyCount</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>valueHasChanged</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keyCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_BACKSPACE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>keyCount</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>keyCount</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keyCount</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>keyCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>valueHasChanged</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_BACKSPACE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>framesCounter</name> <operator>&gt;</operator> <name>TEXTEDIT_CURSOR_BLINK_FRAMES</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>framesCounter</name><operator>%</operator><literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>keyCount</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>keyCount</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keyCount</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>keyCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>valueHasChanged</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>valueHasChanged</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>&gt;</operator> <name>maxValue</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>maxValue</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>value</name> <operator>&lt;</operator> <name>minValue</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>minValue</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>editMode</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_FOCUSED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pressed</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>VALUEBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>VALUEBOX</name></expr></argument>, <argument><expr><name>BORDER</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>GUI_STATE_PRESSED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>VALUEBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>VALUEBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>VALUEBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>VALUEBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>VALUEBOX</name></expr></argument>, <argument><expr><name>BASE_COLOR_PRESSED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>editMode</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>framesCounter</name><operator>/</operator><literal type="number">20</literal><operator>)</operator><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GetTextWidth</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>VALUEBOX</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>VALUEBOX</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>VALUEBOX</name></expr></argument>, <argument><expr><name>BORDER_COLOR_PRESSED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>GUI_STATE_DISABLED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>VALUEBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>VALUEBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>VALUEBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>VALUEBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>VALUEBOX</name></expr></argument>, <argument><expr><name>BASE_COLOR_DISABLED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GuiDrawText</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>GetTextBounds</name><argument_list>(<argument><expr><name>VALUEBOX</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>VALUEBOX</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>VALUEBOX</name></expr></argument>, <argument><expr><name>TEXT</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pressed</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiTextBox</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>textSize</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>editMode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>framesCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>pressed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>guiLocked</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePoint</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>editMode</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_PRESSED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><call><name>GetKeyPressed</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keyCount</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>keyCount</name> <operator>&lt;</operator> <operator>(</operator><name>textSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>maxWidth</name> <init>= <expr><operator>(</operator><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetTextWidth</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>maxWidth</name> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>key</name> <operator>&gt;=</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>key</name> <operator>&lt;=</operator> <literal type="number">125</literal><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>key</name> <operator>&gt;=</operator> <literal type="number">128</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>key</name> <operator>&lt;</operator> <literal type="number">255</literal><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>keyCount</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>key</name></expr>;</expr_stmt>

<expr_stmt><expr><name>keyCount</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>keyCount</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keyCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_BACKSPACE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>keyCount</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>keyCount</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keyCount</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>keyCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_BACKSPACE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>framesCounter</name> <operator>&gt;</operator> <name>TEXTEDIT_CURSOR_BLINK_FRAMES</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>framesCounter</name><operator>%</operator><literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>keyCount</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>keyCount</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keyCount</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>keyCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>editMode</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_FOCUSED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pressed</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>GUI_STATE_PRESSED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BASE_COLOR_PRESSED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>editMode</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>framesCounter</name><operator>/</operator><literal type="number">20</literal><operator>)</operator><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GetTextWidth</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_COLOR_PRESSED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>GUI_STATE_DISABLED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BASE_COLOR_DISABLED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GuiDrawText</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>GetTextBounds</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>TEXT</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pressed</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiTextBoxMulti</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>textSize</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>editMode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>framesCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>pressed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>textHasChange</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>currentLine</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>guiLocked</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePoint</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>editMode</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_PRESSED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>framesCounter</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keyCount</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxWidth</name> <init>= <expr><operator>(</operator><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxHeight</name> <init>= <expr><operator>(</operator><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>keyCount</name> <operator>&lt;</operator> <operator>(</operator><name>textSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><call><name>GetKeyPressed</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MeasureTextEx</name><argument_list>(<argument><expr><name>guiFont</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>y</name> <operator>&lt;</operator> <operator>(</operator><name>maxHeight</name> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_ENTER</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>keyCount</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>keyCount</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>key</name> <operator>&gt;=</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>key</name> <operator>&lt;=</operator> <literal type="number">125</literal><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>key</name> <operator>&gt;=</operator> <literal type="number">128</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>key</name> <operator>&lt;</operator> <literal type="number">255</literal><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>keyCount</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>key</name></expr>;</expr_stmt>

<expr_stmt><expr><name>keyCount</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>textHasChange</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>GetTextWidth</name><argument_list>(<argument><expr><call><name>strrchr</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>maxWidth</name> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>key</name> <operator>&gt;=</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>key</name> <operator>&lt;=</operator> <literal type="number">125</literal><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>key</name> <operator>&gt;=</operator> <literal type="number">128</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>key</name> <operator>&lt;</operator> <literal type="number">255</literal><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>keyCount</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>key</name></expr>;</expr_stmt>

<expr_stmt><expr><name>keyCount</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>textHasChange</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keyCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_BACKSPACE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>keyCount</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>keyCount</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keyCount</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>keyCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>textHasChange</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_BACKSPACE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>framesCounter</name> <operator>&gt;</operator> <name>TEXTEDIT_CURSOR_BLINK_FRAMES</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>framesCounter</name><operator>%</operator><literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>keyCount</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>keyCount</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keyCount</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>keyCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>textHasChange</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>textHasChange</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>textHasChange</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lastLine</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxWidth</name> <init>= <expr><operator>(</operator><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lastLine</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>GetTextWidth</name><argument_list>(<argument><expr><name>lastLine</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>maxWidth</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>firstIndex</name> <init>= <expr><name>lastLine</name> <operator>-</operator> <name>text</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lastSpace</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>lastLine</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lastSpace</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>secondIndex</name> <init>= <expr><name>lastSpace</name> <operator>-</operator> <name>lastLine</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>firstIndex</name> <operator>+</operator> <name>secondIndex</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>lastLine</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>lastLine</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>lastChar</name> <init>= <expr><name><name>lastLine</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lastLine</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lastLine</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>lastChar</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lastLine</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>keyCount</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>GetTextWidth</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>maxWidth</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lastSpace</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lastSpace</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>lastSpace</name> <operator>-</operator> <name>text</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>lastLine</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>lastLine</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>lastChar</name> <init>= <expr><name><name>lastLine</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lastLine</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lastLine</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>lastChar</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lastLine</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>keyCount</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keyCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>currentLine</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>editMode</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_FOCUSED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pressed</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>framesCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>GUI_STATE_PRESSED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BASE_COLOR_PRESSED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>editMode</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>framesCounter</name><operator>/</operator><literal type="number">20</literal><operator>)</operator><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>currentLine</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>line</name> <operator>=</operator> <name>text</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GetTextWidth</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><name>currentLine</name><operator>)</operator></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_COLOR_FOCUSED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>GUI_STATE_DISABLED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>BASE_COLOR_DISABLED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GuiDrawText</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>GetTextBounds</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>TEXT</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pressed</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>float</name></type> <name>GuiSliderPro</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>minValue</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>maxValue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sliderWidth</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>showValue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sliderValue</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>value</name> <operator>-</operator> <name>minValue</name><operator>)</operator><operator>/</operator><operator>(</operator><name>maxValue</name> <operator>-</operator> <name>minValue</name><operator>)</operator><operator>)</operator><operator>*</operator><operator>(</operator><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>slider</name> <init>= <expr><block>{ <expr><name><name>bounds</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><macro><name>GuiGetStyle</name><argument_list>(<argument>SLIDER</argument>, <argument>INNER_PADDING</argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sliderWidth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>slider</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <operator>(</operator><name>sliderValue</name> <operator>-</operator> <name>sliderWidth</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slider</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>sliderWidth</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>sliderWidth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>slider</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slider</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>sliderValue</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>textBounds</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>textBounds</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>GetTextWidth</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>textBounds</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>textBounds</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>textBounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>TEXT_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>textBounds</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>guiLocked</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePoint</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_PRESSED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>maxValue</name> <operator>-</operator> <name>minValue</name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>mousePoint</name><operator>.</operator><name>x</name></name> <operator>-</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>sliderWidth</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name>sliderWidth</name><operator>)</operator> <operator>+</operator> <name>minValue</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sliderWidth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>slider</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>mousePoint</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>slider</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>sliderWidth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>slider</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>sliderValue</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_FOCUSED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name>maxValue</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>value</name> <operator>=</operator> <name>maxValue</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>value</name> <operator>&lt;</operator> <name>minValue</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>value</name> <operator>=</operator> <name>minValue</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sliderWidth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>slider</name><operator>.</operator><name>x</name></name> <operator>&lt;=</operator> <operator>(</operator><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>slider</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>slider</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>slider</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>width</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>slider</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name><name>slider</name><operator>.</operator><name>width</name></name> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>sliderWidth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>slider</name><operator>.</operator><name>width</name></name> <operator>&gt;</operator> <name><name>bounds</name><operator>.</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>slider</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>BORDER</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator></expr>?</condition><then> <expr><name>BASE_COLOR_NORMAL</name></expr> </then><else>: <expr><name>BASE_COLOR_DISABLED</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>==</operator> <name>GUI_STATE_NORMAL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>state</name> <operator>==</operator> <name>GUI_STATE_PRESSED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>slider</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>BASE_COLOR_PRESSED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>GUI_STATE_FOCUSED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>slider</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>TEXT_COLOR_FOCUSED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GuiDrawText</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>textBounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>TEXT</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>showValue</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>GuiDrawText</name><argument_list>(<argument>TextFormat(<literal type="string">"%.02f"</literal>, value)</argument>, <argument>RAYGUI_CLITERAL(Rectangle){ (float)bounds.x + bounds.width + GuiGetStyle(SLIDER, TEXT_PADDING)</argument>,

<argument>(float)bounds.y + bounds.height/<literal type="number">2</literal> - GuiGetStyle(DEFAULT, TEXT_SIZE)/<literal type="number">2</literal> + GuiGetStyle(SLIDER, INNER_PADDING)</argument>,

<argument>(float)GuiGetStyle(DEFAULT, TEXT_SIZE)</argument>, <argument>(float)GuiGetStyle(DEFAULT, TEXT_SIZE) }</argument>, <argument>GUI_TEXT_ALIGN_LEFT</argument>,

<argument>Fade(GetColor(GuiGetStyle(SLIDER, TEXT + (state*<literal type="number">3</literal>))), guiAlpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>value</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>float</name></type> <name>GuiSlider</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>minValue</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>maxValue</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>showValue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>GuiSliderPro</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>minValue</name></expr></argument>, <argument><expr><name>maxValue</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>SLIDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>showValue</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>float</name></type> <name>GuiSliderBar</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>minValue</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>maxValue</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>showValue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>GuiSliderPro</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>minValue</name></expr></argument>, <argument><expr><name>maxValue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>showValue</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>float</name></type> <name>GuiProgressBar</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>minValue</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>maxValue</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>showValue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>progress</name> <init>= <expr><block>{ <expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>PROGRESSBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>,

<expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>PROGRESSBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>PROGRESSBAR</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>,

<expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>PROGRESSBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><macro><name>GuiGetStyle</name><argument_list>(<argument>PROGRESSBAR</argument>, <argument>INNER_PADDING</argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>progress</name><operator>.</operator><name>width</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>value</name><operator>/</operator><operator>(</operator><name>maxValue</name> <operator>-</operator> <name>minValue</name><operator>)</operator><operator>*</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>PROGRESSBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>showValue</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>GuiLabel</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ (float)bounds.x + bounds.width + GuiGetStyle(SLIDER, TEXT_PADDING)</argument>, <argument>(float)bounds.y + bounds.height/<literal type="number">2</literal> - GuiGetStyle(DEFAULT, TEXT_SIZE)/<literal type="number">2</literal> + GuiGetStyle(SLIDER, INNER_PADDING)</argument>, <argument>(float)GuiGetStyle(DEFAULT, TEXT_SIZE)</argument>, <argument>(float)GuiGetStyle(DEFAULT, TEXT_SIZE) }</argument>, <argument>TextFormat(<literal type="string">"%.02f"</literal>, value)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>PROGRESSBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>PROGRESSBAR</name></expr></argument>, <argument><expr><name>BORDER</name> <operator>+</operator> <operator>(</operator><name>state</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>==</operator> <name>GUI_STATE_NORMAL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>state</name> <operator>==</operator> <name>GUI_STATE_PRESSED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>progress</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>PROGRESSBAR</name></expr></argument>, <argument><expr><name>BASE_COLOR_PRESSED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>GUI_STATE_FOCUSED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>progress</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>PROGRESSBAR</name></expr></argument>, <argument><expr><name>TEXT_COLOR_FOCUSED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>value</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiStatusBar</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator></expr>?</condition><then> <expr><name>BORDER_COLOR_NORMAL</name></expr> </then><else>: <expr><name>BORDER_COLOR_DISABLED</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawRectangleRec</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ bounds.x + GuiGetStyle(DEFAULT, BORDER_WIDTH)</argument>, <argument>bounds.y + GuiGetStyle(DEFAULT, BORDER_WIDTH)</argument>, <argument>bounds.width - GuiGetStyle(DEFAULT, BORDER_WIDTH)*<literal type="number">2</literal></argument>, <argument>bounds.height - GuiGetStyle(DEFAULT, BORDER_WIDTH)*<literal type="number">2</literal> }</argument>, <argument>Fade(GetColor(GuiGetStyle(DEFAULT, (state != GUI_STATE_DISABLED)? BASE_COLOR_NORMAL : BASE_COLOR_DISABLED)), guiAlpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>GuiDrawText</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>GetTextBounds</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator></expr>?</condition><then> <expr><name>TEXT_COLOR_NORMAL</name></expr> </then><else>: <expr><name>TEXT_COLOR_DISABLED</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiDummyRec</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>guiLocked</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePoint</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_PRESSED</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_FOCUSED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator></expr>?</condition><then> <expr><name>BASE_COLOR_NORMAL</name></expr> </then><else>: <expr><name>BASE_COLOR_DISABLED</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiDrawText</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>GetTextBounds</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>GUI_TEXT_ALIGN_CENTER</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator></expr>?</condition><then> <expr><name>TEXT_COLOR_NORMAL</name></expr> </then><else>: <expr><name>TEXT_COLOR_DISABLED</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>int</name></type> <name>GuiScrollBar</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minValue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxValue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isVertical</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>&gt;</operator> <name><name>bounds</name><operator>.</operator><name>height</name></name><operator>)</operator></expr>?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>spinnerSize</name> <init>= <expr><ternary><condition><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>ARROWS_VISIBLE</name></expr></argument>)</argument_list></call></expr>?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>isVertical</name></expr>?</condition><then> <expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>arrowUpLeft</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>arrowDownRight</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>scrollbar</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>slider</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name>maxValue</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>value</name> <operator>=</operator> <name>maxValue</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <name>minValue</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>value</name> <operator>=</operator> <name>minValue</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>range</name> <init>= <expr><name>maxValue</name> <operator>-</operator> <name>minValue</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sliderSize</name> <init>= <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SLIDER_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>arrowUpLeft</name> <operator>=</operator> <macro><name>RAYGUI_CLITERAL</name><argument_list>(<argument>Rectangle</argument>)</argument_list></macro><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>spinnerSize</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>spinnerSize</name></expr> }</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>isVertical</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>arrowDownRight</name> <operator>=</operator> <macro><name>RAYGUI_CLITERAL</name><argument_list>(<argument>Rectangle</argument>)</argument_list></macro><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name>spinnerSize</name> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>spinnerSize</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>spinnerSize</name></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>scrollbar</name> <operator>=</operator> <macro><name>RAYGUI_CLITERAL</name><argument_list>(<argument>Rectangle</argument>)</argument_list></macro><block>{ <expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call></expr>, <expr><name><name>arrowUpLeft</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>arrowUpLeft</name><operator>.</operator><name>height</name></name></expr>, <expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call><operator>)</operator></expr>, <expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name><name>arrowUpLeft</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name><name>arrowDownRight</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><macro><name>GuiGetStyle</name><argument_list>(<argument>SCROLLBAR</argument>, <argument>BORDER_WIDTH</argument>)</argument_list></macro></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name>sliderSize</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>sliderSize</name> <operator>&gt;=</operator> <name><name>scrollbar</name><operator>.</operator><name>height</name></name><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><name><name>scrollbar</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr> </then><else>: <expr><name>sliderSize</name></expr></else></ternary></expr>;</expr_stmt> 

<expr_stmt><expr><name>slider</name> <operator>=</operator> <macro><name>RAYGUI_CLITERAL</name><argument_list>(<argument>Rectangle</argument>)</argument_list></macro><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SLIDER_PADDING</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>scrollbar</name><operator>.</operator><name>y</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>value</name> <operator>-</operator> <name>minValue</name><operator>)</operator><operator>/</operator><name>range</name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>scrollbar</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name>sliderSize</name><operator>)</operator><operator>)</operator></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SLIDER_PADDING</name></expr></argument>)</argument_list></call><operator>)</operator></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>sliderSize</name></expr> }</block></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>arrowDownRight</name> <operator>=</operator> <macro><name>RAYGUI_CLITERAL</name><argument_list>(<argument>Rectangle</argument>)</argument_list></macro><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name>spinnerSize</name> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>spinnerSize</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>spinnerSize</name></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>scrollbar</name> <operator>=</operator> <macro><name>RAYGUI_CLITERAL</name><argument_list>(<argument>Rectangle</argument>)</argument_list></macro><block>{ <expr><name><name>arrowUpLeft</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>arrowUpLeft</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call></expr>, <expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name><name>arrowUpLeft</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name><name>arrowDownRight</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>)</argument_list></call><operator>)</operator></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>sliderSize</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>sliderSize</name> <operator>&gt;=</operator> <name><name>scrollbar</name><operator>.</operator><name>width</name></name><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><name><name>scrollbar</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr> </then><else>: <expr><name>sliderSize</name></expr></else></ternary></expr>;</expr_stmt> 

<expr_stmt><expr><name>slider</name> <operator>=</operator> <macro><name>RAYGUI_CLITERAL</name><argument_list>(<argument>Rectangle</argument>)</argument_list></macro><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>scrollbar</name><operator>.</operator><name>x</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>value</name> <operator>-</operator> <name>minValue</name><operator>)</operator><operator>/</operator><name>range</name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>scrollbar</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name>sliderSize</name><operator>)</operator><operator>)</operator></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SLIDER_PADDING</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>sliderSize</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SLIDER_PADDING</name></expr></argument>)</argument_list></call><operator>)</operator></expr> }</block></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>guiLocked</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePoint</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_FOCUSED</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wheel</name> <init>= <expr><call><name>GetMouseWheelMove</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wheel</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>value</name> <operator>+=</operator> <name>wheel</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>arrowUpLeft</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>value</name> <operator>-=</operator> <name>range</name><operator>/</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SCROLL_SPEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>arrowDownRight</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>value</name> <operator>+=</operator> <name>range</name><operator>/</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SCROLL_SPEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_PRESSED</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isVertical</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>scrollArea</name> <init>= <expr><block>{ <expr><name><name>arrowUpLeft</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>arrowUpLeft</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>arrowUpLeft</name><operator>.</operator><name>y</name></name></expr>, <expr><name><name>scrollbar</name><operator>.</operator><name>width</name></name></expr>, <expr><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><macro><name>GuiGetStyle</name><argument_list>(<argument>SCROLLBAR</argument>, <argument>BORDER_WIDTH</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>scrollArea</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>mousePoint</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>scrollArea</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>slider</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>range</name><operator>)</operator><operator>/</operator><operator>(</operator><name><name>scrollArea</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name><name>slider</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>+</operator> <name>minValue</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>scrollArea</name> <init>= <expr><block>{ <expr><name><name>arrowUpLeft</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>arrowUpLeft</name><operator>.</operator><name>y</name></name><operator>+</operator><name><name>arrowUpLeft</name><operator>.</operator><name>height</name></name></expr>, <expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><name><name>scrollbar</name><operator>.</operator><name>height</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>scrollArea</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>mousePoint</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>scrollArea</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>slider</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>range</name><operator>)</operator><operator>/</operator><operator>(</operator><name><name>scrollArea</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name><name>slider</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>+</operator> <name>minValue</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name>maxValue</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>value</name> <operator>=</operator> <name>maxValue</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <name>minValue</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>value</name> <operator>=</operator> <name>minValue</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_COLOR_DISABLED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>scrollbar</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BASE_COLOR_NORMAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>BORDER</name> <operator>+</operator> <name>state</name><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>slider</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>BORDER</name> <operator>+</operator> <name>state</name><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>padding</name> <init>= <expr><operator>(</operator><name>spinnerSize</name> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>ARROWS_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Vector2</name></type> <name><name>lineCoords</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name><name>arrowUpLeft</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>padding</name></expr>, <expr><name><name>arrowUpLeft</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>spinnerSize</name><operator>/</operator><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><name><name>arrowUpLeft</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>spinnerSize</name> <operator>-</operator> <name>padding</name></expr>, <expr><name><name>arrowUpLeft</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>padding</name></expr> }</block></expr>,

<expr><block>{ <expr><name><name>arrowUpLeft</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>spinnerSize</name> <operator>-</operator> <name>padding</name></expr>, <expr><name><name>arrowUpLeft</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>spinnerSize</name> <operator>-</operator> <name>padding</name></expr> }</block></expr>,

<expr><block>{ <expr><name><name>arrowDownRight</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>padding</name></expr>, <expr><name><name>arrowDownRight</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>padding</name></expr> }</block></expr>,

<expr><block>{ <expr><name><name>arrowDownRight</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>spinnerSize</name> <operator>-</operator> <name>padding</name></expr>, <expr><name><name>arrowDownRight</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>spinnerSize</name><operator>/</operator><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><name><name>arrowDownRight</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>padding</name></expr>, <expr><name><name>arrowDownRight</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>spinnerSize</name> <operator>-</operator> <name>padding</name></expr> }</block></expr>,

<expr><block>{ <expr><name><name>arrowUpLeft</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>spinnerSize</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name><name>arrowUpLeft</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>padding</name></expr> }</block></expr>,

<expr><block>{ <expr><name><name>arrowUpLeft</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>padding</name></expr>, <expr><name><name>arrowUpLeft</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>spinnerSize</name> <operator>-</operator> <name>padding</name></expr> }</block></expr>,

<expr><block>{ <expr><name><name>arrowUpLeft</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>spinnerSize</name> <operator>-</operator> <name>padding</name></expr>, <expr><name><name>arrowUpLeft</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>spinnerSize</name> <operator>-</operator> <name>padding</name></expr> }</block></expr>,

<expr><block>{ <expr><name><name>arrowDownRight</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>padding</name></expr>, <expr><name><name>arrowDownRight</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>padding</name></expr> }</block></expr>,

<expr><block>{ <expr><name><name>arrowDownRight</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>spinnerSize</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name><name>arrowDownRight</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>spinnerSize</name> <operator>-</operator> <name>padding</name></expr> }</block></expr>,

<expr><block>{ <expr><name><name>arrowDownRight</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>spinnerSize</name> <operator>-</operator> <name>padding</name></expr>, <expr><name><name>arrowDownRight</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>padding</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Color</name></type> <name>lineColor</name> <init>= <expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>TEXT</name> <operator>+</operator> <name>state</name><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>ARROWS_VISIBLE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>isVertical</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawTriangle</name><argument_list>(<argument><expr><name><name>lineCoords</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lineCoords</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lineCoords</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lineColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawTriangle</name><argument_list>(<argument><expr><name><name>lineCoords</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lineCoords</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lineCoords</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lineColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>DrawTriangle</name><argument_list>(<argument><expr><name><name>lineCoords</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lineCoords</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lineCoords</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lineColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawTriangle</name><argument_list>(<argument><expr><name><name>lineCoords</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lineCoords</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lineCoords</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lineColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>value</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>GuiListElement</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>editMode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>guiLocked</name> <operator>&amp;&amp;</operator> <name>editMode</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_NORMAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>guiLocked</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePoint</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>active</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_PRESSED</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_FOCUSED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonReleased</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>active</name> <operator>=</operator> <operator>!</operator><name>active</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>state</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>GUI_STATE_NORMAL</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>active</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>BASE_COLOR_PRESSED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>BORDER_COLOR_PRESSED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>GUI_STATE_FOCUSED</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>BASE_COLOR_FOCUSED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>BORDER_COLOR_FOCUSED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>GUI_STATE_PRESSED</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>BASE_COLOR_PRESSED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>BORDER_COLOR_PRESSED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>GUI_STATE_DISABLED</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>active</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>BASE_COLOR_DISABLED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>BORDER_COLOR_NORMAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>GUI_STATE_NORMAL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GuiDrawText</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>GetTextBounds</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><ternary><condition><expr><name>active</name></expr>?</condition><then> <expr><name>TEXT_COLOR_PRESSED</name></expr> </then><else>: <expr><name>TEXT_COLOR_NORMAL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>GUI_STATE_DISABLED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GuiDrawText</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>GetTextBounds</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><ternary><condition><expr><name>active</name></expr>?</condition><then> <expr><name>TEXT_COLOR_NORMAL</name></expr> </then><else>: <expr><name>TEXT_COLOR_DISABLED</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>GuiDrawText</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>GetTextBounds</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>TEXT</name> <operator>+</operator> <name>state</name><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>active</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiListView</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>active</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>scrollIndex</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>editMode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>textList</name> <init>= <expr><call><name>GuiTextSplit</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GuiListViewEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><name>textList</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>active</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>scrollIndex</name></expr></argument>, <argument><expr><name>editMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>bool</name></type> <name>GuiListViewEx</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>enabled</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>active</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>focus</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>scrollIndex</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>editMode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>pressed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>focusElement</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>startIndex</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>scrollIndex</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>*</operator><name>scrollIndex</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>useScrollBar</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>pressedKey</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>visibleElements</name> <init>= <expr><name><name>bounds</name><operator>.</operator><name>height</name></name><operator>/</operator><operator>(</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>ELEMENTS_HEIGHT</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>ELEMENTS_PADDING</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>startIndex</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>startIndex</name> <operator>&gt;</operator> <name>count</name> <operator>-</operator> <name>visibleElements</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>startIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>endIndex</name> <init>= <expr><name>startIndex</name> <operator>+</operator> <name>visibleElements</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>auxActive</name> <init>= <expr><operator>*</operator><name>active</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>barHeight</name> <init>= <expr><name><name>bounds</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>minBarHeight</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>visibleElements</name> <operator>&gt;=</operator> <name>count</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>useScrollBar</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>startIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>endIndex</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>posX</name> <init>= <expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>ELEMENTS_PADDING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>elementWidth</name> <init>= <expr><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>ELEMENTS_PADDING</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>useScrollBar</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>posX</name> <operator>=</operator> <ternary><condition><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>SCROLLBAR_SIDE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SCROLLBAR_LEFT_SIDE</name></expr>?</condition><then> <expr><name>posX</name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>SCROLLBAR_WIDTH</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>posX</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>elementWidth</name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>SCROLLBAR_WIDTH</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>ELEMENTS_PADDING</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>scrollBarRect</name> <init>= <expr><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>SCROLLBAR_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><macro><name>GuiGetStyle</name><argument_list>(<argument>DEFAULT</argument>, <argument>BORDER_WIDTH</argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>SCROLLBAR_SIDE</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SCROLLBAR_RIGHT_SIDE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>scrollBarRect</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>posX</name> <operator>+</operator> <name>elementWidth</name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>ELEMENTS_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>viewArea</name> <init>= <expr><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name>posX</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>elementWidth</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><macro><name>GuiGetStyle</name><argument_list>(<argument>DEFAULT</argument>, <argument>BORDER_WIDTH</argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>guiLocked</name></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePoint</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>editMode</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_PRESSED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_UP</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>auxActive</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>auxActive</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>useScrollBar</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>auxActive</name> <operator>&lt;</operator> <name>startIndex</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>startIndex</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pressedKey</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_DOWN</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>auxActive</name> <operator>&lt;</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>auxActive</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>useScrollBar</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>auxActive</name> <operator>&gt;=</operator> <name>endIndex</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>startIndex</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pressedKey</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>useScrollBar</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>endIndex</name> <operator>=</operator> <name>startIndex</name> <operator>+</operator> <name>visibleElements</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>viewArea</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>wheel</name> <init>= <expr><call><name>GetMouseWheelMove</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wheel</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>endIndex</name> <operator>&lt;</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>startIndex</name> <operator>-=</operator> <name>wheel</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>wheel</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>startIndex</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>startIndex</name> <operator>-=</operator> <name>wheel</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pressedKey</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pressedKey</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>auxActive</name> <operator>&lt;</operator> <name>startIndex</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>auxActive</name> <operator>&gt;=</operator> <name>endIndex</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>startIndex</name> <operator>=</operator> <name>auxActive</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>startIndex</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>startIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>startIndex</name> <operator>&gt;</operator> <operator>(</operator><name>count</name> <operator>-</operator> <operator>(</operator><name>endIndex</name> <operator>-</operator> <name>startIndex</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>startIndex</name> <operator>=</operator> <name>count</name> <operator>-</operator> <operator>(</operator><name>endIndex</name> <operator>-</operator> <name>startIndex</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>endIndex</name> <operator>=</operator> <name>startIndex</name> <operator>+</operator> <name>visibleElements</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>endIndex</name> <operator>&gt;</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>endIndex</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>editMode</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>viewArea</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_FOCUSED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>startIndex</name> <operator>-=</operator> <call><name>GetMouseWheelMove</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>startIndex</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>startIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>startIndex</name> <operator>&gt;</operator> <operator>(</operator><name>count</name> <operator>-</operator> <operator>(</operator><name>endIndex</name> <operator>-</operator> <name>startIndex</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>startIndex</name> <operator>=</operator> <name>count</name> <operator>-</operator> <operator>(</operator><name>endIndex</name> <operator>-</operator> <name>startIndex</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>viewArea</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>GetMouseWheelMove</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pressed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>startIndex</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>endIndex</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><macro><name>CheckCollisionPointRec</name><argument_list>(<argument>mousePoint</argument>, <argument>RAYGUI_CLITERAL(Rectangle){ (float)posX</argument>, <argument>(float)bounds.y + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING) + GuiGetStyle(DEFAULT, BORDER_WIDTH) + (i - startIndex)*(GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING))</argument>, <argument>(float)elementWidth</argument>, <argument>(float)GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) }</argument>)</argument_list></macro></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>focusElement</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slider</name> <init>= <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SLIDER_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>useScrollBar</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>percentVisible</name> <init>= <expr><operator>(</operator><name>endIndex</name> <operator>-</operator> <name>startIndex</name><operator>)</operator><operator>*</operator><literal type="number">100</literal><operator>/</operator><name>count</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>barHeight</name> <operator>*=</operator> <name>percentVisible</name><operator>/</operator><literal type="number">100</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>barHeight</name> <operator>&lt;</operator> <name>minBarHeight</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>barHeight</name> <operator>=</operator> <name>minBarHeight</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>barHeight</name> <operator>&gt;</operator> <name><name>bounds</name><operator>.</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>barHeight</name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SLIDER_SIZE</name></expr></argument>, <argument><expr><name>barHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BACKGROUND_COLOR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>useScrollBar</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>scrollSpeed</name> <init>= <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SCROLL_SPEED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SCROLL_SPEED</name></expr></argument>, <argument><expr><name>count</name> <operator>-</operator> <name>visibleElements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><ternary><condition><expr><name>scrollIndex</name> <operator>!=</operator> <name>NULL</name></expr>?</condition><then> <expr><operator>*</operator><name>scrollIndex</name></expr> </then><else>: <expr><name>startIndex</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>GuiScrollBar</name><argument_list>(<argument><expr><name>scrollBarRect</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>count</name> <operator>-</operator> <name>visibleElements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SCROLL_SPEED</name></expr></argument>, <argument><expr><name>scrollSpeed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SLIDER_SIZE</name></expr></argument>, <argument><expr><name>slider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>scrollIndex</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>scrollBarRect</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>startIndex</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>startIndex</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>startIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>startIndex</name> <operator>&gt;</operator> <operator>(</operator><name>count</name> <operator>-</operator> <operator>(</operator><name>endIndex</name> <operator>-</operator> <name>startIndex</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>startIndex</name> <operator>=</operator> <name>count</name> <operator>-</operator> <operator>(</operator><name>endIndex</name> <operator>-</operator> <name>startIndex</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>endIndex</name> <operator>=</operator> <name>startIndex</name> <operator>+</operator> <name>visibleElements</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>endIndex</name> <operator>&gt;</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>endIndex</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>BORDER</name> <operator>+</operator> <name>state</name><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>state</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>GUI_STATE_NORMAL</name></expr>:</case>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>startIndex</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>endIndex</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>enabled</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>enabled</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GuiDisable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>GuiListElement</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ (float)posX</argument>, <argument>(float)bounds.y + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING) + GuiGetStyle(DEFAULT, BORDER_WIDTH) + (i - startIndex)*(GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING))</argument>, <argument>(float)elementWidth</argument>, <argument>(float)GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) }</argument>, <argument>text[i]</argument>, <argument>false</argument>, <argument>false</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>GuiEnable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>auxActive</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GuiDisable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>GuiListElement</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ (float)posX</argument>, <argument>(float)bounds.y + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING) + GuiGetStyle(DEFAULT, BORDER_WIDTH) + (i - startIndex)*(GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING))</argument>, <argument>(float)elementWidth</argument>, <argument>(float)GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) }</argument>, <argument>text[i]</argument>, <argument>true</argument>, <argument>false</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>GuiEnable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <macro><name>GuiListElement</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ (float)posX</argument>, <argument>(float)bounds.y + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING) + GuiGetStyle(DEFAULT, BORDER_WIDTH) + (i - startIndex)*(GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING))</argument>, <argument>(float)elementWidth</argument>, <argument>(float)GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) }</argument>, <argument>text[i]</argument>, <argument>false</argument>, <argument>false</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>GUI_STATE_FOCUSED</name></expr>:</case>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>startIndex</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>endIndex</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>enabled</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>enabled</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GuiDisable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>GuiListElement</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ (float)posX</argument>, <argument>(float)bounds.y + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING) + GuiGetStyle(DEFAULT, BORDER_WIDTH) + (i - startIndex)*(GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING))</argument>, <argument>(float)elementWidth</argument>, <argument>(float)GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) }</argument>, <argument>text[i]</argument>, <argument>false</argument>, <argument>false</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>GuiEnable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>auxActive</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>GuiListElement</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ (float)posX</argument>, <argument>(float)bounds.y + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING) + GuiGetStyle(DEFAULT, BORDER_WIDTH) + (i - startIndex)*(GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING))</argument>, <argument>(float)elementWidth</argument>, <argument>(float)GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) }</argument>, <argument>text[i]</argument>, <argument>true</argument>, <argument>false</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <macro><name>GuiListElement</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ (float)posX</argument>, <argument>(float)bounds.y + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING) + GuiGetStyle(DEFAULT, BORDER_WIDTH) + (i - startIndex)*(GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING))</argument>, <argument>(float)elementWidth</argument>, <argument>(float)GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) }</argument>, <argument>text[i]</argument>, <argument>false</argument>, <argument>false</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>GUI_STATE_PRESSED</name></expr>:</case>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>startIndex</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>endIndex</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>enabled</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>enabled</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GuiDisable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>GuiListElement</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ (float)posX</argument>, <argument>(float)bounds.y + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING) + GuiGetStyle(DEFAULT, BORDER_WIDTH) + (i - startIndex)*(GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING))</argument>, <argument>(float)elementWidth</argument>, <argument>(float)GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) }</argument>, <argument>text[i]</argument>, <argument>false</argument>, <argument>false</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>GuiEnable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>i</name> <operator>==</operator> <name>auxActive</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>editMode</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><macro><name>GuiListElement</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ (float)posX</argument>, <argument>(float)bounds.y + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING) + GuiGetStyle(DEFAULT, BORDER_WIDTH) + (i - startIndex)*(GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING))</argument>, <argument>(float)elementWidth</argument>, <argument>(float)GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) }</argument>, <argument>text[i]</argument>, <argument>true</argument>, <argument>true</argument>)</argument_list></macro> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>auxActive</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><macro><name>GuiListElement</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ (float)posX</argument>, <argument>(float)bounds.y + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING) + GuiGetStyle(DEFAULT, BORDER_WIDTH) + (i - startIndex)*(GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING))</argument>, <argument>(float)elementWidth</argument>, <argument>(float)GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) }</argument>, <argument>text[i]</argument>, <argument>false</argument>, <argument>true</argument>)</argument_list></macro> <operator>==</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>auxActive</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>GUI_STATE_DISABLED</name></expr>:</case>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>startIndex</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>endIndex</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>auxActive</name></expr>)</condition><block type="pseudo"><block_content> <macro><name>GuiListElement</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ (float)posX</argument>, <argument>(float)bounds.y + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING) + GuiGetStyle(DEFAULT, BORDER_WIDTH) + (i - startIndex)*(GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING))</argument>, <argument>(float)elementWidth</argument>, <argument>(float)GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) }</argument>, <argument>text[i]</argument>, <argument>true</argument>, <argument>false</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <macro><name>GuiListElement</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ (float)posX</argument>, <argument>(float)bounds.y + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING) + GuiGetStyle(DEFAULT, BORDER_WIDTH) + (i - startIndex)*(GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) + GuiGetStyle(LISTVIEW, ELEMENTS_PADDING))</argument>, <argument>(float)elementWidth</argument>, <argument>(float)GuiGetStyle(LISTVIEW, ELEMENTS_HEIGHT) }</argument>, <argument>text[i]</argument>, <argument>false</argument>, <argument>false</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>scrollIndex</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>scrollIndex</name> <operator>=</operator> <name>startIndex</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>focus</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>focus</name> <operator>=</operator> <name>focusElement</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>active</name> <operator>=</operator> <name>auxActive</name></expr>;</expr_stmt>

<return>return <expr><name>pressed</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>Color</name></type> <name>GuiColorPanelEx</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>hue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>pickerSelector</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>vcolor</name> <init>= <expr><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>color</name><operator>.</operator><name>r</name></name><operator>/</operator><literal type="number">255.0f</literal></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>color</name><operator>.</operator><name>g</name></name><operator>/</operator><literal type="number">255.0f</literal></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>color</name><operator>.</operator><name>b</name></name><operator>/</operator><literal type="number">255.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>hsv</name> <init>= <expr><call><name>ConvertRGBtoHSV</name><argument_list>(<argument><expr><name>vcolor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pickerSelector</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>hsv</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>bounds</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pickerSelector</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>hsv</name><operator>.</operator><name>z</name></name><operator>)</operator><operator>*</operator><name><name>bounds</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>Vector3</name></type> <name>maxHue</name> <init>= <expr><block>{ <expr><name>hue</name> <operator>&gt;=</operator> <literal type="number">0.0f</literal> <operator>?</operator> <name>hue</name> <operator>:</operator> <name><name>hsv</name><operator>.</operator><name>x</name></name></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>rgbHue</name> <init>= <expr><call><name>ConvertHSVtoRGB</name><argument_list>(<argument><expr><name>maxHue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Color</name></type> <name>maxHueCol</name> <init>= <expr><block>{ <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">255.0f</literal><operator>*</operator><name><name>rgbHue</name><operator>.</operator><name>x</name></name><operator>)</operator></expr>,

<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">255.0f</literal><operator>*</operator><name><name>rgbHue</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>,

<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">255.0f</literal><operator>*</operator><name><name>rgbHue</name><operator>.</operator><name>z</name></name><operator>)</operator></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Color</name></type> <name>colWhite</name> <init>= <expr><block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Color</name></type> <name>colBlack</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">255</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>guiLocked</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePoint</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_PRESSED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pickerSelector</name> <operator>=</operator> <name>mousePoint</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>colorPick</name> <init>= <expr><block>{ <expr><name><name>pickerSelector</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>bounds</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>pickerSelector</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>bounds</name><operator>.</operator><name>y</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>colorPick</name><operator>.</operator><name>x</name></name> <operator>/=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>colorPick</name><operator>.</operator><name>y</name></name> <operator>/=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>colorPick</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>z</name></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>-</operator> <name><name>colorPick</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>rgb</name> <init>= <expr><call><name>ConvertHSVtoRGB</name><argument_list>(<argument><expr><name>hsv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <macro><name>RAYGUI_CLITERAL</name><argument_list>(<argument>Color</argument>)</argument_list></macro><block>{ <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">255.0f</literal><operator>*</operator><name><name>rgb</name><operator>.</operator><name>x</name></name><operator>)</operator></expr>,

<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">255.0f</literal><operator>*</operator><name><name>rgb</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>,

<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">255.0f</literal><operator>*</operator><name><name>rgb</name><operator>.</operator><name>z</name></name><operator>)</operator></expr>,

<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">255.0f</literal><operator>*</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>color</name><operator>.</operator><name>a</name></name><operator>/</operator><literal type="number">255.0f</literal><operator>)</operator></expr> }</block></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_FOCUSED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangleGradientEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>colWhite</name></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>colWhite</name></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>maxHueCol</name></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>maxHueCol</name></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangleGradientEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>colBlack</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>colBlack</name></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>colBlack</name></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>colBlack</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>pickerSelector</name><operator>.</operator><name>x</name></name> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>COLOR_SELECTOR_SIZE</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>pickerSelector</name><operator>.</operator><name>y</name></name> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>COLOR_SELECTOR_SIZE</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>COLOR_SELECTOR_SIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>COLOR_SELECTOR_SIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>colWhite</name></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangleGradientEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BASE_COLOR_DISABLED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.1f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>colBlack</name></expr></argument>, <argument><expr><literal type="number">0.6f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>colBlack</name></expr></argument>, <argument><expr><literal type="number">0.6f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BORDER_COLOR_DISABLED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.6f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BORDER</name> <operator>+</operator> <name>state</name><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>color</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>Color</name></type> <name>GuiColorPanel</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>GuiColorPanelEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>float</name></type> <name>GuiColorBarAlpha</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>alpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLORBARALPHA_CHECKED_SIZE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>selector</name> <init>= <expr><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>alpha</name><operator>*</operator><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BAR_SELECTOR_PADDING</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BAR_SELECTOR_PADDING</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BAR_SELECTOR_HEIGHT</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BAR_SELECTOR_PADDING</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>guiLocked</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePoint</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_PRESSED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>selector</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>mousePoint</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>selector</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name><name>mousePoint</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>bounds</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>/</operator><name><name>bounds</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>&gt;=</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_FOCUSED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>checksX</name> <init>= <expr><name><name>bounds</name><operator>.</operator><name>width</name></name><operator>/</operator><name>COLORBARALPHA_CHECKED_SIZE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>checksY</name> <init>= <expr><name><name>bounds</name><operator>.</operator><name>height</name></name><operator>/</operator><name>COLORBARALPHA_CHECKED_SIZE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>checksX</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>checksY</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>x</name><operator>*</operator><name>COLORBARALPHA_CHECKED_SIZE</name></expr></argument>, 

<argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>y</name><operator>*</operator><name>COLORBARALPHA_CHECKED_SIZE</name></expr></argument>, 

<argument><expr><name>COLORBARALPHA_CHECKED_SIZE</name></expr></argument>, <argument><expr><name>COLORBARALPHA_CHECKED_SIZE</name></expr></argument>, 

<argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>x</name> <operator>+</operator> <name>y</name><operator>)</operator><operator>%</operator><literal type="number">2</literal><operator>)</operator></expr>?</condition><then> <expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BORDER_COLOR_DISABLED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.4f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr> </then><else>: 

<expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BASE_COLOR_DISABLED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.4f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<macro><name>DrawRectangleGradientEx</name><argument_list>(<argument>bounds</argument>, <argument>RAYGUI_CLITERAL(Color){ <literal type="number">255</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument><literal type="number">0</literal> }</argument>, <argument>RAYGUI_CLITERAL(Color){ <literal type="number">255</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument><literal type="number">0</literal> }</argument>, <argument>Fade(RAYGUI_CLITERAL(Color){ <literal type="number">0</literal>, <literal type="number">0</literal>, <literal type="number">0</literal>, <literal type="number">255</literal> }, guiAlpha)</argument>, <argument>Fade(RAYGUI_CLITERAL(Color){ <literal type="number">0</literal>, <literal type="number">0</literal>, <literal type="number">0</literal>, <literal type="number">255</literal> }, guiAlpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleGradientEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BASE_COLOR_DISABLED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.1f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BASE_COLOR_DISABLED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.1f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BORDER_COLOR_DISABLED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BORDER_COLOR_DISABLED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BORDER</name> <operator>+</operator> <name>state</name><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>selector</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BORDER</name> <operator>+</operator> <name>state</name><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>alpha</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>float</name></type> <name>GuiColorBarHue</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>hue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>selector</name> <init>= <expr><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BAR_SELECTOR_PADDING</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>hue</name><operator>/</operator><literal type="number">360.0f</literal><operator>*</operator><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BAR_SELECTOR_PADDING</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BAR_SELECTOR_PADDING</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><macro><name>GuiGetStyle</name><argument_list>(<argument>COLORPICKER</argument>, <argument>BAR_SELECTOR_HEIGHT</argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>guiLocked</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePoint</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_PRESSED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>selector</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>mousePoint</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>selector</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hue</name> <operator>=</operator> <operator>(</operator><name><name>mousePoint</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>bounds</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>*</operator><literal type="number">360</literal><operator>/</operator><name><name>bounds</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hue</name> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hue</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hue</name> <operator>&gt;=</operator> <literal type="number">359.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hue</name> <operator>=</operator> <literal type="number">359.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>GUI_STATE_FOCUSED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name></expr>)</condition>

<block>{<block_content>

<macro><name>DrawRectangleGradientV</name><argument_list>(<argument>bounds.x + GuiGetStyle(COLORPICKER, BAR_SELECTOR_PADDING)/<literal type="number">2</literal></argument>, <argument>bounds.y + GuiGetStyle(COLORPICKER, BAR_SELECTOR_PADDING)/<literal type="number">2</literal></argument>, <argument>bounds.width - GuiGetStyle(COLORPICKER, BAR_SELECTOR_PADDING)</argument>, <argument>(int)bounds.height/<literal type="number">6</literal></argument>, <argument>Fade(RAYGUI_CLITERAL(Color){ <literal type="number">255</literal>,<literal type="number">0</literal>,<literal type="number">0</literal>,<literal type="number">255</literal> }, guiAlpha)</argument>, <argument>Fade(RAYGUI_CLITERAL(Color){ <literal type="number">255</literal>,<literal type="number">255</literal>,<literal type="number">0</literal>,<literal type="number">255</literal> }, guiAlpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawRectangleGradientV</name><argument_list>(<argument>bounds.x + GuiGetStyle(COLORPICKER, BAR_SELECTOR_PADDING)/<literal type="number">2</literal></argument>, <argument>bounds.y + (int)bounds.height/<literal type="number">6</literal> + GuiGetStyle(COLORPICKER, BAR_SELECTOR_PADDING)/<literal type="number">2</literal></argument>, <argument>bounds.width - GuiGetStyle(COLORPICKER, BAR_SELECTOR_PADDING)</argument>, <argument>(int)bounds.height/<literal type="number">6</literal></argument>, <argument>Fade(RAYGUI_CLITERAL(Color){ <literal type="number">255</literal>,<literal type="number">255</literal>,<literal type="number">0</literal>,<literal type="number">255</literal> }, guiAlpha)</argument>, <argument>Fade(RAYGUI_CLITERAL(Color){ <literal type="number">0</literal>,<literal type="number">255</literal>,<literal type="number">0</literal>,<literal type="number">255</literal> }, guiAlpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawRectangleGradientV</name><argument_list>(<argument>bounds.x + GuiGetStyle(COLORPICKER, BAR_SELECTOR_PADDING)/<literal type="number">2</literal></argument>, <argument>bounds.y + <literal type="number">2</literal>*((int)bounds.height/<literal type="number">6</literal>) + GuiGetStyle(COLORPICKER, BAR_SELECTOR_PADDING)/<literal type="number">2</literal></argument>, <argument>bounds.width - GuiGetStyle(COLORPICKER, BAR_SELECTOR_PADDING)</argument>, <argument>(int)bounds.height/<literal type="number">6</literal></argument>, <argument>Fade(RAYGUI_CLITERAL(Color){ <literal type="number">0</literal>,<literal type="number">255</literal>,<literal type="number">0</literal>,<literal type="number">255</literal> }, guiAlpha)</argument>, <argument>Fade(RAYGUI_CLITERAL(Color){ <literal type="number">0</literal>,<literal type="number">255</literal>,<literal type="number">255</literal>,<literal type="number">255</literal> }, guiAlpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawRectangleGradientV</name><argument_list>(<argument>bounds.x + GuiGetStyle(COLORPICKER, BAR_SELECTOR_PADDING)/<literal type="number">2</literal></argument>, <argument>bounds.y + <literal type="number">3</literal>*((int)bounds.height/<literal type="number">6</literal>) + GuiGetStyle(COLORPICKER, BAR_SELECTOR_PADDING)/<literal type="number">2</literal></argument>, <argument>bounds.width - GuiGetStyle(COLORPICKER, BAR_SELECTOR_PADDING)</argument>, <argument>(int)bounds.height/<literal type="number">6</literal></argument>, <argument>Fade(RAYGUI_CLITERAL(Color){ <literal type="number">0</literal>,<literal type="number">255</literal>,<literal type="number">255</literal>,<literal type="number">255</literal> }, guiAlpha)</argument>, <argument>Fade(RAYGUI_CLITERAL(Color){ <literal type="number">0</literal>,<literal type="number">0</literal>,<literal type="number">255</literal>,<literal type="number">255</literal> }, guiAlpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawRectangleGradientV</name><argument_list>(<argument>bounds.x + GuiGetStyle(COLORPICKER, BAR_SELECTOR_PADDING)/<literal type="number">2</literal></argument>, <argument>bounds.y + <literal type="number">4</literal>*((int)bounds.height/<literal type="number">6</literal>) + GuiGetStyle(COLORPICKER, BAR_SELECTOR_PADDING)/<literal type="number">2</literal></argument>, <argument>bounds.width - GuiGetStyle(COLORPICKER, BAR_SELECTOR_PADDING)</argument>, <argument>(int)bounds.height/<literal type="number">6</literal></argument>, <argument>Fade(RAYGUI_CLITERAL(Color){ <literal type="number">0</literal>,<literal type="number">0</literal>,<literal type="number">255</literal>,<literal type="number">255</literal> }, guiAlpha)</argument>, <argument>Fade(RAYGUI_CLITERAL(Color){ <literal type="number">255</literal>,<literal type="number">0</literal>,<literal type="number">255</literal>,<literal type="number">255</literal> }, guiAlpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>DrawRectangleGradientV</name><argument_list>(<argument>bounds.x + GuiGetStyle(COLORPICKER, BAR_SELECTOR_PADDING)/<literal type="number">2</literal></argument>, <argument>bounds.y + <literal type="number">5</literal>*((int)bounds.height/<literal type="number">6</literal>) + GuiGetStyle(COLORPICKER, BAR_SELECTOR_PADDING)/<literal type="number">2</literal></argument>, <argument>bounds.width - GuiGetStyle(COLORPICKER, BAR_SELECTOR_PADDING)</argument>, <argument>(int)bounds.height/<literal type="number">6</literal> - GuiGetStyle(COLORPICKER, BAR_SELECTOR_PADDING)</argument>, <argument>Fade(RAYGUI_CLITERAL(Color){ <literal type="number">255</literal>,<literal type="number">0</literal>,<literal type="number">255</literal>,<literal type="number">255</literal> }, guiAlpha)</argument>, <argument>Fade(RAYGUI_CLITERAL(Color){ <literal type="number">255</literal>,<literal type="number">0</literal>,<literal type="number">0</literal>,<literal type="number">255</literal> }, guiAlpha)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleGradientV</name><argument_list>(<argument><expr><name><name>bounds</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>bounds</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BASE_COLOR_DISABLED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.1f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BORDER_COLOR_DISABLED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BORDER</name> <operator>+</operator> <name>state</name><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>selector</name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><call><name>GetColor</name><argument_list>(<argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BORDER</name> <operator>+</operator> <name>state</name><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>guiAlpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hue</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>Color</name></type> <name>GuiColorPicker</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>color</name> <operator>=</operator> <call><name>GuiColorPanel</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>boundsHue</name> <init>= <expr><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>+</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BAR_PADDING</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>y</name></name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BAR_WIDTH</name></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>bounds</name><operator>.</operator><name>height</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>hsv</name> <init>= <macro><name>ConvertRGBtoHSV</name><argument_list>(<argument>RAYGUI_CLITERAL(Vector3){ color.r/<literal type="number">255.0f</literal></argument>, <argument>color.g/<literal type="number">255.0f</literal></argument>, <argument>color.b/<literal type="number">255.0f</literal> }</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>GuiColorBarHue</name><argument_list>(<argument><expr><name>boundsHue</name></expr></argument>, <argument><expr><name><name>hsv</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>rgb</name> <init>= <expr><call><name>ConvertHSVtoRGB</name><argument_list>(<argument><expr><name>hsv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <macro><name>RAYGUI_CLITERAL</name><argument_list>(<argument>Color</argument>)</argument_list></macro><block>{ <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>rgb</name><operator>.</operator><name>x</name></name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>, <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>rgb</name><operator>.</operator><name>y</name></name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>, <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>rgb</name><operator>.</operator><name>z</name></name><operator>*</operator><literal type="number">255.0f</literal><operator>)</operator></expr>, <expr><name><name>color</name><operator>.</operator><name>a</name></name></expr> }</block></expr>;</expr_stmt>

<return>return <expr><name>color</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>int</name></type> <name>GuiMessageBox</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>windowTitle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buttons</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MESSAGEBOX_BUTTON_HEIGHT</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MESSAGEBOX_BUTTON_PADDING</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>clicked</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>buttonsCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buttonsText</name> <init>= <expr><call><name>GuiTextSplit</name><argument_list>(<argument><expr><name>buttons</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buttonsCount</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>textSize</name> <init>= <expr><call><name>MeasureTextEx</name><argument_list>(<argument><expr><name>guiFont</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>textBounds</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>textBounds</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>textSize</name><operator>.</operator><name>x</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>textBounds</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>WINDOW_STATUSBAR_HEIGHT</name> <operator>+</operator> <operator>(</operator><name><name>bounds</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name>WINDOW_STATUSBAR_HEIGHT</name><operator>)</operator><operator>/</operator><literal type="number">4</literal> <operator>-</operator> <name><name>textSize</name><operator>.</operator><name>y</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>textBounds</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>textSize</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>textBounds</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>textSize</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>buttonBounds</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buttonBounds</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>MESSAGEBOX_BUTTON_PADDING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buttonBounds</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>bounds</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name><name>bounds</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">4</literal> <operator>-</operator> <name>MESSAGEBOX_BUTTON_HEIGHT</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buttonBounds</name><operator>.</operator><name>width</name></name> <operator>=</operator> <operator>(</operator><name><name>bounds</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name>MESSAGEBOX_BUTTON_PADDING</name><operator>*</operator><operator>(</operator><name>buttonsCount</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>/</operator><name>buttonsCount</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buttonBounds</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>MESSAGEBOX_BUTTON_HEIGHT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GuiWindowBox</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><name>windowTitle</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>clicked</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prevTextAlignment</name> <init>= <expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>LABEL</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>LABEL</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>, <argument><expr><name>GUI_TEXT_ALIGN_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiLabel</name><argument_list>(<argument><expr><name>textBounds</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>LABEL</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>, <argument><expr><name>prevTextAlignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prevTextAlignment</name> <operator>=</operator> <call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>, <argument><expr><name>GUI_TEXT_ALIGN_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buttonsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>GuiButton</name><argument_list>(<argument><expr><name>buttonBounds</name></expr></argument>, <argument><expr><name><name>buttonsText</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>clicked</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buttonBounds</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <operator>(</operator><name><name>buttonBounds</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>MESSAGEBOX_BUTTON_PADDING</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>, <argument><expr><name>prevTextAlignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>clicked</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>int</name></type> <name>GuiTextInputBox</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>windowTitle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buttons</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>btnIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><name>btnIndex</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>Vector2</name></type> <name>GuiGrid</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>bounds</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>spacing</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subdivs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRID_COLOR_ALPHA</name></cpp:macro> <cpp:value>0.15f</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>GuiControlState</name></type> <name>state</name> <init>= <expr><name>guiState</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePoint</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>currentCell</name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linesV</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>bounds</name><operator>.</operator><name>width</name></name><operator>/</operator><name>spacing</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name>subdivs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linesH</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>bounds</name><operator>.</operator><name>height</name></name><operator>/</operator><name>spacing</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name>subdivs</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>!=</operator> <name>GUI_STATE_DISABLED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>guiLocked</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePoint</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>currentCell</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>mousePoint</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>bounds</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>/</operator><name>spacing</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>currentCell</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>mousePoint</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>bounds</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>/</operator><name>spacing</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>state</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>GUI_STATE_NORMAL</name></expr>:</case>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>linesV</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<macro><name>DrawRectangleRec</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ bounds.x + spacing*i</argument>, <argument>bounds.y</argument>, <argument><literal type="number">1</literal></argument>, <argument>bounds.height }</argument>, <argument>((i%subdivs) == <literal type="number">0</literal>)? Fade(GetColor(GuiGetStyle(DEFAULT, LINE_COLOR)), GRID_COLOR_ALPHA*<literal type="number">4</literal>) : Fade(GetColor(GuiGetStyle(DEFAULT, LINE_COLOR)), GRID_COLOR_ALPHA)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>linesH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<macro><name>DrawRectangleRec</name><argument_list>(<argument>RAYGUI_CLITERAL(Rectangle){ bounds.x</argument>, <argument>bounds.y + spacing*i</argument>, <argument>bounds.width</argument>, <argument><literal type="number">1</literal> }</argument>, <argument>((i%subdivs) == <literal type="number">0</literal>)? Fade(GetColor(GuiGetStyle(DEFAULT, LINE_COLOR)), GRID_COLOR_ALPHA*<literal type="number">4</literal>) : Fade(GetColor(GuiGetStyle(DEFAULT, LINE_COLOR)), GRID_COLOR_ALPHA)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></for>

</block_content>}</block> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>currentCell</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiLoadStyle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>tryBinary</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>rgsFile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">"rt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rgsFile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fgets</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>controlId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>propertyId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>propertyValue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"p %d %d 0x%x"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>controlId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>propertyId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>propertyValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>controlId</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>propertyId</name></expr></argument>, <argument><expr><name>propertyValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>propertyId</name> <operator>&lt;</operator> <name>NUM_PROPS_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_CONTROLS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>propertyId</name></expr></argument>, <argument><expr><name>propertyValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>controlId</name></expr></argument>, <argument><expr><name>propertyId</name></expr></argument>, <argument><expr><name>propertyValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fontSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fontSpacing</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>fontFileName</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"f %d %d %[^\n]s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fontSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fontSpacing</name></expr></argument>, <argument><expr><name>fontFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Font</name></type> <name>font</name> <init>= <expr><call><name>LoadFontEx</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>GetDirectoryPath</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fontFileName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fontSize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>font</name><operator>.</operator><name>texture</name><operator>.</operator><name>id</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>font</name><operator>.</operator><name>charsCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GuiFont</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>, <argument><expr><name>fontSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SPACING</name></expr></argument>, <argument><expr><name>fontSpacing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>fgets</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>tryBinary</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <return>return;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tryBinary</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>rgsFile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rgsFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>signature</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>version</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>reserved</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>propertiesCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name>signature</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>version</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reserved</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>propertiesCount</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>signature</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'r'</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>signature</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'G'</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>signature</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>signature</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>short</name></type> <name>controlId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>propertyId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>propertyValue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>propertiesCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>controlId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>propertyId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>propertyValue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>controlId</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>propertyId</name></expr></argument>, <argument><expr><name>propertyValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>propertyId</name> <operator>&lt;</operator> <name>NUM_PROPS_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_CONTROLS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>propertyId</name></expr></argument>, <argument><expr><name>propertyValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>controlId</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>propertyId</name></expr></argument>, <argument><expr><name>propertyValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RAYGUI_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>fontDataSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fontDataSize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fontDataSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Font</name></type> <name>font</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fontType</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Rectangle</name></type> <name>whiteRec</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>font</name><operator>.</operator><name>baseSize</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>font</name><operator>.</operator><name>charsCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fontType</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>whiteRec</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Rectangle</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fontImageSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fontImageSize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fontImageSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Image</name></type> <name>imFont</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>imFont</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>imFont</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>imFont</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>imFont</name><operator>.</operator><name>format</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imFont</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>fontImageSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name><name>imFont</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fontImageSize</name></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>texture</name></name> <operator>=</operator> <call><name>LoadTextureFromImage</name><argument_list>(<argument><expr><name>imFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>imFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>chars</name></name> <operator>=</operator> <operator>(</operator><name>CharInfo</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name><name>font</name><operator>.</operator><name>charsCount</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CharInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>font</name><operator>.</operator><name>charsCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>font</name><operator>.</operator><name>recs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Rectangle</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offsetX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offsetY</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>advanceX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>GuiFont</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>whiteRec</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>whiteRec</name><operator>.</operator><name>height</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SetShapesTexture</name><argument_list>(<argument><expr><name><name>font</name><operator>.</operator><name>texture</name></name></expr></argument>, <argument><expr><name>whiteRec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>rgsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiLoadStyleProps</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>props</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>completeSets</name> <init>= <expr><name>count</name><operator>/</operator><operator>(</operator><name>NUM_PROPS_DEFAULT</name> <operator>+</operator> <name>NUM_PROPS_EXTENDED</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uncompleteSetProps</name> <init>= <expr><name>count</name><operator>%</operator><operator>(</operator><name>NUM_PROPS_DEFAULT</name> <operator>+</operator> <name>NUM_PROPS_EXTENDED</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>completeSets</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>NUM_PROPS_DEFAULT</name> <operator>+</operator> <name>NUM_PROPS_EXTENDED</name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>props</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>uncompleteSetProps</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>completeSets</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>props</name><index>[<expr><name>completeSets</name><operator>*</operator><operator>(</operator><name>NUM_PROPS_DEFAULT</name> <operator>+</operator> <name>NUM_PROPS_EXTENDED</name><operator>)</operator> <operator>+</operator> <name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiLoadStyleDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>guiStyleLoaded</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_COLOR_NORMAL</name></expr></argument>, <argument><expr><literal type="number">0x838383ff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BASE_COLOR_NORMAL</name></expr></argument>, <argument><expr><literal type="number">0xc9c9c9ff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_COLOR_NORMAL</name></expr></argument>, <argument><expr><literal type="number">0x686868ff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_COLOR_FOCUSED</name></expr></argument>, <argument><expr><literal type="number">0x5bb2d9ff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BASE_COLOR_FOCUSED</name></expr></argument>, <argument><expr><literal type="number">0xc9effeff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_COLOR_FOCUSED</name></expr></argument>, <argument><expr><literal type="number">0x6c9bbcff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_COLOR_PRESSED</name></expr></argument>, <argument><expr><literal type="number">0x0492c7ff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BASE_COLOR_PRESSED</name></expr></argument>, <argument><expr><literal type="number">0x97e8ffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_COLOR_PRESSED</name></expr></argument>, <argument><expr><literal type="number">0x368bafff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_COLOR_DISABLED</name></expr></argument>, <argument><expr><literal type="number">0xb5c1c2ff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BASE_COLOR_DISABLED</name></expr></argument>, <argument><expr><literal type="number">0xe6e9e9ff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_COLOR_DISABLED</name></expr></argument>, <argument><expr><literal type="number">0xaeb7b8ff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>, <argument><expr><name>GUI_TEXT_ALIGN_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_CONTROLS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NUM_PROPS_DEFAULT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>guiFont</name> <operator>=</operator> <call><name>GetFontDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SIZE</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>TEXT_SPACING</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>LINE_COLOR</name></expr></argument>, <argument><expr><literal type="number">0x90abb5ff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>BACKGROUND_COLOR</name></expr></argument>, <argument><expr><literal type="number">0xf5f5f5ff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>LABEL</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>, <argument><expr><name>GUI_TEXT_ALIGN_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>BUTTON</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>TOGGLE</name></expr></argument>, <argument><expr><name>GROUP_PADDING</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>SLIDER_WIDTH</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>SLIDER</name></expr></argument>, <argument><expr><name>TEXT_PADDING</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>CHECKBOX</name></expr></argument>, <argument><expr><name>CHECK_TEXT_PADDING</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>COMBOBOX</name></expr></argument>, <argument><expr><name>SELECTOR_WIDTH</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>COMBOBOX</name></expr></argument>, <argument><expr><name>SELECTOR_PADDING</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>DROPDOWNBOX</name></expr></argument>, <argument><expr><name>ARROW_RIGHT_PADDING</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>, <argument><expr><name>GUI_TEXT_ALIGN_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>MULTILINE_PADDING</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>COLOR_SELECTED_FG</name></expr></argument>, <argument><expr><literal type="number">0xf0fffeff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>TEXTBOX</name></expr></argument>, <argument><expr><name>COLOR_SELECTED_BG</name></expr></argument>, <argument><expr><literal type="number">0x839affe0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>VALUEBOX</name></expr></argument>, <argument><expr><name>TEXT_ALIGNMENT</name></expr></argument>, <argument><expr><name>GUI_TEXT_ALIGN_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>SPINNER</name></expr></argument>, <argument><expr><name>SELECT_BUTTON_WIDTH</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>SPINNER</name></expr></argument>, <argument><expr><name>SELECT_BUTTON_PADDING</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>SPINNER</name></expr></argument>, <argument><expr><name>SELECT_BUTTON_BORDER_WIDTH</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>BORDER_WIDTH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>ARROWS_VISIBLE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>INNER_PADDING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>ARROWS_SIZE</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SLIDER_PADDING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SLIDER_SIZE</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>SCROLLBAR</name></expr></argument>, <argument><expr><name>SCROLL_SPEED</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>ELEMENTS_HEIGHT</name></expr></argument>, <argument><expr><literal type="number">0x1e</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>ELEMENTS_PADDING</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>SCROLLBAR_WIDTH</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>LISTVIEW</name></expr></argument>, <argument><expr><name>SCROLLBAR_SIDE</name></expr></argument>, <argument><expr><name>SCROLLBAR_RIGHT_SIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>COLOR_SELECTOR_SIZE</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BAR_WIDTH</name></expr></argument>, <argument><expr><literal type="number">0x14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BAR_PADDING</name></expr></argument>, <argument><expr><literal type="number">0xa</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BAR_SELECTOR_HEIGHT</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>COLORPICKER</name></expr></argument>, <argument><expr><name>BAR_SELECTOR_PADDING</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <name>void</name></type> <name>GuiUpdateStyleComplete</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_CONTROLS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NUM_PROPS_DEFAULT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GuiSetStyle</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><call><name>GuiGetStyle</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>RAYGUIDEF</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GuiIconText</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iconId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"#%03i#"</literal></expr></argument>, <argument><expr><name>iconId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>text</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>text</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>buffer</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>GuiTextSplit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>textRow</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TEXT_BUFFER_LENGTH</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SUBSTRINGS_COUNT</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>result</name><index>[<expr><name>MAX_SUBSTRINGS_COUNT</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buffer</name><index>[<expr><name>MAX_TEXT_BUFFER_LENGTH</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_TEXT_BUFFER_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>textRow</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>textRow</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_TEXT_BUFFER_LENGTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>counter</name></expr>]</index></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>textRow</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>textRow</name><index>[<expr><name>counter</name></expr>]</index></name> <operator>=</operator> <name><name>textRow</name><index>[<expr><name>counter</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>textRow</name><index>[<expr><name>counter</name></expr>]</index></name> <operator>=</operator> <name><name>textRow</name><index>[<expr><name>counter</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>==</operator> <name>MAX_SUBSTRINGS_COUNT</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name>counter</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Vector3</name></type> <name>ConvertRGBtoHSV</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>rgb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector3</name></type> <name>hsv</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>min</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>max</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>delta</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>rgb</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>rgb</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>?</condition><then> <expr><name><name>rgb</name><operator>.</operator><name>x</name></name></expr> </then><else>: <expr><name><name>rgb</name><operator>.</operator><name>y</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>min</name> <operator>&lt;</operator> <name><name>rgb</name><operator>.</operator><name>z</name></name><operator>)</operator></expr>?</condition><then> <expr><name>min</name></expr> </then><else>: <expr><name><name>rgb</name><operator>.</operator><name>z</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>rgb</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>rgb</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>?</condition><then> <expr><name><name>rgb</name><operator>.</operator><name>x</name></name></expr> </then><else>: <expr><name><name>rgb</name><operator>.</operator><name>y</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>max</name> <operator>&gt;</operator> <name><name>rgb</name><operator>.</operator><name>z</name></name><operator>)</operator></expr>?</condition><then> <expr><name>max</name></expr> </then><else>: <expr><name><name>rgb</name><operator>.</operator><name>z</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>max</name> <operator>-</operator> <name>min</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;</operator> <literal type="number">0.00001f</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt> 

<return>return <expr><name>hsv</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>delta</name><operator>/</operator><name>max</name><operator>)</operator></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt> 

<return>return <expr><name>hsv</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rgb</name><operator>.</operator><name>x</name></name> <operator>&gt;=</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>rgb</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>rgb</name><operator>.</operator><name>z</name></name><operator>)</operator><operator>/</operator><name>delta</name></expr>;</expr_stmt></block_content></block></if> 

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rgb</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">2.0f</literal> <operator>+</operator> <operator>(</operator><name><name>rgb</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>rgb</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>/</operator><name>delta</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">4.0f</literal> <operator>+</operator> <operator>(</operator><name><name>rgb</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>rgb</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>/</operator><name>delta</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>x</name></name> <operator>*=</operator> <literal type="number">60.0f</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>hsv</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>hsv</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <literal type="number">360.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>hsv</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Vector3</name></type> <name>ConvertHSVtoRGB</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>hsv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector3</name></type> <name>rgb</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>hh</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>p</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>q</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>t</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>ff</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hsv</name><operator>.</operator><name>y</name></name> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rgb</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>hsv</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgb</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>hsv</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgb</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>hsv</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>

<return>return <expr><name>rgb</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hh</name> <operator>=</operator> <name><name>hsv</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hh</name> <operator>&gt;=</operator> <literal type="number">360.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>hh</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hh</name> <operator>/=</operator> <literal type="number">60.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>hh</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ff</name> <operator>=</operator> <name>hh</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>hsv</name><operator>.</operator><name>z</name></name><operator>*</operator><operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name><name>hsv</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>hsv</name><operator>.</operator><name>z</name></name><operator>*</operator><operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <operator>(</operator><name><name>hsv</name><operator>.</operator><name>y</name></name><operator>*</operator><name>ff</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>hsv</name><operator>.</operator><name>z</name></name><operator>*</operator><operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <operator>(</operator><name><name>hsv</name><operator>.</operator><name>y</name></name><operator>*</operator><operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>ff</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>i</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>rgb</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>hsv</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgb</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgb</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>rgb</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgb</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>hsv</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgb</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>rgb</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgb</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>hsv</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgb</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>rgb</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgb</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgb</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>hsv</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>rgb</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgb</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgb</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>hsv</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<default>default:</default>

<block>{<block_content>

<expr_stmt><expr><name><name>rgb</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>hsv</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgb</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgb</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>rgb</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RAYGUI_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>Color</name></type> <name>GetColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hexValue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>color</name><operator>.</operator><name>r</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>hexValue</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color</name><operator>.</operator><name>g</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>hexValue</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>hexValue</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color</name><operator>.</operator><name>a</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>hexValue</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<return>return <expr><name>color</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ColorToInt</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>color</name><operator>.</operator><name>r</name></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>color</name><operator>.</operator><name>g</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>color</name><operator>.</operator><name>b</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>color</name><operator>.</operator><name>a</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>CheckCollisionPointRec</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>point</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>collision</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>point</name><operator>.</operator><name>x</name></name> <operator>&gt;=</operator> <name><name>rec</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>point</name><operator>.</operator><name>x</name></name> <operator>&lt;=</operator> <operator>(</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>point</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <name><name>rec</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>point</name><operator>.</operator><name>y</name></name> <operator>&lt;=</operator> <operator>(</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>collision</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>collision</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Color</name></type> <name>Fade</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>alpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>alpha</name> <operator>&gt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <macro><name>RAYGUI_CLITERAL</name><argument_list>(<argument>Color</argument>)</argument_list></macro><expr><block>{ <expr><name><name>color</name><operator>.</operator><name>r</name></name></expr>, <expr><name><name>color</name><operator>.</operator><name>g</name></name></expr>, <expr><name><name>color</name><operator>.</operator><name>b</name></name></expr>, <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">255.0f</literal><operator>*</operator><name>alpha</name><operator>)</operator></expr> }</block></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TextFormat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FORMATTEXT_LENGTH</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buffer</name><index>[<expr><name>MAX_FORMATTEXT_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vsprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buffer</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawRectangleRec</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content> 

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>rec</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawRectangleLinesEx</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineThick</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>rec</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name>lineThick</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>rec</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>lineThick</name></expr></argument>, <argument><expr><name>lineThick</name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>lineThick</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name>lineThick</name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>lineThick</name></expr></argument>, <argument><expr><name>lineThick</name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>lineThick</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name><name>rec</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name>lineThick</name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name>lineThick</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawRectangleGradientV</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>posX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>bounds</name> <init>= <expr><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name>posX</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>posY</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>width</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>height</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DrawRectangleGradientEx</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><name>color1</name></expr></argument>, <argument><expr><name>color2</name></expr></argument>, <argument><expr><name>color2</name></expr></argument>, <argument><expr><name>color1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
