<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\core\core_2d_camera_platformer.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raymath.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G</name></cpp:macro> <cpp:value>400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLAYER_JUMP_SPD</name></cpp:macro> <cpp:value>350.f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLAYER_HOR_SPD</name></cpp:macro> <cpp:value>200.f</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>Player</name> <block>{

<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>speed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>canJump</name></decl>;</decl_stmt>

}</block></struct></type> <name>Player</name>;</typedef>

<typedef>typedef <type><struct>struct <name>EnvItem</name> <block>{

<decl_stmt><decl><type><name>Rectangle</name></type> <name>rect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blocking</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt>

}</block></struct></type> <name>EnvItem</name>;</typedef>

<function_decl><type><name>void</name></type> <name>UpdatePlayer</name><parameter_list>(<parameter><decl><type><name>Player</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>EnvItem</name> <modifier>*</modifier></type><name>envItems</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>envItemsLength</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>delta</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>UpdateCameraCenter</name><parameter_list>(<parameter><decl><type><name>Camera2D</name> <modifier>*</modifier></type><name>camera</name></decl></parameter>, <parameter><decl><type><name>Player</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>EnvItem</name> <modifier>*</modifier></type><name>envItems</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>envItemsLength</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>UpdateCameraCenterInsideMap</name><parameter_list>(<parameter><decl><type><name>Camera2D</name> <modifier>*</modifier></type><name>camera</name></decl></parameter>, <parameter><decl><type><name>Player</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>EnvItem</name> <modifier>*</modifier></type><name>envItems</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>envItemsLength</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>UpdateCameraCenterSmoothFollow</name><parameter_list>(<parameter><decl><type><name>Camera2D</name> <modifier>*</modifier></type><name>camera</name></decl></parameter>, <parameter><decl><type><name>Player</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>EnvItem</name> <modifier>*</modifier></type><name>envItems</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>envItemsLength</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>UpdateCameraEvenOutOnLanding</name><parameter_list>(<parameter><decl><type><name>Camera2D</name> <modifier>*</modifier></type><name>camera</name></decl></parameter>, <parameter><decl><type><name>Player</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>EnvItem</name> <modifier>*</modifier></type><name>envItems</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>envItemsLength</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>UpdateCameraPlayerBoundsPush</name><parameter_list>(<parameter><decl><type><name>Camera2D</name> <modifier>*</modifier></type><name>camera</name></decl></parameter>, <parameter><decl><type><name>Player</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>EnvItem</name> <modifier>*</modifier></type><name>envItems</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>envItemsLength</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [core] example - 2d camera"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Player</name></type> <name>player</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">400</literal></expr>, <expr><literal type="number">280</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>speed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>canJump</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>EnvItem</name></type> <name><name>envItems</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><literal type="number">400</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LIGHTGRAY</name></expr> }</block></expr>,

<expr><block>{<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">400</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><literal type="number">200</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>GRAY</name></expr> }</block></expr>,

<expr><block>{<expr><block>{ <expr><literal type="number">300</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">400</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>GRAY</name></expr> }</block></expr>,

<expr><block>{<expr><block>{ <expr><literal type="number">250</literal></expr>, <expr><literal type="number">300</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>GRAY</name></expr> }</block></expr>,

<expr><block>{<expr><block>{ <expr><literal type="number">650</literal></expr>, <expr><literal type="number">300</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>GRAY</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>envItemsLength</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>envItems</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>envItems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Camera2D</name></type> <name>camera</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>target</name></name> <operator>=</operator> <name><name>player</name><operator>.</operator><name>position</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name>screenWidth</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>screenHeight</name><operator>/</operator><literal type="number">2</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>rotation</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>zoom</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cameraUpdaters</name><index>[]</index>)<parameter_list>(<parameter><decl><type><name>Camera2D</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Player</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>EnvItem</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list> <init>= <expr><block>{

<expr><name>UpdateCameraCenter</name></expr></block></expr></init><operator>,</operator>

UpdateCameraCenterInsideMap<operator>,</operator>

UpdateCameraCenterSmoothFollow<operator>,</operator>

UpdateCameraEvenOutOnLanding<operator>,</operator>

UpdateCameraPlayerBoundsPush</function_decl>

</block_content>}</block></function><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cameraOption</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cameraUpdatersLength</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>cameraUpdaters</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>cameraUpdaters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>cameraDescriptions</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Follow player center"</literal></expr>,

<expr><literal type="string">"Follow player center, but clamp to map edges"</literal></expr>,

<expr><literal type="string">"Follow player center; smoothed"</literal></expr>,

<expr><literal type="string">"Follow player center horizontally; updateplayer center vertically after landing"</literal></expr>,

<expr><literal type="string">"Player push camera on getting too close to screen edge"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>deltaTime</name> <init>= <expr><call><name>GetFrameTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UpdatePlayer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>player</name></expr></argument>, <argument><expr><name>envItems</name></expr></argument>, <argument><expr><name>envItemsLength</name></expr></argument>, <argument><expr><name>deltaTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>zoom</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><call><name>GetMouseWheelMove</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">0.05f</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>camera</name><operator>.</operator><name>zoom</name></name> <operator>&gt;</operator> <literal type="number">3.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>camera</name><operator>.</operator><name>zoom</name></name> <operator>=</operator> <literal type="number">3.0f</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>camera</name><operator>.</operator><name>zoom</name></name> <operator>&lt;</operator> <literal type="number">0.25f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>camera</name><operator>.</operator><name>zoom</name></name> <operator>=</operator> <literal type="number">0.25f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_R</name></expr></argument>)</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>zoom</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">400</literal></expr>, <expr><literal type="number">280</literal></expr> }</block></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_C</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cameraOption</name> <operator>=</operator> <operator>(</operator><name>cameraOption</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>%</operator><name>cameraUpdatersLength</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cameraUpdaters</name><index>[<expr><name>cameraOption</name></expr>]</index></name><operator>(</operator><operator>&amp;</operator><name>camera</name><operator>,</operator> <operator>&amp;</operator><name>player</name><operator>,</operator> <name>envItems</name><operator>,</operator> <name>envItemsLength</name><operator>,</operator> <name>deltaTime</name><operator>,</operator> <name>screenWidth</name><operator>,</operator> <name>screenHeight</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>LIGHTGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginMode2D</name><argument_list>(<argument><expr><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>envItemsLength</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name><name>envItems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rect</name></expr></argument>, <argument><expr><name><name>envItems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>playerRect</name> <init>= <expr><block>{ <expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <literal type="number">20</literal></expr>, <expr><name><name>player</name><operator>.</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <literal type="number">40</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">40</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>playerRect</name></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndMode2D</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Controls:"</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"- Right/Left to move"</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"- Space to jump"</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"- Mouse Wheel to Zoom in-out, R to reset zoom"</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"- C to change camera mode"</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Current camera mode:"</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><name><name>cameraDescriptions</name><index>[<expr><name>cameraOption</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">140</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

}

void <macro><name>UpdatePlayer</name><argument_list>(<argument>Player *player</argument>, <argument>EnvItem *envItems</argument>, <argument>int envItemsLength</argument>, <argument>float delta</argument>)</argument_list></macro>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_LEFT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name>PLAYER_HOR_SPD</name><operator>*</operator><name>delta</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_RIGHT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>PLAYER_HOR_SPD</name><operator>*</operator><name>delta</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyDown</name><argument_list>(<argument><expr><name>KEY_SPACE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>player</name><operator>-&gt;</operator><name>canJump</name></name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>speed</name></name> <operator>=</operator> <operator>-</operator><name>PLAYER_JUMP_SPD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>canJump</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hitObstacle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>envItemsLength</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 

<block>{<block_content>

<decl_stmt><decl><type><name>EnvItem</name> <modifier>*</modifier></type><name>ei</name> <init>= <expr><name>envItems</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>player</name><operator>-&gt;</operator><name>position</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ei</name><operator>-&gt;</operator><name>blocking</name></name> <operator>&amp;&amp;</operator>

<name><name>ei</name><operator>-&gt;</operator><name>rect</name><operator>.</operator><name>x</name></name> <operator>&lt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>x</name></name> <operator>&amp;&amp;</operator> 

<name><name>ei</name><operator>-&gt;</operator><name>rect</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>ei</name><operator>-&gt;</operator><name>rect</name><operator>.</operator><name>width</name></name> <operator>&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>x</name></name> <operator>&amp;&amp;</operator>

<name><name>ei</name><operator>-&gt;</operator><name>rect</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>&amp;&amp;</operator>

<name><name>ei</name><operator>-&gt;</operator><name>rect</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name><name>player</name><operator>-&gt;</operator><name>speed</name></name><operator>*</operator><name>delta</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>hitObstacle</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>speed</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>ei</name><operator>-&gt;</operator><name>rect</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hitObstacle</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>player</name><operator>-&gt;</operator><name>speed</name></name><operator>*</operator><name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>speed</name></name> <operator>+=</operator> <name>G</name><operator>*</operator><name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>canJump</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if> 

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>player</name><operator>-&gt;</operator><name>canJump</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block>

<function><type><name>void</name></type> <name>UpdateCameraCenter</name><parameter_list>(<parameter><decl><type><name>Camera2D</name> <modifier>*</modifier></type><name>camera</name></decl></parameter>, <parameter><decl><type><name>Player</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>EnvItem</name> <modifier>*</modifier></type><name>envItems</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>envItemsLength</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>height</name><operator>/</operator><literal type="number">2</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name><name>player</name><operator>-&gt;</operator><name>position</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateCameraCenterInsideMap</name><parameter_list>(<parameter><decl><type><name>Camera2D</name> <modifier>*</modifier></type><name>camera</name></decl></parameter>, <parameter><decl><type><name>Player</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>EnvItem</name> <modifier>*</modifier></type><name>envItems</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>envItemsLength</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name><name>player</name><operator>-&gt;</operator><name>position</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>height</name><operator>/</operator><literal type="number">2</literal></expr> }</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>minX</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>, <decl><type ref="prev"/><name>minY</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxX</name> <init>= <expr><operator>-</operator><literal type="number">1000</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxY</name> <init>= <expr><operator>-</operator><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>envItemsLength</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>EnvItem</name> <modifier>*</modifier></type><name>ei</name> <init>= <expr><name>envItems</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>minX</name> <operator>=</operator> <call><name>fminf</name><argument_list>(<argument><expr><name><name>ei</name><operator>-&gt;</operator><name>rect</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>minX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>maxX</name> <operator>=</operator> <call><name>fmaxf</name><argument_list>(<argument><expr><name><name>ei</name><operator>-&gt;</operator><name>rect</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>ei</name><operator>-&gt;</operator><name>rect</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name>maxX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>minY</name> <operator>=</operator> <call><name>fminf</name><argument_list>(<argument><expr><name><name>ei</name><operator>-&gt;</operator><name>rect</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>minY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>maxY</name> <operator>=</operator> <call><name>fmaxf</name><argument_list>(<argument><expr><name><name>ei</name><operator>-&gt;</operator><name>rect</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>ei</name><operator>-&gt;</operator><name>rect</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>maxY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>Vector2</name></type> <name>max</name> <init>= <macro><name>GetWorldToScreen2D</name><argument_list>(<argument>(Vector2){ maxX</argument>, <argument>maxY }</argument>, <argument>*camera</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>min</name> <init>= <macro><name>GetWorldToScreen2D</name><argument_list>(<argument>(Vector2){ minX</argument>, <argument>minY }</argument>, <argument>*camera</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>max</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>width</name> <operator>-</operator> <operator>(</operator><name><name>max</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>width</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>max</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name>height</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>height</name> <operator>-</operator> <operator>(</operator><name><name>max</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>min</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>width</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>min</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>min</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>offset</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>height</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>min</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateCameraCenterSmoothFollow</name><parameter_list>(<parameter><decl><type><name>Camera2D</name> <modifier>*</modifier></type><name>camera</name></decl></parameter>, <parameter><decl><type><name>Player</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>EnvItem</name> <modifier>*</modifier></type><name>envItems</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>envItemsLength</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>minSpeed</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>minEffectLength</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>fractionSpeed</name> <init>= <expr><literal type="number">0.8f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>height</name><operator>/</operator><literal type="number">2</literal></expr> }</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>diff</name> <init>= <expr><call><name>Vector2Subtract</name><argument_list>(<argument><expr><name><name>player</name><operator>-&gt;</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>length</name> <init>= <expr><call><name>Vector2Length</name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name>minEffectLength</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>speed</name> <init>= <expr><call><name>fmaxf</name><argument_list>(<argument><expr><name>fractionSpeed</name><operator>*</operator><name>length</name></expr></argument>, <argument><expr><name>minSpeed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <call><name>Vector2Add</name><argument_list>(<argument><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><call><name>Vector2Scale</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>speed</name><operator>*</operator><name>delta</name><operator>/</operator><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateCameraEvenOutOnLanding</name><parameter_list>(<parameter><decl><type><name>Camera2D</name> <modifier>*</modifier></type><name>camera</name></decl></parameter>, <parameter><decl><type><name>Player</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>EnvItem</name> <modifier>*</modifier></type><name>envItems</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>envItemsLength</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>evenOutSpeed</name> <init>= <expr><literal type="number">700</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>eveningOut</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name>evenOutTarget</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><name>width</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><name>height</name><operator>/</operator><literal type="number">2</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>player</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eveningOut</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>evenOutTarget</name> <operator>&gt;</operator> <name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>evenOutSpeed</name><operator>*</operator><name>delta</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name>evenOutTarget</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>evenOutTarget</name></expr>;</expr_stmt>

<expr_stmt><expr><name>eveningOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> 

<else>else 

<block>{<block_content>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name>evenOutSpeed</name><operator>*</operator><name>delta</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name>evenOutTarget</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>evenOutTarget</name></expr>;</expr_stmt>

<expr_stmt><expr><name>eveningOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> 

<else>else 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>canJump</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>player</name><operator>-&gt;</operator><name>speed</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>player</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>!=</operator> <name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>eveningOut</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>evenOutTarget</name> <operator>=</operator> <name><name>player</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateCameraPlayerBoundsPush</name><parameter_list>(<parameter><decl><type><name>Camera2D</name> <modifier>*</modifier></type><name>camera</name></decl></parameter>, <parameter><decl><type><name>Player</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>EnvItem</name> <modifier>*</modifier></type><name>envItems</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>envItemsLength</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>Vector2</name></type> <name>bbox</name> <init>= <expr><block>{ <expr><literal type="number">0.2f</literal></expr>, <expr><literal type="number">0.2f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>bboxWorldMin</name> <init>= <macro><name>GetScreenToWorld2D</name><argument_list>(<argument>(Vector2){ (<literal type="number">1</literal> - bbox.x)*<literal type="number">0.5f</literal>*width</argument>, <argument>(<literal type="number">1</literal> - bbox.y)*<literal type="number">0.5f</literal>*height }</argument>, <argument>*camera</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>bboxWorldMax</name> <init>= <macro><name>GetScreenToWorld2D</name><argument_list>(<argument>(Vector2){ (<literal type="number">1</literal> + bbox.x)*<literal type="number">0.5f</literal>*width</argument>, <argument>(<literal type="number">1</literal> + bbox.y)*<literal type="number">0.5f</literal>*height }</argument>, <argument>*camera</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>bbox</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>*</operator><literal type="number">0.5f</literal> <operator>*</operator> <name>width</name></expr>, <expr><operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>bbox</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>*</operator><literal type="number">0.5f</literal><operator>*</operator><name>height</name></expr> }</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>bboxWorldMin</name><operator>.</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>player</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>bboxWorldMin</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>player</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>bboxWorldMax</name><operator>.</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>bboxWorldMin</name><operator>.</operator><name>x</name></name> <operator>+</operator> <operator>(</operator><name><name>player</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>bboxWorldMax</name><operator>.</operator><name>x</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>player</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name><name>bboxWorldMax</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>camera</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>bboxWorldMin</name><operator>.</operator><name>y</name></name> <operator>+</operator> <operator>(</operator><name><name>player</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>bboxWorldMax</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
