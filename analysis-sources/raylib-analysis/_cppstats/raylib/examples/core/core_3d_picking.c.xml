<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\core\core_3d_picking.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [core] example - 3d picking"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Camera</name></type> <name>camera</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>position</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">10.0f</literal></expr>, <expr><literal type="number">10.0f</literal></expr>, <expr><literal type="number">10.0f</literal></expr> }</block></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>target</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>up</name></name> <operator>=</operator> <operator>(</operator><name>Vector3</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>fovy</name></name> <operator>=</operator> <literal type="number">45.0f</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>camera</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CAMERA_PERSPECTIVE</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>Vector3</name></type> <name>cubePosition</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector3</name></type> <name>cubeSize</name> <init>= <expr><block>{ <expr><literal type="number">2.0f</literal></expr>, <expr><literal type="number">2.0f</literal></expr>, <expr><literal type="number">2.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Ray</name></type> <name>ray</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>collision</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetCameraMode</name><argument_list>(<argument><expr><name>camera</name></expr></argument>, <argument><expr><name>CAMERA_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateCamera</name><argument_list>(<argument><expr><operator>&amp;</operator><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>collision</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ray</name> <operator>=</operator> <call><name>GetMouseRay</name><argument_list>(<argument><expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>collision</name> <operator>=</operator> <macro><name>CheckCollisionRayBox</name><argument_list>(<argument>ray</argument>,

<argument>(BoundingBox){(Vector3){ cubePosition.x - cubeSize.x/<literal type="number">2</literal></argument>, <argument>cubePosition.y - cubeSize.y/<literal type="number">2</literal></argument>, <argument>cubePosition.z - cubeSize.z/<literal type="number">2</literal> }</argument>,

<argument>(Vector3){ cubePosition.x + cubeSize.x/<literal type="number">2</literal></argument>, <argument>cubePosition.y + cubeSize.y/<literal type="number">2</literal></argument>, <argument>cubePosition.z + cubeSize.z/<literal type="number">2</literal> }}</argument>)</argument_list></macro></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>collision</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginMode3D</name><argument_list>(<argument><expr><name>camera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>collision</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawCube</name><argument_list>(<argument><expr><name>cubePosition</name></expr></argument>, <argument><expr><name><name>cubeSize</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>cubeSize</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>cubeSize</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawCubeWires</name><argument_list>(<argument><expr><name>cubePosition</name></expr></argument>, <argument><expr><name><name>cubeSize</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>cubeSize</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>cubeSize</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name>MAROON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawCubeWires</name><argument_list>(<argument><expr><name>cubePosition</name></expr></argument>, <argument><expr><name><name>cubeSize</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">0.2f</literal></expr></argument>, <argument><expr><name><name>cubeSize</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">0.2f</literal></expr></argument>, <argument><expr><name><name>cubeSize</name><operator>.</operator><name>z</name></name> <operator>+</operator> <literal type="number">0.2f</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>DrawCube</name><argument_list>(<argument><expr><name>cubePosition</name></expr></argument>, <argument><expr><name><name>cubeSize</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>cubeSize</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>cubeSize</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawCubeWires</name><argument_list>(<argument><expr><name>cubePosition</name></expr></argument>, <argument><expr><name><name>cubeSize</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>cubeSize</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>cubeSize</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>DrawRay</name><argument_list>(<argument><expr><name>ray</name></expr></argument>, <argument><expr><name>MAROON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawGrid</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndMode3D</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Try selecting the box with mouse!"</literal></expr></argument>, <argument><expr><literal type="number">240</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>collision</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"BOX SELECTED"</literal></expr></argument>, <argument><expr><operator>(</operator><name>screenWidth</name> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><literal type="string">"BOX SELECTED"</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>screenHeight</name> <operator>*</operator> <literal type="number">0.1f</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DrawFPS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
