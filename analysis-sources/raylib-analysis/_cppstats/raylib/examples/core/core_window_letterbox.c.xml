<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\core\core_window_letterbox.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&gt;(b)? (a) : (b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&lt;(b)? (a) : (b))</cpp:value></cpp:define>

<function><type><name>Vector2</name></type> <name>ClampValue</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>result</name> <init>= <expr><name>value</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>result</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>max</name><operator>.</operator><name>x</name></name><operator>)</operator></expr>?</condition><then> <expr><name><name>max</name><operator>.</operator><name>x</name></name></expr> </then><else>: <expr><name><name>result</name><operator>.</operator><name>x</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>x</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>result</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>min</name><operator>.</operator><name>x</name></name><operator>)</operator></expr>?</condition><then> <expr><name><name>min</name><operator>.</operator><name>x</name></name></expr> </then><else>: <expr><name><name>result</name><operator>.</operator><name>x</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>result</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name><name>max</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>?</condition><then> <expr><name><name>max</name><operator>.</operator><name>y</name></name></expr> </then><else>: <expr><name><name>result</name><operator>.</operator><name>y</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>.</operator><name>y</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>result</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>min</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>?</condition><then> <expr><name><name>min</name><operator>.</operator><name>y</name></name></expr> </then><else>: <expr><name><name>result</name><operator>.</operator><name>y</name></name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>windowWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>windowHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetConfigFlags</name><argument_list>(<argument><expr><name>FLAG_WINDOW_RESIZABLE</name> <operator>|</operator> <name>FLAG_VSYNC_HINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>windowWidth</name></expr></argument>, <argument><expr><name>windowHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [core] example - window scale letterbox"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWindowMinSize</name><argument_list>(<argument><expr><literal type="number">320</literal></expr></argument>, <argument><expr><literal type="number">240</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gameScreenWidth</name> <init>= <expr><literal type="number">640</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gameScreenHeight</name> <init>= <expr><literal type="number">480</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RenderTexture2D</name></type> <name>target</name> <init>= <expr><call><name>LoadRenderTexture</name><argument_list>(<argument><expr><name>gameScreenWidth</name></expr></argument>, <argument><expr><name>gameScreenHeight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetTextureFilter</name><argument_list>(<argument><expr><name><name>target</name><operator>.</operator><name>texture</name></name></expr></argument>, <argument><expr><name>FILTER_BILINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>Color</name></type> <name><name>colors</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">250</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">150</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>scale</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>/</operator><name>gameScreenWidth</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>/</operator><name>gameScreenHeight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_SPACE</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">250</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">150</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mouse</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>virtualMouse</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>virtualMouse</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>mouse</name><operator>.</operator><name>x</name></name> <operator>-</operator> <operator>(</operator><call><name>GetScreenWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <operator>(</operator><name>gameScreenWidth</name><operator>*</operator><name>scale</name><operator>)</operator><operator>)</operator><operator>*</operator><literal type="number">0.5f</literal><operator>)</operator><operator>/</operator><name>scale</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>virtualMouse</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>mouse</name><operator>.</operator><name>y</name></name> <operator>-</operator> <operator>(</operator><call><name>GetScreenHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <operator>(</operator><name>gameScreenHeight</name><operator>*</operator><name>scale</name><operator>)</operator><operator>)</operator><operator>*</operator><literal type="number">0.5f</literal><operator>)</operator><operator>/</operator><name>scale</name></expr>;</expr_stmt>

<expr_stmt><expr><name>virtualMouse</name> <operator>=</operator> <macro><name>ClampValue</name><argument_list>(<argument>virtualMouse</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal> }</argument>, <argument>(Vector2){ gameScreenWidth</argument>, <argument>gameScreenHeight }</argument>)</argument_list></macro></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginTextureMode</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>gameScreenHeight</name><operator>/</operator><literal type="number">10</literal><operator>)</operator><operator>*</operator><name>i</name></expr></argument>, <argument><expr><name>gameScreenWidth</name></expr></argument>, <argument><expr><name>gameScreenHeight</name><operator>/</operator><literal type="number">10</literal></expr></argument>, <argument><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"If executed inside a window,\nyou can resize the window,\nand see the screen scaling!"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>TextFormat</name><argument_list>(<argument><expr><literal type="string">"Default Mouse: [%i , %i]"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>mouse</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>mouse</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">350</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>TextFormat</name><argument_list>(<argument><expr><literal type="string">"Virtual Mouse: [%i , %i]"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>virtualMouse</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>virtualMouse</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">350</literal></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>YELLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndTextureMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>target.texture</argument>, <argument>(Rectangle){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal></argument>, <argument>(float)target.texture.width</argument>, <argument>(float)-target.texture.height }</argument>,

<argument>(Rectangle){ (GetScreenWidth() - ((float)gameScreenWidth*scale))*<literal type="number">0.5</literal></argument>, <argument>(GetScreenHeight() - ((float)gameScreenHeight*scale))*<literal type="number">0.5</literal></argument>,

<argument>(float)gameScreenWidth*scale</argument>, <argument>(float)gameScreenHeight*scale }</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal> }</argument>, <argument><literal type="number">0.0f</literal></argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>UnloadRenderTexture</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
