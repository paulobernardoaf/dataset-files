<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\network\network_ping_pong.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RNET_IMPLEMENTATION</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rnet.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>float</name></type> <name>elapsed</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>delay</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ping</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>pong</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>connected</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>clientConnected</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pingmsg</name> <init>= <expr><literal type="string">"Ping!"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pongmsg</name> <init>= <expr><literal type="string">"Pong!"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>msglen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SocketConfig</name></type> <name>serverConfig</name> <init>= <expr><block>{ <expr><operator>.</operator><name>host</name> <operator>=</operator> <literal type="string">"127.0.0.1"</literal></expr>, <expr><operator>.</operator><name>port</name> <operator>=</operator> <literal type="string">"4950"</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>SOCKET_TCP</name></expr>, <expr><operator>.</operator><name>server</name> <operator>=</operator> <name>true</name></expr>, <expr><operator>.</operator><name>nonblocking</name> <operator>=</operator> <name>true</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SocketConfig</name></type> <name>clientConfig</name> <init>= <expr><block>{ <expr><operator>.</operator><name>host</name> <operator>=</operator> <literal type="string">"127.0.0.1"</literal></expr>, <expr><operator>.</operator><name>port</name> <operator>=</operator> <literal type="string">"4950"</literal></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>SOCKET_TCP</name></expr>, <expr><operator>.</operator><name>nonblocking</name> <operator>=</operator> <name>true</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SocketConfig</name></type> <name>connectionConfig</name> <init>= <expr><block>{ <expr><operator>.</operator><name>nonblocking</name> <operator>=</operator> <name>true</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SocketResult</name> <modifier>*</modifier></type><name>serverResult</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SocketResult</name> <modifier>*</modifier></type><name>clientResult</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SocketSet</name> <modifier>*</modifier></type><name>socketSet</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Socket</name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>receiveBuffer</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>NetworkConnect</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>serverConfig</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>SOCKET_UDP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>clientConfig</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>SOCKET_UDP</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ping</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>connected</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> 

<else>else 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>clientConnected</name></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>active</name> <init>= <expr><call><name>CheckSockets</name><argument_list>(<argument><expr><name>socketSet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>active</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TraceLog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"There are currently %d socket(s) with data to be processed."</literal></expr></argument>, <argument><expr><name>active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>active</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>connection</name> <operator>=</operator> <call><name>SocketAccept</name><argument_list>(<argument><expr><name><name>serverResult</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connectionConfig</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AddSocket</name><argument_list>(<argument><expr><name>socketSet</name></expr></argument>, <argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>connected</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ping</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> 

<else>else

<block>{<block_content>

<expr_stmt><expr><name>elapsed</name> <operator>+=</operator> <call><name>GetFrameTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>elapsed</name> <operator>&gt;</operator> <name>delay</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsSocketConnected</name><argument_list>(<argument><expr><name><name>clientResult</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>clientConnected</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>elapsed</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateNetwork</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>active</name> <init>= <expr><call><name>CheckSockets</name><argument_list>(<argument><expr><name>socketSet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>active</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>TraceLog</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"There are currently %d socket(s) with data to be processed."</literal></expr></argument>, <argument><expr><name>active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytesRecv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>serverConfig</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>SOCKET_UDP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>clientConfig</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>SOCKET_UDP</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsSocketReady</name><argument_list>(<argument><expr><name><name>clientResult</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bytesRecv</name> <operator>=</operator> <call><name>SocketReceive</name><argument_list>(<argument><expr><name><name>clientResult</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><name>receiveBuffer</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsSocketReady</name><argument_list>(<argument><expr><name><name>serverResult</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bytesRecv</name> <operator>=</operator> <call><name>SocketReceive</name><argument_list>(<argument><expr><name><name>serverResult</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><name>receiveBuffer</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> 

<if type="elseif">else if <condition>(<expr><call><name>IsSocketReady</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bytesRecv</name> <operator>=</operator> <call><name>SocketReceive</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>receiveBuffer</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesRecv</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>receiveBuffer</name></expr></argument>, <argument><expr><name>pingmsg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>pong</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>receiveBuffer</name></expr></argument>, <argument><expr><name>pongmsg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>ping</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>elapsed</name> <operator>+=</operator> <call><name>GetFrameTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>elapsed</name> <operator>&gt;</operator> <name>delay</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ping</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ping</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>serverConfig</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>SOCKET_UDP</name> <operator>&amp;&amp;</operator> <name><name>clientConfig</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>SOCKET_UDP</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SocketSend</name><argument_list>(<argument><expr><name><name>clientResult</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><name>pingmsg</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>SocketSend</name><argument_list>(<argument><expr><name><name>clientResult</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><name>pingmsg</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> 

<if type="elseif">else if <condition>(<expr><name>pong</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>pong</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>serverConfig</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>SOCKET_UDP</name> <operator>&amp;&amp;</operator> <name><name>clientConfig</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>SOCKET_UDP</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SocketSend</name><argument_list>(<argument><expr><name><name>clientResult</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><name>pongmsg</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>SocketSend</name><argument_list>(<argument><expr><name><name>clientResult</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>, <argument><expr><name>pongmsg</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>elapsed</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [network] example - ping pong"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitNetworkDevice</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>serverResult</name> <operator>=</operator> <call><name>LoadSocketResult</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SocketCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>serverConfig</name></expr></argument>, <argument><expr><name>serverResult</name></expr></argument>)</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>TraceLog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to open server: status %d, errno %d"</literal></expr></argument>, <argument><expr><name><name>serverResult</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name><name>serverResult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SocketBind</name><argument_list>(<argument><expr><operator>&amp;</operator><name>serverConfig</name></expr></argument>, <argument><expr><name>serverResult</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TraceLog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to bind server: status %d, errno %d"</literal></expr></argument>, <argument><expr><name><name>serverResult</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name><name>serverResult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> 

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>serverConfig</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>SOCKET_UDP</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SocketListen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>serverConfig</name></expr></argument>, <argument><expr><name>serverResult</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TraceLog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to start listen server: status %d, errno %d"</literal></expr></argument>, <argument><expr><name><name>serverResult</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name><name>serverResult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>clientResult</name> <operator>=</operator> <call><name>LoadSocketResult</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SocketCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clientConfig</name></expr></argument>, <argument><expr><name>clientResult</name></expr></argument>)</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>TraceLog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to open client: status %d, errno %d"</literal></expr></argument>, <argument><expr><name><name>clientResult</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name><name>clientResult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>clientConfig</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>SOCKET_UDP</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SocketConnect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clientConfig</name></expr></argument>, <argument><expr><name>clientResult</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TraceLog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to connect to server: status %d, errno %d"</literal></expr></argument>, <argument><expr><name><name>clientResult</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name><name>clientResult</name><operator>-&gt;</operator><name>socket</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>socketSet</name> <operator>=</operator> <call><name>LoadSocketSet</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddSocket</name><argument_list>(<argument><expr><name>socketSet</name></expr></argument>, <argument><expr><name><name>serverResult</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddSocket</name><argument_list>(<argument><expr><name>socketSet</name></expr></argument>, <argument><expr><name><name>clientResult</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>connected</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>UpdateNetwork</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>CloseNetworkDevice</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function></unit>
