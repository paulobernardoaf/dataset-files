<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\text\text_rectangle_bounds.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [text] example - draw text inside a rectangle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>text</name><index>[]</index></name> <init>= <expr><literal type="string">"Text cannot escape\tthis container\t...word wrap also works when active so here's \

a long text for testing.\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod \

tempor incididunt ut labore et dolore magna aliqua. Nec ullamcorper sit amet risus nullam eget felis eget."</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>resizing</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>wordWrap</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>container</name> <init>= <expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><name>screenWidth</name> <operator>-</operator> <literal type="number">50</literal></expr>, <expr><name>screenHeight</name> <operator>-</operator> <literal type="number">250</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>resizer</name> <init>= <expr><block>{ <expr><name><name>container</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>container</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">17</literal></expr>, <expr><name><name>container</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>container</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">17</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>minWidth</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>minHeight</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxWidth</name> <init>= <expr><name>screenWidth</name> <operator>-</operator> <literal type="number">50</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxHeight</name> <init>= <expr><name>screenHeight</name> <operator>-</operator> <literal type="number">160</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>lastMouse</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Color</name></type> <name>borderColor</name> <init>= <expr><name>MAROON</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Font</name></type> <name>font</name> <init>= <expr><call><name>GetFontDefault</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_SPACE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>wordWrap</name> <operator>=</operator> <operator>!</operator><name>wordWrap</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mouse</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mouse</name></expr></argument>, <argument><expr><name>container</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>borderColor</name> <operator>=</operator> <call><name>Fade</name><argument_list>(<argument><expr><name>MAROON</name></expr></argument>, <argument><expr><literal type="number">0.4f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>resizing</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>borderColor</name> <operator>=</operator> <name>MAROON</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>resizing</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonReleased</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>resizing</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>container</name><operator>.</operator><name>width</name></name> <operator>+</operator> <operator>(</operator><name><name>mouse</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>lastMouse</name><operator>.</operator><name>x</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>container</name><operator>.</operator><name>width</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>width</name> <operator>&gt;</operator> <name>minWidth</name><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>width</name> <operator>&lt;</operator> <name>maxWidth</name><operator>)</operator></expr>?</condition><then> <expr><name>width</name></expr> </then><else>: <expr><name>maxWidth</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><name>minWidth</name></expr></else></ternary></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>container</name><operator>.</operator><name>height</name></name> <operator>+</operator> <operator>(</operator><name><name>mouse</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>lastMouse</name><operator>.</operator><name>y</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>container</name><operator>.</operator><name>height</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>height</name> <operator>&gt;</operator> <name>minHeight</name><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>height</name> <operator>&lt;</operator> <name>maxHeight</name><operator>)</operator></expr>?</condition><then> <expr><name>height</name></expr> </then><else>: <expr><name>maxHeight</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><name>minHeight</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mouse</name></expr></argument>, <argument><expr><name>resizer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>resizing</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>resizer</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>container</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>container</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">17</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>resizer</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>container</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>container</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">17</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lastMouse</name> <operator>=</operator> <name>mouse</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>borderColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<macro><name>DrawTextRec</name><argument_list>(<argument>font</argument>, <argument>text</argument>,

<argument>(Rectangle){ container.x + <literal type="number">4</literal></argument>, <argument>container.y + <literal type="number">4</literal></argument>, <argument>container.width - <literal type="number">4</literal></argument>, <argument>container.height - <literal type="number">4</literal> }</argument>,

<argument><literal type="number">20.0f</literal></argument>, <argument><literal type="number">2.0f</literal></argument>, <argument>wordWrap</argument>, <argument>GRAY</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>resizer</name></expr></argument>, <argument><expr><name>borderColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>screenHeight</name> <operator>-</operator> <literal type="number">54</literal></expr></argument>, <argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><literal type="number">54</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawRectangleRec</name><argument_list>(<argument>(Rectangle){ <literal type="number">382</literal></argument>, <argument>screenHeight - <literal type="number">34</literal></argument>, <argument><literal type="number">12</literal></argument>, <argument><literal type="number">12</literal> }</argument>, <argument>MAROON</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Word Wrap: "</literal></expr></argument>, <argument><expr><literal type="number">313</literal></expr></argument>, <argument><expr><name>screenHeight</name><operator>-</operator><literal type="number">115</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wordWrap</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><literal type="number">447</literal></expr></argument>, <argument><expr><name>screenHeight</name> <operator>-</operator> <literal type="number">115</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"OFF"</literal></expr></argument>, <argument><expr><literal type="number">447</literal></expr></argument>, <argument><expr><name>screenHeight</name> <operator>-</operator> <literal type="number">115</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Press [SPACE] to toggle word wrap"</literal></expr></argument>, <argument><expr><literal type="number">218</literal></expr></argument>, <argument><expr><name>screenHeight</name> <operator>-</operator> <literal type="number">86</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"Click hold &amp; drag the to resize the container"</literal></expr></argument>, <argument><expr><literal type="number">155</literal></expr></argument>, <argument><expr><name>screenHeight</name> <operator>-</operator> <literal type="number">38</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function></unit>
