<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\textures\textures_mouse_painting.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_COLORS_COUNT</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define> 

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [textures] example - mouse painting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Color</name></type> <name><name>colors</name><index>[<expr><name>MAX_COLORS_COUNT</name></expr>]</index></name> <init>= <expr><block>{

<expr><name>RAYWHITE</name></expr>, <expr><name>YELLOW</name></expr>, <expr><name>GOLD</name></expr>, <expr><name>ORANGE</name></expr>, <expr><name>PINK</name></expr>, <expr><name>RED</name></expr>, <expr><name>MAROON</name></expr>, <expr><name>GREEN</name></expr>, <expr><name>LIME</name></expr>, <expr><name>DARKGREEN</name></expr>,

<expr><name>SKYBLUE</name></expr>, <expr><name>BLUE</name></expr>, <expr><name>DARKBLUE</name></expr>, <expr><name>PURPLE</name></expr>, <expr><name>VIOLET</name></expr>, <expr><name>DARKPURPLE</name></expr>, <expr><name>BEIGE</name></expr>, <expr><name>BROWN</name></expr>, <expr><name>DARKBROWN</name></expr>,

<expr><name>LIGHTGRAY</name></expr>, <expr><name>GRAY</name></expr>, <expr><name>DARKGRAY</name></expr>, <expr><name>BLACK</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name><name>colorsRecs</name><index>[<expr><name>MAX_COLORS_COUNT</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_COLORS_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>colorsRecs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">30</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colorsRecs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colorsRecs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colorsRecs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>colorSelected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>colorSelectedPrev</name> <init>= <expr><name>colorSelected</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>colorMouseHover</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>brushSize</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>btnSaveRec</name> <init>= <expr><block>{ <expr><literal type="number">750</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">30</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>btnSaveMouseHover</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>showSaveMessage</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>saveMessageCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RenderTexture2D</name></type> <name>target</name> <init>= <expr><call><name>LoadRenderTexture</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BeginTextureMode</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name><name>colors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndTextureMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>mousePos</name> <init>= <expr><call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_RIGHT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>colorSelected</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_LEFT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>colorSelected</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>colorSelected</name> <operator>&gt;=</operator> <name>MAX_COLORS_COUNT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>colorSelected</name> <operator>=</operator> <name>MAX_COLORS_COUNT</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>colorSelected</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>colorSelected</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_COLORS_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePos</name></expr></argument>, <argument><expr><name><name>colorsRecs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>colorMouseHover</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>colorMouseHover</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>colorMouseHover</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>IsMouseButtonPressed</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><name>colorSelected</name> <operator>=</operator> <name>colorMouseHover</name></expr>;</expr_stmt>

<expr_stmt><expr><name>colorSelectedPrev</name> <operator>=</operator> <name>colorSelected</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>brushSize</name> <operator>+=</operator> <call><name>GetMouseWheelMove</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>brushSize</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>brushSize</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>brushSize</name> <operator>&gt;</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>brushSize</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_C</name></expr></argument>)</argument_list></call></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>BeginTextureMode</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name><name>colors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndTextureMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>GetGestureDetected</name><argument_list>()</argument_list></call> <operator>==</operator> <name>GESTURE_DRAG</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>BeginTextureMode</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mousePos</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawCircle</name><argument_list>(<argument><expr><name><name>mousePos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>mousePos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>brushSize</name></expr></argument>, <argument><expr><name><name>colors</name><index>[<expr><name>colorSelected</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EndTextureMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_RIGHT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>colorSelected</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BeginTextureMode</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mousePos</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawCircle</name><argument_list>(<argument><expr><name><name>mousePos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>mousePos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>brushSize</name></expr></argument>, <argument><expr><name><name>colors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EndTextureMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>colorSelected</name> <operator>=</operator> <name>colorSelectedPrev</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionPointRec</name><argument_list>(<argument><expr><name>mousePos</name></expr></argument>, <argument><expr><name>btnSaveRec</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>btnSaveMouseHover</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>btnSaveMouseHover</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>btnSaveMouseHover</name> <operator>&amp;&amp;</operator> <call><name>IsMouseButtonReleased</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_S</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><call><name>GetTextureData</name><argument_list>(<argument><expr><name><name>target</name><operator>.</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ImageFlipVertical</name><argument_list>(<argument><expr><operator>&amp;</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ExportImage</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><literal type="string">"my_amazing_texture_painting.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>showSaveMessage</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>showSaveMessage</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>saveMessageCounter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>saveMessageCounter</name> <operator>&gt;</operator> <literal type="number">240</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>showSaveMessage</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>saveMessageCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>DrawTextureRec</name><argument_list>(<argument>target.texture</argument>, <argument>(Rectangle){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>target.texture.width</argument>, <argument>-target.texture.height }</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal> }</argument>, <argument>WHITE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mousePos</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <literal type="number">50</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_RIGHT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawCircleLines</name><argument_list>(<argument><expr><name><name>mousePos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>mousePos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>brushSize</name></expr></argument>, <argument><expr><name>GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawCircle</name><argument_list>(<argument><expr><call><name>GetMouseX</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetMouseY</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>brushSize</name></expr></argument>, <argument><expr><name><name>colors</name><index>[<expr><name>colorSelected</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawLine</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_COLORS_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name><name>colorsRecs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>DrawRectangleLines</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><name>LIGHTGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>colorMouseHover</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name><name>colorsRecs</name><index>[<expr><name>colorMouseHover</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>WHITE</name></expr></argument>, <argument><expr><literal type="number">0.6f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>DrawRectangleLinesEx</name><argument_list>(<argument>(Rectangle){ colorsRecs[colorSelected].x - <literal type="number">2</literal></argument>, <argument>colorsRecs[colorSelected].y - <literal type="number">2</literal></argument>, 

<argument>colorsRecs[colorSelected].width + <literal type="number">4</literal></argument>, <argument>colorsRecs[colorSelected].height + <literal type="number">4</literal> }</argument>, <argument><literal type="number">2</literal></argument>, <argument>BLACK</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>DrawRectangleLinesEx</name><argument_list>(<argument><expr><name>btnSaveRec</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>btnSaveMouseHover</name></expr>?</condition><then> <expr><name>RED</name></expr> </then><else>: <expr><name>BLACK</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"SAVE!"</literal></expr></argument>, <argument><expr><literal type="number">755</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>btnSaveMouseHover</name></expr>?</condition><then> <expr><name>RED</name></expr> </then><else>: <expr><name>BLACK</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>showSaveMessage</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetScreenHeight</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>Fade</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>, <argument><expr><literal type="number">0.8f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">150</literal></expr></argument>, <argument><expr><call><name>GetScreenWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"IMAGE SAVED: my_amazing_texture_painting.png"</literal></expr></argument>, <argument><expr><literal type="number">150</literal></expr></argument>, <argument><expr><literal type="number">180</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>UnloadRenderTexture</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
