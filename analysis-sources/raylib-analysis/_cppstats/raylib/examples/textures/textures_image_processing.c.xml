<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\textures\textures_image_processing.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_PROCESSES</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{

<decl><name>NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>COLOR_GRAYSCALE</name></decl>,

<decl><name>COLOR_TINT</name></decl>,

<decl><name>COLOR_INVERT</name></decl>,

<decl><name>COLOR_CONTRAST</name></decl>,

<decl><name>COLOR_BRIGHTNESS</name></decl>,

<decl><name>FLIP_VERTICAL</name></decl>,

<decl><name>FLIP_HORIZONTAL</name></decl>

}</block></enum></type> <name>ImageProcess</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>processText</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"NO PROCESSING"</literal></expr>,

<expr><literal type="string">"COLOR GRAYSCALE"</literal></expr>,

<expr><literal type="string">"COLOR TINT"</literal></expr>,

<expr><literal type="string">"COLOR INVERT"</literal></expr>,

<expr><literal type="string">"COLOR CONTRAST"</literal></expr>,

<expr><literal type="string">"COLOR BRIGHTNESS"</literal></expr>,

<expr><literal type="string">"FLIP VERTICAL"</literal></expr>,

<expr><literal type="string">"FLIP HORIZONTAL"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [textures] example - image processing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><call><name>LoadImage</name><argument_list>(<argument><expr><literal type="string">"resources/parrots.png"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>image</name></expr></argument>, <argument><expr><name>UNCOMPRESSED_R8G8B8A8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>Texture2D</name></type> <name>texture</name> <init>= <expr><call><name>LoadTextureFromImage</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>currentProcess</name> <init>= <expr><name>NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>textureReload</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name><name>selectRecs</name><index>[<expr><name>NUM_PROCESSES</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_PROCESSES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>selectRecs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><literal type="number">40.0f</literal></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><literal type="number">50</literal> <operator>+</operator> <literal type="number">32</literal><operator>*</operator><name>i</name><operator>)</operator></expr>, <expr><literal type="number">150.0f</literal></expr>, <expr><literal type="number">30.0f</literal></expr> }</block></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_DOWN</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>currentProcess</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>currentProcess</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>currentProcess</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>textureReload</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>IsKeyPressed</name><argument_list>(<argument><expr><name>KEY_UP</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>currentProcess</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>currentProcess</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>currentProcess</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>textureReload</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>textureReload</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>image</name> <operator>=</operator> <call><name>LoadImage</name><argument_list>(<argument><expr><literal type="string">"resources/parrots.png"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<switch>switch <condition>(<expr><name>currentProcess</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>COLOR_GRAYSCALE</name></expr>:</case> <expr_stmt><expr><call><name>ImageColorGrayscale</name><argument_list>(<argument><expr><operator>&amp;</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>COLOR_TINT</name></expr>:</case> <expr_stmt><expr><call><name>ImageColorTint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>image</name></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>COLOR_INVERT</name></expr>:</case> <expr_stmt><expr><call><name>ImageColorInvert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>COLOR_CONTRAST</name></expr>:</case> <expr_stmt><expr><call><name>ImageColorContrast</name><argument_list>(<argument><expr><operator>&amp;</operator><name>image</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>COLOR_BRIGHTNESS</name></expr>:</case> <expr_stmt><expr><call><name>ImageColorBrightness</name><argument_list>(<argument><expr><operator>&amp;</operator><name>image</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>FLIP_VERTICAL</name></expr>:</case> <expr_stmt><expr><call><name>ImageFlipVertical</name><argument_list>(<argument><expr><operator>&amp;</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>FLIP_HORIZONTAL</name></expr>:</case> <expr_stmt><expr><call><name>ImageFlipHorizontal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>UpdateTexture</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>textureReload</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><literal type="string">"IMAGE PROCESSING:"</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>DARKGRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_PROCESSES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name><name>selectRecs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>currentProcess</name><operator>)</operator></expr> ?</condition><then> <expr><name>SKYBLUE</name></expr> </then><else>: <expr><name>LIGHTGRAY</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangleLines</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>selectRecs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>selectRecs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>selectRecs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>selectRecs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>currentProcess</name><operator>)</operator></expr> ?</condition><then> <expr><name>BLUE</name></expr> </then><else>: <expr><name>GRAY</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>( <argument><expr><name><name>processText</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <name><name>selectRecs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <name><name>selectRecs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <call><name>MeasureText</name><argument_list>(<argument><expr><name><name>processText</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>selectRecs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>+</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>currentProcess</name><operator>)</operator></expr> ?</condition><then> <expr><name>DARKBLUE</name></expr> </then><else>: <expr><name>DARKGRAY</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><name>screenWidth</name> <operator>-</operator> <name><name>texture</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>screenHeight</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>texture</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangleLines</name><argument_list>(<argument><expr><name>screenWidth</name> <operator>-</operator> <name><name>texture</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>screenHeight</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name><name>texture</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>texture</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>texture</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function></unit>
