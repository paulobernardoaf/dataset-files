<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\examples\textures\textures_bunnymark.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BUNNIES</name></cpp:macro> <cpp:value>50000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BATCH_ELEMENTS</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>Bunny</name> <block>{

<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>speed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt>

}</block></struct></type> <name>Bunny</name>;</typedef>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenWidth</name> <init>= <expr><literal type="number">800</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>screenHeight</name> <init>= <expr><literal type="number">450</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>InitWindow</name><argument_list>(<argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>, <argument><expr><literal type="string">"raylib [textures] example - bunnymark"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Texture2D</name></type> <name>texBunny</name> <init>= <expr><call><name>LoadTexture</name><argument_list>(<argument><expr><literal type="string">"resources/wabbit_alpha.png"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Bunny</name> <modifier>*</modifier></type><name>bunnies</name> <init>= <expr><operator>(</operator><name>Bunny</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>MAX_BUNNIES</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Bunny</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>bunniesCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>SetTargetFPS</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>!</operator><call><name>WindowShouldClose</name><argument_list>()</argument_list></call></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsMouseButtonDown</name><argument_list>(<argument><expr><name>MOUSE_LEFT_BUTTON</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bunniesCount</name> <operator>&lt;</operator> <name>MAX_BUNNIES</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>bunnies</name><index>[<expr><name>bunniesCount</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <call><name>GetMousePosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bunnies</name><index>[<expr><name>bunniesCount</name></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">250</literal></expr></argument>, <argument><expr><literal type="number">250</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">60.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bunnies</name><index>[<expr><name>bunniesCount</name></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>GetRandomValue</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">250</literal></expr></argument>, <argument><expr><literal type="number">250</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">60.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bunnies</name><index>[<expr><name>bunniesCount</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <operator>(</operator><name>Color</name><operator>)</operator><block>{ <expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">240</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><literal type="number">240</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>GetRandomValue</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">240</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">255</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name>bunniesCount</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bunniesCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>bunnies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>bunnies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bunnies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>bunnies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>bunnies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>texBunny</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>&gt;</operator> <call><name>GetScreenWidth</name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name><name>bunnies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>texBunny</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>bunnies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>x</name></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>bunnies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>texBunny</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>&gt;</operator> <call><name>GetScreenHeight</name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name><name>bunnies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>texBunny</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">40</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>bunnies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>speed</name><operator>.</operator><name>y</name></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>BeginDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ClearBackground</name><argument_list>(<argument><expr><name>RAYWHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bunniesCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawTexture</name><argument_list>(<argument><expr><name>texBunny</name></expr></argument>, <argument><expr><name><name>bunnies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>bunnies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>bunnies</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><name>BLACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"bunnies: %i"</literal></expr></argument>, <argument><expr><name>bunniesCount</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>FormatText</name><argument_list>(<argument><expr><literal type="string">"batched draw calls: %i"</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>bunniesCount</name><operator>/</operator><name>MAX_BATCH_ELEMENTS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">320</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>MAROON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawFPS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EndDrawing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bunnies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name>texBunny</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>CloseWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
