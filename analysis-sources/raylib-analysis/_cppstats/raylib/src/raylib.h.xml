<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\raylib.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BUILD_LIBTYPE_SHARED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLAPI</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define> 

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LIBTYPE_SHARED</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLAPI</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLAPI</name></cpp:macro></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLAPI</name></cpp:macro></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.14159265358979323846f</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEG2RAD</name></cpp:macro> <cpp:value>(PI/180.0f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAD2DEG</name></cpp:macro> <cpp:value>(180.0f/PI)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TOUCH_POINTS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RL_MALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_MALLOC</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>malloc(sz)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RL_CALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_CALLOC</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>calloc(n,sz)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RL_REALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_REALLOC</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>,<parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>realloc(ptr,sz)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RL_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RL_FREE</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(ptr)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLITERAL</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLITERAL</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(type)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIGHTGRAY</name></cpp:macro> <cpp:value>CLITERAL(Color){ 200, 200, 200, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAY</name></cpp:macro> <cpp:value>CLITERAL(Color){ 130, 130, 130, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DARKGRAY</name></cpp:macro> <cpp:value>CLITERAL(Color){ 80, 80, 80, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YELLOW</name></cpp:macro> <cpp:value>CLITERAL(Color){ 253, 249, 0, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GOLD</name></cpp:macro> <cpp:value>CLITERAL(Color){ 255, 203, 0, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORANGE</name></cpp:macro> <cpp:value>CLITERAL(Color){ 255, 161, 0, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PINK</name></cpp:macro> <cpp:value>CLITERAL(Color){ 255, 109, 194, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RED</name></cpp:macro> <cpp:value>CLITERAL(Color){ 230, 41, 55, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAROON</name></cpp:macro> <cpp:value>CLITERAL(Color){ 190, 33, 55, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GREEN</name></cpp:macro> <cpp:value>CLITERAL(Color){ 0, 228, 48, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIME</name></cpp:macro> <cpp:value>CLITERAL(Color){ 0, 158, 47, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DARKGREEN</name></cpp:macro> <cpp:value>CLITERAL(Color){ 0, 117, 44, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKYBLUE</name></cpp:macro> <cpp:value>CLITERAL(Color){ 102, 191, 255, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLUE</name></cpp:macro> <cpp:value>CLITERAL(Color){ 0, 121, 241, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DARKBLUE</name></cpp:macro> <cpp:value>CLITERAL(Color){ 0, 82, 172, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PURPLE</name></cpp:macro> <cpp:value>CLITERAL(Color){ 200, 122, 255, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIOLET</name></cpp:macro> <cpp:value>CLITERAL(Color){ 135, 60, 190, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DARKPURPLE</name></cpp:macro> <cpp:value>CLITERAL(Color){ 112, 31, 126, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEIGE</name></cpp:macro> <cpp:value>CLITERAL(Color){ 211, 176, 131, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROWN</name></cpp:macro> <cpp:value>CLITERAL(Color){ 127, 106, 79, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DARKBROWN</name></cpp:macro> <cpp:value>CLITERAL(Color){ 76, 63, 47, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WHITE</name></cpp:macro> <cpp:value>CLITERAL(Color){ 255, 255, 255, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLACK</name></cpp:macro> <cpp:value>CLITERAL(Color){ 0, 0, 0, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLANK</name></cpp:macro> <cpp:value>CLITERAL(Color){ 0, 0, 0, 0 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGENTA</name></cpp:macro> <cpp:value>CLITERAL(Color){ 255, 0, 255, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAYWHITE</name></cpp:macro> <cpp:value>CLITERAL(Color){ 245, 245, 245, 255 }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FormatText</name></cpp:macro> <cpp:value>TextFormat</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SubText</name></cpp:macro> <cpp:value>TextSubtext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ShowWindow</name></cpp:macro> <cpp:value>UnhideWindow</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LoadText</name></cpp:macro> <cpp:value>LoadFileText</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<typedef>typedef <type><enum>enum <block>{ <decl><name>false</name></decl>, <decl><name>true</name></decl> }</block></enum></type> <name>bool</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>Vector2</name> <block>{

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>

}</block></struct></type> <name>Vector2</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Vector3</name> <block>{

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>z</name></decl>;</decl_stmt>

}</block></struct></type> <name>Vector3</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Vector4</name> <block>{

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>z</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>w</name></decl>;</decl_stmt>

}</block></struct></type> <name>Vector4</name>;</typedef>

<typedef>typedef <type><name>Vector4</name></type> <name>Quaternion</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Matrix</name> <block>{

<decl_stmt><decl><type><name>float</name></type> <name>m0</name></decl>, <name>m4</name>, <name>m8</name>, <name>m12</name>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>m1</name></decl>, <name>m5</name>, <name>m9</name>, <name>m13</name>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>m2</name></decl>, <name>m6</name>, <name>m10</name>, <name>m14</name>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>m3</name></decl>, <name>m7</name>, <name>m11</name>, <name>m15</name>;</decl_stmt>

}</block></struct></type> <name>Matrix</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Color</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>g</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>a</name></decl>;</decl_stmt>

}</block></struct></type> <name>Color</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Rectangle</name> <block>{

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>height</name></decl>;</decl_stmt>

}</block></struct></type> <name>Rectangle</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Image</name> <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mipmaps</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Image</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Texture2D</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mipmaps</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Texture2D</name>;</typedef>

<typedef>typedef <type><name>Texture2D</name></type> <name>Texture</name>;</typedef>

<typedef>typedef <type><name>Texture2D</name></type> <name>TextureCubemap</name>;</typedef>

<typedef>typedef <type><struct>struct <name>RenderTexture2D</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Texture2D</name></type> <name>texture</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Texture2D</name></type> <name>depth</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>depthTexture</name></decl>;</decl_stmt> 

}</block></struct></type> <name>RenderTexture2D</name>;</typedef>

<typedef>typedef <type><name>RenderTexture2D</name></type> <name>RenderTexture</name>;</typedef>

<typedef>typedef <type><struct>struct <name>NPatchInfo</name> <block>{

<decl_stmt><decl><type><name>Rectangle</name></type> <name>sourceRec</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>left</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>top</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>right</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>bottom</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt> 

}</block></struct></type> <name>NPatchInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>CharInfo</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>offsetX</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>offsetY</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>advanceX</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Image</name></type> <name>image</name></decl>;</decl_stmt> 

}</block></struct></type> <name>CharInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Font</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>baseSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>charsCount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Texture2D</name></type> <name>texture</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Rectangle</name> <modifier>*</modifier></type><name>recs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>CharInfo</name> <modifier>*</modifier></type><name>chars</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Font</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SpriteFont</name></cpp:macro> <cpp:value>Font</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <name>Camera3D</name> <block>{

<decl_stmt><decl><type><name>Vector3</name></type> <name>position</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Vector3</name></type> <name>target</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Vector3</name></type> <name>up</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>fovy</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Camera3D</name>;</typedef>

<typedef>typedef <type><name>Camera3D</name></type> <name>Camera</name>;</typedef> 

<typedef>typedef <type><struct>struct <name>Camera2D</name> <block>{

<decl_stmt><decl><type><name>Vector2</name></type> <name>offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Vector2</name></type> <name>target</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>rotation</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>zoom</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Camera2D</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Mesh</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>vertexCount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>triangleCount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>vertices</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>texcoords</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>texcoords2</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>normals</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>tangents</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>colors</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>indices</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>animVertices</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>animNormals</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>boneIds</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>boneWeights</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>vaoId</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>vboId</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Mesh</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Shader</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>locs</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Shader</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MaterialMap</name> <block>{

<decl_stmt><decl><type><name>Texture2D</name></type> <name>texture</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Color</name></type> <name>color</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>value</name></decl>;</decl_stmt> 

}</block></struct></type> <name>MaterialMap</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Material</name> <block>{

<decl_stmt><decl><type><name>Shader</name></type> <name>shader</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>MaterialMap</name> <modifier>*</modifier></type><name>maps</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>params</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Material</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Transform</name> <block>{

<decl_stmt><decl><type><name>Vector3</name></type> <name>translation</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Quaternion</name></type> <name>rotation</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Vector3</name></type> <name>scale</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Transform</name>;</typedef>

<typedef>typedef <type><struct>struct <name>BoneInfo</name> <block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>parent</name></decl>;</decl_stmt> 

}</block></struct></type> <name>BoneInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Model</name> <block>{

<decl_stmt><decl><type><name>Matrix</name></type> <name>transform</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>meshCount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Mesh</name> <modifier>*</modifier></type><name>meshes</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>materialCount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Material</name> <modifier>*</modifier></type><name>materials</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>meshMaterial</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>boneCount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>BoneInfo</name> <modifier>*</modifier></type><name>bones</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Transform</name> <modifier>*</modifier></type><name>bindPose</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Model</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ModelAnimation</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>boneCount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>BoneInfo</name> <modifier>*</modifier></type><name>bones</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>frameCount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Transform</name> <modifier>*</modifier><modifier>*</modifier></type><name>framePoses</name></decl>;</decl_stmt> 

}</block></struct></type> <name>ModelAnimation</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Ray</name> <block>{

<decl_stmt><decl><type><name>Vector3</name></type> <name>position</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Vector3</name></type> <name>direction</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Ray</name>;</typedef>

<typedef>typedef <type><struct>struct <name>RayHitInfo</name> <block>{

<decl_stmt><decl><type><name>bool</name></type> <name>hit</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>distance</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Vector3</name></type> <name>position</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Vector3</name></type> <name>normal</name></decl>;</decl_stmt> 

}</block></struct></type> <name>RayHitInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>BoundingBox</name> <block>{

<decl_stmt><decl><type><name>Vector3</name></type> <name>min</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Vector3</name></type> <name>max</name></decl>;</decl_stmt> 

}</block></struct></type> <name>BoundingBox</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Wave</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleCount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Wave</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>rAudioBuffer</name></name></type> <name>rAudioBuffer</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AudioStream</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>rAudioBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt> 

}</block></struct></type> <name>AudioStream</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Sound</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleCount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AudioStream</name></type> <name>stream</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Sound</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Music</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>ctxType</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctxData</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleCount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>loopCount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AudioStream</name></type> <name>stream</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Music</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VrDeviceInfo</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>hResolution</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>vResolution</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>hScreenSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>vScreenSize</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>vScreenCenter</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>eyeToScreenDistance</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>lensSeparationDistance</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>interpupillaryDistance</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>lensDistortionValues</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>chromaAbCorrection</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>VrDeviceInfo</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>FLAG_RESERVED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>FLAG_FULLSCREEN_MODE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<decl><name>FLAG_WINDOW_RESIZABLE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 

<decl><name>FLAG_WINDOW_UNDECORATED</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, 

<decl><name>FLAG_WINDOW_TRANSPARENT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>, 

<decl><name>FLAG_WINDOW_HIDDEN</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>, 

<decl><name>FLAG_WINDOW_ALWAYS_RUN</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>, 

<decl><name>FLAG_MSAA_4X_HINT</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>, 

<decl><name>FLAG_VSYNC_HINT</name> <init>= <expr><literal type="number">64</literal></expr></init></decl> 

}</block></enum></type> <name>ConfigFlag</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>LOG_ALL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>LOG_TRACE</name></decl>,

<decl><name>LOG_DEBUG</name></decl>,

<decl><name>LOG_INFO</name></decl>,

<decl><name>LOG_WARNING</name></decl>,

<decl><name>LOG_ERROR</name></decl>,

<decl><name>LOG_FATAL</name></decl>,

<decl><name>LOG_NONE</name></decl> 

}</block></enum></type> <name>TraceLogType</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>KEY_APOSTROPHE</name> <init>= <expr><literal type="number">39</literal></expr></init></decl>,

<decl><name>KEY_COMMA</name> <init>= <expr><literal type="number">44</literal></expr></init></decl>,

<decl><name>KEY_MINUS</name> <init>= <expr><literal type="number">45</literal></expr></init></decl>,

<decl><name>KEY_PERIOD</name> <init>= <expr><literal type="number">46</literal></expr></init></decl>,

<decl><name>KEY_SLASH</name> <init>= <expr><literal type="number">47</literal></expr></init></decl>,

<decl><name>KEY_ZERO</name> <init>= <expr><literal type="number">48</literal></expr></init></decl>,

<decl><name>KEY_ONE</name> <init>= <expr><literal type="number">49</literal></expr></init></decl>,

<decl><name>KEY_TWO</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>,

<decl><name>KEY_THREE</name> <init>= <expr><literal type="number">51</literal></expr></init></decl>,

<decl><name>KEY_FOUR</name> <init>= <expr><literal type="number">52</literal></expr></init></decl>,

<decl><name>KEY_FIVE</name> <init>= <expr><literal type="number">53</literal></expr></init></decl>,

<decl><name>KEY_SIX</name> <init>= <expr><literal type="number">54</literal></expr></init></decl>,

<decl><name>KEY_SEVEN</name> <init>= <expr><literal type="number">55</literal></expr></init></decl>,

<decl><name>KEY_EIGHT</name> <init>= <expr><literal type="number">56</literal></expr></init></decl>,

<decl><name>KEY_NINE</name> <init>= <expr><literal type="number">57</literal></expr></init></decl>,

<decl><name>KEY_SEMICOLON</name> <init>= <expr><literal type="number">59</literal></expr></init></decl>,

<decl><name>KEY_EQUAL</name> <init>= <expr><literal type="number">61</literal></expr></init></decl>,

<decl><name>KEY_A</name> <init>= <expr><literal type="number">65</literal></expr></init></decl>,

<decl><name>KEY_B</name> <init>= <expr><literal type="number">66</literal></expr></init></decl>,

<decl><name>KEY_C</name> <init>= <expr><literal type="number">67</literal></expr></init></decl>,

<decl><name>KEY_D</name> <init>= <expr><literal type="number">68</literal></expr></init></decl>,

<decl><name>KEY_E</name> <init>= <expr><literal type="number">69</literal></expr></init></decl>,

<decl><name>KEY_F</name> <init>= <expr><literal type="number">70</literal></expr></init></decl>,

<decl><name>KEY_G</name> <init>= <expr><literal type="number">71</literal></expr></init></decl>,

<decl><name>KEY_H</name> <init>= <expr><literal type="number">72</literal></expr></init></decl>,

<decl><name>KEY_I</name> <init>= <expr><literal type="number">73</literal></expr></init></decl>,

<decl><name>KEY_J</name> <init>= <expr><literal type="number">74</literal></expr></init></decl>,

<decl><name>KEY_K</name> <init>= <expr><literal type="number">75</literal></expr></init></decl>,

<decl><name>KEY_L</name> <init>= <expr><literal type="number">76</literal></expr></init></decl>,

<decl><name>KEY_M</name> <init>= <expr><literal type="number">77</literal></expr></init></decl>,

<decl><name>KEY_N</name> <init>= <expr><literal type="number">78</literal></expr></init></decl>,

<decl><name>KEY_O</name> <init>= <expr><literal type="number">79</literal></expr></init></decl>,

<decl><name>KEY_P</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>,

<decl><name>KEY_Q</name> <init>= <expr><literal type="number">81</literal></expr></init></decl>,

<decl><name>KEY_R</name> <init>= <expr><literal type="number">82</literal></expr></init></decl>,

<decl><name>KEY_S</name> <init>= <expr><literal type="number">83</literal></expr></init></decl>,

<decl><name>KEY_T</name> <init>= <expr><literal type="number">84</literal></expr></init></decl>,

<decl><name>KEY_U</name> <init>= <expr><literal type="number">85</literal></expr></init></decl>,

<decl><name>KEY_V</name> <init>= <expr><literal type="number">86</literal></expr></init></decl>,

<decl><name>KEY_W</name> <init>= <expr><literal type="number">87</literal></expr></init></decl>,

<decl><name>KEY_X</name> <init>= <expr><literal type="number">88</literal></expr></init></decl>,

<decl><name>KEY_Y</name> <init>= <expr><literal type="number">89</literal></expr></init></decl>,

<decl><name>KEY_Z</name> <init>= <expr><literal type="number">90</literal></expr></init></decl>,

<decl><name>KEY_SPACE</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,

<decl><name>KEY_ESCAPE</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>,

<decl><name>KEY_ENTER</name> <init>= <expr><literal type="number">257</literal></expr></init></decl>,

<decl><name>KEY_TAB</name> <init>= <expr><literal type="number">258</literal></expr></init></decl>,

<decl><name>KEY_BACKSPACE</name> <init>= <expr><literal type="number">259</literal></expr></init></decl>,

<decl><name>KEY_INSERT</name> <init>= <expr><literal type="number">260</literal></expr></init></decl>,

<decl><name>KEY_DELETE</name> <init>= <expr><literal type="number">261</literal></expr></init></decl>,

<decl><name>KEY_RIGHT</name> <init>= <expr><literal type="number">262</literal></expr></init></decl>,

<decl><name>KEY_LEFT</name> <init>= <expr><literal type="number">263</literal></expr></init></decl>,

<decl><name>KEY_DOWN</name> <init>= <expr><literal type="number">264</literal></expr></init></decl>,

<decl><name>KEY_UP</name> <init>= <expr><literal type="number">265</literal></expr></init></decl>,

<decl><name>KEY_PAGE_UP</name> <init>= <expr><literal type="number">266</literal></expr></init></decl>,

<decl><name>KEY_PAGE_DOWN</name> <init>= <expr><literal type="number">267</literal></expr></init></decl>,

<decl><name>KEY_HOME</name> <init>= <expr><literal type="number">268</literal></expr></init></decl>,

<decl><name>KEY_END</name> <init>= <expr><literal type="number">269</literal></expr></init></decl>,

<decl><name>KEY_CAPS_LOCK</name> <init>= <expr><literal type="number">280</literal></expr></init></decl>,

<decl><name>KEY_SCROLL_LOCK</name> <init>= <expr><literal type="number">281</literal></expr></init></decl>,

<decl><name>KEY_NUM_LOCK</name> <init>= <expr><literal type="number">282</literal></expr></init></decl>,

<decl><name>KEY_PRINT_SCREEN</name> <init>= <expr><literal type="number">283</literal></expr></init></decl>,

<decl><name>KEY_PAUSE</name> <init>= <expr><literal type="number">284</literal></expr></init></decl>,

<decl><name>KEY_F1</name> <init>= <expr><literal type="number">290</literal></expr></init></decl>,

<decl><name>KEY_F2</name> <init>= <expr><literal type="number">291</literal></expr></init></decl>,

<decl><name>KEY_F3</name> <init>= <expr><literal type="number">292</literal></expr></init></decl>,

<decl><name>KEY_F4</name> <init>= <expr><literal type="number">293</literal></expr></init></decl>,

<decl><name>KEY_F5</name> <init>= <expr><literal type="number">294</literal></expr></init></decl>,

<decl><name>KEY_F6</name> <init>= <expr><literal type="number">295</literal></expr></init></decl>,

<decl><name>KEY_F7</name> <init>= <expr><literal type="number">296</literal></expr></init></decl>,

<decl><name>KEY_F8</name> <init>= <expr><literal type="number">297</literal></expr></init></decl>,

<decl><name>KEY_F9</name> <init>= <expr><literal type="number">298</literal></expr></init></decl>,

<decl><name>KEY_F10</name> <init>= <expr><literal type="number">299</literal></expr></init></decl>,

<decl><name>KEY_F11</name> <init>= <expr><literal type="number">300</literal></expr></init></decl>,

<decl><name>KEY_F12</name> <init>= <expr><literal type="number">301</literal></expr></init></decl>,

<decl><name>KEY_LEFT_SHIFT</name> <init>= <expr><literal type="number">340</literal></expr></init></decl>,

<decl><name>KEY_LEFT_CONTROL</name> <init>= <expr><literal type="number">341</literal></expr></init></decl>,

<decl><name>KEY_LEFT_ALT</name> <init>= <expr><literal type="number">342</literal></expr></init></decl>,

<decl><name>KEY_LEFT_SUPER</name> <init>= <expr><literal type="number">343</literal></expr></init></decl>,

<decl><name>KEY_RIGHT_SHIFT</name> <init>= <expr><literal type="number">344</literal></expr></init></decl>,

<decl><name>KEY_RIGHT_CONTROL</name> <init>= <expr><literal type="number">345</literal></expr></init></decl>,

<decl><name>KEY_RIGHT_ALT</name> <init>= <expr><literal type="number">346</literal></expr></init></decl>,

<decl><name>KEY_RIGHT_SUPER</name> <init>= <expr><literal type="number">347</literal></expr></init></decl>,

<decl><name>KEY_KB_MENU</name> <init>= <expr><literal type="number">348</literal></expr></init></decl>,

<decl><name>KEY_LEFT_BRACKET</name> <init>= <expr><literal type="number">91</literal></expr></init></decl>,

<decl><name>KEY_BACKSLASH</name> <init>= <expr><literal type="number">92</literal></expr></init></decl>,

<decl><name>KEY_RIGHT_BRACKET</name> <init>= <expr><literal type="number">93</literal></expr></init></decl>,

<decl><name>KEY_GRAVE</name> <init>= <expr><literal type="number">96</literal></expr></init></decl>,

<decl><name>KEY_KP_0</name> <init>= <expr><literal type="number">320</literal></expr></init></decl>,

<decl><name>KEY_KP_1</name> <init>= <expr><literal type="number">321</literal></expr></init></decl>,

<decl><name>KEY_KP_2</name> <init>= <expr><literal type="number">322</literal></expr></init></decl>,

<decl><name>KEY_KP_3</name> <init>= <expr><literal type="number">323</literal></expr></init></decl>,

<decl><name>KEY_KP_4</name> <init>= <expr><literal type="number">324</literal></expr></init></decl>,

<decl><name>KEY_KP_5</name> <init>= <expr><literal type="number">325</literal></expr></init></decl>,

<decl><name>KEY_KP_6</name> <init>= <expr><literal type="number">326</literal></expr></init></decl>,

<decl><name>KEY_KP_7</name> <init>= <expr><literal type="number">327</literal></expr></init></decl>,

<decl><name>KEY_KP_8</name> <init>= <expr><literal type="number">328</literal></expr></init></decl>,

<decl><name>KEY_KP_9</name> <init>= <expr><literal type="number">329</literal></expr></init></decl>,

<decl><name>KEY_KP_DECIMAL</name> <init>= <expr><literal type="number">330</literal></expr></init></decl>,

<decl><name>KEY_KP_DIVIDE</name> <init>= <expr><literal type="number">331</literal></expr></init></decl>,

<decl><name>KEY_KP_MULTIPLY</name> <init>= <expr><literal type="number">332</literal></expr></init></decl>,

<decl><name>KEY_KP_SUBTRACT</name> <init>= <expr><literal type="number">333</literal></expr></init></decl>,

<decl><name>KEY_KP_ADD</name> <init>= <expr><literal type="number">334</literal></expr></init></decl>,

<decl><name>KEY_KP_ENTER</name> <init>= <expr><literal type="number">335</literal></expr></init></decl>,

<decl><name>KEY_KP_EQUAL</name> <init>= <expr><literal type="number">336</literal></expr></init></decl>

}</block></enum></type> <name>KeyboardKey</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>KEY_BACK</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>KEY_MENU</name> <init>= <expr><literal type="number">82</literal></expr></init></decl>,

<decl><name>KEY_VOLUME_UP</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>,

<decl><name>KEY_VOLUME_DOWN</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>

}</block></enum></type> <name>AndroidButton</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>MOUSE_LEFT_BUTTON</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>MOUSE_RIGHT_BUTTON</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>MOUSE_MIDDLE_BUTTON</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>

}</block></enum></type> <name>MouseButton</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>GAMEPAD_PLAYER1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>GAMEPAD_PLAYER2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>GAMEPAD_PLAYER3</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>GAMEPAD_PLAYER4</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>

}</block></enum></type> <name>GamepadNumber</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>GAMEPAD_BUTTON_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>GAMEPAD_BUTTON_LEFT_FACE_UP</name></decl>,

<decl><name>GAMEPAD_BUTTON_LEFT_FACE_RIGHT</name></decl>,

<decl><name>GAMEPAD_BUTTON_LEFT_FACE_DOWN</name></decl>,

<decl><name>GAMEPAD_BUTTON_LEFT_FACE_LEFT</name></decl>,

<decl><name>GAMEPAD_BUTTON_RIGHT_FACE_UP</name></decl>,

<decl><name>GAMEPAD_BUTTON_RIGHT_FACE_RIGHT</name></decl>,

<decl><name>GAMEPAD_BUTTON_RIGHT_FACE_DOWN</name></decl>,

<decl><name>GAMEPAD_BUTTON_RIGHT_FACE_LEFT</name></decl>,

<decl><name>GAMEPAD_BUTTON_LEFT_TRIGGER_1</name></decl>,

<decl><name>GAMEPAD_BUTTON_LEFT_TRIGGER_2</name></decl>,

<decl><name>GAMEPAD_BUTTON_RIGHT_TRIGGER_1</name></decl>,

<decl><name>GAMEPAD_BUTTON_RIGHT_TRIGGER_2</name></decl>,

<decl><name>GAMEPAD_BUTTON_MIDDLE_LEFT</name></decl>, 

<decl><name>GAMEPAD_BUTTON_MIDDLE</name></decl>, 

<decl><name>GAMEPAD_BUTTON_MIDDLE_RIGHT</name></decl>, 

<decl><name>GAMEPAD_BUTTON_LEFT_THUMB</name></decl>,

<decl><name>GAMEPAD_BUTTON_RIGHT_THUMB</name></decl>

}</block></enum></type> <name>GamepadButton</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>GAMEPAD_AXIS_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>GAMEPAD_AXIS_LEFT_X</name></decl>,

<decl><name>GAMEPAD_AXIS_LEFT_Y</name></decl>,

<decl><name>GAMEPAD_AXIS_RIGHT_X</name></decl>,

<decl><name>GAMEPAD_AXIS_RIGHT_Y</name></decl>,

<decl><name>GAMEPAD_AXIS_LEFT_TRIGGER</name></decl>, 

<decl><name>GAMEPAD_AXIS_RIGHT_TRIGGER</name></decl> 

}</block></enum></type> <name>GamepadAxis</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>LOC_VERTEX_POSITION</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>LOC_VERTEX_TEXCOORD01</name></decl>,

<decl><name>LOC_VERTEX_TEXCOORD02</name></decl>,

<decl><name>LOC_VERTEX_NORMAL</name></decl>,

<decl><name>LOC_VERTEX_TANGENT</name></decl>,

<decl><name>LOC_VERTEX_COLOR</name></decl>,

<decl><name>LOC_MATRIX_MVP</name></decl>,

<decl><name>LOC_MATRIX_MODEL</name></decl>,

<decl><name>LOC_MATRIX_VIEW</name></decl>,

<decl><name>LOC_MATRIX_PROJECTION</name></decl>,

<decl><name>LOC_VECTOR_VIEW</name></decl>,

<decl><name>LOC_COLOR_DIFFUSE</name></decl>,

<decl><name>LOC_COLOR_SPECULAR</name></decl>,

<decl><name>LOC_COLOR_AMBIENT</name></decl>,

<decl><name>LOC_MAP_ALBEDO</name></decl>, 

<decl><name>LOC_MAP_METALNESS</name></decl>, 

<decl><name>LOC_MAP_NORMAL</name></decl>,

<decl><name>LOC_MAP_ROUGHNESS</name></decl>,

<decl><name>LOC_MAP_OCCLUSION</name></decl>,

<decl><name>LOC_MAP_EMISSION</name></decl>,

<decl><name>LOC_MAP_HEIGHT</name></decl>,

<decl><name>LOC_MAP_CUBEMAP</name></decl>,

<decl><name>LOC_MAP_IRRADIANCE</name></decl>,

<decl><name>LOC_MAP_PREFILTER</name></decl>,

<decl><name>LOC_MAP_BRDF</name></decl>

}</block></enum></type> <name>ShaderLocationIndex</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOC_MAP_DIFFUSE</name></cpp:macro> <cpp:value>LOC_MAP_ALBEDO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOC_MAP_SPECULAR</name></cpp:macro> <cpp:value>LOC_MAP_METALNESS</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{

<decl><name>UNIFORM_FLOAT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>UNIFORM_VEC2</name></decl>,

<decl><name>UNIFORM_VEC3</name></decl>,

<decl><name>UNIFORM_VEC4</name></decl>,

<decl><name>UNIFORM_INT</name></decl>,

<decl><name>UNIFORM_IVEC2</name></decl>,

<decl><name>UNIFORM_IVEC3</name></decl>,

<decl><name>UNIFORM_IVEC4</name></decl>,

<decl><name>UNIFORM_SAMPLER2D</name></decl>

}</block></enum></type> <name>ShaderUniformDataType</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>MAP_ALBEDO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>MAP_METALNESS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>MAP_NORMAL</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>MAP_ROUGHNESS</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>MAP_OCCLUSION</name></decl>,

<decl><name>MAP_EMISSION</name></decl>,

<decl><name>MAP_HEIGHT</name></decl>,

<decl><name>MAP_CUBEMAP</name></decl>, 

<decl><name>MAP_IRRADIANCE</name></decl>, 

<decl><name>MAP_PREFILTER</name></decl>, 

<decl><name>MAP_BRDF</name></decl>

}</block></enum></type> <name>MaterialMapType</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_DIFFUSE</name></cpp:macro> <cpp:value>MAP_ALBEDO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_SPECULAR</name></cpp:macro> <cpp:value>MAP_METALNESS</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{

<decl><name>UNCOMPRESSED_GRAYSCALE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>UNCOMPRESSED_GRAY_ALPHA</name></decl>, 

<decl><name>UNCOMPRESSED_R5G6B5</name></decl>, 

<decl><name>UNCOMPRESSED_R8G8B8</name></decl>, 

<decl><name>UNCOMPRESSED_R5G5B5A1</name></decl>, 

<decl><name>UNCOMPRESSED_R4G4B4A4</name></decl>, 

<decl><name>UNCOMPRESSED_R8G8B8A8</name></decl>, 

<decl><name>UNCOMPRESSED_R32</name></decl>, 

<decl><name>UNCOMPRESSED_R32G32B32</name></decl>, 

<decl><name>UNCOMPRESSED_R32G32B32A32</name></decl>, 

<decl><name>COMPRESSED_DXT1_RGB</name></decl>, 

<decl><name>COMPRESSED_DXT1_RGBA</name></decl>, 

<decl><name>COMPRESSED_DXT3_RGBA</name></decl>, 

<decl><name>COMPRESSED_DXT5_RGBA</name></decl>, 

<decl><name>COMPRESSED_ETC1_RGB</name></decl>, 

<decl><name>COMPRESSED_ETC2_RGB</name></decl>, 

<decl><name>COMPRESSED_ETC2_EAC_RGBA</name></decl>, 

<decl><name>COMPRESSED_PVRT_RGB</name></decl>, 

<decl><name>COMPRESSED_PVRT_RGBA</name></decl>, 

<decl><name>COMPRESSED_ASTC_4x4_RGBA</name></decl>, 

<decl><name>COMPRESSED_ASTC_8x8_RGBA</name></decl> 

}</block></enum></type> <name>PixelFormat</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>FILTER_POINT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>FILTER_BILINEAR</name></decl>, 

<decl><name>FILTER_TRILINEAR</name></decl>, 

<decl><name>FILTER_ANISOTROPIC_4X</name></decl>, 

<decl><name>FILTER_ANISOTROPIC_8X</name></decl>, 

<decl><name>FILTER_ANISOTROPIC_16X</name></decl>, 

}</block></enum></type> <name>TextureFilterMode</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>CUBEMAP_AUTO_DETECT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>CUBEMAP_LINE_VERTICAL</name></decl>, 

<decl><name>CUBEMAP_LINE_HORIZONTAL</name></decl>, 

<decl><name>CUBEMAP_CROSS_THREE_BY_FOUR</name></decl>, 

<decl><name>CUBEMAP_CROSS_FOUR_BY_THREE</name></decl>, 

<decl><name>CUBEMAP_PANORAMA</name></decl> 

}</block></enum></type> <name>CubemapLayoutType</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>WRAP_REPEAT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>WRAP_CLAMP</name></decl>, 

<decl><name>WRAP_MIRROR_REPEAT</name></decl>, 

<decl><name>WRAP_MIRROR_CLAMP</name></decl> 

}</block></enum></type> <name>TextureWrapMode</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>FONT_DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>FONT_BITMAP</name></decl>, 

<decl><name>FONT_SDF</name></decl> 

}</block></enum></type> <name>FontType</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>BLEND_ALPHA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>BLEND_ADDITIVE</name></decl>, 

<decl><name>BLEND_MULTIPLIED</name></decl> 

}</block></enum></type> <name>BlendMode</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>GESTURE_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>GESTURE_TAP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>GESTURE_DOUBLETAP</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>GESTURE_HOLD</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>GESTURE_DRAG</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>GESTURE_SWIPE_RIGHT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>GESTURE_SWIPE_LEFT</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,

<decl><name>GESTURE_SWIPE_UP</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>,

<decl><name>GESTURE_SWIPE_DOWN</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>,

<decl><name>GESTURE_PINCH_IN</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>,

<decl><name>GESTURE_PINCH_OUT</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>

}</block></enum></type> <name>GestureType</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>CAMERA_CUSTOM</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>CAMERA_FREE</name></decl>,

<decl><name>CAMERA_ORBITAL</name></decl>,

<decl><name>CAMERA_FIRST_PERSON</name></decl>,

<decl><name>CAMERA_THIRD_PERSON</name></decl>

}</block></enum></type> <name>CameraMode</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>CAMERA_PERSPECTIVE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>CAMERA_ORTHOGRAPHIC</name></decl>

}</block></enum></type> <name>CameraType</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>NPT_9PATCH</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>NPT_3PATCH_VERTICAL</name></decl>, 

<decl><name>NPT_3PATCH_HORIZONTAL</name></decl> 

}</block></enum></type> <name>NPatchType</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>TraceLogCallback</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>logType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>InitWindow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>WindowShouldClose</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>CloseWindow</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsWindowReady</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsWindowMinimized</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsWindowResized</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsWindowHidden</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsWindowFullscreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ToggleFullscreen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>UnhideWindow</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>HideWindow</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetWindowIcon</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetWindowTitle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetWindowPosition</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetWindowMonitor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetWindowMinSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetWindowSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name> <modifier>*</modifier></type><name>GetWindowHandle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetScreenWidth</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetScreenHeight</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetMonitorCount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetMonitorWidth</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetMonitorHeight</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetMonitorPhysicalWidth</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetMonitorPhysicalHeight</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Vector2</name></type> <name>GetWindowPosition</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetMonitorName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>monitor</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetClipboardText</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetClipboardText</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ShowCursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>HideCursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsCursorHidden</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>EnableCursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DisableCursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ClearBackground</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>BeginDrawing</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>EndDrawing</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>BeginMode2D</name><parameter_list>(<parameter><decl><type><name>Camera2D</name></type> <name>camera</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>EndMode2D</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>BeginMode3D</name><parameter_list>(<parameter><decl><type><name>Camera3D</name></type> <name>camera</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>EndMode3D</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>BeginTextureMode</name><parameter_list>(<parameter><decl><type><name>RenderTexture2D</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>EndTextureMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>BeginScissorMode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>EndScissorMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Ray</name></type> <name>GetMouseRay</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>mousePosition</name></decl></parameter>, <parameter><decl><type><name>Camera</name></type> <name>camera</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Matrix</name></type> <name>GetCameraMatrix</name><parameter_list>(<parameter><decl><type><name>Camera</name></type> <name>camera</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Matrix</name></type> <name>GetCameraMatrix2D</name><parameter_list>(<parameter><decl><type><name>Camera2D</name></type> <name>camera</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Vector2</name></type> <name>GetWorldToScreen</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Camera</name></type> <name>camera</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Vector2</name></type> <name>GetWorldToScreenEx</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Camera</name></type> <name>camera</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Vector2</name></type> <name>GetWorldToScreen2D</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Camera2D</name></type> <name>camera</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Vector2</name></type> <name>GetScreenToWorld2D</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Camera2D</name></type> <name>camera</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetTargetFPS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fps</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetFPS</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>float</name></type> <name>GetFrameTime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>double</name></type> <name>GetTime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>ColorToInt</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Vector4</name></type> <name>ColorNormalize</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Color</name></type> <name>ColorFromNormalized</name><parameter_list>(<parameter><decl><type><name>Vector4</name></type> <name>normalized</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Vector3</name></type> <name>ColorToHSV</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Color</name></type> <name>ColorFromHSV</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>hsv</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Color</name></type> <name>GetColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hexValue</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Color</name></type> <name>Fade</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>alpha</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetConfigFlags</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetTraceLogLevel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>logType</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetTraceLogExit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>logType</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetTraceLogCallback</name><parameter_list>(<parameter><decl><type><name>TraceLogCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>TraceLog</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>logType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>TakeScreenshot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetRandomValue</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>LoadFileData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>bytesRead</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SaveFileData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bytesToWrite</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>char</name> <modifier>*</modifier></type><name>LoadFileText</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SaveFileText</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>FileExists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsFileExtension</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>DirectoryExists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirPath</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetExtension</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetFileName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filePath</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetFileNameWithoutExt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filePath</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetDirectoryPath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filePath</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetPrevDirectoryPath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirPath</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetWorkingDirectory</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>GetDirectoryFiles</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirPath</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ClearDirectoryFiles</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>ChangeDirectory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsFileDropped</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>GetDroppedFiles</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ClearDroppedFiles</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>long</name></type> <name>GetFileModTime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>CompressData</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dataLength</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>compDataLength</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>DecompressData</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>compData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compDataLength</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dataLength</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SaveStorageValue</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>LoadStorageValue</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>OpenURL</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsKeyPressed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsKeyDown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsKeyReleased</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsKeyUp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetExitKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetKeyPressed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsGamepadAvailable</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gamepad</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsGamepadName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gamepad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GetGamepadName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gamepad</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsGamepadButtonPressed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gamepad</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsGamepadButtonDown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gamepad</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsGamepadButtonReleased</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gamepad</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsGamepadButtonUp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gamepad</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetGamepadButtonPressed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetGamepadAxisCount</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gamepad</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>float</name></type> <name>GetGamepadAxisMovement</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gamepad</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>axis</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsMouseButtonPressed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsMouseButtonDown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsMouseButtonReleased</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsMouseButtonUp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>button</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetMouseX</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetMouseY</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Vector2</name></type> <name>GetMousePosition</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetMousePosition</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetMouseOffset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>offsetX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offsetY</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetMouseScale</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>scaleX</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scaleY</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetMouseWheelMove</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetTouchX</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetTouchY</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Vector2</name></type> <name>GetTouchPosition</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetGesturesEnabled</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>gestureFlags</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsGestureDetected</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gesture</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetGestureDetected</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetTouchPointsCount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>float</name></type> <name>GetGestureHoldDuration</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Vector2</name></type> <name>GetGestureDragVector</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>float</name></type> <name>GetGestureDragAngle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Vector2</name></type> <name>GetGesturePinchVector</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>float</name></type> <name>GetGesturePinchAngle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetCameraMode</name><parameter_list>(<parameter><decl><type><name>Camera</name></type> <name>camera</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>UpdateCamera</name><parameter_list>(<parameter><decl><type><name>Camera</name> <modifier>*</modifier></type><name>camera</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetCameraPanControl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>panKey</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetCameraAltControl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>altKey</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetCameraSmoothZoomControl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>szKey</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetCameraMoveControls</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>frontKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rightKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>leftKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>upKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>downKey</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawPixel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>posX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posY</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawPixelV</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawLine</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>startPosX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startPosY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endPosX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endPosY</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawLineV</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>startPos</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>endPos</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawLineEx</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>startPos</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>endPos</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>thick</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawLineBezier</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>startPos</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>endPos</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>thick</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawLineStrip</name><parameter_list>(<parameter><decl><type><name>Vector2</name> <modifier>*</modifier></type><name>points</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numPoints</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawCircle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>centerX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>centerY</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawCircleSector</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startAngle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endAngle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segments</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawCircleSectorLines</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startAngle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endAngle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segments</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawCircleGradient</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>centerX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>centerY</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color2</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawCircleV</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawCircleLines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>centerX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>centerY</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawEllipse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>centerX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>centerY</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radiusH</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radiusV</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawEllipseLines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>centerX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>centerY</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radiusH</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radiusV</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawRing</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>innerRadius</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>outerRadius</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startAngle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endAngle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segments</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawRingLines</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>innerRadius</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>outerRadius</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startAngle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endAngle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segments</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawRectangle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>posX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawRectangleV</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawRectangleRec</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawRectanglePro</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>origin</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rotation</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawRectangleGradientV</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>posX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawRectangleGradientH</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>posX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawRectangleGradientEx</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>col1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>col2</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>col3</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>col4</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawRectangleLines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>posX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawRectangleLinesEx</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineThick</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawRectangleRounded</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>roundness</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segments</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawRectangleRoundedLines</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>roundness</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segments</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineThick</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawTriangle</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v3</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawTriangleLines</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v3</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawTriangleFan</name><parameter_list>(<parameter><decl><type><name>Vector2</name> <modifier>*</modifier></type><name>points</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numPoints</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawTriangleStrip</name><parameter_list>(<parameter><decl><type><name>Vector2</name> <modifier>*</modifier></type><name>points</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pointsCount</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawPoly</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sides</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rotation</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawPolyLines</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sides</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rotation</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>CheckCollisionRecs</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>rec1</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec2</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>CheckCollisionCircles</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>center1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius1</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>center2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius2</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>CheckCollisionCircleRec</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Rectangle</name></type> <name>GetCollisionRec</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>rec1</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec2</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>CheckCollisionPointRec</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>point</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>CheckCollisionPointCircle</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>point</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>CheckCollisionPointTriangle</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>point</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>p2</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>p3</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Image</name></type> <name>LoadImage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Image</name></type> <name>LoadImageEx</name><parameter_list>(<parameter><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Image</name></type> <name>LoadImagePro</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Image</name></type> <name>LoadImageRaw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>headerSize</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>UnloadImage</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ExportImage</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ExportImageAsCode</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Color</name> <modifier>*</modifier></type><name>GetImageData</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Vector4</name> <modifier>*</modifier></type><name>GetImageDataNormalized</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Image</name></type> <name>GenImageColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Image</name></type> <name>GenImageGradientV</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>bottom</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Image</name></type> <name>GenImageGradientH</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>right</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Image</name></type> <name>GenImageGradientRadial</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>density</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>inner</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>outer</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Image</name></type> <name>GenImageChecked</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>checksX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>checksY</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>col1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>col2</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Image</name></type> <name>GenImageWhiteNoise</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>factor</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Image</name></type> <name>GenImagePerlinNoise</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offsetX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offsetY</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Image</name></type> <name>GenImageCellular</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tileSize</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Image</name></type> <name>ImageCopy</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Image</name></type> <name>ImageFromImage</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Image</name></type> <name>ImageText</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Image</name></type> <name>ImageTextEx</name><parameter_list>(<parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>spacing</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageToPOT</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>fillColor</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageFormat</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newFormat</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageAlphaMask</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>Image</name></type> <name>alphaMask</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageAlphaClear</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>threshold</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageAlphaCrop</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>threshold</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageAlphaPremultiply</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageCrop</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>crop</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageResize</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newHeight</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageResizeNN</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newWidth</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>newHeight</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageResizeCanvas</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newHeight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offsetX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offsetY</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageMipmaps</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageDither</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rBpp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gBpp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bBpp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>aBpp</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageFlipVertical</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageFlipHorizontal</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageRotateCW</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageRotateCCW</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageColorTint</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageColorInvert</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageColorGrayscale</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageColorContrast</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>contrast</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageColorBrightness</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>brightness</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageColorReplace</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>replace</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Color</name> <modifier>*</modifier></type><name>ImageExtractPalette</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxPaletteSize</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>extractCount</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Rectangle</name></type> <name>GetImageAlphaBorder</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>threshold</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageClearBackground</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageDrawPixel</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posY</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageDrawPixelV</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageDrawLine</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startPosX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startPosY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endPosX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endPosY</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageDrawLineV</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageDrawCircle</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>centerX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>centerY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageDrawCircleV</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageDrawRectangle</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageDrawRectangleV</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageDrawRectangleRec</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageDrawRectangleLines</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thick</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageDraw</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Image</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>srcRec</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>dstRec</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageDrawText</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ImageDrawTextEx</name><parameter_list>(<parameter><decl><type><name>Image</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>spacing</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Texture2D</name></type> <name>LoadTexture</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Texture2D</name></type> <name>LoadTextureFromImage</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>TextureCubemap</name></type> <name>LoadTextureCubemap</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>layoutType</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>RenderTexture2D</name></type> <name>LoadRenderTexture</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>UnloadTexture</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>UnloadRenderTexture</name><parameter_list>(<parameter><decl><type><name>RenderTexture2D</name></type> <name>target</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>UpdateTexture</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Image</name></type> <name>GetTextureData</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Image</name></type> <name>GetScreenData</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>GenTextureMipmaps</name><parameter_list>(<parameter><decl><type><name>Texture2D</name> <modifier>*</modifier></type><name>texture</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetTextureFilter</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filterMode</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetTextureWrap</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wrapMode</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawTexture</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posY</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawTextureV</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawTextureEx</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rotation</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawTextureRec</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>sourceRec</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawTextureQuad</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>tiling</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>quad</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawTexturePro</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>sourceRec</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>destRec</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>origin</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rotation</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawTextureNPatch</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>NPatchInfo</name></type> <name>nPatchInfo</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>destRec</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>origin</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rotation</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetPixelDataSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Font</name></type> <name>GetFontDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Font</name></type> <name>LoadFont</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Font</name></type> <name>LoadFontEx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fontChars</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>charsCount</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Font</name></type> <name>LoadFontFromImage</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstChar</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>CharInfo</name> <modifier>*</modifier></type><name>LoadFontData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fontChars</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>charsCount</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Image</name></type> <name>GenImageFontAtlas</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CharInfo</name> <modifier>*</modifier></type><name>chars</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name> <modifier>*</modifier><modifier>*</modifier></type><name>recs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>charsCount</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>padding</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>packMethod</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>UnloadFont</name><parameter_list>(<parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawFPS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>posX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posY</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawText</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawTextEx</name><parameter_list>(<parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>spacing</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawTextRec</name><parameter_list>(<parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>spacing</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>wordWrap</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawTextRecEx</name><parameter_list>(<parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>spacing</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>wordWrap</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>selectStart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>selectLength</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>selectTint</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>selectBackTint</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawTextCodepoint</name><parameter_list>(<parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>MeasureText</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fontSize</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Vector2</name></type> <name>MeasureTextEx</name><parameter_list>(<parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>spacing</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetGlyphIndex</name><parameter_list>(<parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>TextCopy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>TextIsEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text2</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>unsigned</name> <name>int</name></type> <name>TextLength</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TextFormat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TextSubtext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>char</name> <modifier>*</modifier></type><name>TextReplace</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>replace</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>by</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>char</name> <modifier>*</modifier></type><name>TextInsert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>insert</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TextJoin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>textList</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delimiter</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>TextSplit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>delimiter</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>TextAppend</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>append</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>position</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>TextFindIndex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>find</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TextToUpper</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TextToLower</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TextToPascal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>TextToInteger</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>char</name> <modifier>*</modifier></type><name>TextToUtf8</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>codepoints</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name> <modifier>*</modifier></type><name>GetCodepoints</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetCodepointsCount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetNextCodepoint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bytesProcessed</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CodepointToUtf8</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>byteLength</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawLine3D</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>startPos</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>endPos</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawPoint3D</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawCircle3D</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>rotationAxis</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rotationAngle</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawCube</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawCubeV</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawCubeWires</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawCubeWiresV</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawCubeTexture</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawSphere</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>centerPos</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawSphereEx</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>centerPos</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rings</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawSphereWires</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>centerPos</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rings</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawCylinder</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radiusTop</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radiusBottom</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawCylinderWires</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radiusTop</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radiusBottom</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawPlane</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>centerPos</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawRay</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>ray</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawGrid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>spacing</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawGizmo</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Model</name></type> <name>LoadModel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Model</name></type> <name>LoadModelFromMesh</name><parameter_list>(<parameter><decl><type><name>Mesh</name></type> <name>mesh</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>UnloadModel</name><parameter_list>(<parameter><decl><type><name>Model</name></type> <name>model</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Mesh</name> <modifier>*</modifier></type><name>LoadMeshes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>meshCount</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ExportMesh</name><parameter_list>(<parameter><decl><type><name>Mesh</name></type> <name>mesh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>UnloadMesh</name><parameter_list>(<parameter><decl><type><name>Mesh</name></type> <name>mesh</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Material</name> <modifier>*</modifier></type><name>LoadMaterials</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>materialCount</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Material</name></type> <name>LoadMaterialDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>UnloadMaterial</name><parameter_list>(<parameter><decl><type><name>Material</name></type> <name>material</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetMaterialTexture</name><parameter_list>(<parameter><decl><type><name>Material</name> <modifier>*</modifier></type><name>material</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mapType</name></decl></parameter>, <parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetModelMeshMaterial</name><parameter_list>(<parameter><decl><type><name>Model</name> <modifier>*</modifier></type><name>model</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>meshId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>materialId</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>ModelAnimation</name> <modifier>*</modifier></type><name>LoadModelAnimations</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>animsCount</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>UpdateModelAnimation</name><parameter_list>(<parameter><decl><type><name>Model</name></type> <name>model</name></decl></parameter>, <parameter><decl><type><name>ModelAnimation</name></type> <name>anim</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>UnloadModelAnimation</name><parameter_list>(<parameter><decl><type><name>ModelAnimation</name></type> <name>anim</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsModelAnimationValid</name><parameter_list>(<parameter><decl><type><name>Model</name></type> <name>model</name></decl></parameter>, <parameter><decl><type><name>ModelAnimation</name></type> <name>anim</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Mesh</name></type> <name>GenMeshPoly</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sides</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Mesh</name></type> <name>GenMeshPlane</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resZ</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Mesh</name></type> <name>GenMeshCube</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Mesh</name></type> <name>GenMeshSphere</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rings</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Mesh</name></type> <name>GenMeshHemiSphere</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rings</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Mesh</name></type> <name>GenMeshCylinder</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Mesh</name></type> <name>GenMeshTorus</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radSeg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sides</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Mesh</name></type> <name>GenMeshKnot</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radSeg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sides</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Mesh</name></type> <name>GenMeshHeightmap</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>heightmap</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Mesh</name></type> <name>GenMeshCubicmap</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>cubicmap</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>cubeSize</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>BoundingBox</name></type> <name>MeshBoundingBox</name><parameter_list>(<parameter><decl><type><name>Mesh</name></type> <name>mesh</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>MeshTangents</name><parameter_list>(<parameter><decl><type><name>Mesh</name> <modifier>*</modifier></type><name>mesh</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>MeshBinormals</name><parameter_list>(<parameter><decl><type><name>Mesh</name> <modifier>*</modifier></type><name>mesh</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawModel</name><parameter_list>(<parameter><decl><type><name>Model</name></type> <name>model</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawModelEx</name><parameter_list>(<parameter><decl><type><name>Model</name></type> <name>model</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>rotationAxis</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rotationAngle</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawModelWires</name><parameter_list>(<parameter><decl><type><name>Model</name></type> <name>model</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawModelWiresEx</name><parameter_list>(<parameter><decl><type><name>Model</name></type> <name>model</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>rotationAxis</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rotationAngle</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawBoundingBox</name><parameter_list>(<parameter><decl><type><name>BoundingBox</name></type> <name>box</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawBillboard</name><parameter_list>(<parameter><decl><type><name>Camera</name></type> <name>camera</name></decl></parameter>, <parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>DrawBillboardRec</name><parameter_list>(<parameter><decl><type><name>Camera</name></type> <name>camera</name></decl></parameter>, <parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>sourceRec</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>CheckCollisionSpheres</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>centerA</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radiusA</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>centerB</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radiusB</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>CheckCollisionBoxes</name><parameter_list>(<parameter><decl><type><name>BoundingBox</name></type> <name>box1</name></decl></parameter>, <parameter><decl><type><name>BoundingBox</name></type> <name>box2</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>CheckCollisionBoxSphere</name><parameter_list>(<parameter><decl><type><name>BoundingBox</name></type> <name>box</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>CheckCollisionRaySphere</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>ray</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>CheckCollisionRaySphereEx</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>ray</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>Vector3</name> <modifier>*</modifier></type><name>collisionPoint</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>CheckCollisionRayBox</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>ray</name></decl></parameter>, <parameter><decl><type><name>BoundingBox</name></type> <name>box</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>RayHitInfo</name></type> <name>GetCollisionRayModel</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>ray</name></decl></parameter>, <parameter><decl><type><name>Model</name></type> <name>model</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>RayHitInfo</name></type> <name>GetCollisionRayTriangle</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>ray</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>p2</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>p3</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>RayHitInfo</name></type> <name>GetCollisionRayGround</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>ray</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>groundHeight</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Shader</name></type> <name>LoadShader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vsFileName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fsFileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Shader</name></type> <name>LoadShaderCode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vsCode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fsCode</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>UnloadShader</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Shader</name></type> <name>GetShaderDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Texture2D</name></type> <name>GetTextureDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Texture2D</name></type> <name>GetShapesTexture</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Rectangle</name></type> <name>GetShapesTextureRec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetShapesTexture</name><parameter_list>(<parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetShaderLocation</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uniformName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetShaderValue</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uniformLoc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uniformType</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetShaderValueV</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uniformLoc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uniformType</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetShaderValueMatrix</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uniformLoc</name></decl></parameter>, <parameter><decl><type><name>Matrix</name></type> <name>mat</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetShaderValueTexture</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uniformLoc</name></decl></parameter>, <parameter><decl><type><name>Texture2D</name></type> <name>texture</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetMatrixProjection</name><parameter_list>(<parameter><decl><type><name>Matrix</name></type> <name>proj</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetMatrixModelview</name><parameter_list>(<parameter><decl><type><name>Matrix</name></type> <name>view</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Matrix</name></type> <name>GetMatrixModelview</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Matrix</name></type> <name>GetMatrixProjection</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Texture2D</name></type> <name>GenTextureCubemap</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>Texture2D</name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Texture2D</name></type> <name>GenTextureIrradiance</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>Texture2D</name></type> <name>cubemap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Texture2D</name></type> <name>GenTexturePrefilter</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>Texture2D</name></type> <name>cubemap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Texture2D</name></type> <name>GenTextureBRDF</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>BeginShaderMode</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>EndShaderMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>BeginBlendMode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>EndBlendMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>InitVrSimulator</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>CloseVrSimulator</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>UpdateVrTracking</name><parameter_list>(<parameter><decl><type><name>Camera</name> <modifier>*</modifier></type><name>camera</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetVrConfiguration</name><parameter_list>(<parameter><decl><type><name>VrDeviceInfo</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>Shader</name></type> <name>distortion</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsVrSimulatorReady</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ToggleVrMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>BeginVrDrawing</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>EndVrDrawing</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>InitAudioDevice</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>CloseAudioDevice</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsAudioDeviceReady</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetMasterVolume</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>volume</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Wave</name></type> <name>LoadWave</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Sound</name></type> <name>LoadSound</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Sound</name></type> <name>LoadSoundFromWave</name><parameter_list>(<parameter><decl><type><name>Wave</name></type> <name>wave</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>UpdateSound</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samplesCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>UnloadWave</name><parameter_list>(<parameter><decl><type><name>Wave</name></type> <name>wave</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>UnloadSound</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ExportWave</name><parameter_list>(<parameter><decl><type><name>Wave</name></type> <name>wave</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ExportWaveAsCode</name><parameter_list>(<parameter><decl><type><name>Wave</name></type> <name>wave</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>PlaySound</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>StopSound</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>PauseSound</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ResumeSound</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>PlaySoundMulti</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>StopSoundMulti</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>int</name></type> <name>GetSoundsPlaying</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsSoundPlaying</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetSoundVolume</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>volume</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetSoundPitch</name><parameter_list>(<parameter><decl><type><name>Sound</name></type> <name>sound</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pitch</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>WaveFormat</name><parameter_list>(<parameter><decl><type><name>Wave</name> <modifier>*</modifier></type><name>wave</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sampleSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Wave</name></type> <name>WaveCopy</name><parameter_list>(<parameter><decl><type><name>Wave</name></type> <name>wave</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>WaveCrop</name><parameter_list>(<parameter><decl><type><name>Wave</name> <modifier>*</modifier></type><name>wave</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>initSample</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>finalSample</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>float</name> <modifier>*</modifier></type><name>GetWaveData</name><parameter_list>(<parameter><decl><type><name>Wave</name></type> <name>wave</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>Music</name></type> <name>LoadMusicStream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>UnloadMusicStream</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>PlayMusicStream</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>UpdateMusicStream</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>StopMusicStream</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>PauseMusicStream</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ResumeMusicStream</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsMusicPlaying</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetMusicVolume</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>volume</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetMusicPitch</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pitch</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetMusicLoopCount</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>float</name></type> <name>GetMusicTimeLength</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>float</name></type> <name>GetMusicTimePlayed</name><parameter_list>(<parameter><decl><type><name>Music</name></type> <name>music</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>AudioStream</name></type> <name>InitAudioStream</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>UpdateAudioStream</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samplesCount</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>CloseAudioStream</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsAudioStreamProcessed</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>PlayAudioStream</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>PauseAudioStream</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>ResumeAudioStream</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>bool</name></type> <name>IsAudioStreamPlaying</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>StopAudioStream</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetAudioStreamVolume</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>volume</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetAudioStreamPitch</name><parameter_list>(<parameter><decl><type><name>AudioStream</name></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pitch</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>RLAPI</name> <name>void</name></type> <name>SetAudioStreamBufferSizeDefault</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
