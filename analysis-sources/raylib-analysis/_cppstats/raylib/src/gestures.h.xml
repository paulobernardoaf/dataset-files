<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\gestures.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.14159265358979323846</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GESTURES_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><enum>enum <block>{ <decl><name>false</name></decl>, <decl><name>true</name></decl> }</block></enum></type> <name>bool</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>Vector2</name> <block>{

<decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>

}</block></struct></type> <name>Vector2</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>GESTURE_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>GESTURE_TAP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>GESTURE_DOUBLETAP</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>GESTURE_HOLD</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>GESTURE_DRAG</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>GESTURE_SWIPE_RIGHT</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>GESTURE_SWIPE_LEFT</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,

<decl><name>GESTURE_SWIPE_UP</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>,

<decl><name>GESTURE_SWIPE_DOWN</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>,

<decl><name>GESTURE_PINCH_IN</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>,

<decl><name>GESTURE_PINCH_OUT</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>

}</block></enum></type> <name>Gestures</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <block>{ <decl><name>TOUCH_UP</name></decl>, <decl><name>TOUCH_DOWN</name></decl>, <decl><name>TOUCH_MOVE</name></decl> }</block></enum></type> <name>TouchAction</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>touchAction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pointCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>pointerId</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name><name>position</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>GestureEvent</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>ProcessGestureEvent</name><parameter_list>(<parameter><decl><type><name>GestureEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>void</name></type> <name>UpdateGestures</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GESTURES_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>void</name></type> <name>SetGesturesEnabled</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>gestureFlags</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>bool</name></type> <name>IsGestureDetected</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gesture</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>int</name></type> <name>GetGestureDetected</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>int</name></type> <name>GetTouchPointsCount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>float</name></type> <name>GetGestureHoldDuration</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>Vector2</name></type> <name>GetGestureDragVector</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>float</name></type> <name>GetGestureDragAngle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>Vector2</name></type> <name>GetGesturePinchVector</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>float</name></type> <name>GetGesturePinchAngle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GESTURES_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>int</name> <name>__stdcall</name></type> <name>QueryPerformanceCounter</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name> <modifier>*</modifier></type><name>lpPerformanceCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name> <name>__stdcall</name></type> <name>QueryPerformanceFrequency</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name> <modifier>*</modifier></type><name>lpFrequency</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_POSIX_C_SOURCE</name> <operator>&lt;</operator> <literal type="number">199309L</literal></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_POSIX_C_SOURCE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_POSIX_C_SOURCE</name></cpp:macro> <cpp:value>199309L</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/clock.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/mach.h&gt;</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORCE_TO_SWIPE</name></cpp:macro> <cpp:value>0.0005f</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIMUM_DRAG</name></cpp:macro> <cpp:value>0.015f</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIMUM_PINCH</name></cpp:macro> <cpp:value>0.005f</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAP_TIMEOUT</name></cpp:macro> <cpp:value>300</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PINCH_TIMEOUT</name></cpp:macro> <cpp:value>300</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOUBLETAP_RANGE</name></cpp:macro> <cpp:value>0.03f</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>current</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>enabledFlags</name></decl>;</decl_stmt> 

<struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>firstId</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>pointCount</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>eventTime</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Vector2</name></type> <name>upPosition</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Vector2</name></type> <name>downPositionA</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Vector2</name></type> <name>downPositionB</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Vector2</name></type> <name>downDragPosition</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Vector2</name></type> <name>moveDownPositionA</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Vector2</name></type> <name>moveDownPositionB</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tapCounter</name></decl>;</decl_stmt> 

}</block> <decl><name>Touch</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>bool</name></type> <name>resetRequired</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>timeDuration</name></decl>;</decl_stmt> 

}</block> <decl><name>Hold</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>Vector2</name></type> <name>vector</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>angle</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>distance</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>intensity</name></decl>;</decl_stmt> 

}</block> <decl><name>Drag</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>bool</name></type> <name>start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>timeDuration</name></decl>;</decl_stmt> 

}</block> <decl><name>Swipe</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>Vector2</name></type> <name>vector</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>angle</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>distance</name></decl>;</decl_stmt> 

}</block> <decl><name>Pinch</name></decl>;</struct>

}</block></struct></type> <name>GesturesData</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>GesturesData</name></type> <name>GESTURES</name> <init>= <expr><block>{

<expr><operator>.</operator><name><name>Touch</name><operator>.</operator><name>firstId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>current</name> <operator>=</operator> <name>GESTURE_NONE</name></expr>,

<expr><operator>.</operator><name>enabledFlags</name> <operator>=</operator> <literal type="number">0b0000001111111111</literal></expr> 

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GESTURES_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>Vector2Angle</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>initialPosition</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>finalPosition</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>Vector2Distance</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v2</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>GetCurrentTime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>SetGesturesEnabled</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>gestureFlags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>enabledFlags</name></name> <operator>=</operator> <name>gestureFlags</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>IsGestureDetected</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gesture</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>GESTURES</name><operator>.</operator><name>enabledFlags</name></name> <operator>&amp;</operator> <name><name>GESTURES</name><operator>.</operator><name>current</name></name><operator>)</operator> <operator>==</operator> <name>gesture</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ProcessGestureEvent</name><parameter_list>(<parameter><decl><type><name>GestureEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>pointCount</name></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>pointCount</name></name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>pointCount</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>touchAction</name></name> <operator>==</operator> <name>TOUCH_DOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>tapCounter</name></name><operator>++</operator></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>==</operator> <name>GESTURE_NONE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>tapCounter</name></name> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>GetCurrentTime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>eventTime</name></name><operator>)</operator> <operator>&lt;</operator> <name>TAP_TIMEOUT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>Vector2Distance</name><argument_list>(<argument><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>downPositionA</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>DOUBLETAP_RANGE</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>GESTURE_DOUBLETAP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>tapCounter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>tapCounter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>GESTURE_TAP</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>downPositionA</name></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>downDragPosition</name></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>upPosition</name></name> <operator>=</operator> <name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>downPositionA</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>eventTime</name></name> <operator>=</operator> <call><name>GetCurrentTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>firstId</name></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>pointerId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Drag</name><operator>.</operator><name>vector</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>touchAction</name></name> <operator>==</operator> <name>TOUCH_UP</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>==</operator> <name>GESTURE_DRAG</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>upPosition</name></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Drag</name><operator>.</operator><name>distance</name></name> <operator>=</operator> <call><name>Vector2Distance</name><argument_list>(<argument><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>downPositionA</name></name></expr></argument>, <argument><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>upPosition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Drag</name><operator>.</operator><name>intensity</name></name> <operator>=</operator> <name><name>GESTURES</name><operator>.</operator><name>Drag</name><operator>.</operator><name>distance</name></name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><call><name>GetCurrentTime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>GESTURES</name><operator>.</operator><name>Swipe</name><operator>.</operator><name>timeDuration</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Swipe</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>GESTURES</name><operator>.</operator><name>Drag</name><operator>.</operator><name>intensity</name></name> <operator>&gt;</operator> <name>FORCE_TO_SWIPE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>firstId</name></name> <operator>==</operator> <name><name>event</name><operator>.</operator><name>pointerId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Drag</name><operator>.</operator><name>angle</name></name> <operator>=</operator> <literal type="number">360.0f</literal> <operator>-</operator> <call><name>Vector2Angle</name><argument_list>(<argument><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>downPositionA</name></name></expr></argument>, <argument><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>upPosition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>GESTURES</name><operator>.</operator><name>Drag</name><operator>.</operator><name>angle</name></name> <operator>&lt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>GESTURES</name><operator>.</operator><name>Drag</name><operator>.</operator><name>angle</name></name> <operator>&gt;</operator> <literal type="number">330</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>GESTURE_SWIPE_RIGHT</name></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>GESTURES</name><operator>.</operator><name>Drag</name><operator>.</operator><name>angle</name></name> <operator>&gt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>GESTURES</name><operator>.</operator><name>Drag</name><operator>.</operator><name>angle</name></name> <operator>&lt;</operator> <literal type="number">120</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>GESTURE_SWIPE_UP</name></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>GESTURES</name><operator>.</operator><name>Drag</name><operator>.</operator><name>angle</name></name> <operator>&gt;</operator> <literal type="number">120</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>GESTURES</name><operator>.</operator><name>Drag</name><operator>.</operator><name>angle</name></name> <operator>&lt;</operator> <literal type="number">210</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>GESTURE_SWIPE_LEFT</name></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>GESTURES</name><operator>.</operator><name>Drag</name><operator>.</operator><name>angle</name></name> <operator>&gt;</operator> <literal type="number">210</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>GESTURES</name><operator>.</operator><name>Drag</name><operator>.</operator><name>angle</name></name> <operator>&lt;</operator> <literal type="number">300</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>GESTURE_SWIPE_DOWN</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>GESTURE_NONE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Drag</name><operator>.</operator><name>distance</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Drag</name><operator>.</operator><name>intensity</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Drag</name><operator>.</operator><name>angle</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>GESTURE_NONE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>downDragPosition</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>pointCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>touchAction</name></name> <operator>==</operator> <name>TOUCH_MOVE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>==</operator> <name>GESTURE_DRAG</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>eventTime</name></name> <operator>=</operator> <call><name>GetCurrentTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>GESTURES</name><operator>.</operator><name>Swipe</name><operator>.</operator><name>start</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Swipe</name><operator>.</operator><name>timeDuration</name></name> <operator>=</operator> <call><name>GetCurrentTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Swipe</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>moveDownPositionA</name></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>==</operator> <name>GESTURE_HOLD</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>GESTURES</name><operator>.</operator><name>Hold</name><operator>.</operator><name>resetRequired</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>downPositionA</name></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Hold</name><operator>.</operator><name>resetRequired</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Vector2Distance</name><argument_list>(<argument><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>downPositionA</name></name></expr></argument>, <argument><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>moveDownPositionA</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>MINIMUM_DRAG</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>eventTime</name></name> <operator>=</operator> <call><name>GetCurrentTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>GESTURE_DRAG</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Drag</name><operator>.</operator><name>vector</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>moveDownPositionA</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>downDragPosition</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Drag</name><operator>.</operator><name>vector</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>moveDownPositionA</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>downDragPosition</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>touchAction</name></name> <operator>==</operator> <name>TOUCH_DOWN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>downPositionA</name></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>downPositionB</name></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Pinch</name><operator>.</operator><name>vector</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>downPositionB</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>downPositionA</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Pinch</name><operator>.</operator><name>vector</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>downPositionB</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>downPositionA</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>GESTURE_HOLD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Hold</name><operator>.</operator><name>timeDuration</name></name> <operator>=</operator> <call><name>GetCurrentTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>touchAction</name></name> <operator>==</operator> <name>TOUCH_MOVE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Pinch</name><operator>.</operator><name>distance</name></name> <operator>=</operator> <call><name>Vector2Distance</name><argument_list>(<argument><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>moveDownPositionA</name></name></expr></argument>, <argument><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>moveDownPositionB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>downPositionA</name></name> <operator>=</operator> <name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>moveDownPositionA</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>downPositionB</name></name> <operator>=</operator> <name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>moveDownPositionB</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>moveDownPositionA</name></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>moveDownPositionB</name></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Pinch</name><operator>.</operator><name>vector</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>moveDownPositionB</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>moveDownPositionA</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Pinch</name><operator>.</operator><name>vector</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>moveDownPositionB</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>moveDownPositionA</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>Vector2Distance</name><argument_list>(<argument><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>downPositionA</name></name></expr></argument>, <argument><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>moveDownPositionA</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>MINIMUM_PINCH</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>Vector2Distance</name><argument_list>(<argument><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>downPositionB</name></name></expr></argument>, <argument><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>moveDownPositionB</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>MINIMUM_PINCH</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>Vector2Distance</name><argument_list>(<argument><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>moveDownPositionA</name></name></expr></argument>, <argument><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>moveDownPositionB</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>GESTURES</name><operator>.</operator><name>Pinch</name><operator>.</operator><name>distance</name></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>GESTURE_PINCH_IN</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>GESTURE_PINCH_OUT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>GESTURE_HOLD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Hold</name><operator>.</operator><name>timeDuration</name></name> <operator>=</operator> <call><name>GetCurrentTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Pinch</name><operator>.</operator><name>angle</name></name> <operator>=</operator> <literal type="number">360.0f</literal> <operator>-</operator> <call><name>Vector2Angle</name><argument_list>(<argument><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>moveDownPositionA</name></name></expr></argument>, <argument><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>moveDownPositionB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>.</operator><name>touchAction</name></name> <operator>==</operator> <name>TOUCH_UP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Pinch</name><operator>.</operator><name>distance</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Pinch</name><operator>.</operator><name>angle</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Pinch</name><operator>.</operator><name>vector</name></name> <operator>=</operator> <operator>(</operator><name>Vector2</name><operator>)</operator><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>pointCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>GESTURE_NONE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateGestures</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>==</operator> <name>GESTURE_TAP</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>==</operator> <name>GESTURE_DOUBLETAP</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>pointCount</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>GESTURE_HOLD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Hold</name><operator>.</operator><name>timeDuration</name></name> <operator>=</operator> <call><name>GetCurrentTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>GetCurrentTime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>eventTime</name></name><operator>)</operator> <operator>&gt;</operator> <name>TAP_TIMEOUT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>==</operator> <name>GESTURE_DRAG</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>pointCount</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>GESTURE_HOLD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Hold</name><operator>.</operator><name>timeDuration</name></name> <operator>=</operator> <call><name>GetCurrentTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>Hold</name><operator>.</operator><name>resetRequired</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>==</operator> <name>GESTURE_SWIPE_RIGHT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>==</operator> <name>GESTURE_SWIPE_UP</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>==</operator> <name>GESTURE_SWIPE_LEFT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>==</operator> <name>GESTURE_SWIPE_DOWN</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>GESTURE_NONE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>GetTouchPointsCount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>GESTURES</name><operator>.</operator><name>Touch</name><operator>.</operator><name>pointCount</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>GetGestureDetected</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>GESTURES</name><operator>.</operator><name>enabledFlags</name></name> <operator>&amp;</operator> <name><name>GESTURES</name><operator>.</operator><name>current</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name></type> <name>GetGestureHoldDuration</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>time</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>GESTURES</name><operator>.</operator><name>current</name></name> <operator>==</operator> <name>GESTURE_HOLD</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>time</name> <operator>=</operator> <call><name>GetCurrentTime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>GESTURES</name><operator>.</operator><name>Hold</name><operator>.</operator><name>timeDuration</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>float</name><operator>)</operator><name>time</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>Vector2</name></type> <name>GetGestureDragVector</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>GESTURES</name><operator>.</operator><name>Drag</name><operator>.</operator><name>vector</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name></type> <name>GetGestureDragAngle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>GESTURES</name><operator>.</operator><name>Drag</name><operator>.</operator><name>angle</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>Vector2</name></type> <name>GetGesturePinchVector</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>GESTURES</name><operator>.</operator><name>Pinch</name><operator>.</operator><name>vector</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name></type> <name>GetGesturePinchAngle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>GESTURES</name><operator>.</operator><name>Pinch</name><operator>.</operator><name>angle</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GESTURES_STANDALONE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>float</name></type> <name>Vector2Angle</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>angle</name> <init>= <expr><call><name>atan2f</name><argument_list>(<argument><expr><name><name>v2</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><literal type="number">180.0f</literal><operator>/</operator><name>PI</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>angle</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>angle</name> <operator>+=</operator> <literal type="number">360.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>angle</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>Vector2Distance</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dx</name> <init>= <expr><name><name>v2</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dy</name> <init>= <expr><name><name>v2</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>sqrt</name><argument_list>(<argument><expr><name>dx</name><operator>*</operator><name>dx</name> <operator>+</operator> <name>dy</name><operator>*</operator><name>dy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>double</name></type> <name>GetCurrentTime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>clockFrequency</name></decl>, <decl><type ref="prev"/><name>currentTime</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>QueryPerformanceFrequency</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clockFrequency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>QueryPerformanceCounter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>currentTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>time</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>currentTime</name><operator>/</operator><name>clockFrequency</name><operator>*</operator><literal type="number">1000.0f</literal></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>now</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>nowTime</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name><operator>)</operator><name><name>now</name><operator>.</operator><name>tv_sec</name></name><operator>*</operator><literal type="number">1000000000LLU</literal> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name><operator>)</operator><name><name>now</name><operator>.</operator><name>tv_nsec</name></name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>time</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>nowTime</name><operator>/</operator><literal type="number">1000000.0</literal><operator>)</operator></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>clock_serv_t</name></type> <name>cclock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach_timespec_t</name></type> <name>now</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>host_get_clock_service</name><argument_list>(<argument><expr><call><name>mach_host_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SYSTEM_CLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cclock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clock_get_time</name><argument_list>(<argument><expr><name>cclock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mach_port_deallocate</name><argument_list>(<argument><expr><call><name>mach_task_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cclock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>nowTime</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name><operator>)</operator><name><name>now</name><operator>.</operator><name>tv_sec</name></name><operator>*</operator><literal type="number">1000000000LLU</literal> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name><operator>)</operator><name><name>now</name><operator>.</operator><name>tv_nsec</name></name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>time</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>nowTime</name><operator>/</operator><literal type="number">1000000.0</literal><operator>)</operator></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>time</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
