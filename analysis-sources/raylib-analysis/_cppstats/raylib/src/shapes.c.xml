<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\shapes.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EXTERNAL_CONFIG_FLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlgl.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include> 

<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>EaseCubicInOut</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl> 

<function><type><name>void</name></type> <name>DrawPixel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>posX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posY</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2i</name><argument_list>(<argument><expr><name>posX</name></expr></argument>, <argument><expr><name>posY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2i</name><argument_list>(<argument><expr><name>posX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>posY</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawPixelV</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>position</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>position</name><operator>.</operator><name>x</name></name> <operator>+</operator> <literal type="number">1.0f</literal></expr></argument>, <argument><expr><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+</operator> <literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawLine</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>startPosX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startPosY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endPosX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endPosY</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2i</name><argument_list>(<argument><expr><name>startPosX</name></expr></argument>, <argument><expr><name>startPosY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2i</name><argument_list>(<argument><expr><name>endPosX</name></expr></argument>, <argument><expr><name>endPosY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawLineV</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>startPos</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>endPos</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>startPos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>startPos</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>endPos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>endPos</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawLineEx</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>startPos</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>endPos</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>thick</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>startPos</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>endPos</name><operator>.</operator><name>x</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>tempPos</name> <init>= <expr><name>startPos</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>startPos</name> <operator>=</operator> <name>endPos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>endPos</name> <operator>=</operator> <name>tempPos</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dx</name> <init>= <expr><name><name>endPos</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>startPos</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dy</name> <init>= <expr><name><name>endPos</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>startPos</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>d</name> <init>= <expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>dx</name><operator>*</operator><name>dx</name> <operator>+</operator> <name>dy</name><operator>*</operator><name>dy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>angle</name> <init>= <expr><call><name>asinf</name><argument_list>(<argument><expr><name>dy</name><operator>/</operator><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rlEnableTexture</name><argument_list>(<argument><expr><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>startPos</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>startPos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlRotatef</name><argument_list>(<argument><expr><name>RAD2DEG</name><operator>*</operator><name>angle</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>thick</name> <operator>&gt;</operator> <literal type="number">1.0f</literal><operator>)</operator></expr>?</condition><then> <expr><operator>-</operator><name>thick</name><operator>/</operator><literal type="number">2.0f</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1.0f</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_QUADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlNormal3f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>thick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>thick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlDisableTexture</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawLineBezier</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>startPos</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>endPos</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>thick</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_DIVISIONS</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>Vector2</name></type> <name>previous</name> <init>= <expr><name>startPos</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>current</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>LINE_DIVISIONS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>current</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>EaseCubicInOut</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>i</name></expr></argument>, <argument><expr><name><name>startPos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>endPos</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>startPos</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>LINE_DIVISIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>previous</name><operator>.</operator><name>x</name></name> <operator>+</operator> <operator>(</operator><name><name>endPos</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>startPos</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>LINE_DIVISIONS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawLineEx</name><argument_list>(<argument><expr><name>previous</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>thick</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>previous</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawLineStrip</name><parameter_list>(<parameter><decl><type><name>Vector2</name> <modifier>*</modifier></type><name>points</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pointsCount</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pointsCount</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><name>pointsCount</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pointsCount</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawCircle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>centerX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>centerY</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>DrawCircleV</name><argument_list>(<argument>(Vector2){ (float)centerX</argument>, <argument>(float)centerY }</argument>, <argument>radius</argument>, <argument>color</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawCircleSector</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startAngle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endAngle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segments</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>radius</name> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>radius</name> <operator>=</operator> <literal type="number">0.1f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>endAngle</name> <operator>&lt;</operator> <name>startAngle</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name>startAngle</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>startAngle</name> <operator>=</operator> <name>endAngle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>endAngle</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>segments</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLE_ERROR_RATE</name></cpp:macro> <cpp:value>0.5f</cpp:value></cpp:define>

<decl_stmt><decl><type><name>float</name></type> <name>th</name> <init>= <expr><call><name>acosf</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><call><name>powf</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>-</operator> <name>CIRCLE_ERROR_RATE</name><operator>/</operator><name>radius</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>segments</name> <operator>=</operator> <operator>(</operator><name>endAngle</name> <operator>-</operator> <name>startAngle</name><operator>)</operator><operator>*</operator><call><name>ceilf</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>PI</name><operator>/</operator><name>th</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">360</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>segments</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>segments</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>stepLength</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>endAngle</name> <operator>-</operator> <name>startAngle</name><operator>)</operator><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>segments</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>angle</name> <init>= <expr><name>startAngle</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_QUADS_DRAW_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>*</operator><name>segments</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlEnableTexture</name><argument_list>(<argument><expr><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_QUADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>segments</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>angle</name> <operator>+=</operator> <operator>(</operator><name>stepLength</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>segments</name><operator>%</operator><literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlDisableTexture</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>*</operator><name>segments</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_TRIANGLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>segments</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>angle</name> <operator>+=</operator> <name>stepLength</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawCircleSectorLines</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startAngle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endAngle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segments</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>radius</name> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>radius</name> <operator>=</operator> <literal type="number">0.1f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>endAngle</name> <operator>&lt;</operator> <name>startAngle</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name>startAngle</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>startAngle</name> <operator>=</operator> <name>endAngle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>endAngle</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>segments</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CIRCLE_ERROR_RATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLE_ERROR_RATE</name></cpp:macro> <cpp:value>0.5f</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>float</name></type> <name>th</name> <init>= <expr><call><name>acosf</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><call><name>powf</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>-</operator> <name>CIRCLE_ERROR_RATE</name><operator>/</operator><name>radius</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>segments</name> <operator>=</operator> <operator>(</operator><name>endAngle</name> <operator>-</operator> <name>startAngle</name><operator>)</operator><operator>*</operator><call><name>ceilf</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>PI</name><operator>/</operator><name>th</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">360</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>segments</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>segments</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>stepLength</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>endAngle</name> <operator>-</operator> <name>startAngle</name><operator>)</operator><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>segments</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>angle</name> <init>= <expr><name>startAngle</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>showCapLines</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>segments</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>endAngle</name> <operator>-</operator> <name>startAngle</name><operator>)</operator><operator>%</operator><literal type="number">360</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>limit</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>segments</name></expr>;</expr_stmt> <expr_stmt><expr><name>showCapLines</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>showCapLines</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>segments</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>angle</name> <operator>+=</operator> <name>stepLength</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>showCapLines</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawCircleGradient</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>centerX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>centerY</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>*</operator><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_TRIANGLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">360</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">10</literal></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color1</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color1</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color1</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color1</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name>centerX</name></expr></argument>, <argument><expr><name>centerY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color2</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color2</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color2</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color2</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name>centerX</name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><name>centerY</name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color2</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color2</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color2</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color2</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name>centerX</name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><name>centerY</name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawCircleV</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawCircleSector</name><argument_list>(<argument><expr><name>center</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">360</literal></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawCircleLines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>centerX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>centerY</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">360</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">10</literal></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name>centerX</name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><name>centerY</name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name>centerX</name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><name>centerY</name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawEllipse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>centerX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>centerY</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radiusH</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radiusV</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>*</operator><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_TRIANGLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">360</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">10</literal></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name>centerX</name></expr></argument>, <argument><expr><name>centerY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name>centerX</name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusH</name></expr></argument>, <argument><expr><name>centerY</name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name>centerX</name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusH</name></expr></argument>, <argument><expr><name>centerY</name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawEllipseLines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>centerX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>centerY</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radiusH</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radiusV</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">360</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">10</literal></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name>centerX</name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusH</name></expr></argument>, <argument><expr><name>centerY</name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name>radiusV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name>centerX</name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusH</name></expr></argument>, <argument><expr><name>centerY</name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radiusV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawRing</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>innerRadius</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>outerRadius</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startAngle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endAngle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segments</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>startAngle</name> <operator>==</operator> <name>endAngle</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>outerRadius</name> <operator>&lt;</operator> <name>innerRadius</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>tmp</name> <init>= <expr><name>outerRadius</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>outerRadius</name> <operator>=</operator> <name>innerRadius</name></expr>;</expr_stmt>

<expr_stmt><expr><name>innerRadius</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>outerRadius</name> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>outerRadius</name> <operator>=</operator> <literal type="number">0.1f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>endAngle</name> <operator>&lt;</operator> <name>startAngle</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name>startAngle</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>startAngle</name> <operator>=</operator> <name>endAngle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>endAngle</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>segments</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CIRCLE_ERROR_RATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLE_ERROR_RATE</name></cpp:macro> <cpp:value>0.5f</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>float</name></type> <name>th</name> <init>= <expr><call><name>acosf</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><call><name>powf</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>-</operator> <name>CIRCLE_ERROR_RATE</name><operator>/</operator><name>outerRadius</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>segments</name> <operator>=</operator> <operator>(</operator><name>endAngle</name> <operator>-</operator> <name>startAngle</name><operator>)</operator><operator>*</operator><call><name>ceilf</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>PI</name><operator>/</operator><name>th</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">360</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>segments</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>segments</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>innerRadius</name> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawCircleSector</name><argument_list>(<argument><expr><name>center</name></expr></argument>, <argument><expr><name>outerRadius</name></expr></argument>, <argument><expr><name>startAngle</name></expr></argument>, <argument><expr><name>endAngle</name></expr></argument>, <argument><expr><name>segments</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>stepLength</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>endAngle</name> <operator>-</operator> <name>startAngle</name><operator>)</operator><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>segments</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>angle</name> <init>= <expr><name>startAngle</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_QUADS_DRAW_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>*</operator><name>segments</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlEnableTexture</name><argument_list>(<argument><expr><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_QUADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>segments</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>angle</name> <operator>+=</operator> <name>stepLength</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlDisableTexture</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>*</operator><name>segments</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_TRIANGLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>segments</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>angle</name> <operator>+=</operator> <name>stepLength</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawRingLines</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>innerRadius</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>outerRadius</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startAngle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endAngle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segments</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>startAngle</name> <operator>==</operator> <name>endAngle</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>outerRadius</name> <operator>&lt;</operator> <name>innerRadius</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>tmp</name> <init>= <expr><name>outerRadius</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>outerRadius</name> <operator>=</operator> <name>innerRadius</name></expr>;</expr_stmt>

<expr_stmt><expr><name>innerRadius</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>outerRadius</name> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>outerRadius</name> <operator>=</operator> <literal type="number">0.1f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>endAngle</name> <operator>&lt;</operator> <name>startAngle</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name>startAngle</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>startAngle</name> <operator>=</operator> <name>endAngle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>endAngle</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>segments</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CIRCLE_ERROR_RATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLE_ERROR_RATE</name></cpp:macro> <cpp:value>0.5f</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>float</name></type> <name>th</name> <init>= <expr><call><name>acosf</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><call><name>powf</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>-</operator> <name>CIRCLE_ERROR_RATE</name><operator>/</operator><name>outerRadius</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>segments</name> <operator>=</operator> <operator>(</operator><name>endAngle</name> <operator>-</operator> <name>startAngle</name><operator>)</operator><operator>*</operator><call><name>ceilf</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>PI</name><operator>/</operator><name>th</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">360</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>segments</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>segments</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>innerRadius</name> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawCircleSectorLines</name><argument_list>(<argument><expr><name>center</name></expr></argument>, <argument><expr><name>outerRadius</name></expr></argument>, <argument><expr><name>startAngle</name></expr></argument>, <argument><expr><name>endAngle</name></expr></argument>, <argument><expr><name>segments</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>stepLength</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>endAngle</name> <operator>-</operator> <name>startAngle</name><operator>)</operator><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>segments</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>angle</name> <init>= <expr><name>startAngle</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>showCapLines</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><name>segments</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>endAngle</name> <operator>-</operator> <name>startAngle</name><operator>)</operator><operator>%</operator><literal type="number">360</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>limit</name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><name>segments</name></expr>;</expr_stmt> <expr_stmt><expr><name>showCapLines</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>showCapLines</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>segments</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>angle</name> <operator>+=</operator> <name>stepLength</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>showCapLines</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawRectangle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>posX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>DrawRectangleV</name><argument_list>(<argument>(Vector2){ (float)posX</argument>, <argument>(float)posY }</argument>, <argument>(Vector2){ (float)width</argument>, <argument>(float)height }</argument>, <argument>color</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawRectangleV</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>DrawRectanglePro</name><argument_list>(<argument>(Rectangle){ position.x</argument>, <argument>position.y</argument>, <argument>size.x</argument>, <argument>size.y }</argument>, <argument>(Vector2){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument><literal type="number">0.0f</literal></argument>, <argument>color</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawRectangleRec</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>DrawRectanglePro</name><argument_list>(<argument>rec</argument>, <argument>(Vector2){ <literal type="number">0.0f</literal></argument>, <argument><literal type="number">0.0f</literal> }</argument>, <argument><literal type="number">0.0f</literal></argument>, <argument>color</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawRectanglePro</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>origin</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rotation</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rlEnableTexture</name><argument_list>(<argument><expr><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><name><name>rec</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlRotatef</name><argument_list>(<argument><expr><name>rotation</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><operator>-</operator><name><name>origin</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>origin</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_QUADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlNormal3f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>rec</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>rec</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlDisableTexture</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawRectangleGradientV</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>posX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>DrawRectangleGradientEx</name><argument_list>(<argument>(Rectangle){ (float)posX</argument>, <argument>(float)posY</argument>, <argument>(float)width</argument>, <argument>(float)height }</argument>, <argument>color1</argument>, <argument>color2</argument>, <argument>color2</argument>, <argument>color1</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawRectangleGradientH</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>posX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>DrawRectangleGradientEx</name><argument_list>(<argument>(Rectangle){ (float)posX</argument>, <argument>(float)posY</argument>, <argument>(float)width</argument>, <argument>(float)height }</argument>, <argument>color1</argument>, <argument>color1</argument>, <argument>color2</argument>, <argument>color2</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawRectangleGradientEx</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>col1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>col2</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>col3</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>col4</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rlEnableTexture</name><argument_list>(<argument><expr><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_QUADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlNormal3f</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>col1</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>col1</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>col1</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>col1</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>rec</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>col2</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>col2</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>col2</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>col2</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>rec</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>col3</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>col3</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>col3</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>col3</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>col4</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>col4</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>col4</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>col4</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlDisableTexture</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawRectangleLines</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>posX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_QUADS_DRAW_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>posX</name></expr></argument>, <argument><expr><name>posY</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>posX</name> <operator>+</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>posY</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>posX</name></expr></argument>, <argument><expr><name>posY</name> <operator>+</operator> <name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>(<argument><expr><name>posX</name></expr></argument>, <argument><expr><name>posY</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2i</name><argument_list>(<argument><expr><name>posX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>posY</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2i</name><argument_list>(<argument><expr><name>posX</name> <operator>+</operator> <name>width</name></expr></argument>, <argument><expr><name>posY</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2i</name><argument_list>(<argument><expr><name>posX</name> <operator>+</operator> <name>width</name></expr></argument>, <argument><expr><name>posY</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2i</name><argument_list>(<argument><expr><name>posX</name> <operator>+</operator> <name>width</name></expr></argument>, <argument><expr><name>posY</name> <operator>+</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2i</name><argument_list>(<argument><expr><name>posX</name> <operator>+</operator> <name>width</name></expr></argument>, <argument><expr><name>posY</name> <operator>+</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2i</name><argument_list>(<argument><expr><name>posX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>posY</name> <operator>+</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2i</name><argument_list>(<argument><expr><name>posX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>posY</name> <operator>+</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2i</name><argument_list>(<argument><expr><name>posX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>posY</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawRectangleLinesEx</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineThick</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lineThick</name> <operator>&gt;</operator> <name><name>rec</name><operator>.</operator><name>width</name></name> <operator>||</operator> <name>lineThick</name> <operator>&gt;</operator> <name><name>rec</name><operator>.</operator><name>height</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rec</name><operator>.</operator><name>width</name></name> <operator>&gt;</operator> <name><name>rec</name><operator>.</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lineThick</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>rec</name><operator>.</operator><name>width</name></name> <operator>&lt;</operator> <name><name>rec</name><operator>.</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lineThick</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>( <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name>lineThick</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>( <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>lineThick</name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>lineThick</name><operator>)</operator></expr></argument>, <argument><expr><name>lineThick</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name>lineThick</name><operator>*</operator><literal type="number">2.0f</literal><operator>)</operator></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>( <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name>lineThick</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name>lineThick</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>( <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>lineThick</name><operator>)</operator></expr></argument>, <argument><expr><name>lineThick</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name>lineThick</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawRectangleRounded</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>roundness</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segments</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>roundness</name> <operator>&lt;=</operator> <literal type="number">0.0f</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>rec</name><operator>.</operator><name>width</name></name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>rec</name><operator>.</operator><name>height</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawRectangleRec</name><argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>roundness</name> <operator>&gt;=</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>roundness</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>radius</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>rec</name><operator>.</operator><name>width</name></name> <operator>&gt;</operator> <name><name>rec</name><operator>.</operator><name>height</name></name><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><name><name>rec</name><operator>.</operator><name>height</name></name><operator>*</operator><name>roundness</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr> </then><else>: <expr><operator>(</operator><name><name>rec</name><operator>.</operator><name>width</name></name><operator>*</operator><name>roundness</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>radius</name> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>segments</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CIRCLE_ERROR_RATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLE_ERROR_RATE</name></cpp:macro> <cpp:value>0.5f</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>float</name></type> <name>th</name> <init>= <expr><call><name>acosf</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><call><name>powf</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>-</operator> <name>CIRCLE_ERROR_RATE</name><operator>/</operator><name>radius</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>segments</name> <operator>=</operator> <call><name>ceilf</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>PI</name><operator>/</operator><name>th</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>segments</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>segments</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>stepLength</name> <init>= <expr><literal type="number">90.0f</literal><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>segments</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Vector2</name></type> <name><name>point</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{ 

<expr><block>{<expr><operator>(</operator><name>float</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>radius</name></expr>, <expr><name><name>rec</name><operator>.</operator><name>y</name></name></expr>}</block></expr>, <expr><block>{<expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>-</operator> <name>radius</name></expr>, <expr><name><name>rec</name><operator>.</operator><name>y</name></name></expr>}</block></expr>, <expr><block>{ <expr><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>radius</name></expr> }</block></expr>, 

<expr><block>{<expr><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>-</operator> <name>radius</name></expr>}</block></expr>, <expr><block>{<expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>-</operator> <name>radius</name></expr>, <expr><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>float</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>radius</name></expr>, <expr><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name></expr>}</block></expr>, <expr><block>{ <expr><name><name>rec</name><operator>.</operator><name>x</name></name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>-</operator> <name>radius</name></expr>}</block></expr>, <expr><block>{<expr><name><name>rec</name><operator>.</operator><name>x</name></name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>radius</name></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>float</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>radius</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>radius</name></expr>}</block></expr>, <expr><block>{<expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>-</operator> <name>radius</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>radius</name></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>-</operator> <name>radius</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>-</operator> <name>radius</name></expr>}</block></expr>, <expr><block>{<expr><operator>(</operator><name>float</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>radius</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>-</operator> <name>radius</name></expr>}</block></expr> 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Vector2</name></type> <name><name>centers</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>point</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>, <expr><name><name>point</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>, <expr><name><name>point</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>, <expr><name><name>point</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>angles</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">180.0f</literal></expr>, <expr><literal type="number">90.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">270.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_QUADS_DRAW_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">16</literal><operator>*</operator><name>segments</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlEnableTexture</name><argument_list>(<argument><expr><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_QUADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> 

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>angle</name> <init>= <expr><name><name>angles</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Vector2</name></type> <name>center</name> <init>= <expr><name><name>centers</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>segments</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>angle</name> <operator>+=</operator> <operator>(</operator><name>stepLength</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>segments</name><operator>%</operator><literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlDisableTexture</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">12</literal><operator>*</operator><name>segments</name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_TRIANGLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> 

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>angle</name> <init>= <expr><name><name>angles</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Vector2</name></type> <name>center</name> <init>= <expr><name><name>centers</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>segments</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>angle</name> <operator>+=</operator> <name>stepLength</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawRectangleRoundedLines</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>roundness</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segments</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineThick</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lineThick</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lineThick</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>roundness</name> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition>

<block>{<block_content>

<macro><name>DrawRectangleLinesEx</name><argument_list>(<argument>(Rectangle){rec.x-lineThick</argument>, <argument>rec.y-lineThick</argument>, <argument>rec.width+<literal type="number">2</literal>*lineThick</argument>, <argument>rec.height+<literal type="number">2</literal>*lineThick}</argument>, <argument>lineThick</argument>, <argument>color</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>roundness</name> <operator>&gt;=</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>roundness</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>radius</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>rec</name><operator>.</operator><name>width</name></name> <operator>&gt;</operator> <name><name>rec</name><operator>.</operator><name>height</name></name><operator>)</operator></expr>?</condition><then> <expr><operator>(</operator><name><name>rec</name><operator>.</operator><name>height</name></name><operator>*</operator><name>roundness</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr> </then><else>: <expr><operator>(</operator><name><name>rec</name><operator>.</operator><name>width</name></name><operator>*</operator><name>roundness</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>radius</name> <operator>&lt;=</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>segments</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CIRCLE_ERROR_RATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIRCLE_ERROR_RATE</name></cpp:macro> <cpp:value>0.5f</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>float</name></type> <name>th</name> <init>= <expr><call><name>acosf</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><call><name>powf</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>-</operator> <name>CIRCLE_ERROR_RATE</name><operator>/</operator><name>radius</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>segments</name> <operator>=</operator> <call><name>ceilf</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>PI</name><operator>/</operator><name>th</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>segments</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>segments</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>stepLength</name> <init>= <expr><literal type="number">90.0f</literal><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>segments</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>outerRadius</name> <init>= <expr><name>radius</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name>lineThick</name></expr></init></decl>, <decl><type ref="prev"/><name>innerRadius</name> <init>= <expr><name>radius</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Vector2</name></type> <name><name>point</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><operator>(</operator><name>float</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>innerRadius</name></expr>, <expr><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>lineThick</name></expr>}</block></expr>, <expr><block>{<expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>-</operator> <name>innerRadius</name></expr>, <expr><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>lineThick</name></expr>}</block></expr>, <expr><block>{ <expr><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>lineThick</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>innerRadius</name></expr> }</block></expr>, 

<expr><block>{<expr><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>lineThick</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>-</operator> <name>innerRadius</name></expr>}</block></expr>, <expr><block>{<expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>-</operator> <name>innerRadius</name></expr>, <expr><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name> <operator>+</operator> <name>lineThick</name></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>float</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>innerRadius</name></expr>, <expr><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name> <operator>+</operator> <name>lineThick</name></expr>}</block></expr>, <expr><block>{ <expr><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>lineThick</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>-</operator> <name>innerRadius</name></expr>}</block></expr>, <expr><block>{<expr><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>lineThick</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>innerRadius</name></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>float</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>innerRadius</name></expr>, <expr><name><name>rec</name><operator>.</operator><name>y</name></name></expr>}</block></expr>, <expr><block>{<expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>-</operator> <name>innerRadius</name></expr>, <expr><name><name>rec</name><operator>.</operator><name>y</name></name></expr>}</block></expr>, 

<expr><block>{ <expr><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>innerRadius</name></expr> }</block></expr>, <expr><block>{<expr><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>-</operator> <name>innerRadius</name></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>-</operator> <name>innerRadius</name></expr>, <expr><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name></expr>}</block></expr>, <expr><block>{<expr><operator>(</operator><name>float</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>innerRadius</name></expr>, <expr><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name></expr>}</block></expr>, 

<expr><block>{ <expr><name><name>rec</name><operator>.</operator><name>x</name></name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>-</operator> <name>innerRadius</name></expr>}</block></expr>, <expr><block>{<expr><name><name>rec</name><operator>.</operator><name>x</name></name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>innerRadius</name></expr>}</block></expr> 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Vector2</name></type> <name><name>centers</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><operator>(</operator><name>float</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>innerRadius</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>innerRadius</name></expr>}</block></expr>, <expr><block>{<expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>-</operator> <name>innerRadius</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>innerRadius</name></expr>}</block></expr>, 

<expr><block>{<expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>-</operator> <name>innerRadius</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>-</operator> <name>innerRadius</name></expr>}</block></expr>, <expr><block>{<expr><operator>(</operator><name>float</name><operator>)</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>innerRadius</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>-</operator> <name>innerRadius</name></expr>}</block></expr> 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>angles</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">180.0f</literal></expr>, <expr><literal type="number">90.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">270.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lineThick</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_QUADS_DRAW_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><name>segments</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>rlEnableTexture</name><argument_list>(<argument><expr><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_QUADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> 

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>angle</name> <init>= <expr><name><name>angles</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Vector2</name></type> <name>center</name> <init>= <expr><name><name>centers</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>segments</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>angle</name> <operator>+=</operator> <name>stepLength</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlDisableTexture</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>*</operator><literal type="number">6</literal><operator>*</operator><name>segments</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_TRIANGLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> 

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>angle</name> <init>= <expr><name><name>angles</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Vector2</name></type> <name>center</name> <init>= <expr><name><name>centers</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>segments</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>innerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>angle</name> <operator>+=</operator> <name>stepLength</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>*</operator><name>segments</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> 

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>angle</name> <init>= <expr><name><name>angles</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Vector2</name></type> <name>center</name> <init>= <expr><name><name>centers</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>segments</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>angle</name></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>+</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><operator>(</operator><name>angle</name> <operator>+</operator> <name>stepLength</name><operator>)</operator></expr></argument>)</argument_list></call><operator>*</operator><name>outerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>angle</name> <operator>+=</operator> <name>stepLength</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>point</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawTriangle</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v3</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_QUADS_DRAW_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>rlEnableTexture</name><argument_list>(<argument><expr><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_QUADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>v1</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v1</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>v2</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>v2</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>v3</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v3</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlDisableTexture</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_TRIANGLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>v1</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v1</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>v2</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>v3</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v3</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawTriangleLines</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>v3</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>v1</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v1</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>v2</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>v2</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>v3</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v3</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>v3</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v3</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>v1</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>v1</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawTriangleFan</name><parameter_list>(<parameter><decl><type><name>Vector2</name> <modifier>*</modifier></type><name>points</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pointsCount</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pointsCount</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><operator>(</operator><name>pointsCount</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlEnableTexture</name><argument_list>(<argument><expr><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_QUADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pointsCount</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlDisableTexture</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawTriangleStrip</name><parameter_list>(<parameter><decl><type><name>Vector2</name> <modifier>*</modifier></type><name>points</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pointsCount</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pointsCount</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><name>pointsCount</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_TRIANGLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pointsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name><operator>%</operator><literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawPoly</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sides</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rotation</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sides</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sides</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>centralAngle</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlRotatef</name><argument_list>(<argument><expr><name>rotation</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_QUADS_DRAW_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>rlEnableTexture</name><argument_list>(<argument><expr><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_QUADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sides</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>centralAngle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>centralAngle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>centralAngle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>centralAngle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>centralAngle</name> <operator>+=</operator> <literal type="number">360.0f</literal><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>sides</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTexCoord2f</name><argument_list>(<argument><expr><operator>(</operator><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>+</operator> <call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name><operator>)</operator><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>, <argument><expr><call><name>GetShapesTextureRec</name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>/</operator><call><name>GetShapesTexture</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>centralAngle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>centralAngle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlDisableTexture</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_TRIANGLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sides</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>centralAngle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>centralAngle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>centralAngle</name> <operator>+=</operator> <literal type="number">360.0f</literal><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>sides</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>centralAngle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>centralAngle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawPolyLines</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sides</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rotation</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sides</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sides</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>centralAngle</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rlCheckBufferLimit</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>*</operator><operator>(</operator><literal type="number">360</literal><operator>/</operator><name>sides</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rlglDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rlPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlTranslatef</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>center</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlRotatef</name><argument_list>(<argument><expr><name>rotation</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlBegin</name><argument_list>(<argument><expr><name>RL_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sides</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>rlColor4ub</name><argument_list>(<argument><expr><name><name>color</name><operator>.</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>color</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>centralAngle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>centralAngle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>centralAngle</name> <operator>+=</operator> <literal type="number">360.0f</literal><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name>sides</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlVertex2f</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>centralAngle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>, <argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>DEG2RAD</name><operator>*</operator><name>centralAngle</name></expr></argument>)</argument_list></call><operator>*</operator><name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rlEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>CheckCollisionPointRec</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>point</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>collision</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>point</name><operator>.</operator><name>x</name></name> <operator>&gt;=</operator> <name><name>rec</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>point</name><operator>.</operator><name>x</name></name> <operator>&lt;=</operator> <operator>(</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>point</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <name><name>rec</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>point</name><operator>.</operator><name>y</name></name> <operator>&lt;=</operator> <operator>(</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>collision</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>collision</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>CheckCollisionPointCircle</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>point</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>CheckCollisionCircles</name><argument_list>(<argument><expr><name>point</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>center</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>CheckCollisionPointTriangle</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>point</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>p2</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>p3</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>collision</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>alpha</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>p2</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>p3</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>point</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>p3</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>p3</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>p2</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>point</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>p3</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>)</operator> <operator>/</operator>

<operator>(</operator><operator>(</operator><name><name>p2</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>p3</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>p1</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>p3</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>p3</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>p2</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>p1</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>p3</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>beta</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>p3</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>p1</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>point</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>p3</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>p1</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>p3</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>point</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>p3</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>)</operator> <operator>/</operator>

<operator>(</operator><operator>(</operator><name><name>p2</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>p3</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>p1</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>p3</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>p3</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>p2</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>p1</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>p3</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>gamma</name> <init>= <expr><literal type="number">1.0f</literal> <operator>-</operator> <name>alpha</name> <operator>-</operator> <name>beta</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>alpha</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>beta</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>gamma</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>collision</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>collision</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>CheckCollisionRecs</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>rec1</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>collision</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>rec1</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>rec2</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec2</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>rec1</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec1</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>rec2</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>rec1</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>rec2</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec2</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>rec1</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec1</name><operator>.</operator><name>height</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>rec2</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>collision</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>collision</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>CheckCollisionCircles</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>center1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius1</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>center2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>collision</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dx</name> <init>= <expr><name><name>center2</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>center1</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>dy</name> <init>= <expr><name><name>center2</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>center1</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>distance</name> <init>= <expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>dx</name><operator>*</operator><name>dx</name> <operator>+</operator> <name>dy</name><operator>*</operator><name>dy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>distance</name> <operator>&lt;=</operator> <operator>(</operator><name>radius1</name> <operator>+</operator> <name>radius2</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>collision</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>collision</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>CheckCollisionCircleRec</name><parameter_list>(<parameter><decl><type><name>Vector2</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>recCenterX</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2.0f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>recCenterY</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>rec</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>rec</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2.0f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dx</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>x</name></name> <operator>-</operator> <operator>(</operator><name>float</name><operator>)</operator><name>recCenterX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dy</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>-</operator> <operator>(</operator><name>float</name><operator>)</operator><name>recCenterY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dx</name> <operator>&gt;</operator> <operator>(</operator><name><name>rec</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2.0f</literal> <operator>+</operator> <name>radius</name><operator>)</operator></expr>)</condition> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dy</name> <operator>&gt;</operator> <operator>(</operator><name><name>rec</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2.0f</literal> <operator>+</operator> <name>radius</name><operator>)</operator></expr>)</condition> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dx</name> <operator>&lt;=</operator> <operator>(</operator><name><name>rec</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2.0f</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dy</name> <operator>&lt;=</operator> <operator>(</operator><name><name>rec</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2.0f</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cornerDistanceSq</name> <init>= <expr><operator>(</operator><name>dx</name> <operator>-</operator> <name><name>rec</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2.0f</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>dx</name> <operator>-</operator> <name><name>rec</name><operator>.</operator><name>width</name></name><operator>/</operator><literal type="number">2.0f</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>dy</name> <operator>-</operator> <name><name>rec</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2.0f</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>dy</name> <operator>-</operator> <name><name>rec</name><operator>.</operator><name>height</name></name><operator>/</operator><literal type="number">2.0f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>cornerDistanceSq</name> <operator>&lt;=</operator> <operator>(</operator><name>radius</name><operator>*</operator><name>radius</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>Rectangle</name></type> <name>GetCollisionRec</name><parameter_list>(<parameter><decl><type><name>Rectangle</name></type> <name>rec1</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>retRec</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CheckCollisionRecs</name><argument_list>(<argument><expr><name>rec1</name></expr></argument>, <argument><expr><name>rec2</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>dxx</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>rec1</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>rec2</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>dyy</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>rec1</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>rec2</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rec1</name><operator>.</operator><name>x</name></name> <operator>&lt;=</operator> <name><name>rec2</name><operator>.</operator><name>x</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rec1</name><operator>.</operator><name>y</name></name> <operator>&lt;=</operator> <name><name>rec2</name><operator>.</operator><name>y</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>retRec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rec2</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>retRec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rec2</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>retRec</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>rec1</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name>dxx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>retRec</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>rec1</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name>dyy</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>retRec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rec2</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>retRec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rec1</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>retRec</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>rec1</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name>dxx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>retRec</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>rec2</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name>dyy</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rec1</name><operator>.</operator><name>y</name></name> <operator>&lt;=</operator> <name><name>rec2</name><operator>.</operator><name>y</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>retRec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rec1</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>retRec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rec2</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>retRec</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>rec2</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name>dxx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>retRec</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>rec1</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name>dyy</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>retRec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rec1</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>retRec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rec1</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>retRec</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>rec2</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name>dxx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>retRec</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>rec2</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name>dyy</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rec1</name><operator>.</operator><name>width</name></name> <operator>&gt;</operator> <name><name>rec2</name><operator>.</operator><name>width</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>retRec</name><operator>.</operator><name>width</name></name> <operator>&gt;=</operator> <name><name>rec2</name><operator>.</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>retRec</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>rec2</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>retRec</name><operator>.</operator><name>width</name></name> <operator>&gt;=</operator> <name><name>rec1</name><operator>.</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>retRec</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>rec1</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rec1</name><operator>.</operator><name>height</name></name> <operator>&gt;</operator> <name><name>rec2</name><operator>.</operator><name>height</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>retRec</name><operator>.</operator><name>height</name></name> <operator>&gt;=</operator> <name><name>rec2</name><operator>.</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>retRec</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>rec2</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>retRec</name><operator>.</operator><name>height</name></name> <operator>&gt;=</operator> <name><name>rec1</name><operator>.</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>retRec</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>rec1</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>retRec</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>EaseCubicInOut</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>/=</operator> <literal type="number">0.5f</literal><operator>*</operator><name>d</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0.5f</literal><operator>*</operator><name>c</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name> <operator>+</operator> <name>b</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0.5f</literal><operator>*</operator><name>c</name><operator>*</operator><operator>(</operator><name>t</name><operator>*</operator><name>t</name><operator>*</operator><name>t</name> <operator>+</operator> <literal type="number">2.0f</literal><operator>)</operator> <operator>+</operator> <name>b</name></expr>;</return>

</block_content>}</block></function>

</unit>
