<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\text.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raylib.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EXTERNAL_CONFIG_FLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_TTF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_RECT_PACK_IMPLEMENTATION</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"external/stb_rect_pack.h"</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBTT_STATIC</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STB_TRUETYPE_IMPLEMENTATION</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"external/stb_truetype.h"</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TEXT_BUFFER_LENGTH</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TEXT_UNICODE_CHARS</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TEXTSPLIT_MAX_TEXT_BUFFER_LENGTH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXTSPLIT_MAX_TEXT_BUFFER_LENGTH</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TEXTSPLIT_MAX_SUBSTRINGS_COUNT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXTSPLIT_MAX_SUBSTRINGS_COUNT</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_DEFAULT_FONT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>Font</name></type> <name>defaultFont</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_FNT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>static</specifier> <name>Font</name></type> <name>LoadBMFont</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>;</function_decl> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_DEFAULT_FONT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>LoadFontDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>UnloadFontDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_DEFAULT_FONT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>extern</specifier> <name>void</name></type> <name>LoadFontDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_CHECK</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; (1u &lt;&lt; (b)))</cpp:value></cpp:define>

<expr_stmt><expr><name><name>defaultFont</name><operator>.</operator><name>charsCount</name></name> <operator>=</operator> <literal type="number">224</literal></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>defaultFontData</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00200020</literal></expr>, <expr><literal type="number">0x0001b000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x8ef92520</literal></expr>, <expr><literal type="number">0x00020a00</literal></expr>, <expr><literal type="number">0x7dbe8000</literal></expr>, <expr><literal type="number">0x1f7df45f</literal></expr>,

<expr><literal type="number">0x4a2bf2a0</literal></expr>, <expr><literal type="number">0x0852091e</literal></expr>, <expr><literal type="number">0x41224000</literal></expr>, <expr><literal type="number">0x10041450</literal></expr>, <expr><literal type="number">0x2e292020</literal></expr>, <expr><literal type="number">0x08220812</literal></expr>, <expr><literal type="number">0x41222000</literal></expr>, <expr><literal type="number">0x10041450</literal></expr>, <expr><literal type="number">0x10f92020</literal></expr>, <expr><literal type="number">0x3efa084c</literal></expr>, <expr><literal type="number">0x7d22103c</literal></expr>, <expr><literal type="number">0x107df7de</literal></expr>,

<expr><literal type="number">0xe8a12020</literal></expr>, <expr><literal type="number">0x08220832</literal></expr>, <expr><literal type="number">0x05220800</literal></expr>, <expr><literal type="number">0x10450410</literal></expr>, <expr><literal type="number">0xa4a3f000</literal></expr>, <expr><literal type="number">0x08520832</literal></expr>, <expr><literal type="number">0x05220400</literal></expr>, <expr><literal type="number">0x10450410</literal></expr>, <expr><literal type="number">0xe2f92020</literal></expr>, <expr><literal type="number">0x0002085e</literal></expr>, <expr><literal type="number">0x7d3e0281</literal></expr>, <expr><literal type="number">0x107df41f</literal></expr>,

<expr><literal type="number">0x00200000</literal></expr>, <expr><literal type="number">0x8001b000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0xc0000fbe</literal></expr>, <expr><literal type="number">0xfbf7e00f</literal></expr>, <expr><literal type="number">0x5fbf7e7d</literal></expr>, <expr><literal type="number">0x0050bee8</literal></expr>, <expr><literal type="number">0x440808a2</literal></expr>, <expr><literal type="number">0x0a142fe8</literal></expr>, <expr><literal type="number">0x50810285</literal></expr>, <expr><literal type="number">0x0050a048</literal></expr>,

<expr><literal type="number">0x49e428a2</literal></expr>, <expr><literal type="number">0x0a142828</literal></expr>, <expr><literal type="number">0x40810284</literal></expr>, <expr><literal type="number">0x0048a048</literal></expr>, <expr><literal type="number">0x10020fbe</literal></expr>, <expr><literal type="number">0x09f7ebaf</literal></expr>, <expr><literal type="number">0xd89f3e84</literal></expr>, <expr><literal type="number">0x0047a04f</literal></expr>, <expr><literal type="number">0x09e48822</literal></expr>, <expr><literal type="number">0x0a142aa1</literal></expr>, <expr><literal type="number">0x50810284</literal></expr>, <expr><literal type="number">0x0048a048</literal></expr>,

<expr><literal type="number">0x04082822</literal></expr>, <expr><literal type="number">0x0a142fa0</literal></expr>, <expr><literal type="number">0x50810285</literal></expr>, <expr><literal type="number">0x0050a248</literal></expr>, <expr><literal type="number">0x00008fbe</literal></expr>, <expr><literal type="number">0xfbf42021</literal></expr>, <expr><literal type="number">0x5f817e7d</literal></expr>, <expr><literal type="number">0x07d09ce8</literal></expr>, <expr><literal type="number">0x00008000</literal></expr>, <expr><literal type="number">0x00000fe0</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x000c0180</literal></expr>,

<expr><literal type="number">0xdfbf4282</literal></expr>, <expr><literal type="number">0x0bfbf7ef</literal></expr>, <expr><literal type="number">0x42850505</literal></expr>, <expr><literal type="number">0x004804bf</literal></expr>, <expr><literal type="number">0x50a142c6</literal></expr>, <expr><literal type="number">0x08401428</literal></expr>, <expr><literal type="number">0x42852505</literal></expr>, <expr><literal type="number">0x00a808a0</literal></expr>, <expr><literal type="number">0x50a146aa</literal></expr>, <expr><literal type="number">0x08401428</literal></expr>, <expr><literal type="number">0x42852505</literal></expr>, <expr><literal type="number">0x00081090</literal></expr>,

<expr><literal type="number">0x5fa14a92</literal></expr>, <expr><literal type="number">0x0843f7e8</literal></expr>, <expr><literal type="number">0x7e792505</literal></expr>, <expr><literal type="number">0x00082088</literal></expr>, <expr><literal type="number">0x40a15282</literal></expr>, <expr><literal type="number">0x08420128</literal></expr>, <expr><literal type="number">0x40852489</literal></expr>, <expr><literal type="number">0x00084084</literal></expr>, <expr><literal type="number">0x40a16282</literal></expr>, <expr><literal type="number">0x0842022a</literal></expr>, <expr><literal type="number">0x40852451</literal></expr>, <expr><literal type="number">0x00088082</literal></expr>,

<expr><literal type="number">0xc0bf4282</literal></expr>, <expr><literal type="number">0xf843f42f</literal></expr>, <expr><literal type="number">0x7e85fc21</literal></expr>, <expr><literal type="number">0x3e0900bf</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000004</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x000c0180</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x04000402</literal></expr>, <expr><literal type="number">0x41482000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000800</literal></expr>,

<expr><literal type="number">0x04000404</literal></expr>, <expr><literal type="number">0x4100203c</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000800</literal></expr>, <expr><literal type="number">0xf7df7df0</literal></expr>, <expr><literal type="number">0x514bef85</literal></expr>, <expr><literal type="number">0xbefbefbe</literal></expr>, <expr><literal type="number">0x04513bef</literal></expr>, <expr><literal type="number">0x14414500</literal></expr>, <expr><literal type="number">0x494a2885</literal></expr>, <expr><literal type="number">0xa28a28aa</literal></expr>, <expr><literal type="number">0x04510820</literal></expr>,

<expr><literal type="number">0xf44145f0</literal></expr>, <expr><literal type="number">0x474a289d</literal></expr>, <expr><literal type="number">0xa28a28aa</literal></expr>, <expr><literal type="number">0x04510be0</literal></expr>, <expr><literal type="number">0x14414510</literal></expr>, <expr><literal type="number">0x494a2884</literal></expr>, <expr><literal type="number">0xa28a28aa</literal></expr>, <expr><literal type="number">0x02910a00</literal></expr>, <expr><literal type="number">0xf7df7df0</literal></expr>, <expr><literal type="number">0xd14a2f85</literal></expr>, <expr><literal type="number">0xbefbe8aa</literal></expr>, <expr><literal type="number">0x011f7be0</literal></expr>,

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00400804</literal></expr>, <expr><literal type="number">0x20080000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00600f84</literal></expr>, <expr><literal type="number">0x20080000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,

<expr><literal type="number">0xac000000</literal></expr>, <expr><literal type="number">0x00000f01</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x24000000</literal></expr>, <expr><literal type="number">0x00000f01</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x06000000</literal></expr>, <expr><literal type="number">0x24000000</literal></expr>, <expr><literal type="number">0x00000f01</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x09108000</literal></expr>,

<expr><literal type="number">0x24fa28a2</literal></expr>, <expr><literal type="number">0x00000f01</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x013e0000</literal></expr>, <expr><literal type="number">0x2242252a</literal></expr>, <expr><literal type="number">0x00000f52</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x038a8000</literal></expr>, <expr><literal type="number">0x2422222a</literal></expr>, <expr><literal type="number">0x00000f29</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x010a8000</literal></expr>,

<expr><literal type="number">0x2412252a</literal></expr>, <expr><literal type="number">0x00000f01</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x010a8000</literal></expr>, <expr><literal type="number">0x24fbe8be</literal></expr>, <expr><literal type="number">0x00000f01</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x0ebe8000</literal></expr>, <expr><literal type="number">0xac020000</literal></expr>, <expr><literal type="number">0x00000f01</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00048000</literal></expr>,

<expr><literal type="number">0x0003e000</literal></expr>, <expr><literal type="number">0x00000f00</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00008000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000038</literal></expr>, <expr><literal type="number">0x8443b80e</literal></expr>, <expr><literal type="number">0x00203a03</literal></expr>,

<expr><literal type="number">0x02bea080</literal></expr>, <expr><literal type="number">0xf0000020</literal></expr>, <expr><literal type="number">0xc452208a</literal></expr>, <expr><literal type="number">0x04202b02</literal></expr>, <expr><literal type="number">0xf8029122</literal></expr>, <expr><literal type="number">0x07f0003b</literal></expr>, <expr><literal type="number">0xe44b388e</literal></expr>, <expr><literal type="number">0x02203a02</literal></expr>, <expr><literal type="number">0x081e8a1c</literal></expr>, <expr><literal type="number">0x0411e92a</literal></expr>, <expr><literal type="number">0xf4420be0</literal></expr>, <expr><literal type="number">0x01248202</literal></expr>,

<expr><literal type="number">0xe8140414</literal></expr>, <expr><literal type="number">0x05d104ba</literal></expr>, <expr><literal type="number">0xe7c3b880</literal></expr>, <expr><literal type="number">0x00893a0a</literal></expr>, <expr><literal type="number">0x283c0e1c</literal></expr>, <expr><literal type="number">0x04500902</literal></expr>, <expr><literal type="number">0xc4400080</literal></expr>, <expr><literal type="number">0x00448002</literal></expr>, <expr><literal type="number">0xe8208422</literal></expr>, <expr><literal type="number">0x04500002</literal></expr>, <expr><literal type="number">0x80400000</literal></expr>, <expr><literal type="number">0x05200002</literal></expr>,

<expr><literal type="number">0x083e8e00</literal></expr>, <expr><literal type="number">0x04100002</literal></expr>, <expr><literal type="number">0x804003e0</literal></expr>, <expr><literal type="number">0x07000042</literal></expr>, <expr><literal type="number">0xf8008400</literal></expr>, <expr><literal type="number">0x07f00003</literal></expr>, <expr><literal type="number">0x80400000</literal></expr>, <expr><literal type="number">0x04000022</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x80400000</literal></expr>, <expr><literal type="number">0x04000002</literal></expr>,

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00800702</literal></expr>, <expr><literal type="number">0x1848a0c2</literal></expr>, <expr><literal type="number">0x84010000</literal></expr>, <expr><literal type="number">0x02920921</literal></expr>, <expr><literal type="number">0x01042642</literal></expr>, <expr><literal type="number">0x00005121</literal></expr>, <expr><literal type="number">0x42023f7f</literal></expr>, <expr><literal type="number">0x00291002</literal></expr>,

<expr><literal type="number">0xefc01422</literal></expr>, <expr><literal type="number">0x7efdfbf7</literal></expr>, <expr><literal type="number">0xefdfa109</literal></expr>, <expr><literal type="number">0x03bbbbf7</literal></expr>, <expr><literal type="number">0x28440f12</literal></expr>, <expr><literal type="number">0x42850a14</literal></expr>, <expr><literal type="number">0x20408109</literal></expr>, <expr><literal type="number">0x01111010</literal></expr>, <expr><literal type="number">0x28440408</literal></expr>, <expr><literal type="number">0x42850a14</literal></expr>, <expr><literal type="number">0x2040817f</literal></expr>, <expr><literal type="number">0x01111010</literal></expr>,

<expr><literal type="number">0xefc78204</literal></expr>, <expr><literal type="number">0x7efdfbf7</literal></expr>, <expr><literal type="number">0xe7cf8109</literal></expr>, <expr><literal type="number">0x011111f3</literal></expr>, <expr><literal type="number">0x2850a932</literal></expr>, <expr><literal type="number">0x42850a14</literal></expr>, <expr><literal type="number">0x2040a109</literal></expr>, <expr><literal type="number">0x01111010</literal></expr>, <expr><literal type="number">0x2850b840</literal></expr>, <expr><literal type="number">0x42850a14</literal></expr>, <expr><literal type="number">0xefdfbf79</literal></expr>, <expr><literal type="number">0x03bbbbf7</literal></expr>,

<expr><literal type="number">0x001fa020</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00001000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00002070</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,

<expr><literal type="number">0x08022800</literal></expr>, <expr><literal type="number">0x00012283</literal></expr>, <expr><literal type="number">0x02430802</literal></expr>, <expr><literal type="number">0x01010001</literal></expr>, <expr><literal type="number">0x8404147c</literal></expr>, <expr><literal type="number">0x20000144</literal></expr>, <expr><literal type="number">0x80048404</literal></expr>, <expr><literal type="number">0x00823f08</literal></expr>, <expr><literal type="number">0xdfbf4284</literal></expr>, <expr><literal type="number">0x7e03f7ef</literal></expr>, <expr><literal type="number">0x142850a1</literal></expr>, <expr><literal type="number">0x0000210a</literal></expr>,

<expr><literal type="number">0x50a14684</literal></expr>, <expr><literal type="number">0x528a1428</literal></expr>, <expr><literal type="number">0x142850a1</literal></expr>, <expr><literal type="number">0x03efa17a</literal></expr>, <expr><literal type="number">0x50a14a9e</literal></expr>, <expr><literal type="number">0x52521428</literal></expr>, <expr><literal type="number">0x142850a1</literal></expr>, <expr><literal type="number">0x02081f4a</literal></expr>, <expr><literal type="number">0x50a15284</literal></expr>, <expr><literal type="number">0x4a221428</literal></expr>, <expr><literal type="number">0xf42850a1</literal></expr>, <expr><literal type="number">0x03efa14b</literal></expr>,

<expr><literal type="number">0x50a16284</literal></expr>, <expr><literal type="number">0x4a521428</literal></expr>, <expr><literal type="number">0x042850a1</literal></expr>, <expr><literal type="number">0x0228a17a</literal></expr>, <expr><literal type="number">0xdfbf427c</literal></expr>, <expr><literal type="number">0x7e8bf7ef</literal></expr>, <expr><literal type="number">0xf7efdfbf</literal></expr>, <expr><literal type="number">0x03efbd0b</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x04000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000008</literal></expr>,

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00200508</literal></expr>, <expr><literal type="number">0x00840400</literal></expr>, <expr><literal type="number">0x11458122</literal></expr>, <expr><literal type="number">0x00014210</literal></expr>,

<expr><literal type="number">0x00514294</literal></expr>, <expr><literal type="number">0x51420800</literal></expr>, <expr><literal type="number">0x20a22a94</literal></expr>, <expr><literal type="number">0x0050a508</literal></expr>, <expr><literal type="number">0x00200000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00050000</literal></expr>, <expr><literal type="number">0x08000000</literal></expr>, <expr><literal type="number">0xfefbefbe</literal></expr>, <expr><literal type="number">0xfbefbefb</literal></expr>, <expr><literal type="number">0xfbeb9114</literal></expr>, <expr><literal type="number">0x00fbefbe</literal></expr>,

<expr><literal type="number">0x20820820</literal></expr>, <expr><literal type="number">0x8a28a20a</literal></expr>, <expr><literal type="number">0x8a289114</literal></expr>, <expr><literal type="number">0x3e8a28a2</literal></expr>, <expr><literal type="number">0xfefbefbe</literal></expr>, <expr><literal type="number">0xfbefbe0b</literal></expr>, <expr><literal type="number">0x8a289114</literal></expr>, <expr><literal type="number">0x008a28a2</literal></expr>, <expr><literal type="number">0x228a28a2</literal></expr>, <expr><literal type="number">0x08208208</literal></expr>, <expr><literal type="number">0x8a289114</literal></expr>, <expr><literal type="number">0x088a28a2</literal></expr>,

<expr><literal type="number">0xfefbefbe</literal></expr>, <expr><literal type="number">0xfbefbefb</literal></expr>, <expr><literal type="number">0xfa2f9114</literal></expr>, <expr><literal type="number">0x00fbefbe</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000040</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000020</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00210100</literal></expr>, <expr><literal type="number">0x00000004</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x14508200</literal></expr>, <expr><literal type="number">0x00001402</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,

<expr><literal type="number">0x00000010</literal></expr>, <expr><literal type="number">0x00000020</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0xa28a28be</literal></expr>, <expr><literal type="number">0x00002228</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0xa28a28aa</literal></expr>, <expr><literal type="number">0x000022e8</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,

<expr><literal type="number">0xa28a28aa</literal></expr>, <expr><literal type="number">0x000022a8</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0xa28a28aa</literal></expr>, <expr><literal type="number">0x000022e8</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0xbefbefbe</literal></expr>, <expr><literal type="number">0x00003e2f</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,

<expr><literal type="number">0x00000004</literal></expr>, <expr><literal type="number">0x00002028</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x80000000</literal></expr>, <expr><literal type="number">0x00003e0f</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>charsHeight</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>charsDivisor</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>charsWidth</name><index>[<expr><literal type="number">224</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>,

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>,

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>,

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>,

<expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>imWidth</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>imHeight</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>imagePixels</name> <init>= <expr><operator>(</operator><name>Color</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>imWidth</name><operator>*</operator><name>imHeight</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>imWidth</name><operator>*</operator><name>imHeight</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>imagePixels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>BLANK</name></expr>;</expr_stmt></block_content></block></for> 

<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>imWidth</name><operator>*</operator><name>imHeight</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">32</literal></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>BIT_CHECK</name><argument_list>(<argument><expr><name><name>defaultFontData</name><index>[<expr><name>counter</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>imagePixels</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>&gt;</operator> <literal type="number">512</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></for>

<decl_stmt><decl><type><name>Image</name></type> <name>imFont</name> <init>= <expr><call><name>LoadImageEx</name><argument_list>(<argument><expr><name>imagePixels</name></expr></argument>, <argument><expr><name>imWidth</name></expr></argument>, <argument><expr><name>imHeight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>imFont</name></expr></argument>, <argument><expr><name>UNCOMPRESSED_GRAY_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>imagePixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>defaultFont</name><operator>.</operator><name>texture</name></name> <operator>=</operator> <call><name>LoadTextureFromImage</name><argument_list>(<argument><expr><name>imFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>defaultFont</name><operator>.</operator><name>chars</name></name> <operator>=</operator> <operator>(</operator><name>CharInfo</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>defaultFont</name><operator>.</operator><name>charsCount</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>CharInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>defaultFont</name><operator>.</operator><name>recs</name></name> <operator>=</operator> <operator>(</operator><name>Rectangle</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>defaultFont</name><operator>.</operator><name>charsCount</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Rectangle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>currentLine</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>currentPosX</name> <init>= <expr><name>charsDivisor</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>testPosX</name> <init>= <expr><name>charsDivisor</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>defaultFont</name><operator>.</operator><name>charsCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>defaultFont</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <literal type="number">32</literal> <operator>+</operator> <name>i</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>defaultFont</name><operator>.</operator><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>currentPosX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>defaultFont</name><operator>.</operator><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>charsDivisor</name> <operator>+</operator> <name>currentLine</name><operator>*</operator><operator>(</operator><name>charsHeight</name> <operator>+</operator> <name>charsDivisor</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>defaultFont</name><operator>.</operator><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>charsWidth</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>defaultFont</name><operator>.</operator><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>charsHeight</name></expr>;</expr_stmt>

<expr_stmt><expr><name>testPosX</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>defaultFont</name><operator>.</operator><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name>charsDivisor</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>testPosX</name> <operator>&gt;=</operator> <name><name>defaultFont</name><operator>.</operator><name>texture</name><operator>.</operator><name>width</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>currentLine</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>currentPosX</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>charsDivisor</name> <operator>+</operator> <name><name>charsWidth</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>testPosX</name> <operator>=</operator> <name>currentPosX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>defaultFont</name><operator>.</operator><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>charsDivisor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>defaultFont</name><operator>.</operator><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>charsDivisor</name> <operator>+</operator> <name>currentLine</name><operator>*</operator><operator>(</operator><name>charsHeight</name> <operator>+</operator> <name>charsDivisor</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>currentPosX</name> <operator>=</operator> <name>testPosX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>defaultFont</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offsetX</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>defaultFont</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offsetY</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>defaultFont</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>advanceX</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>defaultFont</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>image</name> <operator>=</operator> <call><name>ImageFromImage</name><argument_list>(<argument><expr><name>imFont</name></expr></argument>, <argument><expr><name><name>defaultFont</name><operator>.</operator><name>recs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>imFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>defaultFont</name><operator>.</operator><name>baseSize</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>defaultFont</name><operator>.</operator><name>recs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"FONT: Default font loaded successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type> <name>UnloadFontDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>defaultFont</name><operator>.</operator><name>charsCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name><name>defaultFont</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name><name>defaultFont</name><operator>.</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>defaultFont</name><operator>.</operator><name>chars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>defaultFont</name><operator>.</operator><name>recs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>Font</name></type> <name>GetFontDefault</name><parameter_list>()</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_DEFAULT_FONT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><name>defaultFont</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>Font</name></type> <name>font</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name>font</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>Font</name></type> <name>LoadFont</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_TTF_FONTSIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_TTF_NUMCHARS</name></cpp:macro> <cpp:value>95</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_FIRST_CHAR</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>Font</name></type> <name>font</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_TTF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".ttf;.otf"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>LoadFontEx</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>DEFAULT_TTF_FONTSIZE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DEFAULT_TTF_NUMCHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_FNT</name></expr></argument>)</argument_list></call></expr></cpp:if>

if <condition>(<expr><call><name>IsFileExtension</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">".fnt"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>LoadBMFont</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>Image</name></type> <name>image</name> <init>= <expr><call><name>LoadImage</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>image</name><operator>.</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>LoadFontFromImage</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>MAGENTA</name></expr></argument>, <argument><expr><name>DEFAULT_FIRST_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>font</name><operator>.</operator><name>texture</name><operator>.</operator><name>id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FONT: [%s] Failed to load font texture -&gt; Using default font"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>GetFontDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>SetTextureFilter</name><argument_list>(<argument><expr><name><name>font</name><operator>.</operator><name>texture</name></name></expr></argument>, <argument><expr><name>FILTER_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<return>return <expr><name>font</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>Font</name></type> <name>LoadFontEx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fontChars</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>charsCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Font</name></type> <name>font</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_TTF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>baseSize</name></name> <operator>=</operator> <name>fontSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>charsCount</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>charsCount</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><name>charsCount</name></expr> </then><else>: <expr><literal type="number">95</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>chars</name></name> <operator>=</operator> <call><name>LoadFontData</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>font</name><operator>.</operator><name>baseSize</name></name></expr></argument>, <argument><expr><name>fontChars</name></expr></argument>, <argument><expr><name><name>font</name><operator>.</operator><name>charsCount</name></name></expr></argument>, <argument><expr><name>FONT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>font</name><operator>.</operator><name>chars</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Image</name></type> <name>atlas</name> <init>= <expr><call><name>GenImageFontAtlas</name><argument_list>(<argument><expr><name><name>font</name><operator>.</operator><name>chars</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>font</name><operator>.</operator><name>recs</name></name></expr></argument>, <argument><expr><name><name>font</name><operator>.</operator><name>charsCount</name></name></expr></argument>, <argument><expr><name><name>font</name><operator>.</operator><name>baseSize</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>texture</name></name> <operator>=</operator> <call><name>LoadTextureFromImage</name><argument_list>(<argument><expr><name>atlas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>font</name><operator>.</operator><name>charsCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>image</name> <operator>=</operator> <call><name>ImageFromImage</name><argument_list>(<argument><expr><name>atlas</name></expr></argument>, <argument><expr><name><name>font</name><operator>.</operator><name>recs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>atlas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>GetFontDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>GetFontDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>font</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>Font</name></type> <name>LoadFontFromImage</name><parameter_list>(<parameter><decl><type><name>Image</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstChar</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_EQUAL</name><parameter_list>(<parameter><type><name>col1</name></type></parameter>, <parameter><type><name>col2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((col1.r == col2.r)&amp;&amp;(col1.g == col2.g)&amp;&amp;(col1.b == col2.b)&amp;&amp;(col1.a == col2.a))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>charSpacing</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lineSpacing</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FONTCHARS</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name><name>tempCharValues</name><index>[<expr><name>MAX_FONTCHARS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name><name>tempCharRecs</name><index>[<expr><name>MAX_FONTCHARS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Color</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><call><name>GetImageData</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>image</name><operator>.</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>image</name><operator>.</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>COLOR_EQUAL</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>COLOR_EQUAL</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>image</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>charSpacing</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lineSpacing</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>charHeight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>COLOR_EQUAL</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><operator>(</operator><name>lineSpacing</name> <operator>+</operator> <name>j</name><operator>)</operator><operator>*</operator><name><name>image</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>charSpacing</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>charHeight</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lineToRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xPosToRead</name> <init>= <expr><name>charSpacing</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>lineSpacing</name> <operator>+</operator> <name>lineToRead</name><operator>*</operator><operator>(</operator><name>charHeight</name> <operator>+</operator> <name>lineSpacing</name><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name><name>image</name><operator>.</operator><name>height</name></name></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><operator>(</operator><name>xPosToRead</name> <operator>&lt;</operator> <name><name>image</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>COLOR_EQUAL</name><argument_list>(<argument><expr><operator>(</operator><name><name>pixels</name><index>[<expr><operator>(</operator><name>lineSpacing</name> <operator>+</operator> <operator>(</operator><name>charHeight</name><operator>+</operator><name>lineSpacing</name><operator>)</operator><operator>*</operator><name>lineToRead</name><operator>)</operator><operator>*</operator><name><name>image</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>xPosToRead</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tempCharValues</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>firstChar</name> <operator>+</operator> <name>index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tempCharRecs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>xPosToRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tempCharRecs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>lineSpacing</name> <operator>+</operator> <name>lineToRead</name><operator>*</operator><operator>(</operator><name>charHeight</name> <operator>+</operator> <name>lineSpacing</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tempCharRecs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>charHeight</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>charWidth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>COLOR_EQUAL</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><operator>(</operator><name>lineSpacing</name> <operator>+</operator> <operator>(</operator><name>charHeight</name><operator>+</operator><name>lineSpacing</name><operator>)</operator><operator>*</operator><name>lineToRead</name><operator>)</operator><operator>*</operator><name><name>image</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>xPosToRead</name> <operator>+</operator> <name>charWidth</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>charWidth</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>tempCharRecs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>charWidth</name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>xPosToRead</name> <operator>+=</operator> <operator>(</operator><name>charWidth</name> <operator>+</operator> <name>charSpacing</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>lineToRead</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>xPosToRead</name> <operator>=</operator> <name>charSpacing</name></expr>;</expr_stmt>

</block_content>}</block></while>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>.</operator><name>height</name></name><operator>*</operator><name><name>image</name><operator>.</operator><name>width</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><call><name>COLOR_EQUAL</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>BLANK</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<decl_stmt><decl><type><name>Image</name></type> <name>fontClear</name> <init>= <expr><call><name>LoadImageEx</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>image</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>Font</name></type> <name>font</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>texture</name></name> <operator>=</operator> <call><name>LoadTextureFromImage</name><argument_list>(<argument><expr><name>fontClear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>charsCount</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>chars</name></name> <operator>=</operator> <operator>(</operator><name>CharInfo</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>font</name><operator>.</operator><name>charsCount</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>CharInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>recs</name></name> <operator>=</operator> <operator>(</operator><name>Rectangle</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>font</name><operator>.</operator><name>charsCount</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Rectangle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>font</name><operator>.</operator><name>charsCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>tempCharValues</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>recs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tempCharRecs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offsetX</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offsetY</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>advanceX</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>image</name> <operator>=</operator> <call><name>ImageFromImage</name><argument_list>(<argument><expr><name>fontClear</name></expr></argument>, <argument><expr><name><name>tempCharRecs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>fontClear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>baseSize</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>font</name><operator>.</operator><name>recs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name></expr>;</expr_stmt>

<return>return <expr><name>font</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>CharInfo</name> <modifier>*</modifier></type><name>LoadFontData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fontChars</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>charsCount</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDF_CHAR_PADDING</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDF_ON_EDGE_VALUE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDF_PIXEL_DIST_SCALE</name></cpp:macro> <cpp:value>64.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_ALPHA_THRESHOLD</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>

<decl_stmt><decl><type><name>CharInfo</name> <modifier>*</modifier></type><name>chars</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_TTF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dataSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fileData</name> <init>= <expr><call><name>LoadFileData</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fileData</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>genFontChars</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbtt_fontinfo</name></type> <name>fontInfo</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stbtt_InitFont</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fontInfo</name></expr></argument>, <argument><expr><name>fileData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>scaleFactor</name> <init>= <expr><call><name>stbtt_ScaleForPixelHeight</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fontInfo</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>fontSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ascent</name></decl>, <decl><type ref="prev"/><name>descent</name></decl>, <decl><type ref="prev"/><name>lineGap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbtt_GetFontVMetrics</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fontInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ascent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>descent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lineGap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>charsCount</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>charsCount</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><name>charsCount</name></expr> </then><else>: <expr><literal type="number">95</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fontChars</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>fontChars</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>charsCount</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>charsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>fontChars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>genFontChars</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>chars</name> <operator>=</operator> <operator>(</operator><name>CharInfo</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>charsCount</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>CharInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>charsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>chw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>chh</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><name><name>fontChars</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>FONT_SDF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>stbtt_GetCodepointBitmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fontInfo</name></expr></argument>, <argument><expr><name>scaleFactor</name></expr></argument>, <argument><expr><name>scaleFactor</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offsetX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offsetY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>stbtt_GetCodepointSDF</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fontInfo</name></expr></argument>, <argument><expr><name>scaleFactor</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>SDF_CHAR_PADDING</name></expr></argument>, <argument><expr><name>SDF_ON_EDGE_VALUE</name></expr></argument>, <argument><expr><name>SDF_PIXEL_DIST_SCALE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offsetX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offsetY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>stbtt_GetCodepointHMetrics</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fontInfo</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>advanceX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>advanceX</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>advanceX</name><operator>*</operator><name>scaleFactor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>chw</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>chh</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_GRAYSCALE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offsetY</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>ascent</name><operator>*</operator><name>scaleFactor</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>image</name> <operator>=</operator> <call><name>GenImageColor</name><argument_list>(<argument><expr><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>advanceX</name></expr></argument>, <argument><expr><name>fontSize</name></expr></argument>, <argument><expr><name>BLANK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ImageFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>image</name></expr></argument>, <argument><expr><name>UNCOMPRESSED_GRAYSCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>FONT_BITMAP</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>chw</name><operator>*</operator><name>chh</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>p</name></expr>]</index> <operator>&lt;</operator> <name>BITMAP_ALPHA_THRESHOLD</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>p</name></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>p</name></expr>]</index> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FONT: Failed to process TTF font data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>fileData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>genFontChars</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>fontChars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>chars</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_TTF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>Image</name></type> <name>GenImageFontAtlas</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CharInfo</name> <modifier>*</modifier></type><name>chars</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name> <modifier>*</modifier><modifier>*</modifier></type><name>charRecs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>charsCount</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>padding</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>packMethod</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Image</name></type> <name>atlas</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>charRecs</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>charsCount</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>charsCount</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><name>charsCount</name></expr> </then><else>: <expr><literal type="number">95</literal></expr></else></ternary></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Rectangle</name> <modifier>*</modifier></type><name>recs</name> <init>= <expr><operator>(</operator><name>Rectangle</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>charsCount</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Rectangle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>requiredArea</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>charsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>requiredArea</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>width</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>padding</name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>height</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>padding</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>float</name></type> <name>guessSize</name> <init>= <expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>requiredArea</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">1.3f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>imageSize</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>powf</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>ceilf</name><argument_list>(<argument><expr><call><name>logf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>guessSize</name></expr></argument>)</argument_list></call><operator>/</operator><call><name>logf</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>atlas</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>imageSize</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>atlas</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>imageSize</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>atlas</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>atlas</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>atlas</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>atlas</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_GRAYSCALE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>atlas</name><operator>.</operator><name>mipmaps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>packMethod</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>offsetX</name> <init>= <expr><name>padding</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offsetY</name> <init>= <expr><name>padding</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>charsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>atlas</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><operator>(</operator><name>offsetY</name> <operator>+</operator> <name>y</name><operator>)</operator><operator>*</operator><name><name>atlas</name><operator>.</operator><name>width</name></name> <operator>+</operator> <operator>(</operator><name>offsetX</name> <operator>+</operator> <name>x</name><operator>)</operator></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>y</name><operator>*</operator><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>offsetX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>offsetY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>offsetX</name> <operator>+=</operator> <operator>(</operator><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>width</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>padding</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offsetX</name> <operator>&gt;=</operator> <operator>(</operator><name><name>atlas</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>padding</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>offsetX</name> <operator>=</operator> <name>padding</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offsetY</name> <operator>+=</operator> <operator>(</operator><name>fontSize</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>padding</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offsetY</name> <operator>&gt;</operator> <operator>(</operator><name><name>atlas</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name>fontSize</name> <operator>-</operator> <name>padding</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>packMethod</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>stbrp_context</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><operator>(</operator><name>stbrp_context</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stbrp_node</name> <modifier>*</modifier></type><name>nodes</name> <init>= <expr><operator>(</operator><name>stbrp_node</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>charsCount</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>nodes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stbrp_init_target</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>atlas</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>atlas</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>charsCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>stbrp_rect</name> <modifier>*</modifier></type><name>rects</name> <init>= <expr><operator>(</operator><name>stbrp_rect</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>charsCount</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>stbrp_rect</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>charsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>=</operator> <name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>width</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>padding</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>=</operator> <name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>height</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>padding</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>stbrp_pack_rects</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>rects</name></expr></argument>, <argument><expr><name>charsCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>charsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name>padding</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><name>padding</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>recs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>was_packed</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>atlas</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><operator>(</operator><name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>+</operator> <name>padding</name> <operator>+</operator> <name>y</name><operator>)</operator><operator>*</operator><name><name>atlas</name><operator>.</operator><name>width</name></name> <operator>+</operator> <operator>(</operator><name><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <name>padding</name> <operator>+</operator> <name>x</name><operator>)</operator></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>y</name><operator>*</operator><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>image</name><operator>.</operator><name>width</name></name> <operator>+</operator> <name>x</name></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FONT: Failed to package character (%i)"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>rects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dataGrayAlpha</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>atlas</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>atlas</name><operator>.</operator><name>height</name></name><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>atlas</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>atlas</name><operator>.</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>dataGrayAlpha</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dataGrayAlpha</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>atlas</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>atlas</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>atlas</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>dataGrayAlpha</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>atlas</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>UNCOMPRESSED_GRAY_ALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>charRecs</name> <operator>=</operator> <name>recs</name></expr>;</expr_stmt>

<return>return <expr><name>atlas</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>UnloadFont</name><parameter_list>(<parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>font</name><operator>.</operator><name>texture</name><operator>.</operator><name>id</name></name> <operator>!=</operator> <call><name>GetFontDefault</name><argument_list>()</argument_list></call><operator>.</operator><name><name>texture</name><operator>.</operator><name>id</name></name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>font</name><operator>.</operator><name>charsCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>UnloadTexture</name><argument_list>(<argument><expr><name><name>font</name><operator>.</operator><name>texture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>font</name><operator>.</operator><name>chars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name><name>font</name><operator>.</operator><name>recs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">"FONT: Unloaded font data from RAM and VRAM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawFPS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>posX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posY</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawText</name><argument_list>(<argument><expr><call><name>TextFormat</name><argument_list>(<argument><expr><literal type="string">"%2i FPS"</literal></expr></argument>, <argument><expr><call><name>GetFPS</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>posX</name></expr></argument>, <argument><expr><name>posY</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>LIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawText</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>posY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>GetFontDefault</name><argument_list>()</argument_list></call><operator>.</operator><name><name>texture</name><operator>.</operator><name>id</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>position</name> <init>= <expr><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name>posX</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>posY</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>defaultFontSize</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>fontSize</name> <operator>&lt;</operator> <name>defaultFontSize</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fontSize</name> <operator>=</operator> <name>defaultFontSize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>spacing</name> <init>= <expr><name>fontSize</name><operator>/</operator><name>defaultFontSize</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DrawTextEx</name><argument_list>(<argument><expr><call><name>GetFontDefault</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>fontSize</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>spacing</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawTextCodepoint</name><parameter_list>(<parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>GetGlyphIndex</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>rec</name> <init>= <expr><block>{ <expr><name><name>position</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>position</name><operator>.</operator><name>y</name></name></expr>, <expr><name><name>font</name><operator>.</operator><name>recs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>width</name><operator>*</operator><name>scale</name></expr>, <expr><name><name>font</name><operator>.</operator><name>recs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>height</name><operator>*</operator><name>scale</name></expr> }</block></expr></init></decl>;</decl_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>font.texture</argument>, <argument>font.recs[index]</argument>, <argument>rec</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal> }</argument>, <argument><literal type="number">0.0f</literal></argument>, <argument>tint</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawTextEx</name><parameter_list>(<parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>Vector2</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>spacing</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>TextLength</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>textOffsetY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>textOffsetX</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>scaleFactor</name> <init>= <expr><name>fontSize</name><operator>/</operator><name><name>font</name><operator>.</operator><name>baseSize</name></name></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>codepointByteCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>codepoint</name> <init>= <expr><call><name>GetNextCodepoint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>codepointByteCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>GetGlyphIndex</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>codepoint</name> <operator>==</operator> <literal type="number">0x3f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>codepointByteCount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>codepoint</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>textOffsetY</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>font</name><operator>.</operator><name>baseSize</name></name> <operator>+</operator> <name><name>font</name><operator>.</operator><name>baseSize</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>scaleFactor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>textOffsetX</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>codepoint</name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>codepoint</name> <operator>!=</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>Rectangle</name></type> <name>rec</name> <init>= <expr><block>{ <expr><name><name>position</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>textOffsetX</name> <operator>+</operator> <name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>offsetX</name><operator>*</operator><name>scaleFactor</name></expr>,

<expr><name><name>position</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>textOffsetY</name> <operator>+</operator> <name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>offsetY</name><operator>*</operator><name>scaleFactor</name></expr>,

<expr><name><name>font</name><operator>.</operator><name>recs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>width</name><operator>*</operator><name>scaleFactor</name></expr>,

<expr><name><name>font</name><operator>.</operator><name>recs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>height</name><operator>*</operator><name>scaleFactor</name></expr> }</block></expr></init></decl>;</decl_stmt>

<macro><name>DrawTexturePro</name><argument_list>(<argument>font.texture</argument>, <argument>font.recs[index]</argument>, <argument>rec</argument>, <argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal> }</argument>, <argument><literal type="number">0.0f</literal></argument>, <argument>tint</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>advanceX</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>textOffsetX</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>font</name><operator>.</operator><name>recs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>width</name><operator>*</operator><name>scaleFactor</name> <operator>+</operator> <name>spacing</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>textOffsetX</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>advanceX</name><operator>*</operator><name>scaleFactor</name> <operator>+</operator> <name>spacing</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>codepointByteCount</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawTextRec</name><parameter_list>(<parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>spacing</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>wordWrap</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DrawTextRecEx</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>, <argument><expr><name>fontSize</name></expr></argument>, <argument><expr><name>spacing</name></expr></argument>, <argument><expr><name>wordWrap</name></expr></argument>, <argument><expr><name>tint</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>, <argument><expr><name>WHITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DrawTextRecEx</name><parameter_list>(<parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>Rectangle</name></type> <name>rec</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>spacing</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>wordWrap</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>tint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>selectStart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>selectLength</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>selectTint</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>selectBackTint</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>TextLength</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>textOffsetY</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>textOffsetX</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>scaleFactor</name> <init>= <expr><name>fontSize</name><operator>/</operator><name><name>font</name><operator>.</operator><name>baseSize</name></name></expr></init></decl>;</decl_stmt> 

<enum>enum <block>{ <decl><name>MEASURE_STATE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>DRAW_STATE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> }</block>;</enum>

<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><ternary><condition><expr><name>wordWrap</name></expr>?</condition><then> <expr><name>MEASURE_STATE</name></expr> </then><else>: <expr><name>DRAW_STATE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>startLine</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>endLine</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>lastk</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>codepointByteCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>codepoint</name> <init>= <expr><call><name>GetNextCodepoint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>codepointByteCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>GetGlyphIndex</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>codepoint</name> <operator>==</operator> <literal type="number">0x3f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>codepointByteCount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>codepointByteCount</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>glyphWidth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>codepoint</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>glyphWidth</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>advanceX</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then>

<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>font</name><operator>.</operator><name>recs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>width</name><operator>*</operator><name>scaleFactor</name> <operator>+</operator> <name>spacing</name><operator>)</operator></expr></then><else>:

<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>advanceX</name><operator>*</operator><name>scaleFactor</name> <operator>+</operator> <name>spacing</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>MEASURE_STATE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>codepoint</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>codepoint</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>codepoint</name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>endLine</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>textOffsetX</name> <operator>+</operator> <name>glyphWidth</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;=</operator> <name><name>rec</name><operator>.</operator><name>width</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>endLine</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>endLine</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><name>endLine</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>endLine</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>endLine</name> <operator>-=</operator> <name>codepointByteCount</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>startLine</name> <operator>+</operator> <name>codepointByteCount</name><operator>)</operator> <operator>==</operator> <name>endLine</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>endLine</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>-</operator> <name>codepointByteCount</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>!</operator><name>state</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>length</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>endLine</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>!</operator><name>state</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>codepoint</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>state</name> <operator>=</operator> <operator>!</operator><name>state</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>DRAW_STATE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>textOffsetX</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>startLine</name></expr>;</expr_stmt>

<expr_stmt><expr><name>glyphWidth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name>lastk</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>lastk</name> <operator>=</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>codepoint</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wordWrap</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>textOffsetY</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>font</name><operator>.</operator><name>baseSize</name></name> <operator>+</operator> <name><name>font</name><operator>.</operator><name>baseSize</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>scaleFactor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>textOffsetX</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wordWrap</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>textOffsetX</name> <operator>+</operator> <name>glyphWidth</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;=</operator> <name><name>rec</name><operator>.</operator><name>width</name></name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>textOffsetY</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>font</name><operator>.</operator><name>baseSize</name></name> <operator>+</operator> <name><name>font</name><operator>.</operator><name>baseSize</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>scaleFactor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>textOffsetX</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>textOffsetY</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>font</name><operator>.</operator><name>baseSize</name></name><operator>*</operator><name>scaleFactor</name><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <name><name>rec</name><operator>.</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isGlyphSelected</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>selectStart</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>k</name> <operator>&gt;=</operator> <name>selectStart</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>k</name> <operator>&lt;</operator> <operator>(</operator><name>selectStart</name> <operator>+</operator> <name>selectLength</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<macro><name>DrawRectangleRec</name><argument_list>(<argument>(Rectangle){ rec.x + textOffsetX - <literal type="number">1</literal></argument>, <argument>rec.y + textOffsetY</argument>, <argument>glyphWidth</argument>, <argument>(int)((float)font.baseSize*scaleFactor) }</argument>, <argument>selectBackTint</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>isGlyphSelected</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>codepoint</name> <operator>!=</operator> <literal type="char">' '</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>codepoint</name> <operator>!=</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<macro><name>DrawTexturePro</name><argument_list>(<argument>font.texture</argument>, <argument>font.recs[index]</argument>,

<argument>(Rectangle){ rec.x + textOffsetX + font.chars[index].offsetX*scaleFactor</argument>,

<argument>rec.y + textOffsetY + font.chars[index].offsetY*scaleFactor</argument>,

<argument>font.recs[index].width*scaleFactor</argument>, <argument>font.recs[index].height*scaleFactor }</argument>,

<argument>(Vector2){ <literal type="number">0</literal></argument>, <argument><literal type="number">0</literal> }</argument>, <argument><literal type="number">0.0f</literal></argument>, <argument>(!isGlyphSelected)? tint : selectTint</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wordWrap</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>==</operator> <name>endLine</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>textOffsetY</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>font</name><operator>.</operator><name>baseSize</name></name> <operator>+</operator> <name><name>font</name><operator>.</operator><name>baseSize</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>scaleFactor</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>textOffsetX</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>startLine</name> <operator>=</operator> <name>endLine</name></expr>;</expr_stmt>

<expr_stmt><expr><name>endLine</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>glyphWidth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>selectStart</name> <operator>+=</operator> <name>lastk</name> <operator>-</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name>lastk</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>!</operator><name>state</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>textOffsetX</name> <operator>+=</operator> <name>glyphWidth</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>MeasureText</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fontSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Vector2</name></type> <name>vec</name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetFontDefault</name><argument_list>()</argument_list></call><operator>.</operator><name><name>texture</name><operator>.</operator><name>id</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>defaultFontSize</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>fontSize</name> <operator>&lt;</operator> <name>defaultFontSize</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fontSize</name> <operator>=</operator> <name>defaultFontSize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>spacing</name> <init>= <expr><name>fontSize</name><operator>/</operator><name>defaultFontSize</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vec</name> <operator>=</operator> <call><name>MeasureTextEx</name><argument_list>(<argument><expr><call><name>GetFontDefault</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>fontSize</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>spacing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>vec</name><operator>.</operator><name>x</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>Vector2</name></type> <name>MeasureTextEx</name><parameter_list>(<parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>fontSize</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>spacing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>TextLength</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tempLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>lenCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>textWidth</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>tempTextWidth</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>textHeight</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>font</name><operator>.</operator><name>baseSize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>scaleFactor</name> <init>= <expr><name>fontSize</name><operator>/</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>font</name><operator>.</operator><name>baseSize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>letter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>lenCounter</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>letter</name> <operator>=</operator> <call><name>GetNextCodepoint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>GetGlyphIndex</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>letter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>letter</name> <operator>==</operator> <literal type="number">0x3f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>next</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>next</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>letter</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>advanceX</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>textWidth</name> <operator>+=</operator> <name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>advanceX</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>textWidth</name> <operator>+=</operator> <operator>(</operator><name><name>font</name><operator>.</operator><name>recs</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>+</operator> <name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>offsetX</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tempTextWidth</name> <operator>&lt;</operator> <name>textWidth</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tempTextWidth</name> <operator>=</operator> <name>textWidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lenCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>textWidth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>textHeight</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>font</name><operator>.</operator><name>baseSize</name></name><operator>*</operator><literal type="number">1.5f</literal><operator>)</operator></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tempLen</name> <operator>&lt;</operator> <name>lenCounter</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tempLen</name> <operator>=</operator> <name>lenCounter</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>tempTextWidth</name> <operator>&lt;</operator> <name>textWidth</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tempTextWidth</name> <operator>=</operator> <name>textWidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>Vector2</name></type> <name>vec</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>tempTextWidth</name><operator>*</operator><name>scaleFactor</name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tempLen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name>spacing</name><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>vec</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>textHeight</name><operator>*</operator><name>scaleFactor</name></expr>;</expr_stmt>

<return>return <expr><name>vec</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>GetGlyphIndex</name><parameter_list>(<parameter><decl><type><name>Font</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_CHARACTER_NOTFOUND</name></cpp:macro> <cpp:value>63</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNORDERED_CHARSET</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNORDERED_CHARSET</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>TEXT_CHARACTER_NOTFOUND</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>font</name><operator>.</operator><name>charsCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>==</operator> <name>codepoint</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>index</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><operator>(</operator><name>codepoint</name> <operator>-</operator> <literal type="number">32</literal><operator>)</operator></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>TextCopy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>src</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bytes</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>bytes</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>TextIsEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>text1</name></expr></argument>, <argument><expr><name>text2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>TextLength</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>text</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>length</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>length</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TextFormat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TEXTFORMAT_BUFFERS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buffers</name><index>[<expr><name>MAX_TEXTFORMAT_BUFFERS</name></expr>]</index><index>[<expr><name>MAX_TEXT_BUFFER_LENGTH</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>currentBuffer</name> <init>= <expr><name><name>buffers</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>currentBuffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_TEXT_BUFFER_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vsprintf</name><argument_list>(<argument><expr><name>currentBuffer</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name>MAX_TEXTFORMAT_BUFFERS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>currentBuffer</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TextSubtext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buffer</name><index>[<expr><name>MAX_TEXT_BUFFER_LENGTH</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>textLength</name> <init>= <expr><call><name>TextLength</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>position</name> <operator>&gt;=</operator> <name>textLength</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>position</name> <operator>=</operator> <name>textLength</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;=</operator> <name>textLength</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>length</name> <operator>=</operator> <name>textLength</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>length</name></expr> ;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>buffer</name> <operator>+</operator> <name>c</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name>text</name> <operator>+</operator> <name>position</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>buffer</name> <operator>+</operator> <name>length</name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>buffer</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>TextReplace</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>replace</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>by</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>text</name> <operator>||</operator> <operator>!</operator><name>replace</name> <operator>||</operator> <operator>!</operator><name>by</name> <operator>||</operator> <name><name>by</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>insertPoint</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>replaceLen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>byLen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>lastReplacePos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt> 

<expr_stmt><expr><name>replaceLen</name> <operator>=</operator> <call><name>TextLength</name><argument_list>(<argument><expr><name>replace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>replaceLen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>byLen</name> <operator>=</operator> <call><name>TextLength</name><argument_list>(<argument><expr><name>by</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>insertPoint</name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>temp</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>insertPoint</name></expr></argument>, <argument><expr><name>replace</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>insertPoint</name> <operator>=</operator> <name>temp</name> <operator>+</operator> <name>replaceLen</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>result</name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><call><name>TextLength</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>byLen</name> <operator>-</operator> <name>replaceLen</name><operator>)</operator><operator>*</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>insertPoint</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>replace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lastReplacePos</name> <operator>=</operator> <name>insertPoint</name> <operator>-</operator> <name>text</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>strncpy</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>lastReplacePos</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>lastReplacePos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>by</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>byLen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name> <operator>+=</operator> <name>lastReplacePos</name> <operator>+</operator> <name>replaceLen</name></expr>;</expr_stmt> 

</block_content>}</block></while>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>TextInsert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>insert</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>textLen</name> <init>= <expr><call><name>TextLength</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>insertLen</name> <init>= <expr><call><name>TextLength</name><argument_list>(<argument><expr><name>insert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>textLen</name> <operator>+</operator> <name>insertLen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>position</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>position</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>insertLen</name> <operator>+</operator> <name>position</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>insert</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>insertLen</name> <operator>+</operator> <name>position</name><operator>)</operator></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>textLen</name> <operator>+</operator> <name>insertLen</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>textLen</name> <operator>+</operator> <name>insertLen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TextJoin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>textList</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delimiter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>text</name><index>[<expr><name>MAX_TEXT_BUFFER_LENGTH</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_TEXT_BUFFER_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>totalLength</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delimiterLen</name> <init>= <expr><call><name>TextLength</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>textListLength</name> <init>= <expr><call><name>TextLength</name><argument_list>(<argument><expr><name><name>textList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>totalLength</name> <operator>+</operator> <name>textListLength</name><operator>)</operator> <operator>&lt;</operator> <name>MAX_TEXT_BUFFER_LENGTH</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>textList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>totalLength</name> <operator>+=</operator> <name>textListLength</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>delimiterLen</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>count</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>delimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>totalLength</name> <operator>+=</operator> <name>delimiterLen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>text</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>TextSplit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>delimiter</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>result</name><index>[<expr><name>TEXTSPLIT_MAX_SUBSTRINGS_COUNT</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buffer</name><index>[<expr><name>TEXTSPLIT_MAX_TEXT_BUFFER_LENGTH</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TEXTSPLIT_MAX_TEXT_BUFFER_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TEXTSPLIT_MAX_TEXT_BUFFER_LENGTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>delimiter</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>result</name><index>[<expr><name>counter</name></expr>]</index></name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>==</operator> <name>TEXTSPLIT_MAX_SUBSTRINGS_COUNT</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name>counter</name></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>TextAppend</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>append</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>position</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>text</name> <operator>+</operator> <operator>*</operator><name>position</name></expr></argument>, <argument><expr><name>append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>position</name> <operator>+=</operator> <call><name>TextLength</name><argument_list>(<argument><expr><name>append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>TextFindIndex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>find</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>position</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>find</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>position</name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>text</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>position</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TextToUpper</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buffer</name><index>[<expr><name>MAX_TEXT_BUFFER_LENGTH</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_TEXT_BUFFER_LENGTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>toupper</name><argument_list>(<argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content> <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <break>break;</break> </block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>buffer</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TextToLower</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buffer</name><index>[<expr><name>MAX_TEXT_BUFFER_LENGTH</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_TEXT_BUFFER_LENGTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>tolower</name><argument_list>(<argument><expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content> <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <break>break;</break> </block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>buffer</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TextToPascal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buffer</name><index>[<expr><name>MAX_TEXT_BUFFER_LENGTH</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>toupper</name><argument_list>(<argument><expr><name><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_TEXT_BUFFER_LENGTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>text</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>text</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>text</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>toupper</name><argument_list>(<argument><expr><name><name>text</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content> <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <break>break;</break> </block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>buffer</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>TextToInteger</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>text</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><operator>(</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>value</name> <operator>=</operator> <name>value</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>value</name><operator>*</operator><name>sign</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>TextToUtf8</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>codepoints</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>RL_CALLOC</name><argument_list>(<argument><expr><name>length</name><operator>*</operator><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>utf8</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>utf8</name> <operator>=</operator> <call><name>CodepointToUtf8</name><argument_list>(<argument><expr><name><name>codepoints</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>text</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>utf8</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>RL_REALLOC</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>text</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>text</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name> <modifier>*</modifier></type><name>GetCodepoints</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>codepoints</name><index>[<expr><name>MAX_TEXT_UNICODE_CHARS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>codepoints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_TEXT_UNICODE_CHARS</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytesProcessed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>textLength</name> <init>= <expr><call><name>TextLength</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>codepointsCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>textLength</name></expr>;</condition> <incr><expr><name>codepointsCount</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>codepoints</name><index>[<expr><name>codepointsCount</name></expr>]</index></name> <operator>=</operator> <call><name>GetNextCodepoint</name><argument_list>(<argument><expr><name>text</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytesProcessed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>bytesProcessed</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name>codepointsCount</name></expr>;</expr_stmt>

<return>return <expr><name>codepoints</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>GetCodepointsCount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>letter</name> <init>= <expr><call><name>GetNextCodepoint</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>letter</name> <operator>==</operator> <literal type="number">0x3f</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>GetNextCodepoint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bytesProcessed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><literal type="number">0x3f</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>octet</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><operator>*</operator><name>bytesProcessed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>octet</name> <operator>&lt;=</operator> <literal type="number">0x7f</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xe0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xc0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>octet1</name> <init>= <expr><name><name>text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>octet1</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>octet1</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>bytesProcessed</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <return>return <expr><name>code</name></expr>;</return> </block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>octet</name> <operator>&gt;=</operator> <literal type="number">0xc2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>octet</name> <operator>&lt;=</operator> <literal type="number">0xdf</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>octet1</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bytesProcessed</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xe0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>octet1</name> <init>= <expr><name><name>text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>octet2</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>octet1</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>octet1</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>bytesProcessed</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <return>return <expr><name>code</name></expr>;</return> </block_content>}</block></if></if_stmt> 

<expr_stmt><expr><name>octet2</name> <operator>=</operator> <name><name>text</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>octet2</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>octet2</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>bytesProcessed</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <return>return <expr><name>code</name></expr>;</return> </block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>octet</name> <operator>==</operator> <literal type="number">0xe0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>octet1</name> <operator>&gt;=</operator> <literal type="number">0xa0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>octet1</name> <operator>&lt;=</operator> <literal type="number">0xbf</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>octet</name> <operator>==</operator> <literal type="number">0xed</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>octet1</name> <operator>&gt;=</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>octet1</name> <operator>&lt;=</operator> <literal type="number">0x9f</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>bytesProcessed</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <return>return <expr><name>code</name></expr>;</return> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>octet</name> <operator>&gt;=</operator> <literal type="number">0xe0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <literal type="number">0xef</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>octet1</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>octet2</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bytesProcessed</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xf8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xf0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>octet</name> <operator>&gt;</operator> <literal type="number">0xf4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>octet1</name> <init>= <expr><name><name>text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>octet2</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>octet3</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>octet1</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>octet1</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>bytesProcessed</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <return>return <expr><name>code</name></expr>;</return> </block_content>}</block></if></if_stmt> 

<expr_stmt><expr><name>octet2</name> <operator>=</operator> <name><name>text</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>octet2</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>octet2</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>bytesProcessed</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <return>return <expr><name>code</name></expr>;</return> </block_content>}</block></if></if_stmt> 

<expr_stmt><expr><name>octet3</name> <operator>=</operator> <name><name>text</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>octet3</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>octet3</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>bytesProcessed</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <return>return <expr><name>code</name></expr>;</return> </block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>octet</name> <operator>==</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>octet1</name> <operator>&gt;=</operator> <literal type="number">0x90</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>octet1</name> <operator>&lt;=</operator> <literal type="number">0xbf</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>octet</name> <operator>==</operator> <literal type="number">0xf4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>octet1</name> <operator>&gt;=</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>octet1</name> <operator>&lt;=</operator> <literal type="number">0x8f</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>bytesProcessed</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <return>return <expr><name>code</name></expr>;</return> </block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>octet</name> <operator>&gt;=</operator> <literal type="number">0xf0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>octet1</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>octet2</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>octet3</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>bytesProcessed</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;</operator> <literal type="number">0x10ffff</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return <expr><name>code</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>RLAPI</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CodepointToUtf8</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>codepoint</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>byteLength</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>utf8</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>codepoint</name> <operator>&lt;=</operator> <literal type="number">0x7f</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>utf8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>codepoint</name></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>codepoint</name> <operator>&lt;=</operator> <literal type="number">0x7ff</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>utf8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>codepoint</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xc0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>utf8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>codepoint</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>codepoint</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>utf8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>codepoint</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xe0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>utf8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>codepoint</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>utf8</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>codepoint</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>codepoint</name> <operator>&lt;=</operator> <literal type="number">0x10ffff</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>utf8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>codepoint</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xf0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>utf8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>codepoint</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>utf8</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>codepoint</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>utf8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>codepoint</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>byteLength</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

<return>return <expr><name>utf8</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_FILEFORMAT_FNT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>Font</name></type> <name>LoadBMFont</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BUFFER_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<decl_stmt><decl><type><name>Font</name></type> <name>font</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>MAX_BUFFER_SIZE</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>searchPoint</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fontSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>texWidth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>texHeight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>texFileName</name><index>[<expr><literal type="number">129</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>charsCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>base</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fntFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fntFile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">"rt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fntFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FILEIO: [%s] Failed to open FNT file"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>font</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fgets</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>MAX_BUFFER_SIZE</name></expr></argument>, <argument><expr><name>fntFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fgets</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>MAX_BUFFER_SIZE</name></expr></argument>, <argument><expr><name>fntFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>searchPoint</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"lineHeight"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>searchPoint</name></expr></argument>, <argument><expr><literal type="string">"lineHeight=%i base=%i scaleW=%i scaleH=%i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fontSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texWidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">"FONT: [%s] Loaded font info:"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; Base size: %i"</literal></expr></argument>, <argument><expr><name>fontSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; Texture scale: %ix%i"</literal></expr></argument>, <argument><expr><name>texWidth</name></expr></argument>, <argument><expr><name>texHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fgets</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>MAX_BUFFER_SIZE</name></expr></argument>, <argument><expr><name>fntFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>searchPoint</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>searchPoint</name></expr></argument>, <argument><expr><literal type="string">"file=\"%128[^\"]\""</literal></expr></argument>, <argument><expr><name>texFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; Texture filename: %s"</literal></expr></argument>, <argument><expr><name>texFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fgets</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>MAX_BUFFER_SIZE</name></expr></argument>, <argument><expr><name>fntFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>searchPoint</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>searchPoint</name></expr></argument>, <argument><expr><literal type="string">"count=%i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>charsCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; Chars count: %i"</literal></expr></argument>, <argument><expr><name>charsCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>texPath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lastSlash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>lastSlash</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lastSlash</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>lastSlash</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>texPath</name> <operator>=</operator> <call><name>RL_MALLOC</name><argument_list>(<argument><expr><call><name>TextLength</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>TextLength</name><argument_list>(<argument><expr><name>lastSlash</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>TextLength</name><argument_list>(<argument><expr><name>texFileName</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>texPath</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>texPath</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><call><name>TextLength</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>TextLength</name><argument_list>(<argument><expr><name>lastSlash</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>texPath</name></expr></argument>, <argument><expr><name>texFileName</name></expr></argument>, <argument><expr><call><name>TextLength</name><argument_list>(<argument><expr><name>texFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOGD</name><argument_list>(<argument><expr><literal type="string">" &gt; Texture loading path: %s"</literal></expr></argument>, <argument><expr><name>texPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Image</name></type> <name>imFont</name> <init>= <expr><call><name>LoadImage</name><argument_list>(<argument><expr><name>texPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>imFont</name><operator>.</operator><name>format</name></name> <operator>==</operator> <name>UNCOMPRESSED_GRAYSCALE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ImageAlphaMask</name><argument_list>(<argument><expr><operator>&amp;</operator><name>imFont</name></expr></argument>, <argument><expr><name>imFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <operator>(</operator><name><name>imFont</name><operator>.</operator><name>width</name></name><operator>*</operator><name><name>imFont</name><operator>.</operator><name>height</name></name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>imFont</name><operator>.</operator><name>data</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>p</name></expr>]</index> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>texture</name></name> <operator>=</operator> <call><name>LoadTextureFromImage</name><argument_list>(<argument><expr><name>imFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RL_FREE</name><argument_list>(<argument><expr><name>texPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>baseSize</name></name> <operator>=</operator> <name>fontSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>charsCount</name></name> <operator>=</operator> <name>charsCount</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>chars</name></name> <operator>=</operator> <operator>(</operator><name>CharInfo</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>charsCount</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>CharInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>recs</name></name> <operator>=</operator> <operator>(</operator><name>Rectangle</name> <operator>*</operator><operator>)</operator><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>charsCount</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Rectangle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>charId</name></decl>, <decl><type ref="prev"/><name>charX</name></decl>, <decl><type ref="prev"/><name>charY</name></decl>, <decl><type ref="prev"/><name>charWidth</name></decl>, <decl><type ref="prev"/><name>charHeight</name></decl>, <decl><type ref="prev"/><name>charOffsetX</name></decl>, <decl><type ref="prev"/><name>charOffsetY</name></decl>, <decl><type ref="prev"/><name>charAdvanceX</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>charsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>fgets</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>MAX_BUFFER_SIZE</name></expr></argument>, <argument><expr><name>fntFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"char id=%i x=%i y=%i width=%i height=%i xoffset=%i yoffset=%i xadvance=%i"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>charId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>charX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>charY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>charWidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>charHeight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>charOffsetX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>charOffsetY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>charAdvanceX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>recs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Rectangle</name><operator>)</operator><block>{ <expr><operator>(</operator><name>float</name><operator>)</operator><name>charX</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>charY</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>charWidth</name></expr>, <expr><operator>(</operator><name>float</name><operator>)</operator><name>charHeight</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>charId</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offsetX</name> <operator>=</operator> <name>charOffsetX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offsetY</name> <operator>=</operator> <name>charOffsetY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>advanceX</name> <operator>=</operator> <name>charAdvanceX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>font</name><operator>.</operator><name>chars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>image</name> <operator>=</operator> <call><name>ImageFromImage</name><argument_list>(<argument><expr><name>imFont</name></expr></argument>, <argument><expr><name><name>font</name><operator>.</operator><name>recs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>UnloadImage</name><argument_list>(<argument><expr><name>imFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fntFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>font</name><operator>.</operator><name>texture</name><operator>.</operator><name>id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>UnloadFont</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>font</name> <operator>=</operator> <call><name>GetFontDefault</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"FONT: [%s] Failed to load texture, reverted to default font"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>TRACELOG</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"FONT: [%s] Font loaded successfully"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>font</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
