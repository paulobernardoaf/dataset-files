<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\raylib-analysis\_cppstats\raylib\src\external\dr_wav.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1600</literal></expr></cpp:if>

<typedef>typedef <type><name>signed</name> <name>char</name></type> <name>drwav_int8</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>drwav_uint8</name>;</typedef>

<typedef>typedef <type><name>signed</name> <name>short</name></type> <name>drwav_int16</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>drwav_uint16</name>;</typedef>

<typedef>typedef <type><name>signed</name> <name>int</name></type> <name>drwav_int32</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>drwav_uint32</name>;</typedef>

<typedef>typedef <type><name>signed</name> <name>__int64</name></type> <name>drwav_int64</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>drwav_uint64</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>int8_t</name></type> <name>drwav_int8</name>;</typedef>

<typedef>typedef <type><name>uint8_t</name></type> <name>drwav_uint8</name>;</typedef>

<typedef>typedef <type><name>int16_t</name></type> <name>drwav_int16</name>;</typedef>

<typedef>typedef <type><name>uint16_t</name></type> <name>drwav_uint16</name>;</typedef>

<typedef>typedef <type><name>int32_t</name></type> <name>drwav_int32</name>;</typedef>

<typedef>typedef <type><name>uint32_t</name></type> <name>drwav_uint32</name>;</typedef>

<typedef>typedef <type><name>int64_t</name></type> <name>drwav_int64</name>;</typedef>

<typedef>typedef <type><name>uint64_t</name></type> <name>drwav_uint64</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>drwav_uint8</name></type> <name>drwav_bool8</name>;</typedef>

<typedef>typedef <type><name>drwav_uint32</name></type> <name>drwav_bool32</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRWAV_TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRWAV_FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_WAVE_FORMAT_PCM</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_WAVE_FORMAT_ADPCM</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_WAVE_FORMAT_IEEE_FLOAT</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_WAVE_FORMAT_ALAW</name></cpp:macro> <cpp:value>0x6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_WAVE_FORMAT_MULAW</name></cpp:macro> <cpp:value>0x7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_WAVE_FORMAT_DVI_ADPCM</name></cpp:macro> <cpp:value>0x11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR_WAVE_FORMAT_EXTENSIBLE</name></cpp:macro> <cpp:value>0xFFFE</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRWAV_MAX_SMPL_LOOPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRWAV_MAX_SMPL_LOOPS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRWAV_SEQUENTIAL</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>drwav_seek_origin_start</name></decl>,

<decl><name>drwav_seek_origin_current</name></decl>

}</block></enum></type> <name>drwav_seek_origin</name>;</typedef>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>drwav_container_riff</name></decl>,

<decl><name>drwav_container_w64</name></decl>

}</block></enum></type> <name>drwav_container</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<union>union

<block>{

<decl_stmt><decl><type><name>drwav_uint8</name></type> <name><name>fourcc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint8</name></type> <name><name>guid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name>id</name></decl>;</union>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>sizeInBytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>paddingSize</name></decl>;</decl_stmt>

}</block></struct></type> <name>drwav_chunk_header</name>;</typedef>

<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier> <name>drwav_read_proc</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytesToRead</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier> <name>drwav_write_proc</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytesToWrite</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>drwav_bool32</name></type> (<modifier>*</modifier> <name>drwav_seek_proc</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_origin</name></type> <name>origin</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>drwav_uint64</name></type> (<modifier>*</modifier> <name>drwav_chunk_proc</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pChunkUserData</name></decl></parameter>, <parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pReadSeekUserData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_chunk_header</name><modifier>*</modifier></type> <name>pChunkHeader</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>dataSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>currentReadPos</name></decl>;</decl_stmt>

}</block></struct></type> <name>drwav__memory_stream</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name><modifier>*</modifier></type> <name>pDataSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>dataSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>dataCapacity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>currentWritePos</name></decl>;</decl_stmt>

}</block></struct></type> <name>drwav__memory_stream_write</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drwav_container</name></type> <name>container</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>format</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>bitsPerSample</name></decl>;</decl_stmt>

}</block></struct></type> <name>drwav_data_format</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drwav_uint16</name></type> <name>formatTag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint16</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>avgBytesPerSec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint16</name></type> <name>blockAlign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint16</name></type> <name>bitsPerSample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint16</name></type> <name>extendedSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint16</name></type> <name>validBitsPerSample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>channelMask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint8</name></type> <name><name>subFormat</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>drwav_fmt</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>cuePointId</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>fraction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>playCount</name></decl>;</decl_stmt>

}</block></struct></type> <name>drwav_smpl_loop</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>manufacturer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>product</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>samplePeriod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>midiUnityNotes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>midiPitchFraction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>smpteFormat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>smpteOffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>numSampleLoops</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>samplerData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_smpl_loop</name></type> <name><name>loops</name><index>[<expr><name>DRWAV_MAX_SMPL_LOOPS</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>drwav_smpl</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_write_proc</name></type> <name>onWrite</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_container</name></type> <name>container</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_fmt</name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint16</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint16</name></type> <name>bitsPerSample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint16</name></type> <name>translatedFormatTag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalPCMFrameCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>dataChunkDataSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>dataChunkDataPos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>bytesRemaining</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>dataChunkDataSizeTargetWrite</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_bool32</name></type> <name>isSequentialWrite</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_smpl</name></type> <name>smpl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav__memory_stream</name></type> <name>memoryStream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav__memory_stream_write</name></type> <name>memoryStreamWrite</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>iCurrentSample</name></decl>;</decl_stmt> 

}</block> <decl><name>compressed</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>bytesRemainingInBlock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint16</name></type> <name><name>predictor</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int32</name></type> <name><name>delta</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int32</name></type> <name><name>cachedSamples</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>cachedSampleCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int32</name></type> <name><name>prevSamples</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block> <decl><name>msadpcm</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>bytesRemainingInBlock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int32</name></type> <name><name>predictor</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int32</name></type> <name><name>stepIndex</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int32</name></type> <name><name>cachedSamples</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>cachedSampleCount</name></decl>;</decl_stmt>

}</block> <decl><name>ima</name></decl>;</struct>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl>;</decl_stmt> 

}</block></struct></type> <name>drwav</name>;</typedef>

<function_decl><type><name>drwav_bool32</name></type> <name>drwav_init</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_bool32</name></type> <name>drwav_init_ex</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>drwav_chunk_proc</name></type> <name>onChunk</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pReadSeekUserData</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pChunkUserData</name></decl></parameter>, <parameter><decl><type><name>drwav_uint32</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_bool32</name></type> <name>drwav_init_write</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_write_proc</name></type> <name>onWrite</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_bool32</name></type> <name>drwav_init_write_sequential</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl></parameter>, <parameter><decl><type><name>drwav_write_proc</name></type> <name>onWrite</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drwav_uninit</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open</name><parameter_list>(<parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_ex</name><parameter_list>(<parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>drwav_chunk_proc</name></type> <name>onChunk</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pReadSeekUserData</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pChunkUserData</name></decl></parameter>, <parameter><decl><type><name>drwav_uint32</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_write_proc</name></type> <name>onWrite</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_write_sequential</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl></parameter>, <parameter><decl><type><name>drwav_write_proc</name></type> <name>onWrite</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drwav_close</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>drwav_read_raw</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytesToRead</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_uint64</name></type> <name>drwav_read_pcm_frames</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>framesToRead</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_bool32</name></type> <name>drwav_seek_to_pcm_frame</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>targetFrameIndex</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>drwav_write_raw</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytesToWrite</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_uint64</name></type> <name>drwav_write_pcm_frames</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>framesToWrite</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_WAV_NO_CONVERSION_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>drwav_uint64</name></type> <name>drwav_read_pcm_frames_s16</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>framesToRead</name></decl></parameter>, <parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drwav_u8_to_s16</name><parameter_list>(<parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drwav_s24_to_s16</name><parameter_list>(<parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drwav_s32_to_s16</name><parameter_list>(<parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_int32</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drwav_f32_to_s16</name><parameter_list>(<parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drwav_f64_to_s16</name><parameter_list>(<parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drwav_alaw_to_s16</name><parameter_list>(<parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drwav_mulaw_to_s16</name><parameter_list>(<parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_uint64</name></type> <name>drwav_read_pcm_frames_f32</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>framesToRead</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drwav_u8_to_f32</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drwav_s16_to_f32</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_int16</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drwav_s24_to_f32</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drwav_s32_to_f32</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_int32</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drwav_f64_to_f32</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drwav_alaw_to_f32</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drwav_mulaw_to_f32</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_uint64</name></type> <name>drwav_read_pcm_frames_s32</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>framesToRead</name></decl></parameter>, <parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drwav_u8_to_s32</name><parameter_list>(<parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drwav_s16_to_s32</name><parameter_list>(<parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_int16</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drwav_s24_to_s32</name><parameter_list>(<parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drwav_f32_to_s32</name><parameter_list>(<parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drwav_f64_to_s32</name><parameter_list>(<parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drwav_alaw_to_s32</name><parameter_list>(<parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>drwav_mulaw_to_s32</name><parameter_list>(<parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_WAV_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>drwav_bool32</name></type> <name>drwav_init_file</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_bool32</name></type> <name>drwav_init_file_ex</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>drwav_chunk_proc</name></type> <name>onChunk</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pChunkUserData</name></decl></parameter>, <parameter><decl><type><name>drwav_uint32</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_bool32</name></type> <name>drwav_init_file_write</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_bool32</name></type> <name>drwav_init_file_write_sequential</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_file_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>drwav_chunk_proc</name></type> <name>onChunk</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pChunkUserData</name></decl></parameter>, <parameter><decl><type><name>drwav_uint32</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_file_write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_file_write_sequential</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function_decl><type><name>drwav_bool32</name></type> <name>drwav_init_memory</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_bool32</name></type> <name>drwav_init_memory_ex</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>drwav_chunk_proc</name></type> <name>onChunk</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pChunkUserData</name></decl></parameter>, <parameter><decl><type><name>drwav_uint32</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_bool32</name></type> <name>drwav_init_memory_write</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppData</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>pDataSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_bool32</name></type> <name>drwav_init_memory_write_sequential</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppData</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>pDataSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_memory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_memory_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>drwav_chunk_proc</name></type> <name>onChunk</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pChunkUserData</name></decl></parameter>, <parameter><decl><type><name>drwav_uint32</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_memory_write</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppData</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>pDataSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_memory_write_sequential</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppData</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>pDataSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_WAV_NO_CONVERSION_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>drwav_open_and_read_pcm_frames_s16</name><parameter_list>(<parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>float</name><modifier>*</modifier></type> <name>drwav_open_and_read_pcm_frames_f32</name><parameter_list>(<parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>drwav_open_and_read_pcm_frames_s32</name><parameter_list>(<parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_WAV_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>drwav_open_file_and_read_pcm_frames_s16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>float</name><modifier>*</modifier></type> <name>drwav_open_file_and_read_pcm_frames_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>drwav_open_file_and_read_pcm_frames_s32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>drwav_open_memory_and_read_pcm_frames_s16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>float</name><modifier>*</modifier></type> <name>drwav_open_memory_and_read_pcm_frames_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>drwav_open_memory_and_read_pcm_frames_s32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalFrameCount</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>drwav_free</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pDataReturnedByOpenAndRead</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_uint64</name></type> <name>drwav_read</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_uint64</name></type> <name>drwav_read_s16</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_uint64</name></type> <name>drwav_read_f32</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_uint64</name></type> <name>drwav_read_s32</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_bool32</name></type> <name>drwav_seek_to_sample</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>sample</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_uint64</name></type> <name>drwav_write</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToWrite</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_WAV_NO_CONVERSION_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>drwav_open_and_read_s16</name><parameter_list>(<parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>float</name><modifier>*</modifier></type> <name>drwav_open_and_read_f32</name><parameter_list>(<parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>drwav_open_and_read_s32</name><parameter_list>(<parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_WAV_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>drwav_open_memory_and_read_s16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>float</name><modifier>*</modifier></type> <name>drwav_open_file_and_read_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>drwav_open_file_and_read_s32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>drwav_open_memory_and_read_s16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>float</name><modifier>*</modifier></type> <name>drwav_open_memory_and_read_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>drwav_open_memory_and_read_s32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DR_WAV_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_WAV_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRWAV_ASSERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRWAV_ASSERT</name><parameter_list>(<parameter><type><name>expression</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>assert(expression)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRWAV_MALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRWAV_MALLOC</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>malloc((sz))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRWAV_REALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRWAV_REALLOC</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>realloc((p), (sz))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRWAV_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRWAV_FREE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free((p))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRWAV_COPY_MEMORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRWAV_COPY_MEMORY</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcpy((dst), (src), (sz))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DRWAV_ZERO_MEMORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRWAV_ZERO_MEMORY</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((p), 0, (sz))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drwav_countof</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(x) / sizeof(x[0]))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drwav_align</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((x) + (a) - 1) / (a)) * (a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drwav_min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) &lt; (b)) ? (a) : (b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drwav_max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) &gt; (b)) ? (a) : (b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drwav_clamp</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>lo</name></type></parameter>, <parameter><type><name>hi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(drwav_max((lo), drwav_min((hi), (x))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drwav_assert</name></cpp:macro> <cpp:value>DRWAV_ASSERT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drwav_copy_memory</name></cpp:macro> <cpp:value>DRWAV_COPY_MEMORY</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drwav_zero_memory</name></cpp:macro> <cpp:value>DRWAV_ZERO_MEMORY</cpp:value></cpp:define>

<typedef>typedef <type><name>drwav_int32</name></type> <name>drwav_result</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRWAV_SUCCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRWAV_ERROR</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRWAV_INVALID_ARGS</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRWAV_INVALID_OPERATION</name></cpp:macro> <cpp:value>-3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRWAV_INVALID_FILE</name></cpp:macro> <cpp:value>-100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRWAV_EOF</name></cpp:macro> <cpp:value>-101</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRWAV_MAX_SIMD_VECTOR_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRWAV_INLINE</name></cpp:macro> <cpp:value>__forceinline</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRWAV_INLINE</name></cpp:macro> <cpp:value>__inline__ __attribute__((always_inline))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRWAV_INLINE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIZE_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRWAV_SIZE_MAX</name></cpp:macro> <cpp:value>SIZE_MAX</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_LP64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRWAV_SIZE_MAX</name></cpp:macro> <cpp:value>((drwav_uint64)0xFFFFFFFFFFFFFFFF)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRWAV_SIZE_MAX</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drwav_uint8</name></type> <name><name>drwavGUID_W64_RIFF</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x72</literal></expr>,<expr><literal type="number">0x69</literal></expr>,<expr><literal type="number">0x66</literal></expr>,<expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x2E</literal></expr>,<expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xCF</literal></expr>,<expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xA5</literal></expr>,<expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0x28</literal></expr>,<expr><literal type="number">0xDB</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0xC1</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drwav_uint8</name></type> <name><name>drwavGUID_W64_WAVE</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x77</literal></expr>,<expr><literal type="number">0x61</literal></expr>,<expr><literal type="number">0x76</literal></expr>,<expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xF3</literal></expr>,<expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xD3</literal></expr>,<expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x8C</literal></expr>,<expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0xC0</literal></expr>,<expr><literal type="number">0x4F</literal></expr>,<expr><literal type="number">0x8E</literal></expr>,<expr><literal type="number">0xDB</literal></expr>,<expr><literal type="number">0x8A</literal></expr>}</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drwav_uint8</name></type> <name><name>drwavGUID_W64_JUNK</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x6A</literal></expr>,<expr><literal type="number">0x75</literal></expr>,<expr><literal type="number">0x6E</literal></expr>,<expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0xF3</literal></expr>,<expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xD3</literal></expr>,<expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x8C</literal></expr>,<expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0xC0</literal></expr>,<expr><literal type="number">0x4F</literal></expr>,<expr><literal type="number">0x8E</literal></expr>,<expr><literal type="number">0xDB</literal></expr>,<expr><literal type="number">0x8A</literal></expr>}</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drwav_uint8</name></type> <name><name>drwavGUID_W64_FMT</name> <index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x66</literal></expr>,<expr><literal type="number">0x6D</literal></expr>,<expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xF3</literal></expr>,<expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xD3</literal></expr>,<expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x8C</literal></expr>,<expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0xC0</literal></expr>,<expr><literal type="number">0x4F</literal></expr>,<expr><literal type="number">0x8E</literal></expr>,<expr><literal type="number">0xDB</literal></expr>,<expr><literal type="number">0x8A</literal></expr>}</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drwav_uint8</name></type> <name><name>drwavGUID_W64_FACT</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x66</literal></expr>,<expr><literal type="number">0x61</literal></expr>,<expr><literal type="number">0x63</literal></expr>,<expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xF3</literal></expr>,<expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xD3</literal></expr>,<expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x8C</literal></expr>,<expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0xC0</literal></expr>,<expr><literal type="number">0x4F</literal></expr>,<expr><literal type="number">0x8E</literal></expr>,<expr><literal type="number">0xDB</literal></expr>,<expr><literal type="number">0x8A</literal></expr>}</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drwav_uint8</name></type> <name><name>drwavGUID_W64_DATA</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x64</literal></expr>,<expr><literal type="number">0x61</literal></expr>,<expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xF3</literal></expr>,<expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xD3</literal></expr>,<expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x8C</literal></expr>,<expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0xC0</literal></expr>,<expr><literal type="number">0x4F</literal></expr>,<expr><literal type="number">0x8E</literal></expr>,<expr><literal type="number">0xDB</literal></expr>,<expr><literal type="number">0x8A</literal></expr>}</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>drwav_uint8</name></type> <name><name>drwavGUID_W64_SMPL</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x73</literal></expr>,<expr><literal type="number">0x6D</literal></expr>,<expr><literal type="number">0x70</literal></expr>,<expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0xF3</literal></expr>,<expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xD3</literal></expr>,<expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x8C</literal></expr>,<expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0xC0</literal></expr>,<expr><literal type="number">0x4F</literal></expr>,<expr><literal type="number">0x8E</literal></expr>,<expr><literal type="number">0xDB</literal></expr>,<expr><literal type="number">0x8A</literal></expr>}</block></expr></init></decl>;</decl_stmt> 

<function><type><specifier>static</specifier> <name>DRWAV_INLINE</name> <name>drwav_bool32</name></type> <name>drwav__guid_equal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name></type> <name><name>a</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name></type> <name><name>b</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>drwav_uint32</name><modifier>*</modifier></type> <name>a32</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>drwav_uint32</name><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drwav_uint32</name><modifier>*</modifier></type> <name>b32</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>drwav_uint32</name><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

<return>return

<expr><name><name>a32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>b32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>a32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>b32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>a32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name><name>b32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>a32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name><name>b32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRWAV_INLINE</name> <name>drwav_bool32</name></type> <name>drwav__fourcc_equal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return

<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRWAV_INLINE</name> <name>int</name></type> <name>drwav__is_little_endian</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>n</name><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRWAV_INLINE</name> <name>unsigned</name> <name>short</name></type> <name>drwav__bytes_to_u16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRWAV_INLINE</name> <name>short</name></type> <name>drwav__bytes_to_s16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>short</name><operator>)</operator><call><name>drwav__bytes_to_u16</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRWAV_INLINE</name> <name>unsigned</name> <name>int</name></type> <name>drwav__bytes_to_u32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRWAV_INLINE</name> <name>drwav_uint64</name></type> <name>drwav__bytes_to_u64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return

<expr><operator>(</operator><operator>(</operator><name>drwav_uint64</name><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>drwav_uint64</name><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>drwav_uint64</name><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>drwav_uint64</name><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name>drwav_uint64</name><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>drwav_uint64</name><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>drwav_uint64</name><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>drwav_uint64</name><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRWAV_INLINE</name> <name>void</name></type> <name>drwav__bytes_to_guid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>drwav_uint8</name><modifier>*</modifier></type> <name>guid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>guid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRWAV_INLINE</name> <name>drwav_bool32</name></type> <name>drwav__is_compressed_format_tag</name><parameter_list>(<parameter><decl><type><name>drwav_uint16</name></type> <name>formatTag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return

<expr><name>formatTag</name> <operator>==</operator> <name>DR_WAVE_FORMAT_ADPCM</name> <operator>||</operator>

<name>formatTag</name> <operator>==</operator> <name>DR_WAVE_FORMAT_DVI_ADPCM</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>drwav_uint64</name></type> <name>drwav_read_s16__msadpcm</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_uint64</name></type> <name>drwav_read_s16__ima</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav_bool32</name></type> <name>drwav_init_write__internal</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl></parameter>, <parameter><decl><type><name>drwav_bool32</name></type> <name>isSequential</name></decl></parameter>, <parameter><decl><type><name>drwav_write_proc</name></type> <name>onWrite</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_write__internal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl></parameter>, <parameter><decl><type><name>drwav_bool32</name></type> <name>isSequential</name></decl></parameter>, <parameter><decl><type><name>drwav_write_proc</name></type> <name>onWrite</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>drwav_result</name></type> <name>drwav__read_chunk_header</name><parameter_list>(<parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>drwav_container</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>pRunningBytesReadOut</name></decl></parameter>, <parameter><decl><type><name>drwav_chunk_header</name><modifier>*</modifier></type> <name>pHeaderOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>container</name> <operator>==</operator> <name>drwav_container_riff</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sizeInBytes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name><name>pHeaderOut</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>fourcc</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_EOF</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>sizeInBytes</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_INVALID_FILE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pHeaderOut</name><operator>-&gt;</operator><name>sizeInBytes</name></name> <operator>=</operator> <call><name>drwav__bytes_to_u32</name><argument_list>(<argument><expr><name>sizeInBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pHeaderOut</name><operator>-&gt;</operator><name>paddingSize</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name><name>pHeaderOut</name><operator>-&gt;</operator><name>sizeInBytes</name></name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pRunningBytesReadOut</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sizeInBytes</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name><name>pHeaderOut</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>guid</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_EOF</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>sizeInBytes</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_INVALID_FILE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pHeaderOut</name><operator>-&gt;</operator><name>sizeInBytes</name></name> <operator>=</operator> <call><name>drwav__bytes_to_u64</name><argument_list>(<argument><expr><name>sizeInBytes</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">24</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pHeaderOut</name><operator>-&gt;</operator><name>paddingSize</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name><name>pHeaderOut</name><operator>-&gt;</operator><name>sizeInBytes</name></name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pRunningBytesReadOut</name> <operator>+=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>DRWAV_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drwav_bool32</name></type> <name>drwav__seek_forward</name><parameter_list>(<parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>bytesRemainingToSeek</name> <init>= <expr><name>offset</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>bytesRemainingToSeek</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bytesRemainingToSeek</name> <operator>&gt;</operator> <literal type="number">0x7FFFFFFF</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>onSeek</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><literal type="number">0x7FFFFFFF</literal></expr></argument>, <argument><expr><name>drwav_seek_origin_current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytesRemainingToSeek</name> <operator>-=</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>onSeek</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>bytesRemainingToSeek</name></expr></argument>, <argument><expr><name>drwav_seek_origin_current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytesRemainingToSeek</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>DRWAV_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drwav_bool32</name></type> <name>drwav__seek_from_start</name><parameter_list>(<parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;=</operator> <literal type="number">0x7FFFFFFF</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>onSeek</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>offset</name></expr></argument>, <argument><expr><name>drwav_seek_origin_start</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>onSeek</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><literal type="number">0x7FFFFFFF</literal></expr></argument>, <argument><expr><name>drwav_seek_origin_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>-=</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;=</operator> <literal type="number">0x7FFFFFFF</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>onSeek</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>offset</name></expr></argument>, <argument><expr><name>drwav_seek_origin_current</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>onSeek</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><literal type="number">0x7FFFFFFF</literal></expr></argument>, <argument><expr><name>drwav_seek_origin_current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>-=</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drwav_bool32</name></type> <name>drwav__read_fmt</name><parameter_list>(<parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>drwav_container</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>pRunningBytesReadOut</name></decl></parameter>, <parameter><decl><type><name>drwav_fmt</name><modifier>*</modifier></type> <name>fmtOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_chunk_header</name></type> <name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>fmt</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drwav__read_chunk_header</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><name>pRunningBytesReadOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DRWAV_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>container</name> <operator>==</operator> <name>drwav_container_riff</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>drwav__fourcc_equal</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>id</name><operator>.</operator><name>fourcc</name></name></expr></argument>, <argument><expr><literal type="string">"fmt "</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><name>container</name> <operator>==</operator> <name>drwav_container_w64</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>drwav__guid_equal</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>id</name><operator>.</operator><name>guid</name></name></expr></argument>, <argument><expr><name>drwavGUID_W64_FMT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav__seek_forward</name><argument_list>(<argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>sizeInBytes</name></name> <operator>+</operator> <name><name>header</name><operator>.</operator><name>paddingSize</name></name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pRunningBytesReadOut</name> <operator>+=</operator> <name><name>header</name><operator>.</operator><name>sizeInBytes</name></name> <operator>+</operator> <name><name>header</name><operator>.</operator><name>paddingSize</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drwav__read_chunk_header</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><name>pRunningBytesReadOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DRWAV_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>container</name> <operator>==</operator> <name>drwav_container_riff</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav__fourcc_equal</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>id</name><operator>.</operator><name>fourcc</name></name></expr></argument>, <argument><expr><literal type="string">"fmt "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav__guid_equal</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>id</name><operator>.</operator><name>guid</name></name></expr></argument>, <argument><expr><name>drwavGUID_W64_FMT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pRunningBytesReadOut</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmtOut</name><operator>-&gt;</operator><name>formatTag</name></name> <operator>=</operator> <call><name>drwav__bytes_to_u16</name><argument_list>(<argument><expr><name>fmt</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmtOut</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <call><name>drwav__bytes_to_u16</name><argument_list>(<argument><expr><name>fmt</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmtOut</name><operator>-&gt;</operator><name>sampleRate</name></name> <operator>=</operator> <call><name>drwav__bytes_to_u32</name><argument_list>(<argument><expr><name>fmt</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmtOut</name><operator>-&gt;</operator><name>avgBytesPerSec</name></name> <operator>=</operator> <call><name>drwav__bytes_to_u32</name><argument_list>(<argument><expr><name>fmt</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmtOut</name><operator>-&gt;</operator><name>blockAlign</name></name> <operator>=</operator> <call><name>drwav__bytes_to_u16</name><argument_list>(<argument><expr><name>fmt</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmtOut</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>=</operator> <call><name>drwav__bytes_to_u16</name><argument_list>(<argument><expr><name>fmt</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmtOut</name><operator>-&gt;</operator><name>extendedSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmtOut</name><operator>-&gt;</operator><name>validBitsPerSample</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmtOut</name><operator>-&gt;</operator><name>channelMask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>fmtOut</name><operator>-&gt;</operator><name>subFormat</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>fmtOut</name><operator>-&gt;</operator><name>subFormat</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>sizeInBytes</name></name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>fmt_cbSize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytesReadSoFar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>fmt_cbSize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fmt_cbSize</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fmt_cbSize</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pRunningBytesReadOut</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fmt_cbSize</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>bytesReadSoFar</name> <operator>=</operator> <literal type="number">18</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmtOut</name><operator>-&gt;</operator><name>extendedSize</name></name> <operator>=</operator> <call><name>drwav__bytes_to_u16</name><argument_list>(<argument><expr><name>fmt_cbSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmtOut</name><operator>-&gt;</operator><name>extendedSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fmtOut</name><operator>-&gt;</operator><name>formatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_EXTENSIBLE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fmtOut</name><operator>-&gt;</operator><name>extendedSize</name></name> <operator>!=</operator> <literal type="number">22</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmtOut</name><operator>-&gt;</operator><name>formatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_EXTENSIBLE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>fmtext</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>fmtext</name></expr></argument>, <argument><expr><name><name>fmtOut</name><operator>-&gt;</operator><name>extendedSize</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>fmtOut</name><operator>-&gt;</operator><name>extendedSize</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fmtOut</name><operator>-&gt;</operator><name>validBitsPerSample</name></name> <operator>=</operator> <call><name>drwav__bytes_to_u16</name><argument_list>(<argument><expr><name>fmtext</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmtOut</name><operator>-&gt;</operator><name>channelMask</name></name> <operator>=</operator> <call><name>drwav__bytes_to_u32</name><argument_list>(<argument><expr><name>fmtext</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drwav__bytes_to_guid</name><argument_list>(<argument><expr><name>fmtext</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name><name>fmtOut</name><operator>-&gt;</operator><name>subFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>onSeek</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name><name>fmtOut</name><operator>-&gt;</operator><name>extendedSize</name></name></expr></argument>, <argument><expr><name>drwav_seek_origin_current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pRunningBytesReadOut</name> <operator>+=</operator> <name><name>fmtOut</name><operator>-&gt;</operator><name>extendedSize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bytesReadSoFar</name> <operator>+=</operator> <name><name>fmtOut</name><operator>-&gt;</operator><name>extendedSize</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>onSeek</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>header</name><operator>.</operator><name>sizeInBytes</name></name> <operator>-</operator> <name>bytesReadSoFar</name><operator>)</operator></expr></argument>, <argument><expr><name>drwav_seek_origin_current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pRunningBytesReadOut</name> <operator>+=</operator> <operator>(</operator><name><name>header</name><operator>.</operator><name>sizeInBytes</name></name> <operator>-</operator> <name>bytesReadSoFar</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>paddingSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>onSeek</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>paddingSize</name></name></expr></argument>, <argument><expr><name>drwav_seek_origin_current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pRunningBytesReadOut</name> <operator>+=</operator> <name><name>header</name><operator>.</operator><name>paddingSize</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>DRWAV_TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_WAV_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>FILE</name><modifier>*</modifier></type> <name>drwav_fopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filePath</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>openMode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>pFile</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>fopen_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>, <argument><expr><name>filePath</name></expr></argument>, <argument><expr><name>openMode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filePath</name></expr></argument>, <argument><expr><name>openMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>pFile</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>drwav__on_read_stdio</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytesToRead</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>fread</name><argument_list>(<argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bytesToRead</name></expr></argument>, <argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>drwav__on_write_stdio</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytesToWrite</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>fwrite</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bytesToWrite</name></expr></argument>, <argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drwav_bool32</name></type> <name>drwav__on_seek_stdio</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_origin</name></type> <name>origin</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>fseek</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator><name>pUserData</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>origin</name> <operator>==</operator> <name>drwav_seek_origin_current</name><operator>)</operator></expr> ?</condition><then> <expr><name>SEEK_CUR</name></expr> </then><else>: <expr><name>SEEK_SET</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_bool32</name></type> <name>drwav_init_file</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drwav_init_file_ex</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_bool32</name></type> <name>drwav_init_file_ex</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>drwav_chunk_proc</name></type> <name>onChunk</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pChunkUserData</name></decl></parameter>, <parameter><decl><type><name>drwav_uint32</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>pFile</name> <init>= <expr><call><name>drwav_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drwav_init_ex</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>drwav__on_read_stdio</name></expr></argument>, <argument><expr><name>drwav__on_seek_stdio</name></expr></argument>, <argument><expr><name>onChunk</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></argument>, <argument><expr><name>pChunkUserData</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_bool32</name></type> <name>drwav_init_file_write__internal</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl></parameter>, <parameter><decl><type><name>drwav_bool32</name></type> <name>isSequential</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>pFile</name> <init>= <expr><call><name>drwav_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drwav_init_write__internal</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>pFormat</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>, <argument><expr><name>isSequential</name></expr></argument>, <argument><expr><name>drwav__on_write_stdio</name></expr></argument>, <argument><expr><name>drwav__on_seek_stdio</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_bool32</name></type> <name>drwav_init_file_write</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drwav_init_file_write__internal</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>pFormat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DRWAV_FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_bool32</name></type> <name>drwav_init_file_write_sequential</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drwav_init_file_write__internal</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>pFormat</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>, <argument><expr><name>DRWAV_TRUE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drwav_open_file_ex</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_file_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>drwav_chunk_proc</name></type> <name>onChunk</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pChunkUserData</name></decl></parameter>, <parameter><decl><type><name>drwav_uint32</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>pFile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>drwav_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pWav</name> <operator>=</operator> <call><name>drwav_open_ex</name><argument_list>(<argument><expr><name>drwav__on_read_stdio</name></expr></argument>, <argument><expr><name>drwav__on_seek_stdio</name></expr></argument>, <argument><expr><name>onChunk</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></argument>, <argument><expr><name>pChunkUserData</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pWav</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pWav</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_file_write__internal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl></parameter>, <parameter><decl><type><name>drwav_bool32</name></type> <name>isSequential</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>pFile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>drwav_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pWav</name> <operator>=</operator> <call><name>drwav_open_write__internal</name><argument_list>(<argument><expr><name>pFormat</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>, <argument><expr><name>isSequential</name></expr></argument>, <argument><expr><name>drwav__on_write_stdio</name></expr></argument>, <argument><expr><name>drwav__on_seek_stdio</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pWav</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pWav</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_file_write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drwav_open_file_write__internal</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>pFormat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DRWAV_FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_file_write_sequential</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drwav_open_file_write__internal</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>pFormat</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>, <argument><expr><name>DRWAV_TRUE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>drwav__on_read_memory</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytesToRead</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav__memory_stream</name><modifier>*</modifier></type> <name>memory</name> <init>= <expr><operator>(</operator><name>drwav__memory_stream</name><operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytesRemaining</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drwav_assert</name><argument_list>(<argument><expr><name>memory</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drwav_assert</name><argument_list>(<argument><expr><name><name>memory</name><operator>-&gt;</operator><name>dataSize</name></name> <operator>&gt;=</operator> <name><name>memory</name><operator>-&gt;</operator><name>currentReadPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bytesRemaining</name> <operator>=</operator> <name><name>memory</name><operator>-&gt;</operator><name>dataSize</name></name> <operator>-</operator> <name><name>memory</name><operator>-&gt;</operator><name>currentReadPos</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesToRead</name> <operator>&gt;</operator> <name>bytesRemaining</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bytesToRead</name> <operator>=</operator> <name>bytesRemaining</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DRWAV_COPY_MEMORY</name><argument_list>(<argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><name><name>memory</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>memory</name><operator>-&gt;</operator><name>currentReadPos</name></name></expr></argument>, <argument><expr><name>bytesToRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memory</name><operator>-&gt;</operator><name>currentReadPos</name></name> <operator>+=</operator> <name>bytesToRead</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>bytesToRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drwav_bool32</name></type> <name>drwav__on_seek_memory</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_origin</name></type> <name>origin</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav__memory_stream</name><modifier>*</modifier></type> <name>memory</name> <init>= <expr><operator>(</operator><name>drwav__memory_stream</name><operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drwav_assert</name><argument_list>(<argument><expr><name>memory</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>origin</name> <operator>==</operator> <name>drwav_seek_origin_current</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>memory</name><operator>-&gt;</operator><name>currentReadPos</name></name> <operator>+</operator> <name>offset</name> <operator>&gt;</operator> <name><name>memory</name><operator>-&gt;</operator><name>dataSize</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>memory</name><operator>-&gt;</operator><name>currentReadPos</name></name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><name>offset</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>memory</name><operator>-&gt;</operator><name>currentReadPos</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>drwav_uint32</name><operator>)</operator><name>offset</name> <operator>&lt;=</operator> <name><name>memory</name><operator>-&gt;</operator><name>dataSize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>memory</name><operator>-&gt;</operator><name>currentReadPos</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>DRWAV_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>drwav__on_write_memory</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pDataIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytesToWrite</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav__memory_stream_write</name><modifier>*</modifier></type> <name>memory</name> <init>= <expr><operator>(</operator><name>drwav__memory_stream_write</name><operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytesRemaining</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drwav_assert</name><argument_list>(<argument><expr><name>memory</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drwav_assert</name><argument_list>(<argument><expr><name><name>memory</name><operator>-&gt;</operator><name>dataCapacity</name></name> <operator>&gt;=</operator> <name><name>memory</name><operator>-&gt;</operator><name>currentWritePos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bytesRemaining</name> <operator>=</operator> <name><name>memory</name><operator>-&gt;</operator><name>dataCapacity</name></name> <operator>-</operator> <name><name>memory</name><operator>-&gt;</operator><name>currentWritePos</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesRemaining</name> <operator>&lt;</operator> <name>bytesToWrite</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pNewData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>newDataCapacity</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>memory</name><operator>-&gt;</operator><name>dataCapacity</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">256</literal></expr> </then><else>: <expr><name><name>memory</name><operator>-&gt;</operator><name>dataCapacity</name></name> <operator>*</operator> <literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newDataCapacity</name> <operator>-</operator> <name><name>memory</name><operator>-&gt;</operator><name>currentWritePos</name></name><operator>)</operator> <operator>&lt;</operator> <name>bytesToWrite</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>newDataCapacity</name> <operator>=</operator> <name><name>memory</name><operator>-&gt;</operator><name>currentWritePos</name></name> <operator>+</operator> <name>bytesToWrite</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pNewData</name> <operator>=</operator> <call><name>DRWAV_REALLOC</name><argument_list>(<argument><expr><operator>*</operator><name><name>memory</name><operator>-&gt;</operator><name>ppData</name></name></expr></argument>, <argument><expr><name>newDataCapacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pNewData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>memory</name><operator>-&gt;</operator><name>ppData</name></name> <operator>=</operator> <name>pNewData</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memory</name><operator>-&gt;</operator><name>dataCapacity</name></name> <operator>=</operator> <name>newDataCapacity</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DRWAV_COPY_MEMORY</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>drwav_uint8</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name><name>memory</name><operator>-&gt;</operator><name>ppData</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <name><name>memory</name><operator>-&gt;</operator><name>currentWritePos</name></name></expr></argument>, <argument><expr><name>pDataIn</name></expr></argument>, <argument><expr><name>bytesToWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memory</name><operator>-&gt;</operator><name>currentWritePos</name></name> <operator>+=</operator> <name>bytesToWrite</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>memory</name><operator>-&gt;</operator><name>dataSize</name></name> <operator>&lt;</operator> <name><name>memory</name><operator>-&gt;</operator><name>currentWritePos</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>memory</name><operator>-&gt;</operator><name>dataSize</name></name> <operator>=</operator> <name><name>memory</name><operator>-&gt;</operator><name>currentWritePos</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>memory</name><operator>-&gt;</operator><name>pDataSize</name></name> <operator>=</operator> <name><name>memory</name><operator>-&gt;</operator><name>dataSize</name></name></expr>;</expr_stmt>

<return>return <expr><name>bytesToWrite</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drwav_bool32</name></type> <name>drwav__on_seek_memory_write</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_origin</name></type> <name>origin</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav__memory_stream_write</name><modifier>*</modifier></type> <name>memory</name> <init>= <expr><operator>(</operator><name>drwav__memory_stream_write</name><operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drwav_assert</name><argument_list>(<argument><expr><name>memory</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>origin</name> <operator>==</operator> <name>drwav_seek_origin_current</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>memory</name><operator>-&gt;</operator><name>currentWritePos</name></name> <operator>+</operator> <name>offset</name> <operator>&gt;</operator> <name><name>memory</name><operator>-&gt;</operator><name>dataSize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>memory</name><operator>-&gt;</operator><name>dataSize</name></name> <operator>-</operator> <name><name>memory</name><operator>-&gt;</operator><name>currentWritePos</name></name><operator>)</operator></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>memory</name><operator>-&gt;</operator><name>currentWritePos</name></name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><name>offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>memory</name><operator>-&gt;</operator><name>currentWritePos</name></name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>memory</name><operator>-&gt;</operator><name>currentWritePos</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>drwav_uint32</name><operator>)</operator><name>offset</name> <operator>&lt;=</operator> <name><name>memory</name><operator>-&gt;</operator><name>dataSize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>memory</name><operator>-&gt;</operator><name>currentWritePos</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>memory</name><operator>-&gt;</operator><name>currentWritePos</name></name> <operator>=</operator> <name><name>memory</name><operator>-&gt;</operator><name>dataSize</name></name></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>DRWAV_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_bool32</name></type> <name>drwav_init_memory</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drwav_init_memory_ex</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_bool32</name></type> <name>drwav_init_memory_ex</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>drwav_chunk_proc</name></type> <name>onChunk</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pChunkUserData</name></decl></parameter>, <parameter><decl><type><name>drwav_uint32</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav__memory_stream</name></type> <name>memoryStream</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dataSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drwav_zero_memory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>memoryStream</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>memoryStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memoryStream</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memoryStream</name><operator>.</operator><name>dataSize</name></name> <operator>=</operator> <name>dataSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memoryStream</name><operator>.</operator><name>currentReadPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav_init_ex</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>drwav__on_read_memory</name></expr></argument>, <argument><expr><name>drwav__on_seek_memory</name></expr></argument>, <argument><expr><name>onChunk</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>memoryStream</name></expr></argument>, <argument><expr><name>pChunkUserData</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>memoryStream</name></name> <operator>=</operator> <name>memoryStream</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pWav</name><operator>-&gt;</operator><name>memoryStream</name></name></expr>;</expr_stmt>

<return>return <expr><name>DRWAV_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_bool32</name></type> <name>drwav_init_memory_write__internal</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppData</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>pDataSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl></parameter>, <parameter><decl><type><name>drwav_bool32</name></type> <name>isSequential</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav__memory_stream_write</name></type> <name>memoryStreamWrite</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ppData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ppData</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>pDataSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drwav_zero_memory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>memoryStreamWrite</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>memoryStreamWrite</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memoryStreamWrite</name><operator>.</operator><name>ppData</name></name> <operator>=</operator> <name>ppData</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memoryStreamWrite</name><operator>.</operator><name>pDataSize</name></name> <operator>=</operator> <name>pDataSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memoryStreamWrite</name><operator>.</operator><name>dataSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memoryStreamWrite</name><operator>.</operator><name>dataCapacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memoryStreamWrite</name><operator>.</operator><name>currentWritePos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav_init_write__internal</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>pFormat</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>, <argument><expr><name>isSequential</name></expr></argument>, <argument><expr><name>drwav__on_write_memory</name></expr></argument>, <argument><expr><name>drwav__on_seek_memory_write</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>memoryStreamWrite</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>memoryStreamWrite</name></name> <operator>=</operator> <name>memoryStreamWrite</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pWav</name><operator>-&gt;</operator><name>memoryStreamWrite</name></name></expr>;</expr_stmt>

<return>return <expr><name>DRWAV_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_bool32</name></type> <name>drwav_init_memory_write</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppData</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>pDataSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drwav_init_memory_write__internal</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>ppData</name></expr></argument>, <argument><expr><name>pDataSize</name></expr></argument>, <argument><expr><name>pFormat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DRWAV_FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_bool32</name></type> <name>drwav_init_memory_write_sequential</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppData</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>pDataSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drwav_init_memory_write__internal</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>ppData</name></expr></argument>, <argument><expr><name>pDataSize</name></expr></argument>, <argument><expr><name>pFormat</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>, <argument><expr><name>DRWAV_TRUE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_memory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drwav_open_memory_ex</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_memory_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>drwav_chunk_proc</name></type> <name>onChunk</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pChunkUserData</name></decl></parameter>, <parameter><decl><type><name>drwav_uint32</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav__memory_stream</name></type> <name>memoryStream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dataSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drwav_zero_memory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>memoryStream</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>memoryStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memoryStream</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memoryStream</name><operator>.</operator><name>dataSize</name></name> <operator>=</operator> <name>dataSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memoryStream</name><operator>.</operator><name>currentReadPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pWav</name> <operator>=</operator> <call><name>drwav_open_ex</name><argument_list>(<argument><expr><name>drwav__on_read_memory</name></expr></argument>, <argument><expr><name>drwav__on_seek_memory</name></expr></argument>, <argument><expr><name>onChunk</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>memoryStream</name></expr></argument>, <argument><expr><name>pChunkUserData</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pWav</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>memoryStream</name></name> <operator>=</operator> <name>memoryStream</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pWav</name><operator>-&gt;</operator><name>memoryStream</name></name></expr>;</expr_stmt>

<return>return <expr><name>pWav</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_memory_write__internal</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppData</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>pDataSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl></parameter>, <parameter><decl><type><name>drwav_bool32</name></type> <name>isSequential</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav__memory_stream_write</name></type> <name>memoryStreamWrite</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ppData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ppData</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>pDataSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drwav_zero_memory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>memoryStreamWrite</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>memoryStreamWrite</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memoryStreamWrite</name><operator>.</operator><name>ppData</name></name> <operator>=</operator> <name>ppData</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memoryStreamWrite</name><operator>.</operator><name>pDataSize</name></name> <operator>=</operator> <name>pDataSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memoryStreamWrite</name><operator>.</operator><name>dataSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memoryStreamWrite</name><operator>.</operator><name>dataCapacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>memoryStreamWrite</name><operator>.</operator><name>currentWritePos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pWav</name> <operator>=</operator> <call><name>drwav_open_write__internal</name><argument_list>(<argument><expr><name>pFormat</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>, <argument><expr><name>isSequential</name></expr></argument>, <argument><expr><name>drwav__on_write_memory</name></expr></argument>, <argument><expr><name>drwav__on_seek_memory_write</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>memoryStreamWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pWav</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>memoryStreamWrite</name></name> <operator>=</operator> <name>memoryStreamWrite</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pWav</name><operator>-&gt;</operator><name>memoryStreamWrite</name></name></expr>;</expr_stmt>

<return>return <expr><name>pWav</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_memory_write</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppData</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>pDataSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drwav_open_memory_write__internal</name><argument_list>(<argument><expr><name>ppData</name></expr></argument>, <argument><expr><name>pDataSize</name></expr></argument>, <argument><expr><name>pFormat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DRWAV_FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_memory_write_sequential</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppData</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>pDataSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drwav_open_memory_write__internal</name><argument_list>(<argument><expr><name>ppData</name></expr></argument>, <argument><expr><name>pDataSize</name></expr></argument>, <argument><expr><name>pFormat</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>, <argument><expr><name>DRWAV_TRUE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>drwav__on_read</name><parameter_list>(<parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytesToRead</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>pCursor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytesRead</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drwav_assert</name><argument_list>(<argument><expr><name>onRead</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drwav_assert</name><argument_list>(<argument><expr><name>pCursor</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bytesRead</name> <operator>=</operator> <call><name>onRead</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><name>bytesToRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pCursor</name> <operator>+=</operator> <name>bytesRead</name></expr>;</expr_stmt>

<return>return <expr><name>bytesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_bool32</name></type> <name>drwav__on_seek</name><parameter_list>(<parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_origin</name></type> <name>origin</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>pCursor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>drwav_assert</name><argument_list>(<argument><expr><name>onSeek</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drwav_assert</name><argument_list>(<argument><expr><name>pCursor</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>onSeek</name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>origin</name> <operator>==</operator> <name>drwav_seek_origin_start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pCursor</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pCursor</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>DRWAV_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drwav_uint32</name></type> <name>drwav_get_bytes_per_sample</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>bytesPerSample</name> <init>= <expr><name><name>pWav</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>pWav</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bytesPerSample</name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>blockAlign</name></name><operator>/</operator><name><name>pWav</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>bytesPerSample</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>drwav_uint32</name></type> <name>drwav_get_bytes_per_pcm_frame</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>bitsPerFrame</name> <init>= <expr><name><name>pWav</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>*</operator> <name><name>pWav</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>bytesPerFrame</name> <init>= <expr><name>bitsPerFrame</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerFrame</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>bitsPerFrame</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bytesPerFrame</name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>blockAlign</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>bytesPerFrame</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_bool32</name></type> <name>drwav_init</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drwav_init_ex</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_bool32</name></type> <name>drwav_init_ex</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>drwav_chunk_proc</name></type> <name>onChunk</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pReadSeekUserData</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pChunkUserData</name></decl></parameter>, <parameter><decl><type><name>drwav_uint32</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>cursor</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>drwav_bool32</name></type> <name>sequential</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>riff</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_fmt</name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>translatedFormatTag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>sampleCountFromFactChunk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_bool32</name></type> <name>foundDataChunk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>dataChunkSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>chunkSize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>onRead</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>onSeek</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sequential</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>DRWAV_SEQUENTIAL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drwav_zero_memory</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pWav</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>onRead</name></name> <operator>=</operator> <name>onRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>onSeek</name></name> <operator>=</operator> <name>onSeek</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <name>pReadSeekUserData</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drwav__on_read</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>pReadSeekUserData</name></expr></argument>, <argument><expr><name>riff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>riff</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>riff</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drwav__fourcc_equal</name><argument_list>(<argument><expr><name>riff</name></expr></argument>, <argument><expr><literal type="string">"RIFF"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>container</name></name> <operator>=</operator> <name>drwav_container_riff</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>drwav__fourcc_equal</name><argument_list>(<argument><expr><name>riff</name></expr></argument>, <argument><expr><literal type="string">"riff"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint8</name></type> <name><name>riff2</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>container</name></name> <operator>=</operator> <name>drwav_container_w64</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drwav__on_read</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>pReadSeekUserData</name></expr></argument>, <argument><expr><name>riff2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>riff2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>riff2</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>riff2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>drwavGUID_W64_RIFF</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>container</name></name> <operator>==</operator> <name>drwav_container_riff</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>chunkSizeBytes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>wave</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drwav__on_read</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>pReadSeekUserData</name></expr></argument>, <argument><expr><name>chunkSizeBytes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chunkSizeBytes</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>chunkSizeBytes</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drwav__bytes_to_u32</name><argument_list>(<argument><expr><name>chunkSizeBytes</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">36</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drwav__on_read</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>pReadSeekUserData</name></expr></argument>, <argument><expr><name>wave</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wave</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wave</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav__fourcc_equal</name><argument_list>(<argument><expr><name>wave</name></expr></argument>, <argument><expr><literal type="string">"WAVE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>chunkSizeBytes</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint8</name></type> <name><name>wave</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drwav__on_read</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>pReadSeekUserData</name></expr></argument>, <argument><expr><name>chunkSizeBytes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chunkSizeBytes</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>chunkSizeBytes</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drwav__bytes_to_u64</name><argument_list>(<argument><expr><name>chunkSizeBytes</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">80</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drwav__on_read</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>pReadSeekUserData</name></expr></argument>, <argument><expr><name>wave</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wave</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wave</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav__guid_equal</name><argument_list>(<argument><expr><name>wave</name></expr></argument>, <argument><expr><name>drwavGUID_W64_WAVE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav__read_fmt</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>pReadSeekUserData</name></expr></argument>, <argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>container</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>.</operator><name>sampleRate</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>fmt</name><operator>.</operator><name>channels</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>fmt</name><operator>.</operator><name>bitsPerSample</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>fmt</name><operator>.</operator><name>blockAlign</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>translatedFormatTag</name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>formatTag</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>translatedFormatTag</name> <operator>==</operator> <name>DR_WAVE_FORMAT_EXTENSIBLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>translatedFormatTag</name> <operator>=</operator> <call><name>drwav__bytes_to_u16</name><argument_list>(<argument><expr><name><name>fmt</name><operator>.</operator><name>subFormat</name></name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sampleCountFromFactChunk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>foundDataChunk</name> <operator>=</operator> <name>DRWAV_FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dataChunkSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>chunkSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_chunk_header</name></type> <name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_result</name></type> <name>result</name> <init>= <expr><call><name>drwav__read_chunk_header</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>pReadSeekUserData</name></expr></argument>, <argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>container</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>DRWAV_SUCCESS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>foundDataChunk</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sequential</name> <operator>&amp;&amp;</operator> <name>onChunk</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>callbackBytesRead</name> <init>= <expr><call><name>onChunk</name><argument_list>(<argument><expr><name>pChunkUserData</name></expr></argument>, <argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>pReadSeekUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>callbackBytesRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav__seek_from_start</name><argument_list>(<argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>pReadSeekUserData</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>foundDataChunk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>dataChunkDataPos</name></name> <operator>=</operator> <name>cursor</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>chunkSize</name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>sizeInBytes</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>container</name></name> <operator>==</operator> <name>drwav_container_riff</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>drwav__fourcc_equal</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>id</name><operator>.</operator><name>fourcc</name></name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>foundDataChunk</name> <operator>=</operator> <name>DRWAV_TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dataChunkSize</name> <operator>=</operator> <name>chunkSize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>drwav__guid_equal</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>id</name><operator>.</operator><name>guid</name></name></expr></argument>, <argument><expr><name>drwavGUID_W64_DATA</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>foundDataChunk</name> <operator>=</operator> <name>DRWAV_TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dataChunkSize</name> <operator>=</operator> <name>chunkSize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>foundDataChunk</name> <operator>&amp;&amp;</operator> <name>sequential</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>container</name></name> <operator>==</operator> <name>drwav_container_riff</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>drwav__fourcc_equal</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>id</name><operator>.</operator><name>fourcc</name></name></expr></argument>, <argument><expr><literal type="string">"fact"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>sampleCount</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drwav__on_read</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>pReadSeekUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sampleCount</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>chunkSize</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>foundDataChunk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>dataChunkDataPos</name></name> <operator>=</operator> <name>cursor</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_ADPCM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sampleCountFromFactChunk</name> <operator>=</operator> <name>sampleCount</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>sampleCountFromFactChunk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>drwav__guid_equal</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>id</name><operator>.</operator><name>guid</name></name></expr></argument>, <argument><expr><name>drwavGUID_W64_FACT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>drwav__on_read</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>pReadSeekUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sampleCountFromFactChunk</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>chunkSize</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>foundDataChunk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>dataChunkDataPos</name></name> <operator>=</operator> <name>cursor</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>container</name></name> <operator>==</operator> <name>drwav_container_riff</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>drwav__fourcc_equal</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>id</name><operator>.</operator><name>fourcc</name></name></expr></argument>, <argument><expr><literal type="string">"smpl"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>smplHeaderData</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>chunkSize</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>smplHeaderData</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>bytesJustRead</name> <init>= <expr><call><name>drwav__on_read</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>pReadSeekUserData</name></expr></argument>, <argument><expr><name>smplHeaderData</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>smplHeaderData</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>chunkSize</name> <operator>-=</operator> <name>bytesJustRead</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesJustRead</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>smplHeaderData</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>iLoop</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>smpl</name><operator>.</operator><name>manufacturer</name></name> <operator>=</operator> <call><name>drwav__bytes_to_u32</name><argument_list>(<argument><expr><name>smplHeaderData</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>smpl</name><operator>.</operator><name>product</name></name> <operator>=</operator> <call><name>drwav__bytes_to_u32</name><argument_list>(<argument><expr><name>smplHeaderData</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>smpl</name><operator>.</operator><name>samplePeriod</name></name> <operator>=</operator> <call><name>drwav__bytes_to_u32</name><argument_list>(<argument><expr><name>smplHeaderData</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>smpl</name><operator>.</operator><name>midiUnityNotes</name></name> <operator>=</operator> <call><name>drwav__bytes_to_u32</name><argument_list>(<argument><expr><name>smplHeaderData</name><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>smpl</name><operator>.</operator><name>midiPitchFraction</name></name> <operator>=</operator> <call><name>drwav__bytes_to_u32</name><argument_list>(<argument><expr><name>smplHeaderData</name><operator>+</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>smpl</name><operator>.</operator><name>smpteFormat</name></name> <operator>=</operator> <call><name>drwav__bytes_to_u32</name><argument_list>(<argument><expr><name>smplHeaderData</name><operator>+</operator><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>smpl</name><operator>.</operator><name>smpteOffset</name></name> <operator>=</operator> <call><name>drwav__bytes_to_u32</name><argument_list>(<argument><expr><name>smplHeaderData</name><operator>+</operator><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>smpl</name><operator>.</operator><name>numSampleLoops</name></name> <operator>=</operator> <call><name>drwav__bytes_to_u32</name><argument_list>(<argument><expr><name>smplHeaderData</name><operator>+</operator><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>smpl</name><operator>.</operator><name>samplerData</name></name> <operator>=</operator> <call><name>drwav__bytes_to_u32</name><argument_list>(<argument><expr><name>smplHeaderData</name><operator>+</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>iLoop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iLoop</name> <operator>&lt;</operator> <name><name>pWav</name><operator>-&gt;</operator><name>smpl</name><operator>.</operator><name>numSampleLoops</name></name> <operator>&amp;&amp;</operator> <name>iLoop</name> <operator>&lt;</operator> <call><name>drwav_countof</name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>smpl</name><operator>.</operator><name>loops</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>iLoop</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>smplLoopData</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt> 

<expr_stmt><expr><name>bytesJustRead</name> <operator>=</operator> <call><name>drwav__on_read</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>pReadSeekUserData</name></expr></argument>, <argument><expr><name>smplLoopData</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>smplLoopData</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunkSize</name> <operator>-=</operator> <name>bytesJustRead</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesJustRead</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>smplLoopData</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>smpl</name><operator>.</operator><name>loops</name><index>[<expr><name>iLoop</name></expr>]</index></name><operator>.</operator><name>cuePointId</name> <operator>=</operator> <call><name>drwav__bytes_to_u32</name><argument_list>(<argument><expr><name>smplLoopData</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>smpl</name><operator>.</operator><name>loops</name><index>[<expr><name>iLoop</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <call><name>drwav__bytes_to_u32</name><argument_list>(<argument><expr><name>smplLoopData</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>smpl</name><operator>.</operator><name>loops</name><index>[<expr><name>iLoop</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>=</operator> <call><name>drwav__bytes_to_u32</name><argument_list>(<argument><expr><name>smplLoopData</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>smpl</name><operator>.</operator><name>loops</name><index>[<expr><name>iLoop</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>=</operator> <call><name>drwav__bytes_to_u32</name><argument_list>(<argument><expr><name>smplLoopData</name><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>smpl</name><operator>.</operator><name>loops</name><index>[<expr><name>iLoop</name></expr>]</index></name><operator>.</operator><name>fraction</name> <operator>=</operator> <call><name>drwav__bytes_to_u32</name><argument_list>(<argument><expr><name>smplLoopData</name><operator>+</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>smpl</name><operator>.</operator><name>loops</name><index>[<expr><name>iLoop</name></expr>]</index></name><operator>.</operator><name>playCount</name> <operator>=</operator> <call><name>drwav__bytes_to_u32</name><argument_list>(<argument><expr><name>smplLoopData</name><operator>+</operator><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>drwav__guid_equal</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>id</name><operator>.</operator><name>guid</name></name></expr></argument>, <argument><expr><name>drwavGUID_W64_SMPL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>chunkSize</name> <operator>+=</operator> <name><name>header</name><operator>.</operator><name>paddingSize</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav__seek_forward</name><argument_list>(<argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>chunkSize</name></expr></argument>, <argument><expr><name>pReadSeekUserData</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <name>chunkSize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>foundDataChunk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>dataChunkDataPos</name></name> <operator>=</operator> <name>cursor</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>foundDataChunk</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sequential</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav__seek_from_start</name><argument_list>(<argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>dataChunkDataPos</name></name></expr></argument>, <argument><expr><name>pReadSeekUserData</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cursor</name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>dataChunkDataPos</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>sampleRate</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>sampleRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>bitsPerSample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>bytesRemaining</name></name> <operator>=</operator> <name>dataChunkSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>=</operator> <name>translatedFormatTag</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>dataChunkDataSize</name></name> <operator>=</operator> <name>dataChunkSize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleCountFromFactChunk</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>totalPCMFrameCount</name></name> <operator>=</operator> <name>sampleCountFromFactChunk</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>totalPCMFrameCount</name></name> <operator>=</operator> <name>dataChunkSize</name> <operator>/</operator> <call><name>drwav_get_bytes_per_pcm_frame</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_ADPCM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>blockCount</name> <init>= <expr><name>dataChunkSize</name> <operator>/</operator> <name><name>fmt</name><operator>.</operator><name>blockAlign</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>totalPCMFrameCount</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>blockCount</name> <operator>*</operator> <operator>(</operator><name><name>fmt</name><operator>.</operator><name>blockAlign</name></name> <operator>-</operator> <operator>(</operator><literal type="number">6</literal><operator>*</operator><name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>fmt</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_DVI_ADPCM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>blockCount</name> <init>= <expr><name>dataChunkSize</name> <operator>/</operator> <name><name>fmt</name><operator>.</operator><name>blockAlign</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>totalPCMFrameCount</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>blockCount</name> <operator>*</operator> <operator>(</operator><name><name>fmt</name><operator>.</operator><name>blockAlign</name></name> <operator>-</operator> <operator>(</operator><literal type="number">4</literal><operator>*</operator><name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>blockCount</name> <operator>*</operator> <name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>fmt</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_ADPCM</name> <operator>||</operator> <name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_DVI_ADPCM</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DR_WAV_LIBSNDFILE_COMPAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_ADPCM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>blockCount</name> <init>= <expr><name>dataChunkSize</name> <operator>/</operator> <name><name>fmt</name><operator>.</operator><name>blockAlign</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>totalPCMFrameCount</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>blockCount</name> <operator>*</operator> <operator>(</operator><name><name>fmt</name><operator>.</operator><name>blockAlign</name></name> <operator>-</operator> <operator>(</operator><literal type="number">6</literal><operator>*</operator><name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>fmt</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_DVI_ADPCM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>blockCount</name> <init>= <expr><name>dataChunkSize</name> <operator>/</operator> <name><name>fmt</name><operator>.</operator><name>blockAlign</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>totalPCMFrameCount</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>blockCount</name> <operator>*</operator> <operator>(</operator><name><name>fmt</name><operator>.</operator><name>blockAlign</name></name> <operator>-</operator> <operator>(</operator><literal type="number">4</literal><operator>*</operator><name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>blockCount</name> <operator>*</operator> <name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>fmt</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>totalSampleCount</name></name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>totalPCMFrameCount</name></name> <operator>*</operator> <name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<return>return <expr><name>DRWAV_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint32</name></type> <name>drwav_riff_chunk_size_riff</name><parameter_list>(<parameter><decl><type><name>drwav_uint64</name></type> <name>dataChunkSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dataChunkSize</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">0xFFFFFFFFUL</literal> <operator>-</operator> <literal type="number">36</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">36</literal> <operator>+</operator> <operator>(</operator><name>drwav_uint32</name><operator>)</operator><name>dataChunkSize</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0xFFFFFFFF</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>drwav_uint32</name></type> <name>drwav_data_chunk_size_riff</name><parameter_list>(<parameter><decl><type><name>drwav_uint64</name></type> <name>dataChunkSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dataChunkSize</name> <operator>&lt;=</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>drwav_uint32</name><operator>)</operator><name>dataChunkSize</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0xFFFFFFFFUL</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_riff_chunk_size_w64</name><parameter_list>(<parameter><decl><type><name>drwav_uint64</name></type> <name>dataChunkSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">80</literal> <operator>+</operator> <literal type="number">24</literal> <operator>+</operator> <name>dataChunkSize</name></expr>;</return> 

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_data_chunk_size_w64</name><parameter_list>(<parameter><decl><type><name>drwav_uint64</name></type> <name>dataChunkSize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">24</literal> <operator>+</operator> <name>dataChunkSize</name></expr>;</return> 

</block_content>}</block></function>

<function><type><name>drwav_bool32</name></type> <name>drwav_init_write__internal</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl></parameter>, <parameter><decl><type><name>drwav_bool32</name></type> <name>isSequential</name></decl></parameter>, <parameter><decl><type><name>drwav_write_proc</name></type> <name>onWrite</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>runningPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>initialDataChunkSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>chunkSizeFMT</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pWav</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>onWrite</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isSequential</name> <operator>&amp;&amp;</operator> <name>onSeek</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pFormat</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_EXTENSIBLE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pFormat</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_ADPCM</name> <operator>||</operator> <name><name>pFormat</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_DVI_ADPCM</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drwav_zero_memory</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pWav</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name> <operator>=</operator> <name>onWrite</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>onSeek</name></name> <operator>=</operator> <name>onSeek</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <name>pUserData</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>formatTag</name></name> <operator>=</operator> <operator>(</operator><name>drwav_uint16</name><operator>)</operator><name><name>pFormat</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <operator>(</operator><name>drwav_uint16</name><operator>)</operator><name><name>pFormat</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>sampleRate</name></name> <operator>=</operator> <name><name>pFormat</name><operator>-&gt;</operator><name>sampleRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>avgBytesPerSec</name></name> <operator>=</operator> <operator>(</operator><name>drwav_uint32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>pFormat</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>*</operator> <name><name>pFormat</name><operator>-&gt;</operator><name>sampleRate</name></name> <operator>*</operator> <name><name>pFormat</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>blockAlign</name></name> <operator>=</operator> <operator>(</operator><name>drwav_uint16</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>pFormat</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>pFormat</name><operator>-&gt;</operator><name>bitsPerSample</name></name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>bitsPerSample</name></name> <operator>=</operator> <operator>(</operator><name>drwav_uint16</name><operator>)</operator><name><name>pFormat</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>extendedSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>isSequentialWrite</name></name> <operator>=</operator> <name>isSequential</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>isSequential</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>initialDataChunkSize</name> <operator>=</operator> <operator>(</operator><name>totalSampleCount</name> <operator>*</operator> <name><name>pWav</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>bitsPerSample</name></name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pFormat</name><operator>-&gt;</operator><name>container</name></name> <operator>==</operator> <name>drwav_container_riff</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>initialDataChunkSize</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">0xFFFFFFFFUL</literal> <operator>-</operator> <literal type="number">36</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>dataChunkDataSizeTargetWrite</name></name> <operator>=</operator> <name>initialDataChunkSize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pFormat</name><operator>-&gt;</operator><name>container</name></name> <operator>==</operator> <name>drwav_container_riff</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>chunkSizeRIFF</name> <init>= <expr><literal type="number">36</literal> <operator>+</operator> <operator>(</operator><name>drwav_uint32</name><operator>)</operator><name>initialDataChunkSize</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>runningPos</name> <operator>+=</operator> <call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><literal type="string">"RIFF"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>runningPos</name> <operator>+=</operator> <call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chunkSizeRIFF</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>runningPos</name> <operator>+=</operator> <call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><literal type="string">"WAVE"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>chunkSizeRIFF</name> <init>= <expr><literal type="number">80</literal> <operator>+</operator> <literal type="number">24</literal> <operator>+</operator> <name>initialDataChunkSize</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>runningPos</name> <operator>+=</operator> <call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>drwavGUID_W64_RIFF</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>runningPos</name> <operator>+=</operator> <call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chunkSizeRIFF</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>runningPos</name> <operator>+=</operator> <call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>drwavGUID_W64_WAVE</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pFormat</name><operator>-&gt;</operator><name>container</name></name> <operator>==</operator> <name>drwav_container_riff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chunkSizeFMT</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>runningPos</name> <operator>+=</operator> <call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><literal type="string">"fmt "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>runningPos</name> <operator>+=</operator> <call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chunkSizeFMT</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>chunkSizeFMT</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>runningPos</name> <operator>+=</operator> <call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>drwavGUID_W64_FMT</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>runningPos</name> <operator>+=</operator> <call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chunkSizeFMT</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>runningPos</name> <operator>+=</operator> <call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWav</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>formatTag</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>runningPos</name> <operator>+=</operator> <call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWav</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>channels</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>runningPos</name> <operator>+=</operator> <call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWav</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>sampleRate</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>runningPos</name> <operator>+=</operator> <call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWav</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>avgBytesPerSec</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>runningPos</name> <operator>+=</operator> <call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWav</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>blockAlign</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>runningPos</name> <operator>+=</operator> <call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWav</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>bitsPerSample</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>dataChunkDataPos</name></name> <operator>=</operator> <name>runningPos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pFormat</name><operator>-&gt;</operator><name>container</name></name> <operator>==</operator> <name>drwav_container_riff</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>chunkSizeDATA</name> <init>= <expr><operator>(</operator><name>drwav_uint32</name><operator>)</operator><name>initialDataChunkSize</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>runningPos</name> <operator>+=</operator> <call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>runningPos</name> <operator>+=</operator> <call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chunkSizeDATA</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>chunkSizeDATA</name> <init>= <expr><literal type="number">24</literal> <operator>+</operator> <name>initialDataChunkSize</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>runningPos</name> <operator>+=</operator> <call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>drwavGUID_W64_DATA</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>runningPos</name> <operator>+=</operator> <call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chunkSizeDATA</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pFormat</name><operator>-&gt;</operator><name>container</name></name> <operator>==</operator> <name>drwav_container_riff</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>runningPos</name> <operator>!=</operator> <literal type="number">20</literal> <operator>+</operator> <name>chunkSizeFMT</name> <operator>+</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>runningPos</name> <operator>!=</operator> <literal type="number">40</literal> <operator>+</operator> <name>chunkSizeFMT</name> <operator>+</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>container</name></name> <operator>=</operator> <name><name>pFormat</name><operator>-&gt;</operator><name>container</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <operator>(</operator><name>drwav_uint16</name><operator>)</operator><name><name>pFormat</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>sampleRate</name></name> <operator>=</operator> <name><name>pFormat</name><operator>-&gt;</operator><name>sampleRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>=</operator> <operator>(</operator><name>drwav_uint16</name><operator>)</operator><name><name>pFormat</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>=</operator> <operator>(</operator><name>drwav_uint16</name><operator>)</operator><name><name>pFormat</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<return>return <expr><name>DRWAV_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_bool32</name></type> <name>drwav_init_write</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_write_proc</name></type> <name>onWrite</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drwav_init_write__internal</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>pFormat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DRWAV_FALSE</name></expr></argument>, <argument><expr><name>onWrite</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</return> 

</block_content>}</block></function>

<function><type><name>drwav_bool32</name></type> <name>drwav_init_write_sequential</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl></parameter>, <parameter><decl><type><name>drwav_write_proc</name></type> <name>onWrite</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drwav_init_write__internal</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>pFormat</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>, <argument><expr><name>DRWAV_TRUE</name></expr></argument>, <argument><expr><name>onWrite</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</return> 

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drwav_uninit</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pWav</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>paddingSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>isSequentialWrite</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_assert</name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>dataChunkDataSize</name></name> <operator>==</operator> <name><name>pWav</name><operator>-&gt;</operator><name>dataChunkDataSizeTargetWrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>container</name></name> <operator>==</operator> <name>drwav_container_riff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>paddingSize</name> <operator>=</operator> <operator>(</operator><name>drwav_uint32</name><operator>)</operator><operator>(</operator><name><name>pWav</name><operator>-&gt;</operator><name>dataChunkDataSize</name></name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>paddingSize</name> <operator>=</operator> <operator>(</operator><name>drwav_uint32</name><operator>)</operator><operator>(</operator><name><name>pWav</name><operator>-&gt;</operator><name>dataChunkDataSize</name></name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>paddingSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>paddingData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>paddingData</name></expr></argument>, <argument><expr><name>paddingSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>onSeek</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pWav</name><operator>-&gt;</operator><name>isSequentialWrite</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>container</name></name> <operator>==</operator> <name>drwav_container_riff</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name><name>pWav</name><operator>-&gt;</operator><name>onSeek</name></name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>drwav_seek_origin_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>riffChunkSize</name> <init>= <expr><call><name>drwav_riff_chunk_size_riff</name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>dataChunkDataSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>riffChunkSize</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>pWav</name><operator>-&gt;</operator><name>onSeek</name></name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pWav</name><operator>-&gt;</operator><name>dataChunkDataPos</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>drwav_seek_origin_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>dataChunkSize</name> <init>= <expr><call><name>drwav_data_chunk_size_riff</name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>dataChunkDataSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataChunkSize</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name><name>pWav</name><operator>-&gt;</operator><name>onSeek</name></name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>drwav_seek_origin_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>riffChunkSize</name> <init>= <expr><call><name>drwav_riff_chunk_size_w64</name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>dataChunkDataSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>riffChunkSize</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>pWav</name><operator>-&gt;</operator><name>onSeek</name></name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pWav</name><operator>-&gt;</operator><name>dataChunkDataPos</name></name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>drwav_seek_origin_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>dataChunkSize</name> <init>= <expr><call><name>drwav_data_chunk_size_w64</name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>dataChunkDataSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataChunkSize</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_WAV_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>onRead</name></name> <operator>==</operator> <name>drwav__on_read_stdio</name> <operator>||</operator> <name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name> <operator>==</operator> <name>drwav__on_write_stdio</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open</name><parameter_list>(<parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drwav_open_ex</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_ex</name><parameter_list>(<parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>drwav_chunk_proc</name></type> <name>onChunk</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pReadSeekUserData</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pChunkUserData</name></decl></parameter>, <parameter><decl><type><name>drwav_uint32</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name> <init>= <expr><operator>(</operator><name>drwav</name><operator>*</operator><operator>)</operator><call><name>DRWAV_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pWav</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pWav</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav_init_ex</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>onChunk</name></expr></argument>, <argument><expr><name>pReadSeekUserData</name></expr></argument>, <argument><expr><name>pChunkUserData</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DRWAV_FREE</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pWav</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_write__internal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl></parameter>, <parameter><decl><type><name>drwav_bool32</name></type> <name>isSequential</name></decl></parameter>, <parameter><decl><type><name>drwav_write_proc</name></type> <name>onWrite</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name> <init>= <expr><operator>(</operator><name>drwav</name><operator>*</operator><operator>)</operator><call><name>DRWAV_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pWav</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pWav</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav_init_write__internal</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>pFormat</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>, <argument><expr><name>isSequential</name></expr></argument>, <argument><expr><name>onWrite</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DRWAV_FREE</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pWav</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_write_proc</name></type> <name>onWrite</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drwav_open_write__internal</name><argument_list>(<argument><expr><name>pFormat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DRWAV_FALSE</name></expr></argument>, <argument><expr><name>onWrite</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav</name><modifier>*</modifier></type> <name>drwav_open_write_sequential</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>drwav_data_format</name><modifier>*</modifier></type> <name>pFormat</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl></parameter>, <parameter><decl><type><name>drwav_write_proc</name></type> <name>onWrite</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drwav_open_write__internal</name><argument_list>(<argument><expr><name>pFormat</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>, <argument><expr><name>DRWAV_TRUE</name></expr></argument>, <argument><expr><name>onWrite</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drwav_close</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>drwav_uninit</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DRWAV_FREE</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>drwav_read_raw</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytesToRead</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytesRead</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pWav</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>bytesToRead</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pBufferOut</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesToRead</name> <operator>&gt;</operator> <name><name>pWav</name><operator>-&gt;</operator><name>bytesRemaining</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bytesToRead</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>pWav</name><operator>-&gt;</operator><name>bytesRemaining</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytesRead</name> <operator>=</operator> <call><name><name>pWav</name><operator>-&gt;</operator><name>onRead</name></name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><name>bytesToRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>bytesRemaining</name></name> <operator>-=</operator> <name>bytesRead</name></expr>;</expr_stmt>

<return>return <expr><name>bytesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>bytesPerSample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytesRead</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pWav</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>samplesToRead</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pBufferOut</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drwav__is_compressed_format_tag</name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytesPerSample</name> <operator>=</operator> <call><name>drwav_get_bytes_per_sample</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesToRead</name> <operator>*</operator> <name>bytesPerSample</name> <operator>&gt;</operator> <name>DRWAV_SIZE_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>samplesToRead</name> <operator>=</operator> <name>DRWAV_SIZE_MAX</name> <operator>/</operator> <name>bytesPerSample</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytesRead</name> <operator>=</operator> <call><name>drwav_read_raw</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>samplesToRead</name> <operator>*</operator> <name>bytesPerSample</name><operator>)</operator></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bytesRead</name> <operator>/</operator> <name>bytesPerSample</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_pcm_frames</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>framesToRead</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>bytesPerFrame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytesRead</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pWav</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>framesToRead</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pBufferOut</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drwav__is_compressed_format_tag</name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytesPerFrame</name> <operator>=</operator> <call><name>drwav_get_bytes_per_pcm_frame</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerFrame</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>framesToRead</name> <operator>*</operator> <name>bytesPerFrame</name> <operator>&gt;</operator> <name>DRWAV_SIZE_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>framesToRead</name> <operator>=</operator> <name>DRWAV_SIZE_MAX</name> <operator>/</operator> <name>bytesPerFrame</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytesRead</name> <operator>=</operator> <call><name>drwav_read_raw</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>framesToRead</name> <operator>*</operator> <name>bytesPerFrame</name><operator>)</operator></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bytesRead</name> <operator>/</operator> <name>bytesPerFrame</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_bool32</name></type> <name>drwav_seek_to_first_pcm_frame</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pWav</name><operator>-&gt;</operator><name>onSeek</name></name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pWav</name><operator>-&gt;</operator><name>dataChunkDataPos</name></name></expr></argument>, <argument><expr><name>drwav_seek_origin_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drwav__is_compressed_format_tag</name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>compressed</name><operator>.</operator><name>iCurrentSample</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>bytesRemaining</name></name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>dataChunkDataSize</name></name></expr>;</expr_stmt>

<return>return <expr><name>DRWAV_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_bool32</name></type> <name>drwav_seek_to_sample</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>sample</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pWav</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pWav</name><operator>-&gt;</operator><name>onSeek</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>totalSampleCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sample</name> <operator>&gt;=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>totalSampleCount</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>totalSampleCount</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>drwav__is_compressed_format_tag</name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sample</name> <operator>&lt;</operator> <name><name>pWav</name><operator>-&gt;</operator><name>compressed</name><operator>.</operator><name>iCurrentSample</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav_seek_to_first_pcm_frame</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sample</name> <operator>&gt;</operator> <name><name>pWav</name><operator>-&gt;</operator><name>compressed</name><operator>.</operator><name>iCurrentSample</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>offset</name> <init>= <expr><name>sample</name> <operator>-</operator> <name><name>pWav</name><operator>-&gt;</operator><name>compressed</name><operator>.</operator><name>iCurrentSample</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int16</name></type> <name><name>devnull</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>samplesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name> <init>= <expr><name>offset</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">2048</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>samplesToRead</name> <operator>=</operator> <literal type="number">2048</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_ADPCM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>samplesRead</name> <operator>=</operator> <call><name>drwav_read_s16__msadpcm</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>devnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_DVI_ADPCM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>samplesRead</name> <operator>=</operator> <call><name>drwav_read_s16__ima</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>devnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>DRWAV_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesRead</name> <operator>!=</operator> <name>samplesToRead</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>-=</operator> <name>samplesRead</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSizeInBytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>currentBytePos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>targetBytePos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>totalSizeInBytes</name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>totalPCMFrameCount</name></name> <operator>*</operator> <call><name>drwav_get_bytes_per_pcm_frame</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drwav_assert</name><argument_list>(<argument><expr><name>totalSizeInBytes</name> <operator>&gt;=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>bytesRemaining</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>currentBytePos</name> <operator>=</operator> <name>totalSizeInBytes</name> <operator>-</operator> <name><name>pWav</name><operator>-&gt;</operator><name>bytesRemaining</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>targetBytePos</name> <operator>=</operator> <name>sample</name> <operator>*</operator> <call><name>drwav_get_bytes_per_sample</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>currentBytePos</name> <operator>&lt;</operator> <name>targetBytePos</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>targetBytePos</name> <operator>-</operator> <name>currentBytePos</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav_seek_to_first_pcm_frame</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>targetBytePos</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>offset32</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>offset</name> <operator>&gt;</operator> <name>INT_MAX</name><operator>)</operator></expr> ?</condition><then> <expr><name>INT_MAX</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><name>offset</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pWav</name><operator>-&gt;</operator><name>onSeek</name></name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><name>offset32</name></expr></argument>, <argument><expr><name>drwav_seek_origin_current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>DRWAV_FALSE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>bytesRemaining</name></name> <operator>-=</operator> <name>offset32</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>-=</operator> <name>offset32</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>DRWAV_TRUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_bool32</name></type> <name>drwav_seek_to_pcm_frame</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>targetFrameIndex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drwav_seek_to_sample</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>targetFrameIndex</name> <operator>*</operator> <name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>drwav_write_raw</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytesToWrite</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytesWritten</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pWav</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>bytesToWrite</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytesWritten</name> <operator>=</operator> <call><name><name>pWav</name><operator>-&gt;</operator><name>onWrite</name></name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>bytesToWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>dataChunkDataSize</name></name> <operator>+=</operator> <name>bytesWritten</name></expr>;</expr_stmt>

<return>return <expr><name>bytesWritten</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_write</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToWrite</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>bytesToWrite</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>bytesWritten</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pRunningData</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pWav</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>samplesToWrite</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytesToWrite</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>samplesToWrite</name> <operator>*</operator> <name><name>pWav</name><operator>-&gt;</operator><name>bitsPerSample</name></name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesToWrite</name> <operator>&gt;</operator> <name>DRWAV_SIZE_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytesWritten</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pRunningData</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>drwav_uint8</name><operator>*</operator><operator>)</operator><name>pData</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>bytesToWrite</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytesJustWritten</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>bytesToWriteThisIteration</name> <init>= <expr><name>bytesToWrite</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesToWriteThisIteration</name> <operator>&gt;</operator> <name>DRWAV_SIZE_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bytesToWriteThisIteration</name> <operator>=</operator> <name>DRWAV_SIZE_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytesJustWritten</name> <operator>=</operator> <call><name>drwav_write_raw</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>bytesToWriteThisIteration</name></expr></argument>, <argument><expr><name>pRunningData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesJustWritten</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytesToWrite</name> <operator>-=</operator> <name>bytesJustWritten</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bytesWritten</name> <operator>+=</operator> <name>bytesJustWritten</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pRunningData</name> <operator>+=</operator> <name>bytesJustWritten</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>bytesWritten</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <name><name>pWav</name><operator>-&gt;</operator><name>bitsPerSample</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_write_pcm_frames</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>framesToWrite</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drwav_write</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>framesToWrite</name> <operator>*</operator> <name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_s16__msadpcm</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSamplesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drwav_assert</name><argument_list>(<argument><expr><name>pWav</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drwav_assert</name><argument_list>(<argument><expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drwav_assert</name><argument_list>(<argument><expr><name>pBufferOut</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pWav</name><operator>-&gt;</operator><name>compressed</name><operator>.</operator><name>iCurrentSample</name></name> <operator>&lt;</operator> <name><name>pWav</name><operator>-&gt;</operator><name>totalSampleCount</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>cachedSampleCount</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>bytesRemainingInBlock</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint8</name></type> <name><name>header</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>pWav</name><operator>-&gt;</operator><name>onRead</name></name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>bytesRemainingInBlock</name></name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>blockAlign</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>predictor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>delta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>drwav__bytes_to_s16</name><argument_list>(<argument><expr><name>header</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drwav_int32</name><operator>)</operator><call><name>drwav__bytes_to_s16</name><argument_list>(<argument><expr><name>header</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drwav_int32</name><operator>)</operator><call><name>drwav__bytes_to_s16</name><argument_list>(<argument><expr><name>header</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>cachedSamples</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>cachedSamples</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>cachedSampleCount</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint8</name></type> <name><name>header</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>pWav</name><operator>-&gt;</operator><name>onRead</name></name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>bytesRemainingInBlock</name></name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>blockAlign</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>predictor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>predictor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>delta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>drwav__bytes_to_s16</name><argument_list>(<argument><expr><name>header</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>delta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>drwav__bytes_to_s16</name><argument_list>(<argument><expr><name>header</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drwav_int32</name><operator>)</operator><call><name>drwav__bytes_to_s16</name><argument_list>(<argument><expr><name>header</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drwav_int32</name><operator>)</operator><call><name>drwav__bytes_to_s16</name><argument_list>(<argument><expr><name>header</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drwav_int32</name><operator>)</operator><call><name>drwav__bytes_to_s16</name><argument_list>(<argument><expr><name>header</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drwav_int32</name><operator>)</operator><call><name>drwav__bytes_to_s16</name><argument_list>(<argument><expr><name>header</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>cachedSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>cachedSamples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>cachedSamples</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>cachedSamples</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>cachedSampleCount</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>cachedSampleCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pWav</name><operator>-&gt;</operator><name>compressed</name><operator>.</operator><name>iCurrentSample</name></name> <operator>&lt;</operator> <name><name>pWav</name><operator>-&gt;</operator><name>totalSampleCount</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pBufferOut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drwav_int16</name><operator>)</operator><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>cachedSamples</name><index>[<expr><call><name>drwav_countof</name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>cachedSamples</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>cachedSampleCount</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>cachedSampleCount</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pBufferOut</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>compressed</name><operator>.</operator><name>iCurrentSample</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>samplesToRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>cachedSampleCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>bytesRemainingInBlock</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>drwav_int32</name></type> <name><name>adaptationTable</name><index>[]</index></name> <init>= <expr><block>{ 

<expr><literal type="number">230</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">307</literal></expr>, <expr><literal type="number">409</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><literal type="number">614</literal></expr>, 

<expr><literal type="number">768</literal></expr>, <expr><literal type="number">614</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><literal type="number">409</literal></expr>, <expr><literal type="number">307</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">230</literal></expr> 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>drwav_int32</name></type> <name><name>coeff1Table</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">256</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">192</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">460</literal></expr>, <expr><literal type="number">392</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>drwav_int32</name></type> <name><name>coeff2Table</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">256</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">208</literal></expr>, <expr><operator>-</operator><literal type="number">232</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint8</name></type> <name>nibbles</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int32</name></type> <name>nibble0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int32</name></type> <name>nibble1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>pWav</name><operator>-&gt;</operator><name>onRead</name></name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nibbles</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>bytesRemainingInBlock</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nibble0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>nibbles</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>(</operator><name>nibbles</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>nibble0</name> <operator>|=</operator> <literal type="number">0xFFFFFFF0UL</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nibble1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>nibbles</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>(</operator><name>nibbles</name> <operator>&amp;</operator> <literal type="number">0x08</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>nibble1</name> <operator>|=</operator> <literal type="number">0xFFFFFFF0UL</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_int32</name></type> <name>newSample0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int32</name></type> <name>newSample1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>newSample0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff1Table</name><index>[<expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>predictor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff2Table</name><index>[<expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>predictor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>newSample0</name> <operator>+=</operator> <name>nibble0</name> <operator>*</operator> <name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>delta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>newSample0</name> <operator>=</operator> <call><name>drwav_clamp</name><argument_list>(<argument><expr><name>newSample0</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">32768</literal></expr></argument>, <argument><expr><literal type="number">32767</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>delta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>adaptationTable</name><index>[<expr><operator>(</operator><operator>(</operator><name>nibbles</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name> <operator>*</operator> <name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>delta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>delta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>delta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>newSample0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>newSample1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff1Table</name><index>[<expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>predictor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff2Table</name><index>[<expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>predictor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>newSample1</name> <operator>+=</operator> <name>nibble1</name> <operator>*</operator> <name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>delta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>newSample1</name> <operator>=</operator> <call><name>drwav_clamp</name><argument_list>(<argument><expr><name>newSample1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">32768</literal></expr></argument>, <argument><expr><literal type="number">32767</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>delta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>adaptationTable</name><index>[<expr><operator>(</operator><operator>(</operator><name>nibbles</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>]</index></name> <operator>*</operator> <name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>delta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>delta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>delta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>newSample1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>cachedSamples</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>newSample0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>cachedSamples</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>newSample1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>cachedSampleCount</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>drwav_int32</name></type> <name>newSample0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int32</name></type> <name>newSample1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>newSample0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff1Table</name><index>[<expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>predictor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff2Table</name><index>[<expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>predictor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>newSample0</name> <operator>+=</operator> <name>nibble0</name> <operator>*</operator> <name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>delta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>newSample0</name> <operator>=</operator> <call><name>drwav_clamp</name><argument_list>(<argument><expr><name>newSample0</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">32768</literal></expr></argument>, <argument><expr><literal type="number">32767</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>delta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>adaptationTable</name><index>[<expr><operator>(</operator><operator>(</operator><name>nibbles</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name> <operator>*</operator> <name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>delta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>delta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>delta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>newSample0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>newSample1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff1Table</name><index>[<expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>predictor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>coeff2Table</name><index>[<expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>predictor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>newSample1</name> <operator>+=</operator> <name>nibble1</name> <operator>*</operator> <name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>delta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>newSample1</name> <operator>=</operator> <call><name>drwav_clamp</name><argument_list>(<argument><expr><name>newSample1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">32768</literal></expr></argument>, <argument><expr><literal type="number">32767</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>delta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>adaptationTable</name><index>[<expr><operator>(</operator><operator>(</operator><name>nibbles</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>]</index></name> <operator>*</operator> <name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>delta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>delta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>delta</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>prevSamples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>newSample1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>cachedSamples</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>newSample0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>cachedSamples</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>newSample1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>msadpcm</name><operator>.</operator><name>cachedSampleCount</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_s16__ima</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSamplesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drwav_assert</name><argument_list>(<argument><expr><name>pWav</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drwav_assert</name><argument_list>(<argument><expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drwav_assert</name><argument_list>(<argument><expr><name>pBufferOut</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pWav</name><operator>-&gt;</operator><name>compressed</name><operator>.</operator><name>iCurrentSample</name></name> <operator>&lt;</operator> <name><name>pWav</name><operator>-&gt;</operator><name>totalSampleCount</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>cachedSampleCount</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>bytesRemainingInBlock</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint8</name></type> <name><name>header</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>pWav</name><operator>-&gt;</operator><name>onRead</name></name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>bytesRemainingInBlock</name></name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>blockAlign</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>predictor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>drwav__bytes_to_s16</name><argument_list>(<argument><expr><name>header</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>stepIndex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>cachedSamples</name><index>[<expr><call><name>drwav_countof</name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>cachedSamples</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>predictor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>cachedSampleCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint8</name></type> <name><name>header</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>pWav</name><operator>-&gt;</operator><name>onRead</name></name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>bytesRemainingInBlock</name></name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>blockAlign</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>predictor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>drwav__bytes_to_s16</name><argument_list>(<argument><expr><name>header</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>stepIndex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>predictor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>drwav__bytes_to_s16</name><argument_list>(<argument><expr><name>header</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>stepIndex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>header</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>cachedSamples</name><index>[<expr><call><name>drwav_countof</name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>cachedSamples</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>predictor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>cachedSamples</name><index>[<expr><call><name>drwav_countof</name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>cachedSamples</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>predictor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>cachedSampleCount</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>cachedSampleCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pWav</name><operator>-&gt;</operator><name>compressed</name><operator>.</operator><name>iCurrentSample</name></name> <operator>&lt;</operator> <name><name>pWav</name><operator>-&gt;</operator><name>totalSampleCount</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pBufferOut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>drwav_int16</name><operator>)</operator><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>cachedSamples</name><index>[<expr><call><name>drwav_countof</name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>cachedSamples</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>cachedSampleCount</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>cachedSampleCount</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pBufferOut</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>compressed</name><operator>.</operator><name>iCurrentSample</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>samplesToRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>cachedSampleCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>bytesRemainingInBlock</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>drwav_int32</name></type> <name><name>indexTable</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>drwav_int32</name></type> <name><name>stepTable</name><index>[<expr><literal type="number">89</literal></expr>]</index></name> <init>= <expr><block>{ 

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, 

<expr><literal type="number">19</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">45</literal></expr>, 

<expr><literal type="number">50</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">118</literal></expr>, 

<expr><literal type="number">130</literal></expr>, <expr><literal type="number">143</literal></expr>, <expr><literal type="number">157</literal></expr>, <expr><literal type="number">173</literal></expr>, <expr><literal type="number">190</literal></expr>, <expr><literal type="number">209</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">253</literal></expr>, <expr><literal type="number">279</literal></expr>, <expr><literal type="number">307</literal></expr>,

<expr><literal type="number">337</literal></expr>, <expr><literal type="number">371</literal></expr>, <expr><literal type="number">408</literal></expr>, <expr><literal type="number">449</literal></expr>, <expr><literal type="number">494</literal></expr>, <expr><literal type="number">544</literal></expr>, <expr><literal type="number">598</literal></expr>, <expr><literal type="number">658</literal></expr>, <expr><literal type="number">724</literal></expr>, <expr><literal type="number">796</literal></expr>,

<expr><literal type="number">876</literal></expr>, <expr><literal type="number">963</literal></expr>, <expr><literal type="number">1060</literal></expr>, <expr><literal type="number">1166</literal></expr>, <expr><literal type="number">1282</literal></expr>, <expr><literal type="number">1411</literal></expr>, <expr><literal type="number">1552</literal></expr>, <expr><literal type="number">1707</literal></expr>, <expr><literal type="number">1878</literal></expr>, <expr><literal type="number">2066</literal></expr>, 

<expr><literal type="number">2272</literal></expr>, <expr><literal type="number">2499</literal></expr>, <expr><literal type="number">2749</literal></expr>, <expr><literal type="number">3024</literal></expr>, <expr><literal type="number">3327</literal></expr>, <expr><literal type="number">3660</literal></expr>, <expr><literal type="number">4026</literal></expr>, <expr><literal type="number">4428</literal></expr>, <expr><literal type="number">4871</literal></expr>, <expr><literal type="number">5358</literal></expr>,

<expr><literal type="number">5894</literal></expr>, <expr><literal type="number">6484</literal></expr>, <expr><literal type="number">7132</literal></expr>, <expr><literal type="number">7845</literal></expr>, <expr><literal type="number">8630</literal></expr>, <expr><literal type="number">9493</literal></expr>, <expr><literal type="number">10442</literal></expr>, <expr><literal type="number">11487</literal></expr>, <expr><literal type="number">12635</literal></expr>, <expr><literal type="number">13899</literal></expr>, 

<expr><literal type="number">15289</literal></expr>, <expr><literal type="number">16818</literal></expr>, <expr><literal type="number">18500</literal></expr>, <expr><literal type="number">20350</literal></expr>, <expr><literal type="number">22385</literal></expr>, <expr><literal type="number">24623</literal></expr>, <expr><literal type="number">27086</literal></expr>, <expr><literal type="number">29794</literal></expr>, <expr><literal type="number">32767</literal></expr> 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>iChannel</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>cachedSampleCount</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>iChannel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iChannel</name> <operator>&lt;</operator> <name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>iChannel</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>iByte</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint8</name></type> <name><name>nibbles</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>pWav</name><operator>-&gt;</operator><name>onRead</name></name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nibbles</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>bytesRemainingInBlock</name></name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>iByte</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iByte</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>iByte</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint8</name></type> <name>nibble0</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>nibbles</name><index>[<expr><name>iByte</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint8</name></type> <name>nibble1</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>nibbles</name><index>[<expr><name>iByte</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int32</name></type> <name>step</name> <init>= <expr><name><name>stepTable</name><index>[<expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>stepIndex</name><index>[<expr><name>iChannel</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int32</name></type> <name>predictor</name> <init>= <expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>predictor</name><index>[<expr><name>iChannel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int32</name></type> <name>diff</name> <init>= <expr><name>step</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nibble0</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>diff</name> <operator>+=</operator> <name>step</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nibble0</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>diff</name> <operator>+=</operator> <name>step</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nibble0</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>diff</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nibble0</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>-</operator><name>diff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>predictor</name> <operator>=</operator> <call><name>drwav_clamp</name><argument_list>(<argument><expr><name>predictor</name> <operator>+</operator> <name>diff</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">32768</literal></expr></argument>, <argument><expr><literal type="number">32767</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>predictor</name><index>[<expr><name>iChannel</name></expr>]</index></name> <operator>=</operator> <name>predictor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>stepIndex</name><index>[<expr><name>iChannel</name></expr>]</index></name> <operator>=</operator> <call><name>drwav_clamp</name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>stepIndex</name><index>[<expr><name>iChannel</name></expr>]</index></name> <operator>+</operator> <name><name>indexTable</name><index>[<expr><name>nibble0</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>drwav_int32</name><operator>)</operator><call><name>drwav_countof</name><argument_list>(<argument><expr><name>stepTable</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>cachedSamples</name><index>[<expr><operator>(</operator><call><name>drwav_countof</name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>cachedSamples</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>cachedSampleCount</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>iByte</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal><operator>)</operator><operator>*</operator><name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <name>iChannel</name></expr>]</index></name> <operator>=</operator> <name>predictor</name></expr>;</expr_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>stepTable</name><index>[<expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>stepIndex</name><index>[<expr><name>iChannel</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>predictor</name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>predictor</name><index>[<expr><name>iChannel</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>step</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nibble1</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>diff</name> <operator>+=</operator> <name>step</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nibble1</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>diff</name> <operator>+=</operator> <name>step</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nibble1</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>diff</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nibble1</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>-</operator><name>diff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>predictor</name> <operator>=</operator> <call><name>drwav_clamp</name><argument_list>(<argument><expr><name>predictor</name> <operator>+</operator> <name>diff</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">32768</literal></expr></argument>, <argument><expr><literal type="number">32767</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>predictor</name><index>[<expr><name>iChannel</name></expr>]</index></name> <operator>=</operator> <name>predictor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>stepIndex</name><index>[<expr><name>iChannel</name></expr>]</index></name> <operator>=</operator> <call><name>drwav_clamp</name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>stepIndex</name><index>[<expr><name>iChannel</name></expr>]</index></name> <operator>+</operator> <name><name>indexTable</name><index>[<expr><name>nibble1</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>drwav_int32</name><operator>)</operator><call><name>drwav_countof</name><argument_list>(<argument><expr><name>stepTable</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>cachedSamples</name><index>[<expr><operator>(</operator><call><name>drwav_countof</name><argument_list>(<argument><expr><name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>cachedSamples</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>pWav</name><operator>-&gt;</operator><name>ima</name><operator>.</operator><name>cachedSampleCount</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>iByte</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <name>iChannel</name></expr>]</index></name> <operator>=</operator> <name>predictor</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_WAV_NO_CONVERSION_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name><name>g_drwavAlawTable</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0xEA80</literal></expr>, <expr><literal type="number">0xEB80</literal></expr>, <expr><literal type="number">0xE880</literal></expr>, <expr><literal type="number">0xE980</literal></expr>, <expr><literal type="number">0xEE80</literal></expr>, <expr><literal type="number">0xEF80</literal></expr>, <expr><literal type="number">0xEC80</literal></expr>, <expr><literal type="number">0xED80</literal></expr>, <expr><literal type="number">0xE280</literal></expr>, <expr><literal type="number">0xE380</literal></expr>, <expr><literal type="number">0xE080</literal></expr>, <expr><literal type="number">0xE180</literal></expr>, <expr><literal type="number">0xE680</literal></expr>, <expr><literal type="number">0xE780</literal></expr>, <expr><literal type="number">0xE480</literal></expr>, <expr><literal type="number">0xE580</literal></expr>, 

<expr><literal type="number">0xF540</literal></expr>, <expr><literal type="number">0xF5C0</literal></expr>, <expr><literal type="number">0xF440</literal></expr>, <expr><literal type="number">0xF4C0</literal></expr>, <expr><literal type="number">0xF740</literal></expr>, <expr><literal type="number">0xF7C0</literal></expr>, <expr><literal type="number">0xF640</literal></expr>, <expr><literal type="number">0xF6C0</literal></expr>, <expr><literal type="number">0xF140</literal></expr>, <expr><literal type="number">0xF1C0</literal></expr>, <expr><literal type="number">0xF040</literal></expr>, <expr><literal type="number">0xF0C0</literal></expr>, <expr><literal type="number">0xF340</literal></expr>, <expr><literal type="number">0xF3C0</literal></expr>, <expr><literal type="number">0xF240</literal></expr>, <expr><literal type="number">0xF2C0</literal></expr>, 

<expr><literal type="number">0xAA00</literal></expr>, <expr><literal type="number">0xAE00</literal></expr>, <expr><literal type="number">0xA200</literal></expr>, <expr><literal type="number">0xA600</literal></expr>, <expr><literal type="number">0xBA00</literal></expr>, <expr><literal type="number">0xBE00</literal></expr>, <expr><literal type="number">0xB200</literal></expr>, <expr><literal type="number">0xB600</literal></expr>, <expr><literal type="number">0x8A00</literal></expr>, <expr><literal type="number">0x8E00</literal></expr>, <expr><literal type="number">0x8200</literal></expr>, <expr><literal type="number">0x8600</literal></expr>, <expr><literal type="number">0x9A00</literal></expr>, <expr><literal type="number">0x9E00</literal></expr>, <expr><literal type="number">0x9200</literal></expr>, <expr><literal type="number">0x9600</literal></expr>, 

<expr><literal type="number">0xD500</literal></expr>, <expr><literal type="number">0xD700</literal></expr>, <expr><literal type="number">0xD100</literal></expr>, <expr><literal type="number">0xD300</literal></expr>, <expr><literal type="number">0xDD00</literal></expr>, <expr><literal type="number">0xDF00</literal></expr>, <expr><literal type="number">0xD900</literal></expr>, <expr><literal type="number">0xDB00</literal></expr>, <expr><literal type="number">0xC500</literal></expr>, <expr><literal type="number">0xC700</literal></expr>, <expr><literal type="number">0xC100</literal></expr>, <expr><literal type="number">0xC300</literal></expr>, <expr><literal type="number">0xCD00</literal></expr>, <expr><literal type="number">0xCF00</literal></expr>, <expr><literal type="number">0xC900</literal></expr>, <expr><literal type="number">0xCB00</literal></expr>, 

<expr><literal type="number">0xFEA8</literal></expr>, <expr><literal type="number">0xFEB8</literal></expr>, <expr><literal type="number">0xFE88</literal></expr>, <expr><literal type="number">0xFE98</literal></expr>, <expr><literal type="number">0xFEE8</literal></expr>, <expr><literal type="number">0xFEF8</literal></expr>, <expr><literal type="number">0xFEC8</literal></expr>, <expr><literal type="number">0xFED8</literal></expr>, <expr><literal type="number">0xFE28</literal></expr>, <expr><literal type="number">0xFE38</literal></expr>, <expr><literal type="number">0xFE08</literal></expr>, <expr><literal type="number">0xFE18</literal></expr>, <expr><literal type="number">0xFE68</literal></expr>, <expr><literal type="number">0xFE78</literal></expr>, <expr><literal type="number">0xFE48</literal></expr>, <expr><literal type="number">0xFE58</literal></expr>, 

<expr><literal type="number">0xFFA8</literal></expr>, <expr><literal type="number">0xFFB8</literal></expr>, <expr><literal type="number">0xFF88</literal></expr>, <expr><literal type="number">0xFF98</literal></expr>, <expr><literal type="number">0xFFE8</literal></expr>, <expr><literal type="number">0xFFF8</literal></expr>, <expr><literal type="number">0xFFC8</literal></expr>, <expr><literal type="number">0xFFD8</literal></expr>, <expr><literal type="number">0xFF28</literal></expr>, <expr><literal type="number">0xFF38</literal></expr>, <expr><literal type="number">0xFF08</literal></expr>, <expr><literal type="number">0xFF18</literal></expr>, <expr><literal type="number">0xFF68</literal></expr>, <expr><literal type="number">0xFF78</literal></expr>, <expr><literal type="number">0xFF48</literal></expr>, <expr><literal type="number">0xFF58</literal></expr>, 

<expr><literal type="number">0xFAA0</literal></expr>, <expr><literal type="number">0xFAE0</literal></expr>, <expr><literal type="number">0xFA20</literal></expr>, <expr><literal type="number">0xFA60</literal></expr>, <expr><literal type="number">0xFBA0</literal></expr>, <expr><literal type="number">0xFBE0</literal></expr>, <expr><literal type="number">0xFB20</literal></expr>, <expr><literal type="number">0xFB60</literal></expr>, <expr><literal type="number">0xF8A0</literal></expr>, <expr><literal type="number">0xF8E0</literal></expr>, <expr><literal type="number">0xF820</literal></expr>, <expr><literal type="number">0xF860</literal></expr>, <expr><literal type="number">0xF9A0</literal></expr>, <expr><literal type="number">0xF9E0</literal></expr>, <expr><literal type="number">0xF920</literal></expr>, <expr><literal type="number">0xF960</literal></expr>, 

<expr><literal type="number">0xFD50</literal></expr>, <expr><literal type="number">0xFD70</literal></expr>, <expr><literal type="number">0xFD10</literal></expr>, <expr><literal type="number">0xFD30</literal></expr>, <expr><literal type="number">0xFDD0</literal></expr>, <expr><literal type="number">0xFDF0</literal></expr>, <expr><literal type="number">0xFD90</literal></expr>, <expr><literal type="number">0xFDB0</literal></expr>, <expr><literal type="number">0xFC50</literal></expr>, <expr><literal type="number">0xFC70</literal></expr>, <expr><literal type="number">0xFC10</literal></expr>, <expr><literal type="number">0xFC30</literal></expr>, <expr><literal type="number">0xFCD0</literal></expr>, <expr><literal type="number">0xFCF0</literal></expr>, <expr><literal type="number">0xFC90</literal></expr>, <expr><literal type="number">0xFCB0</literal></expr>, 

<expr><literal type="number">0x1580</literal></expr>, <expr><literal type="number">0x1480</literal></expr>, <expr><literal type="number">0x1780</literal></expr>, <expr><literal type="number">0x1680</literal></expr>, <expr><literal type="number">0x1180</literal></expr>, <expr><literal type="number">0x1080</literal></expr>, <expr><literal type="number">0x1380</literal></expr>, <expr><literal type="number">0x1280</literal></expr>, <expr><literal type="number">0x1D80</literal></expr>, <expr><literal type="number">0x1C80</literal></expr>, <expr><literal type="number">0x1F80</literal></expr>, <expr><literal type="number">0x1E80</literal></expr>, <expr><literal type="number">0x1980</literal></expr>, <expr><literal type="number">0x1880</literal></expr>, <expr><literal type="number">0x1B80</literal></expr>, <expr><literal type="number">0x1A80</literal></expr>, 

<expr><literal type="number">0x0AC0</literal></expr>, <expr><literal type="number">0x0A40</literal></expr>, <expr><literal type="number">0x0BC0</literal></expr>, <expr><literal type="number">0x0B40</literal></expr>, <expr><literal type="number">0x08C0</literal></expr>, <expr><literal type="number">0x0840</literal></expr>, <expr><literal type="number">0x09C0</literal></expr>, <expr><literal type="number">0x0940</literal></expr>, <expr><literal type="number">0x0EC0</literal></expr>, <expr><literal type="number">0x0E40</literal></expr>, <expr><literal type="number">0x0FC0</literal></expr>, <expr><literal type="number">0x0F40</literal></expr>, <expr><literal type="number">0x0CC0</literal></expr>, <expr><literal type="number">0x0C40</literal></expr>, <expr><literal type="number">0x0DC0</literal></expr>, <expr><literal type="number">0x0D40</literal></expr>, 

<expr><literal type="number">0x5600</literal></expr>, <expr><literal type="number">0x5200</literal></expr>, <expr><literal type="number">0x5E00</literal></expr>, <expr><literal type="number">0x5A00</literal></expr>, <expr><literal type="number">0x4600</literal></expr>, <expr><literal type="number">0x4200</literal></expr>, <expr><literal type="number">0x4E00</literal></expr>, <expr><literal type="number">0x4A00</literal></expr>, <expr><literal type="number">0x7600</literal></expr>, <expr><literal type="number">0x7200</literal></expr>, <expr><literal type="number">0x7E00</literal></expr>, <expr><literal type="number">0x7A00</literal></expr>, <expr><literal type="number">0x6600</literal></expr>, <expr><literal type="number">0x6200</literal></expr>, <expr><literal type="number">0x6E00</literal></expr>, <expr><literal type="number">0x6A00</literal></expr>, 

<expr><literal type="number">0x2B00</literal></expr>, <expr><literal type="number">0x2900</literal></expr>, <expr><literal type="number">0x2F00</literal></expr>, <expr><literal type="number">0x2D00</literal></expr>, <expr><literal type="number">0x2300</literal></expr>, <expr><literal type="number">0x2100</literal></expr>, <expr><literal type="number">0x2700</literal></expr>, <expr><literal type="number">0x2500</literal></expr>, <expr><literal type="number">0x3B00</literal></expr>, <expr><literal type="number">0x3900</literal></expr>, <expr><literal type="number">0x3F00</literal></expr>, <expr><literal type="number">0x3D00</literal></expr>, <expr><literal type="number">0x3300</literal></expr>, <expr><literal type="number">0x3100</literal></expr>, <expr><literal type="number">0x3700</literal></expr>, <expr><literal type="number">0x3500</literal></expr>, 

<expr><literal type="number">0x0158</literal></expr>, <expr><literal type="number">0x0148</literal></expr>, <expr><literal type="number">0x0178</literal></expr>, <expr><literal type="number">0x0168</literal></expr>, <expr><literal type="number">0x0118</literal></expr>, <expr><literal type="number">0x0108</literal></expr>, <expr><literal type="number">0x0138</literal></expr>, <expr><literal type="number">0x0128</literal></expr>, <expr><literal type="number">0x01D8</literal></expr>, <expr><literal type="number">0x01C8</literal></expr>, <expr><literal type="number">0x01F8</literal></expr>, <expr><literal type="number">0x01E8</literal></expr>, <expr><literal type="number">0x0198</literal></expr>, <expr><literal type="number">0x0188</literal></expr>, <expr><literal type="number">0x01B8</literal></expr>, <expr><literal type="number">0x01A8</literal></expr>, 

<expr><literal type="number">0x0058</literal></expr>, <expr><literal type="number">0x0048</literal></expr>, <expr><literal type="number">0x0078</literal></expr>, <expr><literal type="number">0x0068</literal></expr>, <expr><literal type="number">0x0018</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0038</literal></expr>, <expr><literal type="number">0x0028</literal></expr>, <expr><literal type="number">0x00D8</literal></expr>, <expr><literal type="number">0x00C8</literal></expr>, <expr><literal type="number">0x00F8</literal></expr>, <expr><literal type="number">0x00E8</literal></expr>, <expr><literal type="number">0x0098</literal></expr>, <expr><literal type="number">0x0088</literal></expr>, <expr><literal type="number">0x00B8</literal></expr>, <expr><literal type="number">0x00A8</literal></expr>, 

<expr><literal type="number">0x0560</literal></expr>, <expr><literal type="number">0x0520</literal></expr>, <expr><literal type="number">0x05E0</literal></expr>, <expr><literal type="number">0x05A0</literal></expr>, <expr><literal type="number">0x0460</literal></expr>, <expr><literal type="number">0x0420</literal></expr>, <expr><literal type="number">0x04E0</literal></expr>, <expr><literal type="number">0x04A0</literal></expr>, <expr><literal type="number">0x0760</literal></expr>, <expr><literal type="number">0x0720</literal></expr>, <expr><literal type="number">0x07E0</literal></expr>, <expr><literal type="number">0x07A0</literal></expr>, <expr><literal type="number">0x0660</literal></expr>, <expr><literal type="number">0x0620</literal></expr>, <expr><literal type="number">0x06E0</literal></expr>, <expr><literal type="number">0x06A0</literal></expr>, 

<expr><literal type="number">0x02B0</literal></expr>, <expr><literal type="number">0x0290</literal></expr>, <expr><literal type="number">0x02F0</literal></expr>, <expr><literal type="number">0x02D0</literal></expr>, <expr><literal type="number">0x0230</literal></expr>, <expr><literal type="number">0x0210</literal></expr>, <expr><literal type="number">0x0270</literal></expr>, <expr><literal type="number">0x0250</literal></expr>, <expr><literal type="number">0x03B0</literal></expr>, <expr><literal type="number">0x0390</literal></expr>, <expr><literal type="number">0x03F0</literal></expr>, <expr><literal type="number">0x03D0</literal></expr>, <expr><literal type="number">0x0330</literal></expr>, <expr><literal type="number">0x0310</literal></expr>, <expr><literal type="number">0x0370</literal></expr>, <expr><literal type="number">0x0350</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name><name>g_drwavMulawTable</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x8284</literal></expr>, <expr><literal type="number">0x8684</literal></expr>, <expr><literal type="number">0x8A84</literal></expr>, <expr><literal type="number">0x8E84</literal></expr>, <expr><literal type="number">0x9284</literal></expr>, <expr><literal type="number">0x9684</literal></expr>, <expr><literal type="number">0x9A84</literal></expr>, <expr><literal type="number">0x9E84</literal></expr>, <expr><literal type="number">0xA284</literal></expr>, <expr><literal type="number">0xA684</literal></expr>, <expr><literal type="number">0xAA84</literal></expr>, <expr><literal type="number">0xAE84</literal></expr>, <expr><literal type="number">0xB284</literal></expr>, <expr><literal type="number">0xB684</literal></expr>, <expr><literal type="number">0xBA84</literal></expr>, <expr><literal type="number">0xBE84</literal></expr>, 

<expr><literal type="number">0xC184</literal></expr>, <expr><literal type="number">0xC384</literal></expr>, <expr><literal type="number">0xC584</literal></expr>, <expr><literal type="number">0xC784</literal></expr>, <expr><literal type="number">0xC984</literal></expr>, <expr><literal type="number">0xCB84</literal></expr>, <expr><literal type="number">0xCD84</literal></expr>, <expr><literal type="number">0xCF84</literal></expr>, <expr><literal type="number">0xD184</literal></expr>, <expr><literal type="number">0xD384</literal></expr>, <expr><literal type="number">0xD584</literal></expr>, <expr><literal type="number">0xD784</literal></expr>, <expr><literal type="number">0xD984</literal></expr>, <expr><literal type="number">0xDB84</literal></expr>, <expr><literal type="number">0xDD84</literal></expr>, <expr><literal type="number">0xDF84</literal></expr>, 

<expr><literal type="number">0xE104</literal></expr>, <expr><literal type="number">0xE204</literal></expr>, <expr><literal type="number">0xE304</literal></expr>, <expr><literal type="number">0xE404</literal></expr>, <expr><literal type="number">0xE504</literal></expr>, <expr><literal type="number">0xE604</literal></expr>, <expr><literal type="number">0xE704</literal></expr>, <expr><literal type="number">0xE804</literal></expr>, <expr><literal type="number">0xE904</literal></expr>, <expr><literal type="number">0xEA04</literal></expr>, <expr><literal type="number">0xEB04</literal></expr>, <expr><literal type="number">0xEC04</literal></expr>, <expr><literal type="number">0xED04</literal></expr>, <expr><literal type="number">0xEE04</literal></expr>, <expr><literal type="number">0xEF04</literal></expr>, <expr><literal type="number">0xF004</literal></expr>, 

<expr><literal type="number">0xF0C4</literal></expr>, <expr><literal type="number">0xF144</literal></expr>, <expr><literal type="number">0xF1C4</literal></expr>, <expr><literal type="number">0xF244</literal></expr>, <expr><literal type="number">0xF2C4</literal></expr>, <expr><literal type="number">0xF344</literal></expr>, <expr><literal type="number">0xF3C4</literal></expr>, <expr><literal type="number">0xF444</literal></expr>, <expr><literal type="number">0xF4C4</literal></expr>, <expr><literal type="number">0xF544</literal></expr>, <expr><literal type="number">0xF5C4</literal></expr>, <expr><literal type="number">0xF644</literal></expr>, <expr><literal type="number">0xF6C4</literal></expr>, <expr><literal type="number">0xF744</literal></expr>, <expr><literal type="number">0xF7C4</literal></expr>, <expr><literal type="number">0xF844</literal></expr>, 

<expr><literal type="number">0xF8A4</literal></expr>, <expr><literal type="number">0xF8E4</literal></expr>, <expr><literal type="number">0xF924</literal></expr>, <expr><literal type="number">0xF964</literal></expr>, <expr><literal type="number">0xF9A4</literal></expr>, <expr><literal type="number">0xF9E4</literal></expr>, <expr><literal type="number">0xFA24</literal></expr>, <expr><literal type="number">0xFA64</literal></expr>, <expr><literal type="number">0xFAA4</literal></expr>, <expr><literal type="number">0xFAE4</literal></expr>, <expr><literal type="number">0xFB24</literal></expr>, <expr><literal type="number">0xFB64</literal></expr>, <expr><literal type="number">0xFBA4</literal></expr>, <expr><literal type="number">0xFBE4</literal></expr>, <expr><literal type="number">0xFC24</literal></expr>, <expr><literal type="number">0xFC64</literal></expr>, 

<expr><literal type="number">0xFC94</literal></expr>, <expr><literal type="number">0xFCB4</literal></expr>, <expr><literal type="number">0xFCD4</literal></expr>, <expr><literal type="number">0xFCF4</literal></expr>, <expr><literal type="number">0xFD14</literal></expr>, <expr><literal type="number">0xFD34</literal></expr>, <expr><literal type="number">0xFD54</literal></expr>, <expr><literal type="number">0xFD74</literal></expr>, <expr><literal type="number">0xFD94</literal></expr>, <expr><literal type="number">0xFDB4</literal></expr>, <expr><literal type="number">0xFDD4</literal></expr>, <expr><literal type="number">0xFDF4</literal></expr>, <expr><literal type="number">0xFE14</literal></expr>, <expr><literal type="number">0xFE34</literal></expr>, <expr><literal type="number">0xFE54</literal></expr>, <expr><literal type="number">0xFE74</literal></expr>, 

<expr><literal type="number">0xFE8C</literal></expr>, <expr><literal type="number">0xFE9C</literal></expr>, <expr><literal type="number">0xFEAC</literal></expr>, <expr><literal type="number">0xFEBC</literal></expr>, <expr><literal type="number">0xFECC</literal></expr>, <expr><literal type="number">0xFEDC</literal></expr>, <expr><literal type="number">0xFEEC</literal></expr>, <expr><literal type="number">0xFEFC</literal></expr>, <expr><literal type="number">0xFF0C</literal></expr>, <expr><literal type="number">0xFF1C</literal></expr>, <expr><literal type="number">0xFF2C</literal></expr>, <expr><literal type="number">0xFF3C</literal></expr>, <expr><literal type="number">0xFF4C</literal></expr>, <expr><literal type="number">0xFF5C</literal></expr>, <expr><literal type="number">0xFF6C</literal></expr>, <expr><literal type="number">0xFF7C</literal></expr>, 

<expr><literal type="number">0xFF88</literal></expr>, <expr><literal type="number">0xFF90</literal></expr>, <expr><literal type="number">0xFF98</literal></expr>, <expr><literal type="number">0xFFA0</literal></expr>, <expr><literal type="number">0xFFA8</literal></expr>, <expr><literal type="number">0xFFB0</literal></expr>, <expr><literal type="number">0xFFB8</literal></expr>, <expr><literal type="number">0xFFC0</literal></expr>, <expr><literal type="number">0xFFC8</literal></expr>, <expr><literal type="number">0xFFD0</literal></expr>, <expr><literal type="number">0xFFD8</literal></expr>, <expr><literal type="number">0xFFE0</literal></expr>, <expr><literal type="number">0xFFE8</literal></expr>, <expr><literal type="number">0xFFF0</literal></expr>, <expr><literal type="number">0xFFF8</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, 

<expr><literal type="number">0x7D7C</literal></expr>, <expr><literal type="number">0x797C</literal></expr>, <expr><literal type="number">0x757C</literal></expr>, <expr><literal type="number">0x717C</literal></expr>, <expr><literal type="number">0x6D7C</literal></expr>, <expr><literal type="number">0x697C</literal></expr>, <expr><literal type="number">0x657C</literal></expr>, <expr><literal type="number">0x617C</literal></expr>, <expr><literal type="number">0x5D7C</literal></expr>, <expr><literal type="number">0x597C</literal></expr>, <expr><literal type="number">0x557C</literal></expr>, <expr><literal type="number">0x517C</literal></expr>, <expr><literal type="number">0x4D7C</literal></expr>, <expr><literal type="number">0x497C</literal></expr>, <expr><literal type="number">0x457C</literal></expr>, <expr><literal type="number">0x417C</literal></expr>, 

<expr><literal type="number">0x3E7C</literal></expr>, <expr><literal type="number">0x3C7C</literal></expr>, <expr><literal type="number">0x3A7C</literal></expr>, <expr><literal type="number">0x387C</literal></expr>, <expr><literal type="number">0x367C</literal></expr>, <expr><literal type="number">0x347C</literal></expr>, <expr><literal type="number">0x327C</literal></expr>, <expr><literal type="number">0x307C</literal></expr>, <expr><literal type="number">0x2E7C</literal></expr>, <expr><literal type="number">0x2C7C</literal></expr>, <expr><literal type="number">0x2A7C</literal></expr>, <expr><literal type="number">0x287C</literal></expr>, <expr><literal type="number">0x267C</literal></expr>, <expr><literal type="number">0x247C</literal></expr>, <expr><literal type="number">0x227C</literal></expr>, <expr><literal type="number">0x207C</literal></expr>, 

<expr><literal type="number">0x1EFC</literal></expr>, <expr><literal type="number">0x1DFC</literal></expr>, <expr><literal type="number">0x1CFC</literal></expr>, <expr><literal type="number">0x1BFC</literal></expr>, <expr><literal type="number">0x1AFC</literal></expr>, <expr><literal type="number">0x19FC</literal></expr>, <expr><literal type="number">0x18FC</literal></expr>, <expr><literal type="number">0x17FC</literal></expr>, <expr><literal type="number">0x16FC</literal></expr>, <expr><literal type="number">0x15FC</literal></expr>, <expr><literal type="number">0x14FC</literal></expr>, <expr><literal type="number">0x13FC</literal></expr>, <expr><literal type="number">0x12FC</literal></expr>, <expr><literal type="number">0x11FC</literal></expr>, <expr><literal type="number">0x10FC</literal></expr>, <expr><literal type="number">0x0FFC</literal></expr>, 

<expr><literal type="number">0x0F3C</literal></expr>, <expr><literal type="number">0x0EBC</literal></expr>, <expr><literal type="number">0x0E3C</literal></expr>, <expr><literal type="number">0x0DBC</literal></expr>, <expr><literal type="number">0x0D3C</literal></expr>, <expr><literal type="number">0x0CBC</literal></expr>, <expr><literal type="number">0x0C3C</literal></expr>, <expr><literal type="number">0x0BBC</literal></expr>, <expr><literal type="number">0x0B3C</literal></expr>, <expr><literal type="number">0x0ABC</literal></expr>, <expr><literal type="number">0x0A3C</literal></expr>, <expr><literal type="number">0x09BC</literal></expr>, <expr><literal type="number">0x093C</literal></expr>, <expr><literal type="number">0x08BC</literal></expr>, <expr><literal type="number">0x083C</literal></expr>, <expr><literal type="number">0x07BC</literal></expr>, 

<expr><literal type="number">0x075C</literal></expr>, <expr><literal type="number">0x071C</literal></expr>, <expr><literal type="number">0x06DC</literal></expr>, <expr><literal type="number">0x069C</literal></expr>, <expr><literal type="number">0x065C</literal></expr>, <expr><literal type="number">0x061C</literal></expr>, <expr><literal type="number">0x05DC</literal></expr>, <expr><literal type="number">0x059C</literal></expr>, <expr><literal type="number">0x055C</literal></expr>, <expr><literal type="number">0x051C</literal></expr>, <expr><literal type="number">0x04DC</literal></expr>, <expr><literal type="number">0x049C</literal></expr>, <expr><literal type="number">0x045C</literal></expr>, <expr><literal type="number">0x041C</literal></expr>, <expr><literal type="number">0x03DC</literal></expr>, <expr><literal type="number">0x039C</literal></expr>, 

<expr><literal type="number">0x036C</literal></expr>, <expr><literal type="number">0x034C</literal></expr>, <expr><literal type="number">0x032C</literal></expr>, <expr><literal type="number">0x030C</literal></expr>, <expr><literal type="number">0x02EC</literal></expr>, <expr><literal type="number">0x02CC</literal></expr>, <expr><literal type="number">0x02AC</literal></expr>, <expr><literal type="number">0x028C</literal></expr>, <expr><literal type="number">0x026C</literal></expr>, <expr><literal type="number">0x024C</literal></expr>, <expr><literal type="number">0x022C</literal></expr>, <expr><literal type="number">0x020C</literal></expr>, <expr><literal type="number">0x01EC</literal></expr>, <expr><literal type="number">0x01CC</literal></expr>, <expr><literal type="number">0x01AC</literal></expr>, <expr><literal type="number">0x018C</literal></expr>, 

<expr><literal type="number">0x0174</literal></expr>, <expr><literal type="number">0x0164</literal></expr>, <expr><literal type="number">0x0154</literal></expr>, <expr><literal type="number">0x0144</literal></expr>, <expr><literal type="number">0x0134</literal></expr>, <expr><literal type="number">0x0124</literal></expr>, <expr><literal type="number">0x0114</literal></expr>, <expr><literal type="number">0x0104</literal></expr>, <expr><literal type="number">0x00F4</literal></expr>, <expr><literal type="number">0x00E4</literal></expr>, <expr><literal type="number">0x00D4</literal></expr>, <expr><literal type="number">0x00C4</literal></expr>, <expr><literal type="number">0x00B4</literal></expr>, <expr><literal type="number">0x00A4</literal></expr>, <expr><literal type="number">0x0094</literal></expr>, <expr><literal type="number">0x0084</literal></expr>, 

<expr><literal type="number">0x0078</literal></expr>, <expr><literal type="number">0x0070</literal></expr>, <expr><literal type="number">0x0068</literal></expr>, <expr><literal type="number">0x0060</literal></expr>, <expr><literal type="number">0x0058</literal></expr>, <expr><literal type="number">0x0050</literal></expr>, <expr><literal type="number">0x0048</literal></expr>, <expr><literal type="number">0x0040</literal></expr>, <expr><literal type="number">0x0038</literal></expr>, <expr><literal type="number">0x0030</literal></expr>, <expr><literal type="number">0x0028</literal></expr>, <expr><literal type="number">0x0020</literal></expr>, <expr><literal type="number">0x0018</literal></expr>, <expr><literal type="number">0x0010</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0000</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>DRWAV_INLINE</name> <name>drwav_int16</name></type> <name>drwav__alaw_to_s16</name><parameter_list>(<parameter><decl><type><name>drwav_uint8</name></type> <name>sampleIn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>short</name><operator>)</operator><name><name>g_drwavAlawTable</name><index>[<expr><name>sampleIn</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DRWAV_INLINE</name> <name>drwav_int16</name></type> <name>drwav__mulaw_to_s16</name><parameter_list>(<parameter><decl><type><name>drwav_uint8</name></type> <name>sampleIn</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>short</name><operator>)</operator><name><name>g_drwavMulawTable</name><index>[<expr><name>sampleIn</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drwav__pcm_to_s16</name><parameter_list>(<parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>totalSampleCount</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bytesPerSample</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_u8_to_s16</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>pIn</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalSampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>drwav_int16</name><operator>*</operator><operator>)</operator><name>pIn</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_s24_to_s16</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>pIn</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_s32_to_s16</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>drwav_int32</name><operator>*</operator><operator>)</operator><name>pIn</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_zero_memory</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>totalSampleCount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pOut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalSampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>sample</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>shift</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>bytesPerSample</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bytesPerSample</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sample</name> <operator>|=</operator> <operator>(</operator><name>drwav_uint64</name><operator>)</operator><operator>(</operator><name><name>pIn</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pIn</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>drwav_int16</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drwav_int64</name><operator>)</operator><name>sample</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drwav__ieee_to_s16</name><parameter_list>(<parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>totalSampleCount</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bytesPerSample</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_f32_to_s16</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>float</name><operator>*</operator><operator>)</operator><name>pIn</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_f64_to_s16</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>double</name><operator>*</operator><operator>)</operator><name>pIn</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>drwav_zero_memory</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>totalSampleCount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pOut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_s16__pcm</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>bytesPerSample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSamplesRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sampleData</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_PCM</name> <operator>&amp;&amp;</operator> <name><name>pWav</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drwav_read</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytesPerSample</name> <operator>=</operator> <call><name>drwav_get_bytes_per_sample</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>samplesRead</name> <init>= <expr><call><name>drwav_read</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><call><name>drwav_min</name><argument_list>(<argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleData</name></expr></argument>)</argument_list></sizeof><operator>/</operator><name>bytesPerSample</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drwav__pcm_to_s16</name><argument_list>(<argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>samplesRead</name></expr></argument>, <argument><expr><name>bytesPerSample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pBufferOut</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_s16__ieee</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSamplesRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sampleData</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>bytesPerSample</name> <init>= <expr><call><name>drwav_get_bytes_per_sample</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>samplesRead</name> <init>= <expr><call><name>drwav_read</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><call><name>drwav_min</name><argument_list>(<argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleData</name></expr></argument>)</argument_list></sizeof><operator>/</operator><name>bytesPerSample</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drwav__ieee_to_s16</name><argument_list>(<argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>samplesRead</name></expr></argument>, <argument><expr><name>bytesPerSample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pBufferOut</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_s16__alaw</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSamplesRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sampleData</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>bytesPerSample</name> <init>= <expr><call><name>drwav_get_bytes_per_sample</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>samplesRead</name> <init>= <expr><call><name>drwav_read</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><call><name>drwav_min</name><argument_list>(<argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleData</name></expr></argument>)</argument_list></sizeof><operator>/</operator><name>bytesPerSample</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drwav_alaw_to_s16</name><argument_list>(<argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>samplesRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pBufferOut</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_s16__mulaw</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSamplesRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sampleData</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>bytesPerSample</name> <init>= <expr><call><name>drwav_get_bytes_per_sample</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>samplesRead</name> <init>= <expr><call><name>drwav_read</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><call><name>drwav_min</name><argument_list>(<argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleData</name></expr></argument>)</argument_list></sizeof><operator>/</operator><name>bytesPerSample</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drwav_mulaw_to_s16</name><argument_list>(<argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>samplesRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pBufferOut</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_s16</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pWav</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>samplesToRead</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pBufferOut</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesToRead</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>drwav_int16</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name>DRWAV_SIZE_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>samplesToRead</name> <operator>=</operator> <name>DRWAV_SIZE_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>drwav_int16</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_PCM</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drwav_read_s16__pcm</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_ADPCM</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drwav_read_s16__msadpcm</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_IEEE_FLOAT</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drwav_read_s16__ieee</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_ALAW</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drwav_read_s16__alaw</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_MULAW</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drwav_read_s16__mulaw</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_DVI_ADPCM</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drwav_read_s16__ima</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_pcm_frames_s16</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>framesToRead</name></decl></parameter>, <parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drwav_read_s16</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>framesToRead</name> <operator>*</operator> <name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drwav_u8_to_s16</name><parameter_list>(<parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>pIn</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>r</name> <operator>-</operator> <literal type="number">32768</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><name>r</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drwav_s24_to_s16</name><parameter_list>(<parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pIn</name><operator>)</operator><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><literal type="number">0</literal></expr>]</index><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pIn</name><operator>)</operator><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal></expr>]</index><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pIn</name><operator>)</operator><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal></expr>]</index><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><name>r</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drwav_s32_to_s16</name><parameter_list>(<parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_int32</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>pIn</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><name>r</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drwav_f32_to_s16</name><parameter_list>(<parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name><name>pIn</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>x</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>c</name> <operator>*</operator> <literal type="number">32767.5f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>r</name> <operator>-</operator> <literal type="number">32768</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><name>r</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drwav_f64_to_s16</name><parameter_list>(<parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><name><name>pIn</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>x</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>c</name> <operator>*</operator> <literal type="number">32767.5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>r</name> <operator>-</operator> <literal type="number">32768</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><name>r</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drwav_alaw_to_s16</name><parameter_list>(<parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>drwav__alaw_to_s16</name><argument_list>(<argument><expr><name><name>pIn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drwav_mulaw_to_s16</name><parameter_list>(<parameter><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>drwav__mulaw_to_s16</name><argument_list>(<argument><expr><name><name>pIn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drwav__pcm_to_f32</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bytesPerSample</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_u8_to_f32</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>pIn</name></expr></argument>, <argument><expr><name>sampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_s16_to_f32</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>drwav_int16</name><operator>*</operator><operator>)</operator><name>pIn</name></expr></argument>, <argument><expr><name>sampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_s24_to_f32</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>pIn</name></expr></argument>, <argument><expr><name>sampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_s32_to_f32</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>drwav_int32</name><operator>*</operator><operator>)</operator><name>pIn</name></expr></argument>, <argument><expr><name>sampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_zero_memory</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>sampleCount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pOut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>sample</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>shift</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>bytesPerSample</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bytesPerSample</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sample</name> <operator>|=</operator> <operator>(</operator><name>drwav_uint64</name><operator>)</operator><operator>(</operator><name><name>pIn</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pIn</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drwav_int64</name><operator>)</operator><name>sample</name> <operator>/</operator> <literal type="number">9223372036854775807.0</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drwav__ieee_to_f32</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bytesPerSample</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>float</name><operator>*</operator><operator>)</operator><name>pIn</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_f64_to_f32</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>double</name><operator>*</operator><operator>)</operator><name>pIn</name></expr></argument>, <argument><expr><name>sampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>drwav_zero_memory</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>sampleCount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pOut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_f32__pcm</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSamplesRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sampleData</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>bytesPerSample</name> <init>= <expr><call><name>drwav_get_bytes_per_sample</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>samplesRead</name> <init>= <expr><call><name>drwav_read</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><call><name>drwav_min</name><argument_list>(<argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleData</name></expr></argument>)</argument_list></sizeof><operator>/</operator><name>bytesPerSample</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drwav__pcm_to_f32</name><argument_list>(<argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>samplesRead</name></expr></argument>, <argument><expr><name>bytesPerSample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pBufferOut</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_f32__msadpcm</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSamplesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int16</name></type> <name><name>samples16</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>samplesRead</name> <init>= <expr><call><name>drwav_read_s16</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><call><name>drwav_min</name><argument_list>(<argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>samples16</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drwav_s16_to_f32</name><argument_list>(<argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><name>samples16</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>samplesRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>pBufferOut</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_f32__ima</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSamplesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int16</name></type> <name><name>samples16</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>samplesRead</name> <init>= <expr><call><name>drwav_read_s16</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><call><name>drwav_min</name><argument_list>(<argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>samples16</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drwav_s16_to_f32</name><argument_list>(<argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><name>samples16</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>samplesRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>pBufferOut</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_f32__ieee</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSamplesRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sampleData</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>bytesPerSample</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_IEEE_FLOAT</name> <operator>&amp;&amp;</operator> <name><name>pWav</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drwav_read</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytesPerSample</name> <operator>=</operator> <call><name>drwav_get_bytes_per_sample</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>samplesRead</name> <init>= <expr><call><name>drwav_read</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><call><name>drwav_min</name><argument_list>(<argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleData</name></expr></argument>)</argument_list></sizeof><operator>/</operator><name>bytesPerSample</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drwav__ieee_to_f32</name><argument_list>(<argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>samplesRead</name></expr></argument>, <argument><expr><name>bytesPerSample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pBufferOut</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_f32__alaw</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSamplesRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sampleData</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>bytesPerSample</name> <init>= <expr><call><name>drwav_get_bytes_per_sample</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>samplesRead</name> <init>= <expr><call><name>drwav_read</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><call><name>drwav_min</name><argument_list>(<argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleData</name></expr></argument>)</argument_list></sizeof><operator>/</operator><name>bytesPerSample</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drwav_alaw_to_f32</name><argument_list>(<argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>samplesRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pBufferOut</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_f32__mulaw</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSamplesRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sampleData</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>bytesPerSample</name> <init>= <expr><call><name>drwav_get_bytes_per_sample</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>samplesRead</name> <init>= <expr><call><name>drwav_read</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><call><name>drwav_min</name><argument_list>(<argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleData</name></expr></argument>)</argument_list></sizeof><operator>/</operator><name>bytesPerSample</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drwav_mulaw_to_f32</name><argument_list>(<argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>samplesRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pBufferOut</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_f32</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pWav</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>samplesToRead</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pBufferOut</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesToRead</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name>DRWAV_SIZE_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>samplesToRead</name> <operator>=</operator> <name>DRWAV_SIZE_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_PCM</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drwav_read_f32__pcm</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_ADPCM</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drwav_read_f32__msadpcm</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_IEEE_FLOAT</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drwav_read_f32__ieee</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_ALAW</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drwav_read_f32__alaw</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_MULAW</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drwav_read_f32__mulaw</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_DVI_ADPCM</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drwav_read_f32__ima</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_pcm_frames_f32</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>framesToRead</name></decl></parameter>, <parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drwav_read_f32</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>framesToRead</name> <operator>*</operator> <name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drwav_u8_to_f32</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pOut</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pIn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DR_WAV_LIBSNDFILE_COMPAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name><name>pIn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">256.0f</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name><name>pIn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">255.0f</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drwav_s16_to_f32</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_int16</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pOut</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pIn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <name><name>pIn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">32768.0f</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drwav_s24_to_f32</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pOut</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pIn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>s0</name> <init>= <expr><name><name>pIn</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>s1</name> <init>= <expr><name><name>pIn</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>s2</name> <init>= <expr><name><name>pIn</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample32</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>s0</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>s1</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>s2</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>sample32</name> <operator>/</operator> <literal type="number">2147483648.0</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drwav_s32_to_f32</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_int32</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pOut</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pIn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>pIn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">2147483648.0</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drwav_f64_to_f32</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pOut</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pIn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>pIn</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drwav_alaw_to_f32</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pOut</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pIn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <call><name>drwav__alaw_to_s16</name><argument_list>(<argument><expr><name><name>pIn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">32768.0f</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drwav_mulaw_to_f32</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pOut</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pIn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <call><name>drwav__mulaw_to_s16</name><argument_list>(<argument><expr><name><name>pIn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">32768.0f</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drwav__pcm_to_s32</name><parameter_list>(<parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>totalSampleCount</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bytesPerSample</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_u8_to_s32</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>pIn</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_s16_to_s32</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>drwav_int16</name><operator>*</operator><operator>)</operator><name>pIn</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_s24_to_s32</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>pIn</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalSampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>drwav_int32</name><operator>*</operator><operator>)</operator><name>pIn</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_zero_memory</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>totalSampleCount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pOut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalSampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>sample</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>shift</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>bytesPerSample</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bytesPerSample</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sample</name> <operator>|=</operator> <operator>(</operator><name>drwav_uint64</name><operator>)</operator><operator>(</operator><name><name>pIn</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pIn</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>drwav_int32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>drwav_int64</name><operator>)</operator><name>sample</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drwav__ieee_to_s32</name><parameter_list>(<parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>totalSampleCount</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bytesPerSample</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_f32_to_s32</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>float</name><operator>*</operator><operator>)</operator><name>pIn</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_f64_to_s32</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>double</name><operator>*</operator><operator>)</operator><name>pIn</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>drwav_zero_memory</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>totalSampleCount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pOut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_s32__pcm</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSamplesRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sampleData</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>bytesPerSample</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_PCM</name> <operator>&amp;&amp;</operator> <name><name>pWav</name><operator>-&gt;</operator><name>bitsPerSample</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drwav_read</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytesPerSample</name> <operator>=</operator> <call><name>drwav_get_bytes_per_sample</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>samplesRead</name> <init>= <expr><call><name>drwav_read</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><call><name>drwav_min</name><argument_list>(<argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleData</name></expr></argument>)</argument_list></sizeof><operator>/</operator><name>bytesPerSample</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drwav__pcm_to_s32</name><argument_list>(<argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>samplesRead</name></expr></argument>, <argument><expr><name>bytesPerSample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pBufferOut</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_s32__msadpcm</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSamplesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int16</name></type> <name><name>samples16</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>samplesRead</name> <init>= <expr><call><name>drwav_read_s16</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><call><name>drwav_min</name><argument_list>(<argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>samples16</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drwav_s16_to_s32</name><argument_list>(<argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><name>samples16</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>samplesRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>pBufferOut</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_s32__ima</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSamplesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int16</name></type> <name><name>samples16</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>samplesRead</name> <init>= <expr><call><name>drwav_read_s16</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><call><name>drwav_min</name><argument_list>(<argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>samples16</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drwav_s16_to_s32</name><argument_list>(<argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><name>samples16</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>samplesRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>pBufferOut</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_s32__ieee</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSamplesRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sampleData</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>bytesPerSample</name> <init>= <expr><call><name>drwav_get_bytes_per_sample</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>samplesRead</name> <init>= <expr><call><name>drwav_read</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><call><name>drwav_min</name><argument_list>(<argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleData</name></expr></argument>)</argument_list></sizeof><operator>/</operator><name>bytesPerSample</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drwav__ieee_to_s32</name><argument_list>(<argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>samplesRead</name></expr></argument>, <argument><expr><name>bytesPerSample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pBufferOut</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_s32__alaw</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSamplesRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sampleData</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>bytesPerSample</name> <init>= <expr><call><name>drwav_get_bytes_per_sample</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>samplesRead</name> <init>= <expr><call><name>drwav_read</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><call><name>drwav_min</name><argument_list>(<argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleData</name></expr></argument>)</argument_list></sizeof><operator>/</operator><name>bytesPerSample</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drwav_alaw_to_s32</name><argument_list>(<argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>samplesRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pBufferOut</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_s32__mulaw</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSamplesRead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sampleData</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint32</name></type> <name>bytesPerSample</name> <init>= <expr><call><name>drwav_get_bytes_per_sample</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesPerSample</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>samplesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>samplesRead</name> <init>= <expr><call><name>drwav_read</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><call><name>drwav_min</name><argument_list>(<argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleData</name></expr></argument>)</argument_list></sizeof><operator>/</operator><name>bytesPerSample</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesRead</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drwav_mulaw_to_s32</name><argument_list>(<argument><expr><name>pBufferOut</name></expr></argument>, <argument><expr><name>sampleData</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>samplesRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pBufferOut</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>samplesToRead</name> <operator>-=</operator> <name>samplesRead</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totalSamplesRead</name> <operator>+=</operator> <name>samplesRead</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>totalSamplesRead</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_s32</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>samplesToRead</name></decl></parameter>, <parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pWav</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>samplesToRead</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pBufferOut</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesToRead</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>drwav_int32</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name>DRWAV_SIZE_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>samplesToRead</name> <operator>=</operator> <name>DRWAV_SIZE_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>drwav_int32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_PCM</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drwav_read_s32__pcm</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_ADPCM</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drwav_read_s32__msadpcm</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_IEEE_FLOAT</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drwav_read_s32__ieee</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_ALAW</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drwav_read_s32__alaw</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_MULAW</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drwav_read_s32__mulaw</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pWav</name><operator>-&gt;</operator><name>translatedFormatTag</name></name> <operator>==</operator> <name>DR_WAVE_FORMAT_DVI_ADPCM</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>drwav_read_s32__ima</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>samplesToRead</name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_uint64</name></type> <name>drwav_read_pcm_frames_s32</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name></type> <name>framesToRead</name></decl></parameter>, <parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pBufferOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>drwav_read_s32</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><name>framesToRead</name> <operator>*</operator> <name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>pBufferOut</name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drwav_u8_to_s32</name><parameter_list>(<parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pOut</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pIn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>pIn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">128</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drwav_s16_to_s32</name><parameter_list>(<parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_int16</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pOut</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pIn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <name><name>pIn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drwav_s24_to_s32</name><parameter_list>(<parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pOut</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pIn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>s0</name> <init>= <expr><name><name>pIn</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>s1</name> <init>= <expr><name><name>pIn</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>s2</name> <init>= <expr><name><name>pIn</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int32</name></type> <name>sample32</name> <init>= <expr><operator>(</operator><name>drwav_int32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>s0</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>s1</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>s2</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <name>sample32</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drwav_f32_to_s32</name><parameter_list>(<parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pOut</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pIn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>drwav_int32</name><operator>)</operator><operator>(</operator><literal type="number">2147483648.0</literal> <operator>*</operator> <name><name>pIn</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drwav_f64_to_s32</name><parameter_list>(<parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pOut</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pIn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>drwav_int32</name><operator>)</operator><operator>(</operator><literal type="number">2147483648.0</literal> <operator>*</operator> <name><name>pIn</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drwav_alaw_to_s32</name><parameter_list>(<parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pOut</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pIn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>drwav_int32</name><operator>)</operator><call><name>drwav__alaw_to_s16</name><argument_list>(<argument><expr><name><name>pIn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>drwav_mulaw_to_s32</name><parameter_list>(<parameter><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>drwav_uint8</name><modifier>*</modifier></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pOut</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pIn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sampleCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>drwav_int32</name><operator>)</operator><call><name>drwav__mulaw_to_s16</name><argument_list>(<argument><expr><name><name>pIn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>drwav_int16</name><modifier>*</modifier></type> <name>drwav__read_and_close_s16</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>sampleDataSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>pSampleData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>samplesRead</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drwav_assert</name><argument_list>(<argument><expr><name>pWav</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sampleDataSize</name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>totalSampleCount</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>drwav_int16</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleDataSize</name> <operator>&gt;</operator> <name>DRWAV_SIZE_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_uninit</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pSampleData</name> <operator>=</operator> <operator>(</operator><name>drwav_int16</name><operator>*</operator><operator>)</operator><call><name>DRWAV_MALLOC</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>sampleDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>pSampleData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_uninit</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>samplesRead</name> <operator>=</operator> <call><name>drwav_read_s16</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pWav</name><operator>-&gt;</operator><name>totalSampleCount</name></name></expr></argument>, <argument><expr><name>pSampleData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesRead</name> <operator>!=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>totalSampleCount</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DRWAV_FREE</name><argument_list>(<argument><expr><name>pSampleData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drwav_uninit</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drwav_uninit</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRate</name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>sampleRate</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCount</name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>totalSampleCount</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pSampleData</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name><modifier>*</modifier></type> <name>drwav__read_and_close_f32</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>sampleDataSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>pSampleData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>samplesRead</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drwav_assert</name><argument_list>(<argument><expr><name>pWav</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sampleDataSize</name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>totalSampleCount</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleDataSize</name> <operator>&gt;</operator> <name>DRWAV_SIZE_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_uninit</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pSampleData</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><call><name>DRWAV_MALLOC</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>sampleDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>pSampleData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_uninit</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>samplesRead</name> <operator>=</operator> <call><name>drwav_read_f32</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pWav</name><operator>-&gt;</operator><name>totalSampleCount</name></name></expr></argument>, <argument><expr><name>pSampleData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesRead</name> <operator>!=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>totalSampleCount</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DRWAV_FREE</name><argument_list>(<argument><expr><name>pSampleData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drwav_uninit</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drwav_uninit</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRate</name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>sampleRate</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCount</name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>totalSampleCount</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pSampleData</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_int32</name><modifier>*</modifier></type> <name>drwav__read_and_close_s32</name><parameter_list>(<parameter><decl><type><name>drwav</name><modifier>*</modifier></type> <name>pWav</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>sampleDataSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>pSampleData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>samplesRead</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>drwav_assert</name><argument_list>(<argument><expr><name>pWav</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sampleDataSize</name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>totalSampleCount</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>drwav_int32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleDataSize</name> <operator>&gt;</operator> <name>DRWAV_SIZE_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_uninit</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pSampleData</name> <operator>=</operator> <operator>(</operator><name>drwav_int32</name><operator>*</operator><operator>)</operator><call><name>DRWAV_MALLOC</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>sampleDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>pSampleData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>drwav_uninit</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>samplesRead</name> <operator>=</operator> <call><name>drwav_read_s32</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pWav</name><operator>-&gt;</operator><name>totalSampleCount</name></name></expr></argument>, <argument><expr><name>pSampleData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>samplesRead</name> <operator>!=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>totalSampleCount</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DRWAV_FREE</name><argument_list>(<argument><expr><name>pSampleData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drwav_uninit</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>drwav_uninit</name><argument_list>(<argument><expr><name>pWav</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRate</name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>sampleRate</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCount</name> <operator>=</operator> <name><name>pWav</name><operator>-&gt;</operator><name>totalSampleCount</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pSampleData</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_int16</name><modifier>*</modifier></type> <name>drwav_open_and_read_s16</name><parameter_list>(<parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav</name></type> <name>wav</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wav</name></expr></argument>, <argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drwav__read_and_close_s16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wav</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sampleRate</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_int16</name><modifier>*</modifier></type> <name>drwav_open_and_read_pcm_frames_s16</name><parameter_list>(<parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channelsOut</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRateOut</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalFrameCountOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalFrameCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalFrameCountOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>drwav_open_and_read_s16</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sampleRate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <name>sampleRate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalFrameCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalFrameCountOut</name> <operator>=</operator> <name>totalSampleCount</name> <operator>/</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name><modifier>*</modifier></type> <name>drwav_open_and_read_f32</name><parameter_list>(<parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav</name></type> <name>wav</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wav</name></expr></argument>, <argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drwav__read_and_close_f32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wav</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sampleRate</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name><modifier>*</modifier></type> <name>drwav_open_and_read_pcm_frames_f32</name><parameter_list>(<parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channelsOut</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRateOut</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalFrameCountOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalFrameCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalFrameCountOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>drwav_open_and_read_f32</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sampleRate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <name>sampleRate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalFrameCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalFrameCountOut</name> <operator>=</operator> <name>totalSampleCount</name> <operator>/</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_int32</name><modifier>*</modifier></type> <name>drwav_open_and_read_s32</name><parameter_list>(<parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav</name></type> <name>wav</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wav</name></expr></argument>, <argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drwav__read_and_close_s32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wav</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sampleRate</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_int32</name><modifier>*</modifier></type> <name>drwav_open_and_read_pcm_frames_s32</name><parameter_list>(<parameter><decl><type><name>drwav_read_proc</name></type> <name>onRead</name></decl></parameter>, <parameter><decl><type><name>drwav_seek_proc</name></type> <name>onSeek</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pUserData</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channelsOut</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRateOut</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalFrameCountOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalFrameCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalFrameCountOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>drwav_open_and_read_s32</name><argument_list>(<argument><expr><name>onRead</name></expr></argument>, <argument><expr><name>onSeek</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sampleRate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <name>sampleRate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalFrameCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalFrameCountOut</name> <operator>=</operator> <name>totalSampleCount</name> <operator>/</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DR_WAV_NO_STDIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>drwav_int16</name><modifier>*</modifier></type> <name>drwav_open_file_and_read_s16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav</name></type> <name>wav</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav_init_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wav</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drwav__read_and_close_s16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wav</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sampleRate</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_int16</name><modifier>*</modifier></type> <name>drwav_open_file_and_read_pcm_frames_s16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channelsOut</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRateOut</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalFrameCountOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalFrameCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalFrameCountOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>drwav_open_file_and_read_s16</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sampleRate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <name>sampleRate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalFrameCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalFrameCountOut</name> <operator>=</operator> <name>totalSampleCount</name> <operator>/</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name><modifier>*</modifier></type> <name>drwav_open_file_and_read_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav</name></type> <name>wav</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav_init_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wav</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drwav__read_and_close_f32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wav</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sampleRate</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name><modifier>*</modifier></type> <name>drwav_open_file_and_read_pcm_frames_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channelsOut</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRateOut</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalFrameCountOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalFrameCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalFrameCountOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>drwav_open_file_and_read_f32</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sampleRate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <name>sampleRate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalFrameCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalFrameCountOut</name> <operator>=</operator> <name>totalSampleCount</name> <operator>/</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_int32</name><modifier>*</modifier></type> <name>drwav_open_file_and_read_s32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav</name></type> <name>wav</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav_init_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wav</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drwav__read_and_close_s32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wav</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sampleRate</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_int32</name><modifier>*</modifier></type> <name>drwav_open_file_and_read_pcm_frames_s32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channelsOut</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRateOut</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalFrameCountOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalFrameCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalFrameCountOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>drwav_open_file_and_read_s32</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sampleRate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <name>sampleRate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalFrameCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalFrameCountOut</name> <operator>=</operator> <name>totalSampleCount</name> <operator>/</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>drwav_int16</name><modifier>*</modifier></type> <name>drwav_open_memory_and_read_s16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav</name></type> <name>wav</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav_init_memory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wav</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drwav__read_and_close_s16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wav</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sampleRate</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_int16</name><modifier>*</modifier></type> <name>drwav_open_memory_and_read_pcm_frames_s16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channelsOut</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRateOut</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalFrameCountOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int16</name><modifier>*</modifier></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalFrameCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalFrameCountOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>drwav_open_memory_and_read_s16</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sampleRate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <name>sampleRate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalFrameCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalFrameCountOut</name> <operator>=</operator> <name>totalSampleCount</name> <operator>/</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name><modifier>*</modifier></type> <name>drwav_open_memory_and_read_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav</name></type> <name>wav</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav_init_memory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wav</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drwav__read_and_close_f32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wav</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sampleRate</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>float</name><modifier>*</modifier></type> <name>drwav_open_memory_and_read_pcm_frames_f32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channelsOut</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRateOut</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalFrameCountOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalFrameCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalFrameCountOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>drwav_open_memory_and_read_f32</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sampleRate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <name>sampleRate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalFrameCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalFrameCountOut</name> <operator>=</operator> <name>totalSampleCount</name> <operator>/</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_int32</name><modifier>*</modifier></type> <name>drwav_open_memory_and_read_s32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRate</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalSampleCount</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>drwav</name></type> <name>wav</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalSampleCount</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalSampleCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>drwav_init_memory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wav</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>drwav__read_and_close_s32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wav</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sampleRate</name></expr></argument>, <argument><expr><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>drwav_int32</name><modifier>*</modifier></type> <name>drwav_open_memory_and_read_pcm_frames_s32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dataSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>channelsOut</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>sampleRateOut</name></decl></parameter>, <parameter><decl><type><name>drwav_uint64</name><modifier>*</modifier></type> <name>totalFrameCountOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sampleRate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_uint64</name></type> <name>totalSampleCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>drwav_int32</name><modifier>*</modifier></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalFrameCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalFrameCountOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>drwav_open_memory_and_read_s32</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sampleRate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalSampleCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channelsOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channelsOut</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sampleRateOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sampleRateOut</name> <operator>=</operator> <name>sampleRate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totalFrameCountOut</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>totalFrameCountOut</name> <operator>=</operator> <name>totalSampleCount</name> <operator>/</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type> <name>drwav_free</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pDataReturnedByOpenAndRead</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DRWAV_FREE</name><argument_list>(<argument><expr><name>pDataReturnedByOpenAndRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
